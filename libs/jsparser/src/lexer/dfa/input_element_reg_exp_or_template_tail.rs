// DO NOT EDIT THIS FILE BY HAND.
//
// This file was automagically generated by:
// codegen.js --no-escape --input-stdin dfa/dfa.rs.hbs

use super::Error;
use super::SourceCursor;
use super::Token;
use crate::lexer::tokens::TokenKind;
use crate::lexer::TokenFlags;

pub fn recognize<'a>(cursor: &SourceCursor<'a>) -> Result<Token<'a>, Error> {
    let mut token = Token::default();

    let mut state = State::default();
    tracing::trace!(opcode = "init", ?state);

    let mut has_line_terminators = false;
    let mut lexeme_end = cursor.pos();
    let mut chars = cursor.chars();
    loop {
        let (pos, mut unicode_set) = match chars.next() {
            Some((i, ch)) => {
                // TODO: The current implementation is not slow, but using a table may be faster.
                // We can use UnicodeSet::0 as an index of the table.
                // We assume that line terminators and others must not be contained in the same charclass.
                match ch {
                    '\u{000A}' | '\u{000D}' | '\u{2028}' | '\u{2029}' => {
                        has_line_terminators = true
                    }
                    _ => (),
                }
                (cursor.pos() + i, UnicodeSet::from(ch))
            }
            None => (cursor.len(), UnicodeSet::EOF),
        };

        let mut next = state.next_state(&unicode_set);
        if next.is_invalid() {
            // A dirty hack for handling ID_Start and ID_Continue.
            //
            // TODO: Support Unicode properties including ID_Start and ID_Continue in
            // `dfagen::unicode::UnicodeSet`.
            if let Some(ch) = unicode_set.1 {
                match state.check_id_start_continue() {
                    CheckIdStartContinue::CheckIdStart => {
                        if unicode_id_start::is_id_start(ch) {
                            unicode_set.0 = UnicodeSet::from('z').0;
                            next = state.next_state(&unicode_set);
                        }
                    }
                    CheckIdStartContinue::CheckIdContinue => {
                        if unicode_id_start::is_id_continue(ch) {
                            unicode_set.0 = UnicodeSet::from('z').0;
                            next = state.next_state(&unicode_set);
                        }
                    }
                    CheckIdStartContinue::None => (),
                }
            }
        }
        tracing::trace!(opcode = "next", state = ?next, ?unicode_set, pos);
        if next.is_invalid() {
            if token.kind != TokenKind::Eof {
                break;
            }
            if !cursor.lexeme(lexeme_end).is_empty() {
                return Err(Error::UnexpectedCharacter);
            }
            if unicode_set == UnicodeSet::EOF {
                break;
            }
            return Err(Error::UnexpectedCharacter);
        }
        state = next;
        if !state.lookahead() {
            if let Some(ch) = unicode_set.1 {
                lexeme_end = pos + ch.len_utf8();
            }
        }
        if let Some(kind) = state.accept() {
            token.lexeme = cursor.lexeme(lexeme_end);
            token.kind = kind;
            if has_line_terminators {
                token.flags |= TokenFlags::HAS_LINE_TERMINATORS;
            }
            tracing::trace!(opcode = "accept", ?token.kind, token.lexeme);
        }
    }

    Ok(token)
}

// UnicodeSet(0): [<CR>]
// UnicodeSet(1): [/]
// UnicodeSet(2): [\]
// UnicodeSet(3): [}]
// UnicodeSet(4): [#]
// UnicodeSet(5): ["]
// UnicodeSet(6): [']
// UnicodeSet(7): [`]
// UnicodeSet(8): [<HT>, <VT>..<FF>, <SP>, U+00A0, U+1680, U+2000..U+200A, U+200F, U+205F, U+FEFF]
// UnicodeSet(9): [<LF>]
// UnicodeSet(10): [U+2028..U+2029]
// UnicodeSet(11): [b]
// UnicodeSet(12): [r]
// UnicodeSet(13): [u]
// UnicodeSet(14): [_]
// UnicodeSet(15): [O]
// UnicodeSet(16): [X]
// UnicodeSet(17): [G..N, P..W, Y..Z, j, q, z]
// UnicodeSet(18): [h]
// UnicodeSet(19): [k]
// UnicodeSet(20): [x]
// UnicodeSet(21): [E]
// UnicodeSet(22): [B]
// UnicodeSet(23): [A, C..D, F]
// UnicodeSet(24): [$]
// UnicodeSet(25): [p]
// UnicodeSet(26): [y]
// UnicodeSet(27): [e]
// UnicodeSet(28): [c]
// UnicodeSet(29): [m]
// UnicodeSet(30): [w]
// UnicodeSet(31): [s]
// UnicodeSet(32): [t]
// UnicodeSet(33): [l]
// UnicodeSet(34): [n]
// UnicodeSet(35): [g]
// UnicodeSet(36): [f]
// UnicodeSet(37): [v]
// UnicodeSet(38): [a]
// UnicodeSet(39): [o]
// UnicodeSet(40): [i]
// UnicodeSet(41): [d]
// UnicodeSet(42): [{]
// UnicodeSet(43): [(]
// UnicodeSet(44): [)]
// UnicodeSet(45): [[]
// UnicodeSet(46): []]
// UnicodeSet(47): [.]
// UnicodeSet(48): [;]
// UnicodeSet(49): [,]
// UnicodeSet(50): [<]
// UnicodeSet(51): [>]
// UnicodeSet(52): [+]
// UnicodeSet(53): [-]
// UnicodeSet(54): [*]
// UnicodeSet(55): [%]
// UnicodeSet(56): [&]
// UnicodeSet(57): [|]
// UnicodeSet(58): [^]
// UnicodeSet(59): [!]
// UnicodeSet(60): [~]
// UnicodeSet(61): [?]
// UnicodeSet(62): [:]
// UnicodeSet(63): [=]
// UnicodeSet(64): [1]
// UnicodeSet(65): [2..7]
// UnicodeSet(66): [8..9]
// UnicodeSet(67): [0]
// UnicodeSet(68): [U+200C..U+200D]
// UnicodeSet(69): [<NUL>..<BS>, <SO>..<US>, @, <DEL>..U+009F, U+00A1..U+167F, U+1681..U+1FFF, U+200B, U+200E, U+2010..U+2027, U+202A..U+205E, U+2060..U+FEFE, U+FF00..U+10FFFF]
// UnicodeSet(70): [(eof)]
#[derive(Clone, Copy, Debug, PartialEq)]
struct UnicodeSet(u8, Option<char>);

impl UnicodeSet {
    const EOF: Self = UnicodeSet(71, None);
}

impl From<char> for UnicodeSet {
    fn from(ch: char) -> Self {
        let c = ch as usize;
        if c < 128 {
            return UnicodeSet(ASCII_TABLE[c], Some(ch));
        }
        if c == 160 {
            return UnicodeSet(8, Some(ch));
        }
        if c == 5760 {
            return UnicodeSet(8, Some(ch));
        }
        if c >= 8192 && c <= 8202 {
            return UnicodeSet(8, Some(ch));
        }
        if c == 8207 {
            return UnicodeSet(8, Some(ch));
        }
        if c == 8287 {
            return UnicodeSet(8, Some(ch));
        }
        if c == 65279 {
            return UnicodeSet(8, Some(ch));
        }
        if c >= 8232 && c <= 8233 {
            return UnicodeSet(10, Some(ch));
        }
        if c >= 8204 && c <= 8205 {
            return UnicodeSet(68, Some(ch));
        }
        if c >= 128 && c <= 159 {
            return UnicodeSet(69, Some(ch));
        }
        if c >= 161 && c <= 5759 {
            return UnicodeSet(69, Some(ch));
        }
        if c >= 5761 && c <= 8191 {
            return UnicodeSet(69, Some(ch));
        }
        if c == 8203 {
            return UnicodeSet(69, Some(ch));
        }
        if c == 8206 {
            return UnicodeSet(69, Some(ch));
        }
        if c >= 8208 && c <= 8231 {
            return UnicodeSet(69, Some(ch));
        }
        if c >= 8234 && c <= 8286 {
            return UnicodeSet(69, Some(ch));
        }
        if c >= 8288 && c <= 65278 {
            return UnicodeSet(69, Some(ch));
        }
        if c >= 65280 && c <= 1114111 {
            return UnicodeSet(69, Some(ch));
        }
        UnicodeSet(71, Some(ch))
    }
}

const ASCII_TABLE: [u8; 128] = [
    69, 69, 69, 69, 69, 69, 69, 69, 69, 8, 9, 8, 8, 0, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
    69, 69, 69, 69, 69, 69, 69, 8, 59, 5, 4, 24, 55, 56, 6, 43, 44, 54, 52, 49, 53, 47, 1, 67, 64,
    65, 65, 65, 65, 65, 65, 66, 66, 62, 48, 50, 63, 51, 61, 69, 23, 22, 23, 23, 21, 23, 17, 17, 17,
    17, 17, 17, 17, 17, 15, 17, 17, 17, 17, 17, 17, 17, 17, 16, 17, 17, 45, 2, 46, 58, 14, 7, 38,
    11, 28, 41, 27, 36, 35, 18, 40, 17, 19, 33, 29, 34, 39, 25, 17, 12, 31, 32, 13, 37, 30, 20, 26,
    17, 42, 57, 3, 60, 69,
];

#[derive(Clone, Copy, Debug, Default)]
struct State(u16);

impl State {
    #[inline(always)]
    fn is_invalid(&self) -> bool {
        self.0 == 467
    }

    #[inline(always)]
    fn next_state(&self, unicode_set: &UnicodeSet) -> State {
        State(TRANSITION_TABLE[self.0 as usize][unicode_set.0 as usize])
    }

    #[inline(always)]
    fn lookahead(&self) -> bool {
        LOOKAHEAD_TABLE[self.0 as usize]
    }

    #[inline(always)]
    fn accept(&self) -> Option<TokenKind> {
        ACCEPT_TABLE[self.0 as usize]
    }

    #[inline(always)]
    fn check_id_start_continue(&self) -> CheckIdStartContinue {
        CHECK_ID_START_CONTINUE_TABLE[self.0 as usize]
    }
}

const TRANSITION_TABLE: [[u16; 72]; 467] = [
    // State(0)
    //   @start
    // Transitions
    //   [<CR>] => State(1)
    //   [/] => State(2)
    //   [\] => State(3)
    //   [}] => State(5)
    //   [#] => State(30)
    //   ["] => State(31)
    //   ['] => State(32)
    //   [`] => State(33)
    //   [<HT>, <VT>..<FF>, <SP>, U+00A0, U+1680, U+2000..U+200A, U+200F, U+205F, U+FEFF] => State(161):WhiteSpaceSequence
    //   [<LF>, U+2028..U+2029] => State(162):LineTerminatorSequence
    //   [b] => State(220):IdentifierName
    //   [r] => State(221):IdentifierName
    //   [$, A..Z, _, h, j..k, q, u, x, z] => State(222):IdentifierName
    //   [p] => State(229):IdentifierName
    //   [y] => State(239):IdentifierName
    //   [e] => State(261):IdentifierName
    //   [c] => State(262):IdentifierName
    //   [m] => State(263):IdentifierName
    //   [w] => State(264):IdentifierName
    //   [s] => State(294):IdentifierName
    //   [t] => State(295):IdentifierName
    //   [l] => State(296):IdentifierName
    //   [n] => State(297):IdentifierName
    //   [g] => State(298):IdentifierName
    //   [f] => State(299):IdentifierName
    //   [v] => State(300):IdentifierName
    //   [a] => State(342):IdentifierName
    //   [o] => State(343):IdentifierName
    //   [i] => State(344):IdentifierName
    //   [d] => State(345):IdentifierName
    //   [{] => State(397):LBRACE
    //   [(] => State(398):LPAREN
    //   [)] => State(399):RPAREN
    //   [[] => State(400):LBRACK
    //   []] => State(401):RBRACK
    //   [.] => State(402):DOT
    //   [;] => State(404):SEMICOLON
    //   [,] => State(405):COMMA
    //   [<] => State(406):LT
    //   [>] => State(407):GT
    //   [+] => State(414):ADD
    //   [-] => State(415):SUB
    //   [*] => State(416):MUL
    //   [%] => State(417):MOD
    //   [&] => State(424):BIT_AND
    //   [|] => State(425):BIT_OR
    //   [^] => State(426):BIT_XOR
    //   [!] => State(427):NOT
    //   [~] => State(428):BIT_NOT
    //   [?] => State(432):CONDITIONAL
    //   [:] => State(433):COLON
    //   [=] => State(434):ASSIGN
    //   [1..9] => State(450):NumericLiteral
    //   [0] => State(451):NumericLiteral
    [
        1, 2, 3, 5, 30, 31, 32, 33, 161, 162, 162, 220, 221, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 229, 239, 261, 262, 263, 264, 294, 295, 296, 297, 298, 299, 300,
        342, 343, 344, 345, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 414, 415, 416, 417,
        424, 425, 426, 427, 428, 432, 433, 434, 450, 450, 450, 451, 467, 467, 1, 467,
    ],
    // State(1)
    //   LineTerminatorSequence -> [<CR>] . [<LF>]
    // Transitions
    //   [<LF>] => State(162):LineTerminatorSequence
    //   [<NUL>..<HT>, <VT>..U+10FFFF, (eof)] => State(163):LineTerminatorSequence?
    [
        163, 163, 163, 163, 163, 163, 163, 163, 163, 162, 163, 163, 163, 163, 163, 163, 163, 163,
        163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
        163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
        163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 162, 163,
    ],
    // State(2)
    //   MultiLineComment -> [/] . [*] [*] [/]
    //   MultiLineComment -> [/] . [*] MultiLineCommentChars [*] [/]
    //   SingleLineComment -> [/] . [/]
    //   SingleLineComment -> [/] . [/] SingleLineCommentChars
    //   RegularExpressionLiteral -> [/] . RegularExpressionBody [/] RegularExpressionFlags
    //   RegularExpressionBody -> . RegularExpressionFirstChar RegularExpressionChars
    //   RegularExpressionFirstChar -> . [RegularExpressionNonTerminator -* -\ -/ -[]
    //   RegularExpressionFirstChar -> . RegularExpressionBackslashSequence
    //   RegularExpressionBackslashSequence -> . [\] RegularExpressionNonTerminator
    //   RegularExpressionFirstChar -> . RegularExpressionClass
    //   RegularExpressionClass -> . [[] RegularExpressionClassChars []]
    // Transitions
    //   [<NUL>..<HT>, <VT>..<FF>, <SO>..), +..., 0..Z, ]..U+2027, U+202A..U+10FFFF] => State(58)
    //   [*] => State(59)
    //   [\] => State(64)
    //   [[] => State(65)
    //   [/] => State(164):Comment
    [
        467, 164, 64, 58, 58, 58, 58, 58, 58, 467, 467, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
        58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
        65, 58, 58, 58, 58, 58, 58, 58, 58, 59, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
        58, 58, 58, 467,
    ],
    // State(3)
    //   IdentifierStart -> [\] . UnicodeEscapeSequence
    //   UnicodeEscapeSequence -> . [u] Hex4Digits
    //   UnicodeEscapeSequence -> . [u] [{] CodePoint [}]
    //   IdentifierPart -> [\] . UnicodeEscapeSequence
    // Transitions
    //   [u] => State(67)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 67, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 67, 467,
    ],
    // State(4)
    //   IdentifierStart -> [\] . UnicodeEscapeSequence
    //   UnicodeEscapeSequence -> . [u] Hex4Digits
    //   UnicodeEscapeSequence -> . [u] [{] CodePoint [}]
    //   IdentifierPart -> [\] . UnicodeEscapeSequence
    // Transitions
    //   [u] => State(68)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 68, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 68, 467,
    ],
    // State(5)
    //   TemplateMiddle -> [}] . [$] [{]
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   TemplateMiddle -> [}] . TemplateCharacters [$] [{]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateTail -> [}] . [`]
    //   TemplateTail -> [}] . TemplateCharacters [`]
    //   TemplateMiddle -> [}] TemplateCharacters . [$] [{]
    //   TemplateTail -> [}] TemplateCharacters . [`]
    //   LineTerminatorSequence -> [<CR>] . ?![<LF>]
    //   LineTerminatorSequence -> [<CR>] . [<LF>]
    //   HexEscapeSequence -> [x] . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotEscapeSequence -> [x] . ?![HexDigit]
    //   NotEscapeSequence -> [x] . HexDigit ?![HexDigit]
    //   TemplateEscapeSequence -> [0] . ?![DecimalDigit]
    //   NotEscapeSequence -> [0] . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotEscapeSequence -> [u] HexDigit . ?![HexDigit]
    //   NotEscapeSequence -> [u] HexDigit . HexDigit ?![HexDigit]
    //   NotEscapeSequence -> [u] HexDigit . HexDigit HexDigit ?![HexDigit]
    //   HexEscapeSequence -> [x] HexDigit . HexDigit
    //   NotEscapeSequence -> [x] HexDigit . ?![HexDigit]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotEscapeSequence -> [u] HexDigit HexDigit . ?![HexDigit]
    //   NotEscapeSequence -> [u] HexDigit HexDigit . HexDigit ?![HexDigit]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotEscapeSequence -> [u] HexDigit HexDigit HexDigit . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %..[, ].._, a..U+10FFFF] => State(5)
    //   [\] => State(60)
    //   [$] => State(78)
    //   [`] => State(466):TemplateTail
    [
        5, 5, 60, 5, 5, 5, 5, 466, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 78, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 467,
    ],
    // State(6)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   TemplateMiddle -> [}] . TemplateCharacters [$] [{]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   UnicodeEscapeSequence -> [u] . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] . [{] CodePoint [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotEscapeSequence -> [u] . ?![HexDigit] ?![{]
    //   NotEscapeSequence -> [u] . HexDigit ?![HexDigit]
    //   NotEscapeSequence -> [u] . HexDigit HexDigit ?![HexDigit]
    //   NotEscapeSequence -> [u] . HexDigit HexDigit HexDigit ?![HexDigit]
    //   NotEscapeSequence -> [u] . [{] ?![HexDigit]
    //   NotEscapeSequence -> [u] . [{] NotCodePoint ?![HexDigit]
    //   NotEscapeSequence -> [u] . [{] CodePoint ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateMiddle -> [}] TemplateCharacters . [$] [{]
    //   TemplateTail -> [}] . TemplateCharacters [`]
    //   TemplateTail -> [}] TemplateCharacters . [`]
    // Transitions
    //   [<NUL>..#, %..[, ].._, a..z, |..U+10FFFF] => State(5)
    //   [{] => State(7)
    //   [\] => State(60)
    //   [$] => State(78)
    //   [`] => State(466):TemplateTail
    [
        5, 5, 60, 5, 5, 5, 5, 466, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 78, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 467,
    ],
    // State(7)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   TemplateMiddle -> [}] . TemplateCharacters [$] [{]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotEscapeSequence -> [u] [{] . ?![HexDigit]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] . CodePoint ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateMiddle -> [}] TemplateCharacters . [$] [{]
    //   TemplateTail -> [}] . TemplateCharacters [`]
    //   TemplateTail -> [}] TemplateCharacters . [`]
    //   CodePoint -> HexDigit . HexDigit
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(5)
    //   [0] => State(7)
    //   [1] => State(8)
    //   [2..9, A..F, a..f] => State(9)
    //   [\] => State(60)
    //   [$] => State(78)
    //   [`] => State(466):TemplateTail
    [
        5, 5, 60, 5, 5, 5, 5, 466, 5, 5, 5, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 9, 9, 9, 78, 5, 5, 9, 9,
        5, 5, 5, 5, 5, 5, 5, 9, 5, 9, 5, 5, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 8, 9, 9, 7, 5, 5, 5, 467,
    ],
    // State(8)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   TemplateMiddle -> [}] . TemplateCharacters [$] [{]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> [1] . [0] Hex4Digits
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateMiddle -> [}] TemplateCharacters . [$] [{]
    //   TemplateTail -> [}] . TemplateCharacters [`]
    //   TemplateTail -> [}] TemplateCharacters . [`]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(5)
    //   [1..9, A..F, a..f] => State(9)
    //   [0] => State(10)
    //   [\] => State(60)
    //   [$] => State(78)
    //   [`] => State(466):TemplateTail
    [
        5, 5, 60, 5, 5, 5, 5, 466, 5, 5, 5, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 9, 9, 9, 78, 5, 5, 9, 9,
        5, 5, 5, 5, 5, 5, 5, 9, 5, 9, 5, 5, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 9, 9, 9, 10, 5, 5, 5, 467,
    ],
    // State(9)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   TemplateMiddle -> [}] . TemplateCharacters [$] [{]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateMiddle -> [}] TemplateCharacters . [$] [{]
    //   TemplateTail -> [}] . TemplateCharacters [`]
    //   TemplateTail -> [}] TemplateCharacters . [`]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(5)
    //   [1..9, A..F, a..f] => State(9)
    //   [0] => State(11)
    //   [\] => State(60)
    //   [$] => State(78)
    //   [`] => State(466):TemplateTail
    [
        5, 5, 60, 5, 5, 5, 5, 466, 5, 5, 5, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 9, 9, 9, 78, 5, 5, 9, 9,
        5, 5, 5, 5, 5, 5, 5, 9, 5, 9, 5, 5, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 9, 9, 9, 11, 5, 5, 5, 467,
    ],
    // State(10)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   TemplateMiddle -> [}] . TemplateCharacters [$] [{]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> [1] [0] . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateMiddle -> [}] TemplateCharacters . [$] [{]
    //   TemplateTail -> [}] . TemplateCharacters [`]
    //   TemplateTail -> [}] TemplateCharacters . [`]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(5)
    //   [0] => State(11)
    //   [1..9, A..F, a..f] => State(12)
    //   [\] => State(60)
    //   [$] => State(78)
    //   [`] => State(466):TemplateTail
    [
        5, 5, 60, 5, 5, 5, 5, 466, 5, 5, 5, 12, 5, 5, 5, 5, 5, 5, 5, 5, 5, 12, 12, 12, 78, 5, 5,
        12, 12, 5, 5, 5, 5, 5, 5, 5, 12, 5, 12, 5, 5, 12, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 12, 12, 12, 11, 5, 5, 5, 467,
    ],
    // State(11)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   TemplateMiddle -> [}] . TemplateCharacters [$] [{]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateMiddle -> [}] TemplateCharacters . [$] [{]
    //   TemplateTail -> [}] . TemplateCharacters [`]
    //   TemplateTail -> [}] TemplateCharacters . [`]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(5)
    //   [1..9, A..F, a..f] => State(13)
    //   [0] => State(14)
    //   [\] => State(60)
    //   [$] => State(78)
    //   [`] => State(466):TemplateTail
    [
        5, 5, 60, 5, 5, 5, 5, 466, 5, 5, 5, 13, 5, 5, 5, 5, 5, 5, 5, 5, 5, 13, 13, 13, 78, 5, 5,
        13, 13, 5, 5, 5, 5, 5, 5, 5, 13, 5, 13, 5, 5, 13, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 13, 13, 13, 14, 5, 5, 5, 467,
    ],
    // State(12)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   TemplateMiddle -> [}] . TemplateCharacters [$] [{]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateMiddle -> [}] TemplateCharacters . [$] [{]
    //   TemplateTail -> [}] . TemplateCharacters [`]
    //   TemplateTail -> [}] TemplateCharacters . [`]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(5)
    //   [0] => State(14)
    //   [1..9, A..F, a..f] => State(15)
    //   [\] => State(60)
    //   [$] => State(78)
    //   [`] => State(466):TemplateTail
    [
        5, 5, 60, 5, 5, 5, 5, 466, 5, 5, 5, 15, 5, 5, 5, 5, 5, 5, 5, 5, 5, 15, 15, 15, 78, 5, 5,
        15, 15, 5, 5, 5, 5, 5, 5, 5, 15, 5, 15, 5, 5, 15, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 15, 15, 15, 14, 5, 5, 5, 467,
    ],
    // State(13)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   TemplateMiddle -> [}] . TemplateCharacters [$] [{]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateMiddle -> [}] TemplateCharacters . [$] [{]
    //   TemplateTail -> [}] . TemplateCharacters [`]
    //   TemplateTail -> [}] TemplateCharacters . [`]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(5)
    //   [1..9, A..F, a..f] => State(16)
    //   [0] => State(17)
    //   [\] => State(60)
    //   [$] => State(78)
    //   [`] => State(466):TemplateTail
    [
        5, 5, 60, 5, 5, 5, 5, 466, 5, 5, 5, 16, 5, 5, 5, 5, 5, 5, 5, 5, 5, 16, 16, 16, 78, 5, 5,
        16, 16, 5, 5, 5, 5, 5, 5, 5, 16, 5, 16, 5, 5, 16, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 16, 16, 16, 17, 5, 5, 5, 467,
    ],
    // State(14)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   TemplateMiddle -> [}] . TemplateCharacters [$] [{]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateMiddle -> [}] TemplateCharacters . [$] [{]
    //   TemplateTail -> [}] . TemplateCharacters [`]
    //   TemplateTail -> [}] TemplateCharacters . [`]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(5)
    //   [0] => State(17)
    //   [1..9, A..F, a..f] => State(18)
    //   [\] => State(60)
    //   [$] => State(78)
    //   [`] => State(466):TemplateTail
    [
        5, 5, 60, 5, 5, 5, 5, 466, 5, 5, 5, 18, 5, 5, 5, 5, 5, 5, 5, 5, 5, 18, 18, 18, 78, 5, 5,
        18, 18, 5, 5, 5, 5, 5, 5, 5, 18, 5, 18, 5, 5, 18, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 18, 18, 18, 17, 5, 5, 5, 467,
    ],
    // State(15)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   TemplateMiddle -> [}] . TemplateCharacters [$] [{]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateMiddle -> [}] TemplateCharacters . [$] [{]
    //   TemplateTail -> [}] . TemplateCharacters [`]
    //   TemplateTail -> [}] TemplateCharacters . [`]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(5)
    //   [1..9, A..F, a..f] => State(19)
    //   [0] => State(20)
    //   [\] => State(60)
    //   [$] => State(78)
    //   [`] => State(466):TemplateTail
    [
        5, 5, 60, 5, 5, 5, 5, 466, 5, 5, 5, 19, 5, 5, 5, 5, 5, 5, 5, 5, 5, 19, 19, 19, 78, 5, 5,
        19, 19, 5, 5, 5, 5, 5, 5, 5, 19, 5, 19, 5, 5, 19, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 19, 19, 19, 20, 5, 5, 5, 467,
    ],
    // State(16)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   TemplateMiddle -> [}] . TemplateCharacters [$] [{]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateMiddle -> [}] TemplateCharacters . [$] [{]
    //   TemplateTail -> [}] . TemplateCharacters [`]
    //   TemplateTail -> [}] TemplateCharacters . [`]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(5)
    //   [1..9, A..F, a..f] => State(21)
    //   [0] => State(22)
    //   [\] => State(60)
    //   [$] => State(78)
    //   [`] => State(466):TemplateTail
    [
        5, 5, 60, 5, 5, 5, 5, 466, 5, 5, 5, 21, 5, 5, 5, 5, 5, 5, 5, 5, 5, 21, 21, 21, 78, 5, 5,
        21, 21, 5, 5, 5, 5, 5, 5, 5, 21, 5, 21, 5, 5, 21, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 21, 21, 21, 22, 5, 5, 5, 467,
    ],
    // State(17)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   TemplateMiddle -> [}] . TemplateCharacters [$] [{]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateMiddle -> [}] TemplateCharacters . [$] [{]
    //   TemplateTail -> [}] . TemplateCharacters [`]
    //   TemplateTail -> [}] TemplateCharacters . [`]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(5)
    //   [1..9, A..F, a..f] => State(23)
    //   [0] => State(24)
    //   [\] => State(60)
    //   [$] => State(78)
    //   [`] => State(466):TemplateTail
    [
        5, 5, 60, 5, 5, 5, 5, 466, 5, 5, 5, 23, 5, 5, 5, 5, 5, 5, 5, 5, 5, 23, 23, 23, 78, 5, 5,
        23, 23, 5, 5, 5, 5, 5, 5, 5, 23, 5, 23, 5, 5, 23, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 23, 23, 23, 24, 5, 5, 5, 467,
    ],
    // State(18)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   TemplateMiddle -> [}] . TemplateCharacters [$] [{]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateMiddle -> [}] TemplateCharacters . [$] [{]
    //   TemplateTail -> [}] . TemplateCharacters [`]
    //   TemplateTail -> [}] TemplateCharacters . [`]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(5)
    //   [0] => State(24)
    //   [1..9, A..F, a..f] => State(25)
    //   [\] => State(60)
    //   [$] => State(78)
    //   [`] => State(466):TemplateTail
    [
        5, 5, 60, 5, 5, 5, 5, 466, 5, 5, 5, 25, 5, 5, 5, 5, 5, 5, 5, 5, 5, 25, 25, 25, 78, 5, 5,
        25, 25, 5, 5, 5, 5, 5, 5, 5, 25, 5, 25, 5, 5, 25, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 25, 25, 25, 24, 5, 5, 5, 467,
    ],
    // State(19)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   TemplateMiddle -> [}] . TemplateCharacters [$] [{]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateMiddle -> [}] TemplateCharacters . [$] [{]
    //   TemplateTail -> [}] . TemplateCharacters [`]
    //   TemplateTail -> [}] TemplateCharacters . [`]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(5)
    //   [1..9, A..F, a..f] => State(26)
    //   [0] => State(27)
    //   [\] => State(60)
    //   [$] => State(78)
    //   [`] => State(466):TemplateTail
    [
        5, 5, 60, 5, 5, 5, 5, 466, 5, 5, 5, 26, 5, 5, 5, 5, 5, 5, 5, 5, 5, 26, 26, 26, 78, 5, 5,
        26, 26, 5, 5, 5, 5, 5, 5, 5, 26, 5, 26, 5, 5, 26, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 26, 26, 26, 27, 5, 5, 5, 467,
    ],
    // State(20)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   TemplateMiddle -> [}] . TemplateCharacters [$] [{]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateMiddle -> [}] TemplateCharacters . [$] [{]
    //   TemplateTail -> [}] . TemplateCharacters [`]
    //   TemplateTail -> [}] TemplateCharacters . [`]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(5)
    //   [1..9, A..F, a..f] => State(28)
    //   [0] => State(29)
    //   [\] => State(60)
    //   [$] => State(78)
    //   [`] => State(466):TemplateTail
    [
        5, 5, 60, 5, 5, 5, 5, 466, 5, 5, 5, 28, 5, 5, 5, 5, 5, 5, 5, 5, 5, 28, 28, 28, 78, 5, 5,
        28, 28, 5, 5, 5, 5, 5, 5, 5, 28, 5, 28, 5, 5, 28, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 28, 28, 28, 29, 5, 5, 5, 467,
    ],
    // State(21)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   TemplateMiddle -> [}] . TemplateCharacters [$] [{]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateMiddle -> [}] TemplateCharacters . [$] [{]
    //   TemplateTail -> [}] . TemplateCharacters [`]
    //   TemplateTail -> [}] TemplateCharacters . [`]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(5)
    //   [\] => State(60)
    //   [$] => State(78)
    //   [1..9, A..F, a..f] => State(99)
    //   [0] => State(100)
    //   [`] => State(466):TemplateTail
    [
        5, 5, 60, 5, 5, 5, 5, 466, 5, 5, 5, 99, 5, 5, 5, 5, 5, 5, 5, 5, 5, 99, 99, 99, 78, 5, 5,
        99, 99, 5, 5, 5, 5, 5, 5, 5, 99, 5, 99, 5, 5, 99, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 99, 99, 99, 100, 5, 5, 5, 467,
    ],
    // State(22)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   TemplateMiddle -> [}] . TemplateCharacters [$] [{]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateMiddle -> [}] TemplateCharacters . [$] [{]
    //   TemplateTail -> [}] . TemplateCharacters [`]
    //   TemplateTail -> [}] TemplateCharacters . [`]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(5)
    //   [\] => State(60)
    //   [$] => State(78)
    //   [1..9, A..F, a..f] => State(101)
    //   [0] => State(102)
    //   [`] => State(466):TemplateTail
    [
        5, 5, 60, 5, 5, 5, 5, 466, 5, 5, 5, 101, 5, 5, 5, 5, 5, 5, 5, 5, 5, 101, 101, 101, 78, 5,
        5, 101, 101, 5, 5, 5, 5, 5, 5, 5, 101, 5, 101, 5, 5, 101, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 101, 101, 101, 102, 5, 5, 5, 467,
    ],
    // State(23)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   TemplateMiddle -> [}] . TemplateCharacters [$] [{]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateMiddle -> [}] TemplateCharacters . [$] [{]
    //   TemplateTail -> [}] . TemplateCharacters [`]
    //   TemplateTail -> [}] TemplateCharacters . [`]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(5)
    //   [\] => State(60)
    //   [$] => State(78)
    //   [1..9, A..F, a..f] => State(89)
    //   [0] => State(90)
    //   [`] => State(466):TemplateTail
    [
        5, 5, 60, 5, 5, 5, 5, 466, 5, 5, 5, 89, 5, 5, 5, 5, 5, 5, 5, 5, 5, 89, 89, 89, 78, 5, 5,
        89, 89, 5, 5, 5, 5, 5, 5, 5, 89, 5, 89, 5, 5, 89, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 89, 89, 89, 90, 5, 5, 5, 467,
    ],
    // State(24)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   TemplateMiddle -> [}] . TemplateCharacters [$] [{]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateMiddle -> [}] TemplateCharacters . [$] [{]
    //   TemplateTail -> [}] . TemplateCharacters [`]
    //   TemplateTail -> [}] TemplateCharacters . [`]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(5)
    //   [\] => State(60)
    //   [$] => State(78)
    //   [0] => State(90)
    //   [1..9, A..F, a..f] => State(92)
    //   [`] => State(466):TemplateTail
    [
        5, 5, 60, 5, 5, 5, 5, 466, 5, 5, 5, 92, 5, 5, 5, 5, 5, 5, 5, 5, 5, 92, 92, 92, 78, 5, 5,
        92, 92, 5, 5, 5, 5, 5, 5, 5, 92, 5, 92, 5, 5, 92, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 92, 92, 92, 90, 5, 5, 5, 467,
    ],
    // State(25)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   TemplateMiddle -> [}] . TemplateCharacters [$] [{]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateMiddle -> [}] TemplateCharacters . [$] [{]
    //   TemplateTail -> [}] . TemplateCharacters [`]
    //   TemplateTail -> [}] TemplateCharacters . [`]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(5)
    //   [\] => State(60)
    //   [$] => State(78)
    //   [1..9, A..F, a..f] => State(95)
    //   [0] => State(96)
    //   [`] => State(466):TemplateTail
    [
        5, 5, 60, 5, 5, 5, 5, 466, 5, 5, 5, 95, 5, 5, 5, 5, 5, 5, 5, 5, 5, 95, 95, 95, 78, 5, 5,
        95, 95, 5, 5, 5, 5, 5, 5, 5, 95, 5, 95, 5, 5, 95, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 95, 95, 95, 96, 5, 5, 5, 467,
    ],
    // State(26)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   TemplateMiddle -> [}] . TemplateCharacters [$] [{]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateMiddle -> [}] TemplateCharacters . [$] [{]
    //   TemplateTail -> [}] . TemplateCharacters [`]
    //   TemplateTail -> [}] TemplateCharacters . [`]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(5)
    //   [\] => State(60)
    //   [$] => State(78)
    //   [1..9, A..F, a..f] => State(115)
    //   [0] => State(116)
    //   [`] => State(466):TemplateTail
    [
        5, 5, 60, 5, 5, 5, 5, 466, 5, 5, 5, 115, 5, 5, 5, 5, 5, 5, 5, 5, 5, 115, 115, 115, 78, 5,
        5, 115, 115, 5, 5, 5, 5, 5, 5, 5, 115, 5, 115, 5, 5, 115, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 115, 115, 115, 116, 5, 5, 5, 467,
    ],
    // State(27)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   TemplateMiddle -> [}] . TemplateCharacters [$] [{]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateMiddle -> [}] TemplateCharacters . [$] [{]
    //   TemplateTail -> [}] . TemplateCharacters [`]
    //   TemplateTail -> [}] TemplateCharacters . [`]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(5)
    //   [\] => State(60)
    //   [$] => State(78)
    //   [1..9, A..F, a..f] => State(117)
    //   [0] => State(118)
    //   [`] => State(466):TemplateTail
    [
        5, 5, 60, 5, 5, 5, 5, 466, 5, 5, 5, 117, 5, 5, 5, 5, 5, 5, 5, 5, 5, 117, 117, 117, 78, 5,
        5, 117, 117, 5, 5, 5, 5, 5, 5, 5, 117, 5, 117, 5, 5, 117, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 117, 117, 117, 118, 5, 5, 5, 467,
    ],
    // State(28)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   TemplateMiddle -> [}] . TemplateCharacters [$] [{]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateMiddle -> [}] TemplateCharacters . [$] [{]
    //   TemplateTail -> [}] . TemplateCharacters [`]
    //   TemplateTail -> [}] TemplateCharacters . [`]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(5)
    //   [\] => State(60)
    //   [$] => State(78)
    //   [1..9, A..F, a..f] => State(119)
    //   [0] => State(120)
    //   [`] => State(466):TemplateTail
    [
        5, 5, 60, 5, 5, 5, 5, 466, 5, 5, 5, 119, 5, 5, 5, 5, 5, 5, 5, 5, 5, 119, 119, 119, 78, 5,
        5, 119, 119, 5, 5, 5, 5, 5, 5, 5, 119, 5, 119, 5, 5, 119, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 119, 119, 119, 120, 5, 5, 5, 467,
    ],
    // State(29)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   TemplateMiddle -> [}] . TemplateCharacters [$] [{]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateMiddle -> [}] TemplateCharacters . [$] [{]
    //   TemplateTail -> [}] . TemplateCharacters [`]
    //   TemplateTail -> [}] TemplateCharacters . [`]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(5)
    //   [\] => State(60)
    //   [$] => State(78)
    //   [0] => State(120)
    //   [1..9, A..F, a..f] => State(121)
    //   [`] => State(466):TemplateTail
    [
        5, 5, 60, 5, 5, 5, 5, 466, 5, 5, 5, 121, 5, 5, 5, 5, 5, 5, 5, 5, 5, 121, 121, 121, 78, 5,
        5, 121, 121, 5, 5, 5, 5, 5, 5, 5, 121, 5, 121, 5, 5, 121, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 121, 121, 121, 120, 5, 5, 5, 467,
    ],
    // State(30)
    //   IdentifierName -> . IdentifierName IdentifierPart
    //   PrivateIdentifier -> [#] . IdentifierName
    //   IdentifierName -> . IdentifierStart
    //   IdentifierStart -> . IdentifierStartChar
    //   IdentifierStartChar -> . UnicodeIDStart
    //   UnicodeIDStart -> . [a..z A..Z $ _]
    //   IdentifierStartChar -> . [$]
    //   IdentifierStartChar -> . [_]
    //   IdentifierStart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(4)
    //   [$, A..Z, _, a..z] => State(395):PrivateIdentifier
    [
        467, 467, 4, 467, 467, 467, 467, 467, 467, 467, 467, 395, 395, 395, 395, 395, 395, 395,
        395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
        395, 395, 395, 395, 395, 395, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 4, 467,
    ],
    // State(31)
    //   StringLiteral -> ["] . ["]
    //   DoubleStringCharacters -> DoubleStringCharacter . DoubleStringCharacters
    //   StringLiteral -> ["] . DoubleStringCharacters ["]
    //   DoubleStringCharacters -> . DoubleStringCharacter
    //   DoubleStringCharacter -> . [SourceCharacter -" -\ -LineTerminator]
    //   DoubleStringCharacter -> . [<LS>]
    //   DoubleStringCharacter -> . [<PS>]
    //   DoubleStringCharacter -> . [\] EscapeSequence
    //   DoubleStringCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   DoubleStringCharacters -> . DoubleStringCharacter DoubleStringCharacters
    //   StringLiteral -> ["] DoubleStringCharacters . ["]
    //   LegacyOctalEscapeSequence -> NonZeroOctalDigit . ?![OctalDigit]
    //   LegacyOctalEscapeSequence -> ZeroToThree . OctalDigit ?![OctalDigit]
    //   OctalDigit -> . [0 1 2 3 4 5 6 7]
    //   LegacyOctalEscapeSequence -> ZeroToThree . OctalDigit OctalDigit
    //   EscapeSequence -> [0] . ?![DecimalDigit]
    //   LegacyOctalEscapeSequence -> [0] . ?=[8 9]
    //   LegacyOctalEscapeSequence -> FourToSeven . OctalDigit
    //   LegacyOctalEscapeSequence -> ZeroToThree OctalDigit . ?![OctalDigit]
    //   LegacyOctalEscapeSequence -> ZeroToThree OctalDigit . OctalDigit
    // Transitions
    //   [<NUL>..<HT>, <VT>..<FF>, <SO>..!, #..[, ]..U+10FFFF] => State(31)
    //   [\] => State(61)
    //   ["] => State(461):StringLiteral
    [
        467, 31, 61, 31, 31, 461, 31, 31, 31, 467, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
        31, 31, 31, 467,
    ],
    // State(32)
    //   StringLiteral -> ['] . [']
    //   SingleStringCharacters -> SingleStringCharacter . SingleStringCharacters
    //   StringLiteral -> ['] . SingleStringCharacters [']
    //   SingleStringCharacters -> . SingleStringCharacter
    //   SingleStringCharacter -> . [SourceCharacter -' -\ -LineTerminator]
    //   SingleStringCharacter -> . [<LS>]
    //   SingleStringCharacter -> . [<PS>]
    //   SingleStringCharacter -> . [\] EscapeSequence
    //   SingleStringCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   SingleStringCharacters -> . SingleStringCharacter SingleStringCharacters
    //   StringLiteral -> ['] SingleStringCharacters . [']
    //   LegacyOctalEscapeSequence -> NonZeroOctalDigit . ?![OctalDigit]
    //   LegacyOctalEscapeSequence -> ZeroToThree . OctalDigit ?![OctalDigit]
    //   OctalDigit -> . [0 1 2 3 4 5 6 7]
    //   LegacyOctalEscapeSequence -> ZeroToThree . OctalDigit OctalDigit
    //   EscapeSequence -> [0] . ?![DecimalDigit]
    //   LegacyOctalEscapeSequence -> [0] . ?=[8 9]
    //   LegacyOctalEscapeSequence -> FourToSeven . OctalDigit
    //   LegacyOctalEscapeSequence -> ZeroToThree OctalDigit . ?![OctalDigit]
    //   LegacyOctalEscapeSequence -> ZeroToThree OctalDigit . OctalDigit
    // Transitions
    //   [<NUL>..<HT>, <VT>..<FF>, <SO>..&, (..[, ]..U+10FFFF] => State(32)
    //   [\] => State(62)
    //   ['] => State(461):StringLiteral
    [
        467, 32, 62, 32, 32, 32, 461, 32, 32, 467, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
        32, 32, 32, 467,
    ],
    // State(33)
    //   NoSubstitutionTemplate -> [`] . [`]
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateHead -> [`] . [$] [{]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   LineTerminatorSequence -> [<CR>] . ?![<LF>]
    //   LineTerminatorSequence -> [<CR>] . [<LF>]
    //   HexEscapeSequence -> [x] . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotEscapeSequence -> [x] . ?![HexDigit]
    //   NotEscapeSequence -> [x] . HexDigit ?![HexDigit]
    //   TemplateEscapeSequence -> [0] . ?![DecimalDigit]
    //   NotEscapeSequence -> [0] . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotEscapeSequence -> [u] HexDigit . ?![HexDigit]
    //   NotEscapeSequence -> [u] HexDigit . HexDigit ?![HexDigit]
    //   NotEscapeSequence -> [u] HexDigit . HexDigit HexDigit ?![HexDigit]
    //   HexEscapeSequence -> [x] HexDigit . HexDigit
    //   NotEscapeSequence -> [x] HexDigit . ?![HexDigit]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotEscapeSequence -> [u] HexDigit HexDigit . ?![HexDigit]
    //   NotEscapeSequence -> [u] HexDigit HexDigit . HexDigit ?![HexDigit]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotEscapeSequence -> [u] HexDigit HexDigit HexDigit . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %..[, ].._, a..U+10FFFF] => State(33)
    //   [\] => State(63)
    //   [$] => State(81)
    //   [`] => State(462):NoSubstitutionTemplate
    [
        33, 33, 63, 33, 33, 33, 33, 462, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
        33, 33, 81, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
        33, 33, 33, 467,
    ],
    // State(34)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   UnicodeEscapeSequence -> [u] . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] . [{] CodePoint [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotEscapeSequence -> [u] . ?![HexDigit] ?![{]
    //   NotEscapeSequence -> [u] . HexDigit ?![HexDigit]
    //   NotEscapeSequence -> [u] . HexDigit HexDigit ?![HexDigit]
    //   NotEscapeSequence -> [u] . HexDigit HexDigit HexDigit ?![HexDigit]
    //   NotEscapeSequence -> [u] . [{] ?![HexDigit]
    //   NotEscapeSequence -> [u] . [{] NotCodePoint ?![HexDigit]
    //   NotEscapeSequence -> [u] . [{] CodePoint ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    // Transitions
    //   [<NUL>..#, %..[, ].._, a..z, |..U+10FFFF] => State(33)
    //   [{] => State(35)
    //   [\] => State(63)
    //   [$] => State(81)
    //   [`] => State(462):NoSubstitutionTemplate
    [
        33, 33, 63, 33, 33, 33, 33, 462, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
        33, 33, 81, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 35, 33, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
        33, 33, 33, 467,
    ],
    // State(35)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotEscapeSequence -> [u] [{] . ?![HexDigit]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] . CodePoint ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   CodePoint -> HexDigit . HexDigit
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(33)
    //   [0] => State(35)
    //   [1] => State(36)
    //   [2..9, A..F, a..f] => State(37)
    //   [\] => State(63)
    //   [$] => State(81)
    //   [`] => State(462):NoSubstitutionTemplate
    [
        33, 33, 63, 33, 33, 33, 33, 462, 33, 33, 33, 37, 33, 33, 33, 33, 33, 33, 33, 33, 33, 37,
        37, 37, 81, 33, 33, 37, 37, 33, 33, 33, 33, 33, 33, 33, 37, 33, 37, 33, 33, 37, 33, 33, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 36, 37, 37, 35,
        33, 33, 33, 467,
    ],
    // State(36)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> [1] . [0] Hex4Digits
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(33)
    //   [1..9, A..F, a..f] => State(37)
    //   [0] => State(38)
    //   [\] => State(63)
    //   [$] => State(81)
    //   [`] => State(462):NoSubstitutionTemplate
    [
        33, 33, 63, 33, 33, 33, 33, 462, 33, 33, 33, 37, 33, 33, 33, 33, 33, 33, 33, 33, 33, 37,
        37, 37, 81, 33, 33, 37, 37, 33, 33, 33, 33, 33, 33, 33, 37, 33, 37, 33, 33, 37, 33, 33, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 37, 37, 37, 38,
        33, 33, 33, 467,
    ],
    // State(37)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(33)
    //   [1..9, A..F, a..f] => State(37)
    //   [0] => State(39)
    //   [\] => State(63)
    //   [$] => State(81)
    //   [`] => State(462):NoSubstitutionTemplate
    [
        33, 33, 63, 33, 33, 33, 33, 462, 33, 33, 33, 37, 33, 33, 33, 33, 33, 33, 33, 33, 33, 37,
        37, 37, 81, 33, 33, 37, 37, 33, 33, 33, 33, 33, 33, 33, 37, 33, 37, 33, 33, 37, 33, 33, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 37, 37, 37, 39,
        33, 33, 33, 467,
    ],
    // State(38)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> [1] [0] . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(33)
    //   [0] => State(39)
    //   [1..9, A..F, a..f] => State(40)
    //   [\] => State(63)
    //   [$] => State(81)
    //   [`] => State(462):NoSubstitutionTemplate
    [
        33, 33, 63, 33, 33, 33, 33, 462, 33, 33, 33, 40, 33, 33, 33, 33, 33, 33, 33, 33, 33, 40,
        40, 40, 81, 33, 33, 40, 40, 33, 33, 33, 33, 33, 33, 33, 40, 33, 40, 33, 33, 40, 33, 33, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 40, 40, 40, 39,
        33, 33, 33, 467,
    ],
    // State(39)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(33)
    //   [1..9, A..F, a..f] => State(41)
    //   [0] => State(42)
    //   [\] => State(63)
    //   [$] => State(81)
    //   [`] => State(462):NoSubstitutionTemplate
    [
        33, 33, 63, 33, 33, 33, 33, 462, 33, 33, 33, 41, 33, 33, 33, 33, 33, 33, 33, 33, 33, 41,
        41, 41, 81, 33, 33, 41, 41, 33, 33, 33, 33, 33, 33, 33, 41, 33, 41, 33, 33, 41, 33, 33, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 41, 41, 41, 42,
        33, 33, 33, 467,
    ],
    // State(40)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(33)
    //   [0] => State(42)
    //   [1..9, A..F, a..f] => State(43)
    //   [\] => State(63)
    //   [$] => State(81)
    //   [`] => State(462):NoSubstitutionTemplate
    [
        33, 33, 63, 33, 33, 33, 33, 462, 33, 33, 33, 43, 33, 33, 33, 33, 33, 33, 33, 33, 33, 43,
        43, 43, 81, 33, 33, 43, 43, 33, 33, 33, 33, 33, 33, 33, 43, 33, 43, 33, 33, 43, 33, 33, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 43, 43, 43, 42,
        33, 33, 33, 467,
    ],
    // State(41)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(33)
    //   [1..9, A..F, a..f] => State(44)
    //   [0] => State(45)
    //   [\] => State(63)
    //   [$] => State(81)
    //   [`] => State(462):NoSubstitutionTemplate
    [
        33, 33, 63, 33, 33, 33, 33, 462, 33, 33, 33, 44, 33, 33, 33, 33, 33, 33, 33, 33, 33, 44,
        44, 44, 81, 33, 33, 44, 44, 33, 33, 33, 33, 33, 33, 33, 44, 33, 44, 33, 33, 44, 33, 33, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 44, 44, 44, 45,
        33, 33, 33, 467,
    ],
    // State(42)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(33)
    //   [0] => State(45)
    //   [1..9, A..F, a..f] => State(46)
    //   [\] => State(63)
    //   [$] => State(81)
    //   [`] => State(462):NoSubstitutionTemplate
    [
        33, 33, 63, 33, 33, 33, 33, 462, 33, 33, 33, 46, 33, 33, 33, 33, 33, 33, 33, 33, 33, 46,
        46, 46, 81, 33, 33, 46, 46, 33, 33, 33, 33, 33, 33, 33, 46, 33, 46, 33, 33, 46, 33, 33, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 46, 46, 46, 45,
        33, 33, 33, 467,
    ],
    // State(43)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(33)
    //   [1..9, A..F, a..f] => State(47)
    //   [0] => State(48)
    //   [\] => State(63)
    //   [$] => State(81)
    //   [`] => State(462):NoSubstitutionTemplate
    [
        33, 33, 63, 33, 33, 33, 33, 462, 33, 33, 33, 47, 33, 33, 33, 33, 33, 33, 33, 33, 33, 47,
        47, 47, 81, 33, 33, 47, 47, 33, 33, 33, 33, 33, 33, 33, 47, 33, 47, 33, 33, 47, 33, 33, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 47, 47, 47, 48,
        33, 33, 33, 467,
    ],
    // State(44)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(33)
    //   [1..9, A..F, a..f] => State(49)
    //   [0] => State(50)
    //   [\] => State(63)
    //   [$] => State(81)
    //   [`] => State(462):NoSubstitutionTemplate
    [
        33, 33, 63, 33, 33, 33, 33, 462, 33, 33, 33, 49, 33, 33, 33, 33, 33, 33, 33, 33, 33, 49,
        49, 49, 81, 33, 33, 49, 49, 33, 33, 33, 33, 33, 33, 33, 49, 33, 49, 33, 33, 49, 33, 33, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 49, 49, 49, 50,
        33, 33, 33, 467,
    ],
    // State(45)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(33)
    //   [1..9, A..F, a..f] => State(51)
    //   [0] => State(52)
    //   [\] => State(63)
    //   [$] => State(81)
    //   [`] => State(462):NoSubstitutionTemplate
    [
        33, 33, 63, 33, 33, 33, 33, 462, 33, 33, 33, 51, 33, 33, 33, 33, 33, 33, 33, 33, 33, 51,
        51, 51, 81, 33, 33, 51, 51, 33, 33, 33, 33, 33, 33, 33, 51, 33, 51, 33, 33, 51, 33, 33, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 51, 51, 51, 52,
        33, 33, 33, 467,
    ],
    // State(46)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(33)
    //   [0] => State(52)
    //   [1..9, A..F, a..f] => State(53)
    //   [\] => State(63)
    //   [$] => State(81)
    //   [`] => State(462):NoSubstitutionTemplate
    [
        33, 33, 63, 33, 33, 33, 33, 462, 33, 33, 33, 53, 33, 33, 33, 33, 33, 33, 33, 33, 33, 53,
        53, 53, 81, 33, 33, 53, 53, 33, 33, 33, 33, 33, 33, 33, 53, 33, 53, 33, 33, 53, 33, 33, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 53, 53, 53, 52,
        33, 33, 33, 467,
    ],
    // State(47)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(33)
    //   [1..9, A..F, a..f] => State(54)
    //   [0] => State(55)
    //   [\] => State(63)
    //   [$] => State(81)
    //   [`] => State(462):NoSubstitutionTemplate
    [
        33, 33, 63, 33, 33, 33, 33, 462, 33, 33, 33, 54, 33, 33, 33, 33, 33, 33, 33, 33, 33, 54,
        54, 54, 81, 33, 33, 54, 54, 33, 33, 33, 33, 33, 33, 33, 54, 33, 54, 33, 33, 54, 33, 33, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 54, 54, 54, 55,
        33, 33, 33, 467,
    ],
    // State(48)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(33)
    //   [1..9, A..F, a..f] => State(56)
    //   [0] => State(57)
    //   [\] => State(63)
    //   [$] => State(81)
    //   [`] => State(462):NoSubstitutionTemplate
    [
        33, 33, 63, 33, 33, 33, 33, 462, 33, 33, 33, 56, 33, 33, 33, 33, 33, 33, 33, 33, 33, 56,
        56, 56, 81, 33, 33, 56, 56, 33, 33, 33, 33, 33, 33, 33, 56, 33, 56, 33, 33, 56, 33, 33, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 56, 56, 56, 57,
        33, 33, 33, 467,
    ],
    // State(49)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(33)
    //   [\] => State(63)
    //   [$] => State(81)
    //   [1..9, A..F, a..f] => State(103)
    //   [0] => State(104)
    //   [`] => State(462):NoSubstitutionTemplate
    [
        33, 33, 63, 33, 33, 33, 33, 462, 33, 33, 33, 103, 33, 33, 33, 33, 33, 33, 33, 33, 33, 103,
        103, 103, 81, 33, 33, 103, 103, 33, 33, 33, 33, 33, 33, 33, 103, 33, 103, 33, 33, 103, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 103,
        103, 103, 104, 33, 33, 33, 467,
    ],
    // State(50)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(33)
    //   [\] => State(63)
    //   [$] => State(81)
    //   [1..9, A..F, a..f] => State(105)
    //   [0] => State(106)
    //   [`] => State(462):NoSubstitutionTemplate
    [
        33, 33, 63, 33, 33, 33, 33, 462, 33, 33, 33, 105, 33, 33, 33, 33, 33, 33, 33, 33, 33, 105,
        105, 105, 81, 33, 33, 105, 105, 33, 33, 33, 33, 33, 33, 33, 105, 33, 105, 33, 33, 105, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 105,
        105, 105, 106, 33, 33, 33, 467,
    ],
    // State(51)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(33)
    //   [\] => State(63)
    //   [$] => State(81)
    //   [0] => State(91)
    //   [1..9, A..F, a..f] => State(94)
    //   [`] => State(462):NoSubstitutionTemplate
    [
        33, 33, 63, 33, 33, 33, 33, 462, 33, 33, 33, 94, 33, 33, 33, 33, 33, 33, 33, 33, 33, 94,
        94, 94, 81, 33, 33, 94, 94, 33, 33, 33, 33, 33, 33, 33, 94, 33, 94, 33, 33, 94, 33, 33, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 94, 94, 94, 91,
        33, 33, 33, 467,
    ],
    // State(52)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(33)
    //   [\] => State(63)
    //   [$] => State(81)
    //   [0] => State(91)
    //   [1..9, A..F, a..f] => State(93)
    //   [`] => State(462):NoSubstitutionTemplate
    [
        33, 33, 63, 33, 33, 33, 33, 462, 33, 33, 33, 93, 33, 33, 33, 33, 33, 33, 33, 33, 33, 93,
        93, 93, 81, 33, 33, 93, 93, 33, 33, 33, 33, 33, 33, 33, 93, 33, 93, 33, 33, 93, 33, 33, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 93, 93, 93, 91,
        33, 33, 33, 467,
    ],
    // State(53)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(33)
    //   [\] => State(63)
    //   [$] => State(81)
    //   [1..9, A..F, a..f] => State(97)
    //   [0] => State(98)
    //   [`] => State(462):NoSubstitutionTemplate
    [
        33, 33, 63, 33, 33, 33, 33, 462, 33, 33, 33, 97, 33, 33, 33, 33, 33, 33, 33, 33, 33, 97,
        97, 97, 81, 33, 33, 97, 97, 33, 33, 33, 33, 33, 33, 33, 97, 33, 97, 33, 33, 97, 33, 33, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 97, 97, 97, 98,
        33, 33, 33, 467,
    ],
    // State(54)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(33)
    //   [\] => State(63)
    //   [$] => State(81)
    //   [1..9, A..F, a..f] => State(122)
    //   [0] => State(123)
    //   [`] => State(462):NoSubstitutionTemplate
    [
        33, 33, 63, 33, 33, 33, 33, 462, 33, 33, 33, 122, 33, 33, 33, 33, 33, 33, 33, 33, 33, 122,
        122, 122, 81, 33, 33, 122, 122, 33, 33, 33, 33, 33, 33, 33, 122, 33, 122, 33, 33, 122, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 122,
        122, 122, 123, 33, 33, 33, 467,
    ],
    // State(55)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(33)
    //   [\] => State(63)
    //   [$] => State(81)
    //   [1..9, A..F, a..f] => State(124)
    //   [0] => State(125)
    //   [`] => State(462):NoSubstitutionTemplate
    [
        33, 33, 63, 33, 33, 33, 33, 462, 33, 33, 33, 124, 33, 33, 33, 33, 33, 33, 33, 33, 33, 124,
        124, 124, 81, 33, 33, 124, 124, 33, 33, 33, 33, 33, 33, 33, 124, 33, 124, 33, 33, 124, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 124,
        124, 124, 125, 33, 33, 33, 467,
    ],
    // State(56)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(33)
    //   [\] => State(63)
    //   [$] => State(81)
    //   [1..9, A..F, a..f] => State(126)
    //   [0] => State(127)
    //   [`] => State(462):NoSubstitutionTemplate
    [
        33, 33, 63, 33, 33, 33, 33, 462, 33, 33, 33, 126, 33, 33, 33, 33, 33, 33, 33, 33, 33, 126,
        126, 126, 81, 33, 33, 126, 126, 33, 33, 33, 33, 33, 33, 33, 126, 33, 126, 33, 33, 126, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 126,
        126, 126, 127, 33, 33, 33, 467,
    ],
    // State(57)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(33)
    //   [\] => State(63)
    //   [$] => State(81)
    //   [0] => State(127)
    //   [1..9, A..F, a..f] => State(128)
    //   [`] => State(462):NoSubstitutionTemplate
    [
        33, 33, 63, 33, 33, 33, 33, 462, 33, 33, 33, 128, 33, 33, 33, 33, 33, 33, 33, 33, 33, 128,
        128, 128, 81, 33, 33, 128, 128, 33, 33, 33, 33, 33, 33, 33, 128, 33, 128, 33, 33, 128, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 128,
        128, 128, 127, 33, 33, 33, 467,
    ],
    // State(58)
    //   RegularExpressionChars -> . RegularExpressionChars RegularExpressionChar
    //   RegularExpressionBody -> RegularExpressionFirstChar . RegularExpressionChars
    //   RegularExpressionChars -> . (empty)
    //   RegularExpressionChars -> RegularExpressionChars . RegularExpressionChar
    //   RegularExpressionChar -> . [RegularExpressionNonTerminator -\ -/ -[]
    //   RegularExpressionChar -> . RegularExpressionBackslashSequence
    //   RegularExpressionBackslashSequence -> . [\] RegularExpressionNonTerminator
    //   RegularExpressionChar -> . RegularExpressionClass
    //   RegularExpressionClass -> . [[] RegularExpressionClassChars []]
    //   RegularExpressionLiteral -> [/] RegularExpressionBody . [/] RegularExpressionFlags
    // Transitions
    //   [<NUL>..<HT>, <VT>..<FF>, <SO>..., 0..Z, ]..U+2027, U+202A..U+10FFFF] => State(58)
    //   [\] => State(64)
    //   [[] => State(65)
    //   [/] => State(464):RegularExpressionLiteral
    [
        467, 464, 64, 58, 58, 58, 58, 58, 58, 467, 467, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
        58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
        65, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
        58, 58, 58, 467,
    ],
    // State(59)
    //   MultiLineComment -> [/] [*] . [*] [/]
    //   MultiLineCommentChars -> MultiLineNotAsteriskChar . MultiLineCommentChars
    //   PostAsteriskCommentChars -> MultiLineNotForwardSlashOrAsteriskChar . MultiLineCommentChars
    //   MultiLineComment -> [/] [*] . MultiLineCommentChars [*] [/]
    //   MultiLineCommentChars -> . MultiLineNotAsteriskChar
    //   MultiLineNotAsteriskChar -> . [SourceCharacter -*]
    //   MultiLineCommentChars -> . MultiLineNotAsteriskChar MultiLineCommentChars
    //   MultiLineCommentChars -> . [*]
    //   MultiLineCommentChars -> . [*] PostAsteriskCommentChars
    //   MultiLineComment -> [/] [*] MultiLineCommentChars . [*] [/]
    // Transitions
    //   [<NUL>..), +..U+10FFFF] => State(59)
    //   [*] => State(82)
    [
        59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
        59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
        59, 59, 59, 59, 59, 59, 59, 59, 82, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
        59, 59, 467,
    ],
    // State(60)
    //   TemplateCharacter -> [\] . TemplateEscapeSequence
    //   TemplateEscapeSequence -> . CharacterEscapeSequence
    //   CharacterEscapeSequence -> . SingleEscapeCharacter
    //   SingleEscapeCharacter -> . [' " \ b f n r t v]
    //   CharacterEscapeSequence -> . NonEscapeCharacter
    //   NonEscapeCharacter -> . [SourceCharacter -EscapeCharacter -LineTerminator]
    //   TemplateEscapeSequence -> . [0] ?![DecimalDigit]
    //   TemplateEscapeSequence -> . HexEscapeSequence
    //   HexEscapeSequence -> . [x] HexDigit HexDigit
    //   TemplateEscapeSequence -> . UnicodeEscapeSequence
    //   UnicodeEscapeSequence -> . [u] Hex4Digits
    //   UnicodeEscapeSequence -> . [u] [{] CodePoint [}]
    //   TemplateCharacter -> [\] . NotEscapeSequence
    //   NotEscapeSequence -> . [0] DecimalDigit
    //   NotEscapeSequence -> . [DecimalDigit -0]
    //   NotEscapeSequence -> . [x] ?![HexDigit]
    //   NotEscapeSequence -> . [x] HexDigit ?![HexDigit]
    //   NotEscapeSequence -> . [u] ?![HexDigit] ?![{]
    //   NotEscapeSequence -> . [u] HexDigit ?![HexDigit]
    //   NotEscapeSequence -> . [u] HexDigit HexDigit ?![HexDigit]
    //   NotEscapeSequence -> . [u] HexDigit HexDigit HexDigit ?![HexDigit]
    //   NotEscapeSequence -> . [u] [{] ?![HexDigit]
    //   NotEscapeSequence -> . [u] [{] NotCodePoint ?![HexDigit]
    //   NotEscapeSequence -> . [u] [{] CodePoint ?![HexDigit] ?![}]
    //   LineContinuation -> [\] . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    // Transitions
    //   [<NUL>..t, v..U+10FFFF] => State(5)
    //   [u] => State(6)
    [
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 467,
    ],
    // State(61)
    //   DoubleStringCharacter -> [\] . EscapeSequence
    //   EscapeSequence -> . CharacterEscapeSequence
    //   CharacterEscapeSequence -> . SingleEscapeCharacter
    //   SingleEscapeCharacter -> . [' " \ b f n r t v]
    //   CharacterEscapeSequence -> . NonEscapeCharacter
    //   NonEscapeCharacter -> . [SourceCharacter -EscapeCharacter -LineTerminator]
    //   EscapeSequence -> . [0] ?![DecimalDigit]
    //   EscapeSequence -> . LegacyOctalEscapeSequence
    //   LegacyOctalEscapeSequence -> . [0] ?=[8 9]
    //   LegacyOctalEscapeSequence -> . NonZeroOctalDigit ?![OctalDigit]
    //   NonZeroOctalDigit -> . [OctalDigit -0]
    //   LegacyOctalEscapeSequence -> . ZeroToThree OctalDigit ?![OctalDigit]
    //   ZeroToThree -> . [0 1 2 3]
    //   LegacyOctalEscapeSequence -> . FourToSeven OctalDigit
    //   FourToSeven -> . [4 5 6 7]
    //   LegacyOctalEscapeSequence -> . ZeroToThree OctalDigit OctalDigit
    //   EscapeSequence -> . NonOctalDecimalEscapeSequence
    //   NonOctalDecimalEscapeSequence -> . [8 9]
    //   EscapeSequence -> . HexEscapeSequence
    //   HexEscapeSequence -> . [x] HexDigit HexDigit
    //   EscapeSequence -> . UnicodeEscapeSequence
    //   UnicodeEscapeSequence -> . [u] Hex4Digits
    //   UnicodeEscapeSequence -> . [u] [{] CodePoint [}]
    //   LineContinuation -> [\] . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    // Transitions
    //   [<NUL>..<FF>, <SO>..t, v..w, y..U+10FFFF] => State(31)
    //   [u] => State(69)
    //   [x] => State(84)
    //   [<CR>] => State(129)
    [
        129, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 69, 31, 31, 31, 31, 31, 31, 84, 31,
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
        31, 31, 31, 467,
    ],
    // State(62)
    //   SingleStringCharacter -> [\] . EscapeSequence
    //   EscapeSequence -> . CharacterEscapeSequence
    //   CharacterEscapeSequence -> . SingleEscapeCharacter
    //   SingleEscapeCharacter -> . [' " \ b f n r t v]
    //   CharacterEscapeSequence -> . NonEscapeCharacter
    //   NonEscapeCharacter -> . [SourceCharacter -EscapeCharacter -LineTerminator]
    //   EscapeSequence -> . [0] ?![DecimalDigit]
    //   EscapeSequence -> . LegacyOctalEscapeSequence
    //   LegacyOctalEscapeSequence -> . [0] ?=[8 9]
    //   LegacyOctalEscapeSequence -> . NonZeroOctalDigit ?![OctalDigit]
    //   NonZeroOctalDigit -> . [OctalDigit -0]
    //   LegacyOctalEscapeSequence -> . ZeroToThree OctalDigit ?![OctalDigit]
    //   ZeroToThree -> . [0 1 2 3]
    //   LegacyOctalEscapeSequence -> . FourToSeven OctalDigit
    //   FourToSeven -> . [4 5 6 7]
    //   LegacyOctalEscapeSequence -> . ZeroToThree OctalDigit OctalDigit
    //   EscapeSequence -> . NonOctalDecimalEscapeSequence
    //   NonOctalDecimalEscapeSequence -> . [8 9]
    //   EscapeSequence -> . HexEscapeSequence
    //   HexEscapeSequence -> . [x] HexDigit HexDigit
    //   EscapeSequence -> . UnicodeEscapeSequence
    //   UnicodeEscapeSequence -> . [u] Hex4Digits
    //   UnicodeEscapeSequence -> . [u] [{] CodePoint [}]
    //   LineContinuation -> [\] . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    // Transitions
    //   [<NUL>..<FF>, <SO>..t, v..w, y..U+10FFFF] => State(32)
    //   [u] => State(70)
    //   [x] => State(85)
    //   [<CR>] => State(130)
    [
        130, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 70, 32, 32, 32, 32, 32, 32, 85, 32,
        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
        32, 32, 32, 467,
    ],
    // State(63)
    //   TemplateCharacter -> [\] . TemplateEscapeSequence
    //   TemplateEscapeSequence -> . CharacterEscapeSequence
    //   CharacterEscapeSequence -> . SingleEscapeCharacter
    //   SingleEscapeCharacter -> . [' " \ b f n r t v]
    //   CharacterEscapeSequence -> . NonEscapeCharacter
    //   NonEscapeCharacter -> . [SourceCharacter -EscapeCharacter -LineTerminator]
    //   TemplateEscapeSequence -> . [0] ?![DecimalDigit]
    //   TemplateEscapeSequence -> . HexEscapeSequence
    //   HexEscapeSequence -> . [x] HexDigit HexDigit
    //   TemplateEscapeSequence -> . UnicodeEscapeSequence
    //   UnicodeEscapeSequence -> . [u] Hex4Digits
    //   UnicodeEscapeSequence -> . [u] [{] CodePoint [}]
    //   TemplateCharacter -> [\] . NotEscapeSequence
    //   NotEscapeSequence -> . [0] DecimalDigit
    //   NotEscapeSequence -> . [DecimalDigit -0]
    //   NotEscapeSequence -> . [x] ?![HexDigit]
    //   NotEscapeSequence -> . [x] HexDigit ?![HexDigit]
    //   NotEscapeSequence -> . [u] ?![HexDigit] ?![{]
    //   NotEscapeSequence -> . [u] HexDigit ?![HexDigit]
    //   NotEscapeSequence -> . [u] HexDigit HexDigit ?![HexDigit]
    //   NotEscapeSequence -> . [u] HexDigit HexDigit HexDigit ?![HexDigit]
    //   NotEscapeSequence -> . [u] [{] ?![HexDigit]
    //   NotEscapeSequence -> . [u] [{] NotCodePoint ?![HexDigit]
    //   NotEscapeSequence -> . [u] [{] CodePoint ?![HexDigit] ?![}]
    //   LineContinuation -> [\] . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    // Transitions
    //   [<NUL>..t, v..U+10FFFF] => State(33)
    //   [u] => State(34)
    [
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 33, 33, 33, 33, 33, 33, 33, 33, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
        33, 33, 467,
    ],
    // State(64)
    //   RegularExpressionBackslashSequence -> [\] . RegularExpressionNonTerminator
    //   RegularExpressionNonTerminator -> . [SourceCharacter -LineTerminator]
    // Transitions
    //   [<NUL>..<HT>, <VT>..<FF>, <SO>..U+2027, U+202A..U+10FFFF] => State(58)
    [
        467, 58, 58, 58, 58, 58, 58, 58, 58, 467, 467, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
        58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
        58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
        58, 58, 58, 467,
    ],
    // State(65)
    //   RegularExpressionClassChars -> . RegularExpressionClassChars RegularExpressionClassChar
    //   RegularExpressionClass -> [[] . RegularExpressionClassChars []]
    //   RegularExpressionClassChars -> . (empty)
    //   RegularExpressionClassChars -> RegularExpressionClassChars . RegularExpressionClassChar
    //   RegularExpressionClassChar -> . [RegularExpressionNonTerminator -] -\]
    //   RegularExpressionClassChar -> . RegularExpressionBackslashSequence
    //   RegularExpressionBackslashSequence -> . [\] RegularExpressionNonTerminator
    //   RegularExpressionClass -> [[] RegularExpressionClassChars . []]
    // Transitions
    //   []] => State(58)
    //   [<NUL>..<HT>, <VT>..<FF>, <SO>..[, ^..U+2027, U+202A..U+10FFFF] => State(65)
    //   [\] => State(66)
    [
        467, 65, 66, 65, 65, 65, 65, 65, 65, 467, 467, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
        65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
        65, 58, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
        65, 65, 58, 467,
    ],
    // State(66)
    //   RegularExpressionBackslashSequence -> [\] . RegularExpressionNonTerminator
    //   RegularExpressionNonTerminator -> . [SourceCharacter -LineTerminator]
    // Transitions
    //   [<NUL>..<HT>, <VT>..<FF>, <SO>..U+2027, U+202A..U+10FFFF] => State(65)
    [
        467, 65, 65, 65, 65, 65, 65, 65, 65, 467, 467, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
        65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
        65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
        65, 65, 65, 467,
    ],
    // State(67)
    //   UnicodeEscapeSequence -> [u] . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] . [{] CodePoint [}]
    // Transitions
    //   [0..9, A..F, a..f] => State(83)
    //   [{] => State(107)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 83, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 83, 83, 83, 467, 467, 467, 83, 83, 467, 467, 467, 467, 467, 467, 467, 83,
        467, 83, 467, 467, 83, 107, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 83, 83, 83, 83, 467, 467, 83, 467,
    ],
    // State(68)
    //   UnicodeEscapeSequence -> [u] . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] . [{] CodePoint [}]
    // Transitions
    //   [0..9, A..F, a..f] => State(86)
    //   [{] => State(109)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 86, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 86, 86, 86, 467, 467, 467, 86, 86, 467, 467, 467, 467, 467, 467, 467, 86,
        467, 86, 467, 467, 86, 109, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 86, 86, 86, 86, 467, 467, 86, 467,
    ],
    // State(69)
    //   UnicodeEscapeSequence -> [u] . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] . [{] CodePoint [}]
    // Transitions
    //   [0..9, A..F, a..f] => State(87)
    //   [{] => State(110)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 87, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 87, 87, 87, 467, 467, 467, 87, 87, 467, 467, 467, 467, 467, 467, 467, 87,
        467, 87, 467, 467, 87, 110, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 87, 87, 87, 87, 467, 467, 87, 467,
    ],
    // State(70)
    //   UnicodeEscapeSequence -> [u] . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] . [{] CodePoint [}]
    // Transitions
    //   [0..9, A..F, a..f] => State(88)
    //   [{] => State(111)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 88, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 88, 88, 88, 467, 467, 467, 88, 88, 467, 467, 467, 467, 467, 467, 467, 88,
        467, 88, 467, 467, 88, 111, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 88, 88, 88, 88, 467, 467, 88, 467,
    ],
    // State(71)
    //   ExponentPart_Sep -> ExponentIndicator . SignedInteger_Sep
    //   DecimalDigits_Sep -> . DecimalDigits_Sep DecimalDigit
    //   DecimalDigits_Sep -> . DecimalDigits_Sep NumericLiteralSeparator DecimalDigit
    //   SignedInteger_Sep -> . DecimalDigits_Sep
    //   DecimalDigits_Sep -> . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   SignedInteger_Sep -> . [+] DecimalDigits_Sep
    //   SignedInteger_Sep -> . [-] DecimalDigits_Sep
    // Transitions
    //   [+, -] => State(73)
    //   [0..9] => State(457):NumericLiteral
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 73, 73,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 457, 457, 457, 457, 467, 467, 73, 467,
    ],
    // State(72)
    //   DecimalDigits_Sep -> . DecimalDigits_Sep DecimalDigit
    //   DecimalDigits_Sep -> . DecimalDigits_Sep NumericLiteralSeparator DecimalDigit
    //   DecimalIntegerLiteral -> NonZeroDigit NumericLiteralSeparator . DecimalDigits_Sep
    //   DecimalDigits_Sep -> . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   DecimalBigIntegerLiteral -> NonZeroDigit NumericLiteralSeparator . DecimalDigits_Sep BigIntLiteralSuffix
    //   DecimalDigits_Sep -> DecimalDigits_Sep NumericLiteralSeparator . DecimalDigit
    // Transitions
    //   [0..9] => State(450):NumericLiteral
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 450, 450, 450, 450, 467, 467, 450, 467,
    ],
    // State(73)
    //   DecimalDigits_Sep -> . DecimalDigits_Sep DecimalDigit
    //   DecimalDigits_Sep -> . DecimalDigits_Sep NumericLiteralSeparator DecimalDigit
    //   SignedInteger_Sep -> [+] . DecimalDigits_Sep
    //   DecimalDigits_Sep -> . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   SignedInteger_Sep -> [-] . DecimalDigits_Sep
    //   DecimalDigits_Sep -> DecimalDigits_Sep NumericLiteralSeparator . DecimalDigit
    // Transitions
    //   [0..9] => State(457):NumericLiteral
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 457, 457, 457, 457, 467, 467, 457, 467,
    ],
    // State(74)
    //   DecimalDigits_Sep -> DecimalDigits_Sep NumericLiteralSeparator . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    // Transitions
    //   [0..9] => State(456):NumericLiteral
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 456, 456, 456, 456, 467, 467, 456, 467,
    ],
    // State(75)
    //   BinaryDigits_Sep -> . BinaryDigits_Sep BinaryDigit
    //   BinaryDigits_Sep -> . BinaryDigits_Sep NumericLiteralSeparator BinaryDigit
    //   BinaryIntegerLiteral_Sep -> [0] [b] . BinaryDigits_Sep
    //   BinaryDigits_Sep -> . BinaryDigit
    //   BinaryDigit -> . [0 1]
    //   BinaryIntegerLiteral_Sep -> [0] [B] . BinaryDigits_Sep
    //   BinaryDigits_Sep -> BinaryDigits_Sep NumericLiteralSeparator . BinaryDigit
    // Transitions
    //   [0..1] => State(458):NumericLiteral
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 458, 467, 467, 458, 467, 467, 458, 467,
    ],
    // State(76)
    //   OctalDigits_Sep -> . OctalDigits_Sep OctalDigit
    //   OctalDigits_Sep -> . OctalDigits_Sep NumericLiteralSeparator OctalDigit
    //   OctalIntegerLiteral_Sep -> [0] [o] . OctalDigits_Sep
    //   OctalDigits_Sep -> . OctalDigit
    //   OctalDigit -> . [0 1 2 3 4 5 6 7]
    //   OctalIntegerLiteral_Sep -> [0] [O] . OctalDigits_Sep
    //   OctalDigits_Sep -> OctalDigits_Sep NumericLiteralSeparator . OctalDigit
    // Transitions
    //   [0..7] => State(459):NumericLiteral
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 459, 459, 467, 459, 467, 467, 459, 467,
    ],
    // State(77)
    //   HexDigits_Sep -> . HexDigits_Sep HexDigit
    //   HexDigits_Sep -> . HexDigits_Sep NumericLiteralSeparator HexDigit
    //   HexIntegerLiteral_Sep -> [0] [x] . HexDigits_Sep
    //   HexDigits_Sep -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   HexIntegerLiteral_Sep -> [0] [X] . HexDigits_Sep
    //   HexDigits_Sep -> HexDigits_Sep NumericLiteralSeparator . HexDigit
    // Transitions
    //   [0..9, A..F, a..f] => State(460):NumericLiteral
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 460, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 460, 460, 460, 467, 467, 467, 460, 460, 467, 467, 467, 467, 467, 467, 467,
        460, 467, 460, 467, 467, 460, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 460, 460, 460, 460, 467, 467, 460, 467,
    ],
    // State(78)
    //   TemplateMiddle -> [}] [$] . [{]
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   TemplateMiddle -> [}] . TemplateCharacters [$] [{]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> [$] . ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateMiddle -> [}] TemplateCharacters . [$] [{]
    //   TemplateTail -> [}] . TemplateCharacters [`]
    //   TemplateTail -> [}] TemplateCharacters . [`]
    //   TemplateMiddle -> [}] TemplateCharacters [$] . [{]
    // Transitions
    //   [<NUL>..#, %..[, ].._, a..z, |..U+10FFFF] => State(5)
    //   [\] => State(60)
    //   [$] => State(78)
    //   [{] => State(465):TemplateMiddle
    //   [`] => State(466):TemplateTail
    [
        5, 5, 60, 5, 5, 5, 5, 466, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 78, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 465, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 467,
    ],
    // State(79)
    // Transitions
    //   [<NUL>../, :..U+10FFFF, (eof)] => State(396):OPTIONAL_CHAINING?
    [
        396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
        396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
        396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
        396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 467, 467, 467, 467, 396, 396, 396, 396,
    ],
    // State(80)
    //   ELLIPSIS -> [.] [.] . [.]
    // Transitions
    //   [.] => State(403):ELLIPSIS
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 403, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 403, 467,
    ],
    // State(81)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> [$] . ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] [$] . [{]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   TemplateHead -> [`] TemplateCharacters [$] . [{]
    // Transitions
    //   [<NUL>..#, %..[, ].._, a..z, |..U+10FFFF] => State(33)
    //   [\] => State(63)
    //   [$] => State(81)
    //   [`] => State(462):NoSubstitutionTemplate
    //   [{] => State(463):TemplateHead
    [
        33, 33, 63, 33, 33, 33, 33, 462, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
        33, 33, 81, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 463, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
        33, 33, 33, 33, 467,
    ],
    // State(82)
    //   MultiLineComment -> [/] [*] [*] . [/]
    //   PostAsteriskCommentChars -> [*] . PostAsteriskCommentChars
    //   MultiLineCommentChars -> [*] . PostAsteriskCommentChars
    //   PostAsteriskCommentChars -> . MultiLineNotForwardSlashOrAsteriskChar
    //   MultiLineNotForwardSlashOrAsteriskChar -> . [SourceCharacter -/ -*]
    //   PostAsteriskCommentChars -> . MultiLineNotForwardSlashOrAsteriskChar MultiLineCommentChars
    //   PostAsteriskCommentChars -> . [*]
    //   PostAsteriskCommentChars -> . [*] PostAsteriskCommentChars
    //   MultiLineComment -> [/] [*] MultiLineCommentChars . [*] [/]
    //   MultiLineComment -> [/] [*] MultiLineCommentChars [*] . [/]
    // Transitions
    //   [<NUL>..), +..., 0..U+10FFFF] => State(59)
    //   [*] => State(82)
    //   [/] => State(165):Comment
    [
        59, 165, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
        59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
        59, 59, 59, 59, 59, 59, 59, 59, 59, 82, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
        59, 59, 59, 467,
    ],
    // State(83)
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions
    //   [0..9, A..F, a..f] => State(108)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 108, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 108, 108, 108, 467, 467, 467, 108, 108, 467, 467, 467, 467, 467, 467, 467,
        108, 467, 108, 467, 467, 108, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 108, 108, 108, 108, 467, 467, 108, 467,
    ],
    // State(84)
    //   HexEscapeSequence -> [x] . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    // Transitions
    //   [0..9, A..F, a..f] => State(112)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 112, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 112, 112, 112, 467, 467, 467, 112, 112, 467, 467, 467, 467, 467, 467, 467,
        112, 467, 112, 467, 467, 112, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 112, 112, 112, 112, 467, 467, 112, 467,
    ],
    // State(85)
    //   HexEscapeSequence -> [x] . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    // Transitions
    //   [0..9, A..F, a..f] => State(113)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 113, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 113, 113, 113, 467, 467, 467, 113, 113, 467, 467, 467, 467, 467, 467, 467,
        113, 467, 113, 467, 467, 113, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 113, 113, 113, 113, 467, 467, 113, 467,
    ],
    // State(86)
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions
    //   [0..9, A..F, a..f] => State(114)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 114, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 114, 114, 114, 467, 467, 467, 114, 114, 467, 467, 467, 467, 467, 467, 467,
        114, 467, 114, 467, 467, 114, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 114, 114, 114, 114, 467, 467, 114, 467,
    ],
    // State(87)
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions
    //   [0..9, A..F, a..f] => State(84)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 84, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 84, 84, 84, 467, 467, 467, 84, 84, 467, 467, 467, 467, 467, 467, 467, 84,
        467, 84, 467, 467, 84, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 84, 84, 84, 84, 467, 467, 84, 467,
    ],
    // State(88)
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions
    //   [0..9, A..F, a..f] => State(85)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 85, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 85, 85, 85, 467, 467, 467, 85, 85, 467, 467, 467, 467, 467, 467, 467, 85,
        467, 85, 467, 467, 85, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 85, 85, 85, 85, 467, 467, 85, 467,
    ],
    // State(89)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(95)
    //   [0] => State(96)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 95, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 95, 95, 95, 467, 467, 467, 95, 95, 467, 467, 467, 467, 467, 467, 467, 95,
        467, 95, 467, 467, 95, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 95, 95, 95, 96, 467, 467, 95, 467,
    ],
    // State(90)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions
    //   [0] => State(90)
    //   [1..9, A..F, a..f] => State(92)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 92, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 92, 92, 92, 467, 467, 467, 92, 92, 467, 467, 467, 467, 467, 467, 467, 92,
        467, 92, 467, 467, 92, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 92, 92, 92, 90, 467, 467, 90, 467,
    ],
    // State(91)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions
    //   [0] => State(91)
    //   [1..9, A..F, a..f] => State(93)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 93, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 93, 93, 93, 467, 467, 467, 93, 93, 467, 467, 467, 467, 467, 467, 467, 93,
        467, 93, 467, 467, 93, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 93, 93, 93, 91, 467, 467, 91, 467,
    ],
    // State(92)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions
    //   [1..9, A..F, a..f] => State(89)
    //   [0] => State(90)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 89, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 89, 89, 89, 467, 467, 467, 89, 89, 467, 467, 467, 467, 467, 467, 467, 89,
        467, 89, 467, 467, 89, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 89, 89, 89, 90, 467, 467, 89, 467,
    ],
    // State(93)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions
    //   [0] => State(91)
    //   [1..9, A..F, a..f] => State(94)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 94, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 94, 94, 94, 467, 467, 467, 94, 94, 467, 467, 467, 467, 467, 467, 467, 94,
        467, 94, 467, 467, 94, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 94, 94, 94, 91, 467, 467, 91, 467,
    ],
    // State(94)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(97)
    //   [0] => State(98)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 97, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 97, 97, 97, 467, 467, 467, 97, 97, 467, 467, 467, 467, 467, 467, 467, 97,
        467, 97, 467, 467, 97, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 97, 97, 97, 98, 467, 467, 97, 467,
    ],
    // State(95)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(99)
    //   [0] => State(100)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 99, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 99, 99, 99, 467, 467, 467, 99, 99, 467, 467, 467, 467, 467, 467, 467, 99,
        467, 99, 467, 467, 99, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 99, 99, 99, 100, 467, 467, 99, 467,
    ],
    // State(96)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(101)
    //   [0] => State(102)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 101, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 101, 101, 101, 467, 467, 467, 101, 101, 467, 467, 467, 467, 467, 467, 467,
        101, 467, 101, 467, 467, 101, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 101, 101, 101, 102, 467, 467, 101, 467,
    ],
    // State(97)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(103)
    //   [0] => State(104)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 103, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 103, 103, 103, 467, 467, 467, 103, 103, 467, 467, 467, 467, 467, 467, 467,
        103, 467, 103, 467, 467, 103, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 103, 103, 103, 104, 467, 467, 103, 467,
    ],
    // State(98)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(105)
    //   [0] => State(106)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 105, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 105, 105, 105, 467, 467, 467, 105, 105, 467, 467, 467, 467, 467, 467, 467,
        105, 467, 105, 467, 467, 105, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 105, 105, 105, 106, 467, 467, 105, 467,
    ],
    // State(99)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(115)
    //   [0] => State(116)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 115, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 115, 115, 115, 467, 467, 467, 115, 115, 467, 467, 467, 467, 467, 467, 467,
        115, 467, 115, 467, 467, 115, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 115, 115, 115, 116, 467, 467, 115, 467,
    ],
    // State(100)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(117)
    //   [0] => State(118)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 117, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 117, 117, 117, 467, 467, 467, 117, 117, 467, 467, 467, 467, 467, 467, 467,
        117, 467, 117, 467, 467, 117, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 117, 117, 117, 118, 467, 467, 117, 467,
    ],
    // State(101)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(119)
    //   [0] => State(120)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 119, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 119, 119, 119, 467, 467, 467, 119, 119, 467, 467, 467, 467, 467, 467, 467,
        119, 467, 119, 467, 467, 119, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 119, 119, 119, 120, 467, 467, 119, 467,
    ],
    // State(102)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [0] => State(120)
    //   [1..9, A..F, a..f] => State(121)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 121, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 121, 121, 121, 467, 467, 467, 121, 121, 467, 467, 467, 467, 467, 467, 467,
        121, 467, 121, 467, 467, 121, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 121, 121, 121, 120, 467, 467, 120, 467,
    ],
    // State(103)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(122)
    //   [0] => State(123)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 122, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 122, 122, 122, 467, 467, 467, 122, 122, 467, 467, 467, 467, 467, 467, 467,
        122, 467, 122, 467, 467, 122, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 122, 122, 122, 123, 467, 467, 122, 467,
    ],
    // State(104)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(124)
    //   [0] => State(125)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 124, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 124, 124, 124, 467, 467, 467, 124, 124, 467, 467, 467, 467, 467, 467, 467,
        124, 467, 124, 467, 467, 124, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 124, 124, 124, 125, 467, 467, 124, 467,
    ],
    // State(105)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(126)
    //   [0] => State(127)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 126, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 126, 126, 126, 467, 467, 467, 126, 126, 467, 467, 467, 467, 467, 467, 467,
        126, 467, 126, 467, 467, 126, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 126, 126, 126, 127, 467, 467, 126, 467,
    ],
    // State(106)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [0] => State(127)
    //   [1..9, A..F, a..f] => State(128)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 128, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 128, 128, 128, 467, 467, 467, 128, 128, 467, 467, 467, 467, 467, 467, 467,
        128, 467, 128, 467, 467, 128, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 128, 128, 128, 127, 467, 467, 127, 467,
    ],
    // State(107)
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    // Transitions
    //   [2..9, A..F, a..f] => State(131)
    //   [1] => State(132)
    //   [0] => State(133)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 131, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 131, 131, 131, 467, 467, 467, 131, 131, 467, 467, 467, 467, 467, 467, 467,
        131, 467, 131, 467, 467, 131, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 132, 131, 131, 133, 467, 467, 131, 467,
    ],
    // State(108)
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions
    //   [0..9, A..F, a..f] => State(137)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 137, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 137, 137, 137, 467, 467, 467, 137, 137, 467, 467, 467, 467, 467, 467, 467,
        137, 467, 137, 467, 467, 137, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 137, 137, 137, 137, 467, 467, 137, 467,
    ],
    // State(109)
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    // Transitions
    //   [2..9, A..F, a..f] => State(138)
    //   [1] => State(139)
    //   [0] => State(140)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 138, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 138, 138, 138, 467, 467, 467, 138, 138, 467, 467, 467, 467, 467, 467, 467,
        138, 467, 138, 467, 467, 138, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 139, 138, 138, 140, 467, 467, 138, 467,
    ],
    // State(110)
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    // Transitions
    //   [2..9, A..F, a..f] => State(144)
    //   [1] => State(145)
    //   [0] => State(146)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 144, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 144, 144, 144, 467, 467, 467, 144, 144, 467, 467, 467, 467, 467, 467, 467,
        144, 467, 144, 467, 467, 144, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 145, 144, 144, 146, 467, 467, 144, 467,
    ],
    // State(111)
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    // Transitions
    //   [2..9, A..F, a..f] => State(149)
    //   [1] => State(150)
    //   [0] => State(151)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 149, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 149, 149, 149, 467, 467, 467, 149, 149, 467, 467, 467, 467, 467, 467, 467,
        149, 467, 149, 467, 467, 149, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 150, 149, 149, 151, 467, 467, 149, 467,
    ],
    // State(112)
    //   HexEscapeSequence -> [x] HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [0..9, A..F, a..f] => State(31)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 31, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 31, 31, 31, 467, 467, 467, 31, 31, 467, 467, 467, 467, 467, 467, 467, 31,
        467, 31, 467, 467, 31, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 31, 31, 31, 31, 467, 467, 31, 467,
    ],
    // State(113)
    //   HexEscapeSequence -> [x] HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [0..9, A..F, a..f] => State(32)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 32, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 32, 32, 32, 467, 467, 467, 32, 32, 467, 467, 467, 467, 467, 467, 467, 32,
        467, 32, 467, 467, 32, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 32, 32, 32, 32, 467, 467, 32, 467,
    ],
    // State(114)
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions
    //   [0..9, A..F, a..f] => State(156)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 156, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 156, 156, 156, 467, 467, 467, 156, 156, 467, 467, 467, 467, 467, 467, 467,
        156, 467, 156, 467, 467, 156, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 156, 156, 156, 156, 467, 467, 156, 467,
    ],
    // State(115)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(9)
    //   [0] => State(11)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 9, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 9, 9, 9, 467, 467, 467, 9, 9, 467, 467, 467, 467, 467, 467, 467, 9, 467, 9,
        467, 467, 9, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 9, 9, 9, 11, 467, 467, 9, 467,
    ],
    // State(116)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(13)
    //   [0] => State(14)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 13, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 13, 13, 13, 467, 467, 467, 13, 13, 467, 467, 467, 467, 467, 467, 467, 13,
        467, 13, 467, 467, 13, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 13, 13, 13, 14, 467, 467, 13, 467,
    ],
    // State(117)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(16)
    //   [0] => State(17)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 16, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 16, 16, 16, 467, 467, 467, 16, 16, 467, 467, 467, 467, 467, 467, 467, 16,
        467, 16, 467, 467, 16, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 16, 16, 16, 17, 467, 467, 16, 467,
    ],
    // State(118)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [0] => State(17)
    //   [1..9, A..F, a..f] => State(18)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 18, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 18, 18, 18, 467, 467, 467, 18, 18, 467, 467, 467, 467, 467, 467, 467, 18,
        467, 18, 467, 467, 18, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 18, 18, 18, 17, 467, 467, 17, 467,
    ],
    // State(119)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(21)
    //   [0] => State(22)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 21, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 21, 21, 21, 467, 467, 467, 21, 21, 467, 467, 467, 467, 467, 467, 467, 21,
        467, 21, 467, 467, 21, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 21, 21, 21, 22, 467, 467, 21, 467,
    ],
    // State(120)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(23)
    //   [0] => State(24)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 23, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 23, 23, 23, 467, 467, 467, 23, 23, 467, 467, 467, 467, 467, 467, 467, 23,
        467, 23, 467, 467, 23, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 23, 23, 23, 24, 467, 467, 23, 467,
    ],
    // State(121)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [0] => State(24)
    //   [1..9, A..F, a..f] => State(25)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 25, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 25, 25, 25, 467, 467, 467, 25, 25, 467, 467, 467, 467, 467, 467, 467, 25,
        467, 25, 467, 467, 25, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 25, 25, 25, 24, 467, 467, 24, 467,
    ],
    // State(122)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(37)
    //   [0] => State(39)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 37, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 37, 37, 37, 467, 467, 467, 37, 37, 467, 467, 467, 467, 467, 467, 467, 37,
        467, 37, 467, 467, 37, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 37, 37, 37, 39, 467, 467, 37, 467,
    ],
    // State(123)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(41)
    //   [0] => State(42)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 41, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 41, 41, 41, 467, 467, 467, 41, 41, 467, 467, 467, 467, 467, 467, 467, 41,
        467, 41, 467, 467, 41, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 41, 41, 41, 42, 467, 467, 41, 467,
    ],
    // State(124)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(44)
    //   [0] => State(45)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 44, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 44, 44, 44, 467, 467, 467, 44, 44, 467, 467, 467, 467, 467, 467, 467, 44,
        467, 44, 467, 467, 44, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 44, 44, 44, 45, 467, 467, 44, 467,
    ],
    // State(125)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [0] => State(45)
    //   [1..9, A..F, a..f] => State(46)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 46, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 46, 46, 46, 467, 467, 467, 46, 46, 467, 467, 467, 467, 467, 467, 467, 46,
        467, 46, 467, 467, 46, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 46, 46, 46, 45, 467, 467, 45, 467,
    ],
    // State(126)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(49)
    //   [0] => State(50)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 49, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 49, 49, 49, 467, 467, 467, 49, 49, 467, 467, 467, 467, 467, 467, 467, 49,
        467, 49, 467, 467, 49, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 49, 49, 49, 50, 467, 467, 49, 467,
    ],
    // State(127)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(51)
    //   [0] => State(52)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 51, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 51, 51, 51, 467, 467, 467, 51, 51, 467, 467, 467, 467, 467, 467, 467, 51,
        467, 51, 467, 467, 51, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 51, 51, 51, 52, 467, 467, 51, 467,
    ],
    // State(128)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [0] => State(52)
    //   [1..9, A..F, a..f] => State(53)
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 53, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 53, 53, 53, 467, 467, 467, 53, 53, 467, 467, 467, 467, 467, 467, 467, 53,
        467, 53, 467, 467, 53, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 53, 53, 53, 52, 467, 467, 52, 467,
    ],
    // State(129)
    //   DoubleStringCharacters -> DoubleStringCharacter . DoubleStringCharacters
    //   StringLiteral -> ["] . DoubleStringCharacters ["]
    //   DoubleStringCharacters -> . DoubleStringCharacter
    //   DoubleStringCharacter -> . [SourceCharacter -" -\ -LineTerminator]
    //   DoubleStringCharacter -> . [<LS>]
    //   DoubleStringCharacter -> . [<PS>]
    //   DoubleStringCharacter -> . [\] EscapeSequence
    //   DoubleStringCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   LineTerminatorSequence -> [<CR>] . ?![<LF>]
    //   LineTerminatorSequence -> [<CR>] . [<LF>]
    //   DoubleStringCharacters -> . DoubleStringCharacter DoubleStringCharacters
    //   StringLiteral -> ["] DoubleStringCharacters . ["]
    // Transitions
    //   [<NUL>..<FF>, <SO>..!, #..[, ]..U+10FFFF] => State(31)
    //   [\] => State(61)
    //   ["] => State(461):StringLiteral
    [
        467, 31, 61, 31, 31, 461, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
        31, 31, 31, 467,
    ],
    // State(130)
    //   SingleStringCharacters -> SingleStringCharacter . SingleStringCharacters
    //   StringLiteral -> ['] . SingleStringCharacters [']
    //   SingleStringCharacters -> . SingleStringCharacter
    //   SingleStringCharacter -> . [SourceCharacter -' -\ -LineTerminator]
    //   SingleStringCharacter -> . [<LS>]
    //   SingleStringCharacter -> . [<PS>]
    //   SingleStringCharacter -> . [\] EscapeSequence
    //   SingleStringCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   LineTerminatorSequence -> [<CR>] . ?![<LF>]
    //   LineTerminatorSequence -> [<CR>] . [<LF>]
    //   SingleStringCharacters -> . SingleStringCharacter SingleStringCharacters
    //   StringLiteral -> ['] SingleStringCharacters . [']
    // Transitions
    //   [<NUL>..<FF>, <SO>..&, (..[, ]..U+10FFFF] => State(32)
    //   [\] => State(62)
    //   ['] => State(461):StringLiteral
    [
        467, 32, 62, 32, 32, 32, 461, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
        32, 32, 32, 467,
    ],
    // State(131)
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   CodePoint -> [1] [0] . Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [0..9, A..F, a..f] => State(134)
    //   [}] => State(222):IdentifierName
    [
        467, 467, 467, 222, 467, 467, 467, 467, 467, 467, 467, 134, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 134, 134, 134, 467, 467, 467, 134, 134, 467, 467, 467, 467, 467, 467, 467,
        134, 467, 134, 467, 467, 134, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 134, 134, 134, 134, 467, 467, 134, 467,
    ],
    // State(132)
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> [1] . [0] Hex4Digits
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [0] => State(131)
    //   [1..9, A..F, a..f] => State(134)
    //   [}] => State(222):IdentifierName
    [
        467, 467, 467, 222, 467, 467, 467, 467, 467, 467, 467, 134, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 134, 134, 134, 467, 467, 467, 134, 134, 467, 467, 467, 467, 467, 467, 467,
        134, 467, 134, 467, 467, 134, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 134, 134, 134, 131, 467, 467, 131, 467,
    ],
    // State(133)
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> HexDigit . Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [2..9, A..F, a..f] => State(131)
    //   [1] => State(132)
    //   [0] => State(133)
    //   [}] => State(222):IdentifierName
    [
        467, 467, 467, 222, 467, 467, 467, 467, 467, 467, 467, 131, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 131, 131, 131, 467, 467, 467, 131, 131, 467, 467, 467, 467, 467, 467, 467,
        131, 467, 131, 467, 467, 131, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 132, 131, 131, 133, 467, 467, 131, 467,
    ],
    // State(134)
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [0..9, A..F, a..f] => State(135)
    //   [}] => State(222):IdentifierName
    [
        467, 467, 467, 222, 467, 467, 467, 467, 467, 467, 467, 135, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 135, 135, 135, 467, 467, 467, 135, 135, 467, 467, 467, 467, 467, 467, 467,
        135, 467, 135, 467, 467, 135, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 135, 135, 135, 135, 467, 467, 135, 467,
    ],
    // State(135)
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions
    //   [0..9, A..F, a..f] => State(136)
    //   [}] => State(222):IdentifierName
    [
        467, 467, 467, 222, 467, 467, 467, 467, 467, 467, 467, 136, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 136, 136, 136, 467, 467, 467, 136, 136, 467, 467, 467, 467, 467, 467, 467,
        136, 467, 136, 467, 467, 136, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 136, 136, 136, 136, 467, 467, 136, 467,
    ],
    // State(136)
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions
    //   [0..9, A..F, a..f] => State(157)
    //   [}] => State(222):IdentifierName
    [
        467, 467, 467, 222, 467, 467, 467, 467, 467, 467, 467, 157, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 157, 157, 157, 467, 467, 467, 157, 157, 467, 467, 467, 467, 467, 467, 467,
        157, 467, 157, 467, 467, 157, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 157, 157, 157, 157, 467, 467, 157, 467,
    ],
    // State(137)
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions
    //   [0..9, A..F, a..f] => State(222):IdentifierName
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 222, 222, 222, 467, 467, 467, 222, 222, 467, 467, 467, 467, 467, 467, 467,
        222, 467, 222, 467, 467, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 467, 467, 222, 467,
    ],
    // State(138)
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   CodePoint -> [1] [0] . Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [0..9, A..F, a..f] => State(141)
    //   [}] => State(395):PrivateIdentifier
    [
        467, 467, 467, 395, 467, 467, 467, 467, 467, 467, 467, 141, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 141, 141, 141, 467, 467, 467, 141, 141, 467, 467, 467, 467, 467, 467, 467,
        141, 467, 141, 467, 467, 141, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 141, 141, 141, 141, 467, 467, 141, 467,
    ],
    // State(139)
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> [1] . [0] Hex4Digits
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [0] => State(138)
    //   [1..9, A..F, a..f] => State(141)
    //   [}] => State(395):PrivateIdentifier
    [
        467, 467, 467, 395, 467, 467, 467, 467, 467, 467, 467, 141, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 141, 141, 141, 467, 467, 467, 141, 141, 467, 467, 467, 467, 467, 467, 467,
        141, 467, 141, 467, 467, 141, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 141, 141, 141, 138, 467, 467, 138, 467,
    ],
    // State(140)
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> HexDigit . Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [2..9, A..F, a..f] => State(138)
    //   [1] => State(139)
    //   [0] => State(140)
    //   [}] => State(395):PrivateIdentifier
    [
        467, 467, 467, 395, 467, 467, 467, 467, 467, 467, 467, 138, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 138, 138, 138, 467, 467, 467, 138, 138, 467, 467, 467, 467, 467, 467, 467,
        138, 467, 138, 467, 467, 138, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 139, 138, 138, 140, 467, 467, 138, 467,
    ],
    // State(141)
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [0..9, A..F, a..f] => State(142)
    //   [}] => State(395):PrivateIdentifier
    [
        467, 467, 467, 395, 467, 467, 467, 467, 467, 467, 467, 142, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 142, 142, 142, 467, 467, 467, 142, 142, 467, 467, 467, 467, 467, 467, 467,
        142, 467, 142, 467, 467, 142, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 142, 142, 142, 142, 467, 467, 142, 467,
    ],
    // State(142)
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions
    //   [0..9, A..F, a..f] => State(143)
    //   [}] => State(395):PrivateIdentifier
    [
        467, 467, 467, 395, 467, 467, 467, 467, 467, 467, 467, 143, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 143, 143, 143, 467, 467, 467, 143, 143, 467, 467, 467, 467, 467, 467, 467,
        143, 467, 143, 467, 467, 143, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 143, 143, 143, 143, 467, 467, 143, 467,
    ],
    // State(143)
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions
    //   [0..9, A..F, a..f] => State(158)
    //   [}] => State(395):PrivateIdentifier
    [
        467, 467, 467, 395, 467, 467, 467, 467, 467, 467, 467, 158, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 158, 158, 158, 467, 467, 467, 158, 158, 467, 467, 467, 467, 467, 467, 467,
        158, 467, 158, 467, 467, 158, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 158, 158, 158, 158, 467, 467, 158, 467,
    ],
    // State(144)
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   CodePoint -> [1] [0] . Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [}] => State(31)
    //   [0..9, A..F, a..f] => State(147)
    [
        467, 467, 467, 31, 467, 467, 467, 467, 467, 467, 467, 147, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 147, 147, 147, 467, 467, 467, 147, 147, 467, 467, 467, 467, 467, 467, 467,
        147, 467, 147, 467, 467, 147, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 147, 147, 147, 147, 467, 467, 31, 467,
    ],
    // State(145)
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> [1] . [0] Hex4Digits
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [}] => State(31)
    //   [0] => State(144)
    //   [1..9, A..F, a..f] => State(147)
    [
        467, 467, 467, 31, 467, 467, 467, 467, 467, 467, 467, 147, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 147, 147, 147, 467, 467, 467, 147, 147, 467, 467, 467, 467, 467, 467, 467,
        147, 467, 147, 467, 467, 147, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 147, 147, 147, 144, 467, 467, 31, 467,
    ],
    // State(146)
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> HexDigit . Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [}] => State(31)
    //   [2..9, A..F, a..f] => State(144)
    //   [1] => State(145)
    //   [0] => State(146)
    [
        467, 467, 467, 31, 467, 467, 467, 467, 467, 467, 467, 144, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 144, 144, 144, 467, 467, 467, 144, 144, 467, 467, 467, 467, 467, 467, 467,
        144, 467, 144, 467, 467, 144, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 145, 144, 144, 146, 467, 467, 31, 467,
    ],
    // State(147)
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [}] => State(31)
    //   [0..9, A..F, a..f] => State(148)
    [
        467, 467, 467, 31, 467, 467, 467, 467, 467, 467, 467, 148, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 148, 148, 148, 467, 467, 467, 148, 148, 467, 467, 467, 467, 467, 467, 467,
        148, 467, 148, 467, 467, 148, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 148, 148, 148, 148, 467, 467, 31, 467,
    ],
    // State(148)
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions
    //   [}] => State(31)
    //   [0..9, A..F, a..f] => State(154)
    [
        467, 467, 467, 31, 467, 467, 467, 467, 467, 467, 467, 154, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 154, 154, 154, 467, 467, 467, 154, 154, 467, 467, 467, 467, 467, 467, 467,
        154, 467, 154, 467, 467, 154, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 154, 154, 154, 154, 467, 467, 31, 467,
    ],
    // State(149)
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   CodePoint -> [1] [0] . Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [}] => State(32)
    //   [0..9, A..F, a..f] => State(152)
    [
        467, 467, 467, 32, 467, 467, 467, 467, 467, 467, 467, 152, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 152, 152, 152, 467, 467, 467, 152, 152, 467, 467, 467, 467, 467, 467, 467,
        152, 467, 152, 467, 467, 152, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 152, 152, 152, 152, 467, 467, 32, 467,
    ],
    // State(150)
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> [1] . [0] Hex4Digits
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [}] => State(32)
    //   [0] => State(149)
    //   [1..9, A..F, a..f] => State(152)
    [
        467, 467, 467, 32, 467, 467, 467, 467, 467, 467, 467, 152, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 152, 152, 152, 467, 467, 467, 152, 152, 467, 467, 467, 467, 467, 467, 467,
        152, 467, 152, 467, 467, 152, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 152, 152, 152, 149, 467, 467, 32, 467,
    ],
    // State(151)
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> HexDigit . Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [}] => State(32)
    //   [2..9, A..F, a..f] => State(149)
    //   [1] => State(150)
    //   [0] => State(151)
    [
        467, 467, 467, 32, 467, 467, 467, 467, 467, 467, 467, 149, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 149, 149, 149, 467, 467, 467, 149, 149, 467, 467, 467, 467, 467, 467, 467,
        149, 467, 149, 467, 467, 149, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 150, 149, 149, 151, 467, 467, 32, 467,
    ],
    // State(152)
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [}] => State(32)
    //   [0..9, A..F, a..f] => State(153)
    [
        467, 467, 467, 32, 467, 467, 467, 467, 467, 467, 467, 153, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 153, 153, 153, 467, 467, 467, 153, 153, 467, 467, 467, 467, 467, 467, 467,
        153, 467, 153, 467, 467, 153, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 153, 153, 153, 153, 467, 467, 32, 467,
    ],
    // State(153)
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions
    //   [}] => State(32)
    //   [0..9, A..F, a..f] => State(155)
    [
        467, 467, 467, 32, 467, 467, 467, 467, 467, 467, 467, 155, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 155, 155, 155, 467, 467, 467, 155, 155, 467, 467, 467, 467, 467, 467, 467,
        155, 467, 155, 467, 467, 155, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 155, 155, 155, 155, 467, 467, 32, 467,
    ],
    // State(154)
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions
    //   [}] => State(31)
    //   [0..9, A..F, a..f] => State(159)
    [
        467, 467, 467, 31, 467, 467, 467, 467, 467, 467, 467, 159, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 159, 159, 159, 467, 467, 467, 159, 159, 467, 467, 467, 467, 467, 467, 467,
        159, 467, 159, 467, 467, 159, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 159, 159, 159, 159, 467, 467, 31, 467,
    ],
    // State(155)
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions
    //   [}] => State(32)
    //   [0..9, A..F, a..f] => State(160)
    [
        467, 467, 467, 32, 467, 467, 467, 467, 467, 467, 467, 160, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 160, 160, 160, 467, 467, 467, 160, 160, 467, 467, 467, 467, 467, 467, 467,
        160, 467, 160, 467, 467, 160, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 160, 160, 160, 160, 467, 467, 32, 467,
    ],
    // State(156)
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions
    //   [0..9, A..F, a..f] => State(395):PrivateIdentifier
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 395, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 395, 395, 395, 467, 467, 467, 395, 395, 467, 467, 467, 467, 467, 467, 467,
        395, 467, 395, 467, 467, 395, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 395, 395, 395, 395, 467, 467, 395, 467,
    ],
    // State(157)
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions
    //   [}] => State(222):IdentifierName
    [
        467, 467, 467, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 467,
    ],
    // State(158)
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions
    //   [}] => State(395):PrivateIdentifier
    [
        467, 467, 467, 395, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 395, 467,
    ],
    // State(159)
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions
    //   [}] => State(31)
    [
        467, 467, 467, 31, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 31, 467,
    ],
    // State(160)
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions
    //   [}] => State(32)
    [
        467, 467, 467, 32, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 32, 467,
    ],
    // State(161)
    //   WhiteSpaceSequence -> WhiteSpace . WhiteSpaceSequence
    //   WhiteSpaceSequence -> WhiteSpace .
    //   WhiteSpaceSequence -> . WhiteSpace
    //   WhiteSpace -> [<TAB> <VT> <FF> <ZWNBSP> <USP>] .
    //   WhiteSpace -> . [<TAB> <VT> <FF> <ZWNBSP> <USP>]
    //   WhiteSpaceSequence -> WhiteSpace WhiteSpaceSequence .
    //   WhiteSpaceSequence -> . WhiteSpace WhiteSpaceSequence
    // Transitions
    //   [<HT>, <VT>..<FF>, <SP>, U+00A0, U+1680, U+2000..U+200A, U+200F, U+205F, U+FEFF] => State(161):WhiteSpaceSequence
    [
        467, 467, 467, 467, 467, 467, 467, 467, 161, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 161, 467,
    ],
    // State(162)
    //   LineTerminatorSequence -> [<LF>] .
    //   LineTerminatorSequence -> [<LS>] .
    //   LineTerminatorSequence -> [<PS>] .
    //   LineTerminatorSequence -> [<CR>] [<LF>] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(163)
    //   LineTerminatorSequence -> [<CR>] ?![<LF>] .
    //   LineTerminatorSequence -> [<CR>] . ?![<LF>]
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(164)
    //   Comment -> SingleLineComment .
    //   SingleLineComment -> [/] [/] .
    //   SingleLineCommentChars -> SingleLineCommentChar . SingleLineCommentChars
    //   SingleLineComment -> [/] [/] . SingleLineCommentChars
    //   SingleLineCommentChars -> . SingleLineCommentChar
    //   SingleLineCommentChar -> . [SourceCharacter -LineTerminator]
    //   SingleLineCommentChars -> . SingleLineCommentChar SingleLineCommentChars
    //   SingleLineComment -> [/] [/] SingleLineCommentChars .
    //   SingleLineCommentChars -> SingleLineCommentChar .
    //   SingleLineCommentChar -> [SourceCharacter -LineTerminator] .
    //   SingleLineCommentChars -> SingleLineCommentChar SingleLineCommentChars .
    // Transitions
    //   [<NUL>..<HT>, <VT>..<FF>, <SO>..U+2027, U+202A..U+10FFFF] => State(164):Comment
    [
        467, 164, 164, 164, 164, 164, 164, 164, 164, 467, 467, 164, 164, 164, 164, 164, 164, 164,
        164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
        164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
        164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 467,
    ],
    // State(165)
    //   Comment -> MultiLineComment .
    //   MultiLineComment -> [/] [*] [*] [/] .
    //   MultiLineComment -> [/] [*] MultiLineCommentChars [*] [/] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(166)
    //   BREAK -> [b] [r] [e] [a] [k] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(167)
    //   CASE -> [c] [a] [s] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(168)
    //   CATCH -> [c] [a] [t] [c] [h] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(169)
    //   CLASS -> [c] [l] [a] [s] [s] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(170)
    //   CONST -> [c] [o] [n] [s] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(171)
    //   CONTINUE -> [c] [o] [n] [t] [i] [n] [u] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(172)
    //   DEBUGGER -> [d] [e] [b] [u] [g] [g] [e] [r] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(173)
    //   DEFAULT -> [d] [e] [f] [a] [u] [l] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(174)
    //   DELETE -> [d] [e] [l] [e] [t] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(175)
    //   DO -> [d] [o] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(176)
    //   ELSE -> [e] [l] [s] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(177)
    //   ENUM -> [e] [n] [u] [m] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(178)
    //   EXPORT -> [e] [x] [p] [o] [r] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(179)
    //   EXTENDS -> [e] [x] [t] [e] [n] [d] [s] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(180)
    //   FALSE -> [f] [a] [l] [s] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(181)
    //   FINALLY -> [f] [i] [n] [a] [l] [l] [y] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(182)
    //   FOR -> [f] [o] [r] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(183)
    //   FUNCTION -> [f] [u] [n] [c] [t] [i] [o] [n] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(184)
    //   IF -> [i] [f] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(185)
    //   IMPORT -> [i] [m] [p] [o] [r] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(186)
    //   IN -> [i] [n] .
    //   INSTANCEOF -> [i] [n] . [s] [t] [a] [n] [c] [e] [o] [f]
    //   INTERFACE -> [i] [n] . [t] [e] [r] [f] [a] [c] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..r, u..z, U+200C..U+200D] => State(222):IdentifierName
    //   [s] => State(223):IdentifierName
    //   [t] => State(225):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 223, 225, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(187)
    //   INSTANCEOF -> [i] [n] [s] [t] [a] [n] [c] [e] [o] [f] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(188)
    //   NEW -> [n] [e] [w] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(189)
    //   NULL -> [n] [u] [l] [l] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(190)
    //   RETURN -> [r] [e] [t] [u] [r] [n] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(191)
    //   SUPER -> [s] [u] [p] [e] [r] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(192)
    //   SWITCH -> [s] [w] [i] [t] [c] [h] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(193)
    //   THIS -> [t] [h] [i] [s] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(194)
    //   THROW -> [t] [h] [r] [o] [w] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(195)
    //   TRUE -> [t] [r] [u] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(196)
    //   TRY -> [t] [r] [y] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(197)
    //   TYPEOF -> [t] [y] [p] [e] [o] [f] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(198)
    //   VAR -> [v] [a] [r] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(199)
    //   VOID -> [v] [o] [i] [d] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(200)
    //   WHILE -> [w] [h] [i] [l] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(201)
    //   WITH -> [w] [i] [t] [h] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(202)
    //   AWAIT -> [a] [w] [a] [i] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(203)
    //   YIELD -> [y] [i] [e] [l] [d] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(204)
    //   LET -> [l] [e] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(205)
    //   STATIC -> [s] [t] [a] [t] [i] [c] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(206)
    //   IMPLEMENTS -> [i] [m] [p] [l] [e] [m] [e] [n] [t] [s] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(207)
    //   INTERFACE -> [i] [n] [t] [e] [r] [f] [a] [c] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(208)
    //   PACKAGE -> [p] [a] [c] [k] [a] [g] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(209)
    //   PRIVATE -> [p] [r] [i] [v] [a] [t] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(210)
    //   PROTECTED -> [p] [r] [o] [t] [e] [c] [t] [e] [d] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(211)
    //   PUBLIC -> [p] [u] [b] [l] [i] [c] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(212)
    //   AS -> [a] [s] .
    //   ASYNC -> [a] [s] . [y] [n] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..x, z, U+200C..U+200D] => State(222):IdentifierName
    //   [y] => State(311):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 311, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(213)
    //   ASYNC -> [a] [s] [y] [n] [c] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(214)
    //   FROM -> [f] [r] [o] [m] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(215)
    //   GET -> [g] [e] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(216)
    //   META -> [m] [e] [t] [a] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(217)
    //   OF -> [o] [f] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(218)
    //   SET -> [s] [e] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(219)
    //   TARGET -> [t] [a] [r] [g] [e] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(220)
    //   BREAK -> [b] . [r] [e] [a] [k]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(222):IdentifierName
    //   [r] => State(265):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 265, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(221)
    //   RETURN -> [r] . [e] [t] [u] [r] [n]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(222):IdentifierName
    //   [e] => State(240):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 240, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(222)
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    //   IdentifierStartChar -> [$] .
    //   IdentifierStartChar -> [_] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   IdentifierPartChar -> [$] .
    //   IdentifierPartChar -> [<ZWNJ>] .
    //   IdentifierPartChar -> [<ZWJ>] .
    //   IdentifierStart -> [\] UnicodeEscapeSequence .
    //   UnicodeEscapeSequence -> [u] [{] CodePoint [}] .
    //   IdentifierPart -> [\] UnicodeEscapeSequence .
    //   UnicodeEscapeSequence -> [u] Hex4Digits .
    //   Hex4Digits -> HexDigit HexDigit HexDigit HexDigit .
    //   HexDigit -> [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F] .
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(223)
    //   INSTANCEOF -> [i] [n] [s] . [t] [a] [n] [c] [e] [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(222):IdentifierName
    //   [t] => State(227):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 227, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(224)
    //   FUNCTION -> [f] [u] . [n] [c] [t] [i] [o] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(222):IdentifierName
    //   [n] => State(234):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 234, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(225)
    //   INTERFACE -> [i] [n] [t] . [e] [r] [f] [a] [c] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(222):IdentifierName
    //   [e] => State(235):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 235, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(226)
    //   PROTECTED -> [p] [r] [o] . [t] [e] [c] [t] [e] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(222):IdentifierName
    //   [t] => State(236):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 236, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(227)
    //   INSTANCEOF -> [i] [n] [s] [t] . [a] [n] [c] [e] [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(222):IdentifierName
    //   [a] => State(237):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 237, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(228)
    //   IMPLEMENTS -> [i] [m] [p] [l] . [e] [m] [e] [n] [t] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(222):IdentifierName
    //   [e] => State(238):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 238, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(229)
    //   PACKAGE -> [p] . [a] [c] [k] [a] [g] [e]
    //   PRIVATE -> [p] . [r] [i] [v] [a] [t] [e]
    //   PROTECTED -> [p] . [r] [o] [t] [e] [c] [t] [e] [d]
    //   PUBLIC -> [p] . [u] [b] [l] [i] [c]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, b..q, s..t, v..z, U+200C..U+200D] => State(222):IdentifierName
    //   [r] => State(231):IdentifierName
    //   [a] => State(232):IdentifierName
    //   [u] => State(248):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 231, 248, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 232, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(230)
    //   FINALLY -> [f] [i] . [n] [a] [l] [l] [y]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(222):IdentifierName
    //   [n] => State(251):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 251, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(231)
    //   PRIVATE -> [p] [r] . [i] [v] [a] [t] [e]
    //   PROTECTED -> [p] [r] . [o] [t] [e] [c] [t] [e] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..h, j..n, p..z, U+200C..U+200D] => State(222):IdentifierName
    //   [o] => State(226):IdentifierName
    //   [i] => State(252):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 226, 252, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(232)
    //   PACKAGE -> [p] [a] . [c] [k] [a] [g] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(222):IdentifierName
    //   [c] => State(253):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 253, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(233)
    //   DEBUGGER -> [d] [e] [b] . [u] [g] [g] [e] [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..t, v..z, U+200C..U+200D] => State(222):IdentifierName
    //   [u] => State(255):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 255, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(234)
    //   FUNCTION -> [f] [u] [n] . [c] [t] [i] [o] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(222):IdentifierName
    //   [c] => State(256):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 256, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(235)
    //   INTERFACE -> [i] [n] [t] [e] . [r] [f] [a] [c] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(222):IdentifierName
    //   [r] => State(257):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 257, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(236)
    //   PROTECTED -> [p] [r] [o] [t] . [e] [c] [t] [e] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(222):IdentifierName
    //   [e] => State(258):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 258, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(237)
    //   INSTANCEOF -> [i] [n] [s] [t] [a] . [n] [c] [e] [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(222):IdentifierName
    //   [n] => State(259):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 259, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(238)
    //   IMPLEMENTS -> [i] [m] [p] [l] [e] . [m] [e] [n] [t] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..l, n..z, U+200C..U+200D] => State(222):IdentifierName
    //   [m] => State(260):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 260, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(239)
    //   YIELD -> [y] . [i] [e] [l] [d]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(222):IdentifierName
    //   [i] => State(271):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 271, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(240)
    //   RETURN -> [r] [e] . [t] [u] [r] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(222):IdentifierName
    //   [t] => State(273):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 273, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(241)
    //   EXPORT -> [e] [x] . [p] [o] [r] [t]
    //   EXTENDS -> [e] [x] . [t] [e] [n] [d] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..o, q..s, u..z, U+200C..U+200D] => State(222):IdentifierName
    //   [t] => State(249):IdentifierName
    //   [p] => State(274):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 274, 222, 222, 222, 222, 222, 222, 249, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(242)
    //   STATIC -> [s] [t] . [a] [t] [i] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(222):IdentifierName
    //   [a] => State(275):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 275, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(243)
    //   SWITCH -> [s] [w] . [i] [t] [c] [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(222):IdentifierName
    //   [i] => State(276):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 276, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(244)
    //   TARGET -> [t] [a] . [r] [g] [e] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(222):IdentifierName
    //   [r] => State(277):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 277, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(245)
    //   TYPEOF -> [t] [y] . [p] [e] [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..o, q..z, U+200C..U+200D] => State(222):IdentifierName
    //   [p] => State(278):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 278, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(246)
    //   IMPORT -> [i] [m] . [p] [o] [r] [t]
    //   IMPLEMENTS -> [i] [m] . [p] [l] [e] [m] [e] [n] [t] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..o, q..z, U+200C..U+200D] => State(222):IdentifierName
    //   [p] => State(279):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 279, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(247)
    //   DEBUGGER -> [d] [e] . [b] [u] [g] [g] [e] [r]
    //   DEFAULT -> [d] [e] . [f] [a] [u] [l] [t]
    //   DELETE -> [d] [e] . [l] [e] [t] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a, c..e, g..k, m..z, U+200C..U+200D] => State(222):IdentifierName
    //   [b] => State(233):IdentifierName
    //   [f] => State(250):IdentifierName
    //   [l] => State(280):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 233, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 280, 222, 222,
        250, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(248)
    //   PUBLIC -> [p] [u] . [b] [l] [i] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a, c..z, U+200C..U+200D] => State(222):IdentifierName
    //   [b] => State(281):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 281, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(249)
    //   EXTENDS -> [e] [x] [t] . [e] [n] [d] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(222):IdentifierName
    //   [e] => State(282):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 282, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(250)
    //   DEFAULT -> [d] [e] [f] . [a] [u] [l] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(222):IdentifierName
    //   [a] => State(283):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 283, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(251)
    //   FINALLY -> [f] [i] [n] . [a] [l] [l] [y]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(222):IdentifierName
    //   [a] => State(284):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 284, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(252)
    //   PRIVATE -> [p] [r] [i] . [v] [a] [t] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..u, w..z, U+200C..U+200D] => State(222):IdentifierName
    //   [v] => State(285):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 285, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(253)
    //   PACKAGE -> [p] [a] [c] . [k] [a] [g] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..j, l..z, U+200C..U+200D] => State(222):IdentifierName
    //   [k] => State(286):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 286, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(254)
    //   CONTINUE -> [c] [o] [n] [t] . [i] [n] [u] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(222):IdentifierName
    //   [i] => State(287):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 287, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(255)
    //   DEBUGGER -> [d] [e] [b] [u] . [g] [g] [e] [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..f, h..z, U+200C..U+200D] => State(222):IdentifierName
    //   [g] => State(288):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 288,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(256)
    //   FUNCTION -> [f] [u] [n] [c] . [t] [i] [o] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(222):IdentifierName
    //   [t] => State(289):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 289, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(257)
    //   INTERFACE -> [i] [n] [t] [e] [r] . [f] [a] [c] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..e, g..z, U+200C..U+200D] => State(222):IdentifierName
    //   [f] => State(290):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        290, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(258)
    //   PROTECTED -> [p] [r] [o] [t] [e] . [c] [t] [e] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(222):IdentifierName
    //   [c] => State(291):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 291, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(259)
    //   INSTANCEOF -> [i] [n] [s] [t] [a] [n] . [c] [e] [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(222):IdentifierName
    //   [c] => State(292):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 292, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(260)
    //   IMPLEMENTS -> [i] [m] [p] [l] [e] [m] . [e] [n] [t] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(222):IdentifierName
    //   [e] => State(293):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 293, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(261)
    //   ELSE -> [e] . [l] [s] [e]
    //   ENUM -> [e] . [n] [u] [m]
    //   EXPORT -> [e] . [x] [p] [o] [r] [t]
    //   EXTENDS -> [e] . [x] [t] [e] [n] [d] [s]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..k, m, o..w, y..z, U+200C..U+200D] => State(222):IdentifierName
    //   [x] => State(241):IdentifierName
    //   [l] => State(301):IdentifierName
    //   [n] => State(302):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 241, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 301, 302, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(262)
    //   CASE -> [c] . [a] [s] [e]
    //   CATCH -> [c] . [a] [t] [c] [h]
    //   CLASS -> [c] . [l] [a] [s] [s]
    //   CONST -> [c] . [o] [n] [s] [t]
    //   CONTINUE -> [c] . [o] [n] [t] [i] [n] [u] [e]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, b..k, m..n, p..z, U+200C..U+200D] => State(222):IdentifierName
    //   [l] => State(267):IdentifierName
    //   [o] => State(268):IdentifierName
    //   [a] => State(303):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 267, 222, 222,
        222, 222, 303, 268, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(263)
    //   META -> [m] . [e] [t] [a]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(222):IdentifierName
    //   [e] => State(307):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 307, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(264)
    //   WHILE -> [w] . [h] [i] [l] [e]
    //   WITH -> [w] . [i] [t] [h]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..g, j..z, U+200C..U+200D] => State(222):IdentifierName
    //   [h] => State(272):IdentifierName
    //   [i] => State(308):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        272, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 308, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(265)
    //   BREAK -> [b] [r] . [e] [a] [k]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(222):IdentifierName
    //   [e] => State(310):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 310, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(266)
    //   AWAIT -> [a] [w] . [a] [i] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(222):IdentifierName
    //   [a] => State(312):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 312, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(267)
    //   CLASS -> [c] [l] . [a] [s] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(222):IdentifierName
    //   [a] => State(314):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 314, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(268)
    //   CONST -> [c] [o] . [n] [s] [t]
    //   CONTINUE -> [c] [o] . [n] [t] [i] [n] [u] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(222):IdentifierName
    //   [n] => State(315):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 315, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(269)
    //   SUPER -> [s] [u] . [p] [e] [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..o, q..z, U+200C..U+200D] => State(222):IdentifierName
    //   [p] => State(316):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 316, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(270)
    //   FALSE -> [f] [a] . [l] [s] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(222):IdentifierName
    //   [l] => State(318):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 318, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(271)
    //   YIELD -> [y] [i] . [e] [l] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(222):IdentifierName
    //   [e] => State(319):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 319, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(272)
    //   WHILE -> [w] [h] . [i] [l] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(222):IdentifierName
    //   [i] => State(320):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 320, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(273)
    //   RETURN -> [r] [e] [t] . [u] [r] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..t, v..z, U+200C..U+200D] => State(222):IdentifierName
    //   [u] => State(321):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 321, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(274)
    //   EXPORT -> [e] [x] [p] . [o] [r] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..n, p..z, U+200C..U+200D] => State(222):IdentifierName
    //   [o] => State(322):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 322, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(275)
    //   STATIC -> [s] [t] [a] . [t] [i] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(222):IdentifierName
    //   [t] => State(323):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 323, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(276)
    //   SWITCH -> [s] [w] [i] . [t] [c] [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(222):IdentifierName
    //   [t] => State(324):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 324, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(277)
    //   TARGET -> [t] [a] [r] . [g] [e] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..f, h..z, U+200C..U+200D] => State(222):IdentifierName
    //   [g] => State(325):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 325,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(278)
    //   TYPEOF -> [t] [y] [p] . [e] [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(222):IdentifierName
    //   [e] => State(326):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 326, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(279)
    //   IMPORT -> [i] [m] [p] . [o] [r] [t]
    //   IMPLEMENTS -> [i] [m] [p] . [l] [e] [m] [e] [n] [t] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..k, m..n, p..z, U+200C..U+200D] => State(222):IdentifierName
    //   [l] => State(228):IdentifierName
    //   [o] => State(327):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 228, 222, 222,
        222, 222, 222, 327, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(280)
    //   DELETE -> [d] [e] [l] . [e] [t] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(222):IdentifierName
    //   [e] => State(328):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 328, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(281)
    //   PUBLIC -> [p] [u] [b] . [l] [i] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(222):IdentifierName
    //   [l] => State(329):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 329, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(282)
    //   EXTENDS -> [e] [x] [t] [e] . [n] [d] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(222):IdentifierName
    //   [n] => State(330):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 330, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(283)
    //   DEFAULT -> [d] [e] [f] [a] . [u] [l] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..t, v..z, U+200C..U+200D] => State(222):IdentifierName
    //   [u] => State(331):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 331, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(284)
    //   FINALLY -> [f] [i] [n] [a] . [l] [l] [y]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(222):IdentifierName
    //   [l] => State(332):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 332, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(285)
    //   PRIVATE -> [p] [r] [i] [v] . [a] [t] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(222):IdentifierName
    //   [a] => State(333):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 333, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(286)
    //   PACKAGE -> [p] [a] [c] [k] . [a] [g] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(222):IdentifierName
    //   [a] => State(334):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 334, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(287)
    //   CONTINUE -> [c] [o] [n] [t] [i] . [n] [u] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(222):IdentifierName
    //   [n] => State(335):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 335, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(288)
    //   DEBUGGER -> [d] [e] [b] [u] [g] . [g] [e] [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..f, h..z, U+200C..U+200D] => State(222):IdentifierName
    //   [g] => State(336):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 336,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(289)
    //   FUNCTION -> [f] [u] [n] [c] [t] . [i] [o] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(222):IdentifierName
    //   [i] => State(337):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 337, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(290)
    //   INTERFACE -> [i] [n] [t] [e] [r] [f] . [a] [c] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(222):IdentifierName
    //   [a] => State(338):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 338, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(291)
    //   PROTECTED -> [p] [r] [o] [t] [e] [c] . [t] [e] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(222):IdentifierName
    //   [t] => State(339):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 339, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(292)
    //   INSTANCEOF -> [i] [n] [s] [t] [a] [n] [c] . [e] [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(222):IdentifierName
    //   [e] => State(340):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 340, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(293)
    //   IMPLEMENTS -> [i] [m] [p] [l] [e] [m] [e] . [n] [t] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(222):IdentifierName
    //   [n] => State(341):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 341, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(294)
    //   SUPER -> [s] . [u] [p] [e] [r]
    //   SWITCH -> [s] . [w] [i] [t] [c] [h]
    //   STATIC -> [s] . [t] [a] [t] [i] [c]
    //   SET -> [s] . [e] [t]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..s, v, x..z, U+200C..U+200D] => State(222):IdentifierName
    //   [t] => State(242):IdentifierName
    //   [w] => State(243):IdentifierName
    //   [u] => State(269):IdentifierName
    //   [e] => State(346):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 269, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 346, 222, 222, 243, 222, 242, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(295)
    //   THIS -> [t] . [h] [i] [s]
    //   THROW -> [t] . [h] [r] [o] [w]
    //   TRUE -> [t] . [r] [u] [e]
    //   TRY -> [t] . [r] [y]
    //   TYPEOF -> [t] . [y] [p] [e] [o] [f]
    //   TARGET -> [t] . [a] [r] [g] [e] [t]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, b..g, i..q, s..x, z, U+200C..U+200D] => State(222):IdentifierName
    //   [a] => State(244):IdentifierName
    //   [y] => State(245):IdentifierName
    //   [h] => State(304):IdentifierName
    //   [r] => State(347):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 347, 222, 222, 222, 222, 222,
        304, 222, 222, 222, 222, 222, 222, 222, 245, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 244, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(296)
    //   LET -> [l] . [e] [t]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(222):IdentifierName
    //   [e] => State(348):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 348, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(297)
    //   NEW -> [n] . [e] [w]
    //   NULL -> [n] . [u] [l] [l]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..t, v..z, U+200C..U+200D] => State(222):IdentifierName
    //   [u] => State(305):IdentifierName
    //   [e] => State(349):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 305, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 349, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(298)
    //   GET -> [g] . [e] [t]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(222):IdentifierName
    //   [e] => State(350):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 350, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(299)
    //   FALSE -> [f] . [a] [l] [s] [e]
    //   FINALLY -> [f] . [i] [n] [a] [l] [l] [y]
    //   FOR -> [f] . [o] [r]
    //   FUNCTION -> [f] . [u] [n] [c] [t] [i] [o] [n]
    //   FROM -> [f] . [r] [o] [m]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, b..h, j..n, p..q, s..t, v..z, U+200C..U+200D] => State(222):IdentifierName
    //   [u] => State(224):IdentifierName
    //   [i] => State(230):IdentifierName
    //   [a] => State(270):IdentifierName
    //   [r] => State(306):IdentifierName
    //   [o] => State(351):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 306, 224, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 270, 351, 230, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(300)
    //   VAR -> [v] . [a] [r]
    //   VOID -> [v] . [o] [i] [d]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, b..n, p..z, U+200C..U+200D] => State(222):IdentifierName
    //   [o] => State(309):IdentifierName
    //   [a] => State(352):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 352, 309, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(301)
    //   ELSE -> [e] [l] . [s] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..r, t..z, U+200C..U+200D] => State(222):IdentifierName
    //   [s] => State(353):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 353, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(302)
    //   ENUM -> [e] [n] . [u] [m]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..t, v..z, U+200C..U+200D] => State(222):IdentifierName
    //   [u] => State(354):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 354, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(303)
    //   CASE -> [c] [a] . [s] [e]
    //   CATCH -> [c] [a] . [t] [c] [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..r, u..z, U+200C..U+200D] => State(222):IdentifierName
    //   [t] => State(313):IdentifierName
    //   [s] => State(355):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 355, 313, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(304)
    //   THIS -> [t] [h] . [i] [s]
    //   THROW -> [t] [h] . [r] [o] [w]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..h, j..q, s..z, U+200C..U+200D] => State(222):IdentifierName
    //   [r] => State(317):IdentifierName
    //   [i] => State(357):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 317, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 357, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(305)
    //   NULL -> [n] [u] . [l] [l]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(222):IdentifierName
    //   [l] => State(358):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 358, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(306)
    //   FROM -> [f] [r] . [o] [m]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..n, p..z, U+200C..U+200D] => State(222):IdentifierName
    //   [o] => State(359):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 359, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(307)
    //   META -> [m] [e] . [t] [a]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(222):IdentifierName
    //   [t] => State(360):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 360, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(308)
    //   WITH -> [w] [i] . [t] [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(222):IdentifierName
    //   [t] => State(361):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 361, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(309)
    //   VOID -> [v] [o] . [i] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(222):IdentifierName
    //   [i] => State(362):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 362, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(310)
    //   BREAK -> [b] [r] [e] . [a] [k]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(222):IdentifierName
    //   [a] => State(363):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 363, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(311)
    //   ASYNC -> [a] [s] [y] . [n] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(222):IdentifierName
    //   [n] => State(364):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 364, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(312)
    //   AWAIT -> [a] [w] [a] . [i] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(222):IdentifierName
    //   [i] => State(365):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 365, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(313)
    //   CATCH -> [c] [a] [t] . [c] [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(222):IdentifierName
    //   [c] => State(366):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 366, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(314)
    //   CLASS -> [c] [l] [a] . [s] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..r, t..z, U+200C..U+200D] => State(222):IdentifierName
    //   [s] => State(367):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 367, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(315)
    //   CONST -> [c] [o] [n] . [s] [t]
    //   CONTINUE -> [c] [o] [n] . [t] [i] [n] [u] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..r, u..z, U+200C..U+200D] => State(222):IdentifierName
    //   [t] => State(254):IdentifierName
    //   [s] => State(368):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 368, 254, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(316)
    //   SUPER -> [s] [u] [p] . [e] [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(222):IdentifierName
    //   [e] => State(369):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 369, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(317)
    //   THROW -> [t] [h] [r] . [o] [w]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..n, p..z, U+200C..U+200D] => State(222):IdentifierName
    //   [o] => State(370):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 370, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(318)
    //   FALSE -> [f] [a] [l] . [s] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..r, t..z, U+200C..U+200D] => State(222):IdentifierName
    //   [s] => State(371):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 371, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(319)
    //   YIELD -> [y] [i] [e] . [l] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(222):IdentifierName
    //   [l] => State(372):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 372, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(320)
    //   WHILE -> [w] [h] [i] . [l] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(222):IdentifierName
    //   [l] => State(373):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 373, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(321)
    //   RETURN -> [r] [e] [t] [u] . [r] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(222):IdentifierName
    //   [r] => State(374):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 374, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(322)
    //   EXPORT -> [e] [x] [p] [o] . [r] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(222):IdentifierName
    //   [r] => State(375):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 375, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(323)
    //   STATIC -> [s] [t] [a] [t] . [i] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(222):IdentifierName
    //   [i] => State(376):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 376, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(324)
    //   SWITCH -> [s] [w] [i] [t] . [c] [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(222):IdentifierName
    //   [c] => State(377):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 377, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(325)
    //   TARGET -> [t] [a] [r] [g] . [e] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(222):IdentifierName
    //   [e] => State(378):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 378, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(326)
    //   TYPEOF -> [t] [y] [p] [e] . [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..n, p..z, U+200C..U+200D] => State(222):IdentifierName
    //   [o] => State(379):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 379, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(327)
    //   IMPORT -> [i] [m] [p] [o] . [r] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(222):IdentifierName
    //   [r] => State(380):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 380, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(328)
    //   DELETE -> [d] [e] [l] [e] . [t] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(222):IdentifierName
    //   [t] => State(381):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 381, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(329)
    //   PUBLIC -> [p] [u] [b] [l] . [i] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(222):IdentifierName
    //   [i] => State(382):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 382, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(330)
    //   EXTENDS -> [e] [x] [t] [e] [n] . [d] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..c, e..z, U+200C..U+200D] => State(222):IdentifierName
    //   [d] => State(383):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 383, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(331)
    //   DEFAULT -> [d] [e] [f] [a] [u] . [l] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(222):IdentifierName
    //   [l] => State(384):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 384, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(332)
    //   FINALLY -> [f] [i] [n] [a] [l] . [l] [y]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(222):IdentifierName
    //   [l] => State(385):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 385, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(333)
    //   PRIVATE -> [p] [r] [i] [v] [a] . [t] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(222):IdentifierName
    //   [t] => State(386):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 386, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(334)
    //   PACKAGE -> [p] [a] [c] [k] [a] . [g] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..f, h..z, U+200C..U+200D] => State(222):IdentifierName
    //   [g] => State(387):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 387,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(335)
    //   CONTINUE -> [c] [o] [n] [t] [i] [n] . [u] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..t, v..z, U+200C..U+200D] => State(222):IdentifierName
    //   [u] => State(388):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 388, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(336)
    //   DEBUGGER -> [d] [e] [b] [u] [g] [g] . [e] [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(222):IdentifierName
    //   [e] => State(389):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 389, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(337)
    //   FUNCTION -> [f] [u] [n] [c] [t] [i] . [o] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..n, p..z, U+200C..U+200D] => State(222):IdentifierName
    //   [o] => State(390):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 390, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(338)
    //   INTERFACE -> [i] [n] [t] [e] [r] [f] [a] . [c] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(222):IdentifierName
    //   [c] => State(391):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 391, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(339)
    //   PROTECTED -> [p] [r] [o] [t] [e] [c] [t] . [e] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(222):IdentifierName
    //   [e] => State(392):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 392, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(340)
    //   INSTANCEOF -> [i] [n] [s] [t] [a] [n] [c] [e] . [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..n, p..z, U+200C..U+200D] => State(222):IdentifierName
    //   [o] => State(393):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 393, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(341)
    //   IMPLEMENTS -> [i] [m] [p] [l] [e] [m] [e] [n] . [t] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(222):IdentifierName
    //   [t] => State(394):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 394, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(342)
    //   AWAIT -> [a] . [w] [a] [i] [t]
    //   AS -> [a] . [s]
    //   ASYNC -> [a] . [s] [y] [n] [c]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [s] => State(212):AS
    //   [$, 0..9, A..Z, _, a..r, t..v, x..z, U+200C..U+200D] => State(222):IdentifierName
    //   [w] => State(266):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 266, 212, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(343)
    //   OF -> [o] . [f]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [f] => State(217):OF
    //   [$, 0..9, A..Z, _, a..e, g..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        217, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(344)
    //   IF -> [i] . [f]
    //   IMPORT -> [i] . [m] [p] [o] [r] [t]
    //   IN -> [i] . [n]
    //   INSTANCEOF -> [i] . [n] [s] [t] [a] [n] [c] [e] [o] [f]
    //   IMPLEMENTS -> [i] . [m] [p] [l] [e] [m] [e] [n] [t] [s]
    //   INTERFACE -> [i] . [n] [t] [e] [r] [f] [a] [c] [e]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [f] => State(184):IF
    //   [n] => State(186):IN
    //   [$, 0..9, A..Z, _, a..e, g..l, o..z, U+200C..U+200D] => State(222):IdentifierName
    //   [m] => State(246):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 246, 222, 222, 222, 222, 186, 222,
        184, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(345)
    //   DEBUGGER -> [d] . [e] [b] [u] [g] [g] [e] [r]
    //   DEFAULT -> [d] . [e] [f] [a] [u] [l] [t]
    //   DELETE -> [d] . [e] [l] [e] [t] [e]
    //   DO -> [d] . [o]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [o] => State(175):DO
    //   [$, 0..9, A..Z, _, a..d, f..n, p..z, U+200C..U+200D] => State(222):IdentifierName
    //   [e] => State(247):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 247, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 175, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(346)
    //   SET -> [s] [e] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [t] => State(218):SET
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 218, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(347)
    //   TRUE -> [t] [r] . [u] [e]
    //   TRY -> [t] [r] . [y]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [y] => State(196):TRY
    //   [$, 0..9, A..Z, _, a..t, v..x, z, U+200C..U+200D] => State(222):IdentifierName
    //   [u] => State(356):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 356, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 196, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(348)
    //   LET -> [l] [e] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [t] => State(204):LET
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 204, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(349)
    //   NEW -> [n] [e] . [w]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [w] => State(188):NEW
    //   [$, 0..9, A..Z, _, a..v, x..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 188, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(350)
    //   GET -> [g] [e] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [t] => State(215):GET
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 215, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(351)
    //   FOR -> [f] [o] . [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [r] => State(182):FOR
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 182, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(352)
    //   VAR -> [v] [a] . [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [r] => State(198):VAR
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 198, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(353)
    //   ELSE -> [e] [l] [s] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [e] => State(176):ELSE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 176, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(354)
    //   ENUM -> [e] [n] [u] . [m]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [m] => State(177):ENUM
    //   [$, 0..9, A..Z, _, a..l, n..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 177, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(355)
    //   CASE -> [c] [a] [s] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [e] => State(167):CASE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 167, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(356)
    //   TRUE -> [t] [r] [u] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [e] => State(195):TRUE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 195, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(357)
    //   THIS -> [t] [h] [i] . [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [s] => State(193):THIS
    //   [$, 0..9, A..Z, _, a..r, t..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 193, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(358)
    //   NULL -> [n] [u] [l] . [l]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [l] => State(189):NULL
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 189, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(359)
    //   FROM -> [f] [r] [o] . [m]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [m] => State(214):FROM
    //   [$, 0..9, A..Z, _, a..l, n..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 214, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(360)
    //   META -> [m] [e] [t] . [a]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [a] => State(216):META
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 216, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(361)
    //   WITH -> [w] [i] [t] . [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [h] => State(201):WITH
    //   [$, 0..9, A..Z, _, a..g, i..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        201, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(362)
    //   VOID -> [v] [o] [i] . [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [d] => State(199):VOID
    //   [$, 0..9, A..Z, _, a..c, e..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 199, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(363)
    //   BREAK -> [b] [r] [e] [a] . [k]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [k] => State(166):BREAK
    //   [$, 0..9, A..Z, _, a..j, l..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 166, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(364)
    //   ASYNC -> [a] [s] [y] [n] . [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [c] => State(213):ASYNC
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 213, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(365)
    //   AWAIT -> [a] [w] [a] [i] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [t] => State(202):AWAIT
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 202, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(366)
    //   CATCH -> [c] [a] [t] [c] . [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [h] => State(168):CATCH
    //   [$, 0..9, A..Z, _, a..g, i..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        168, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(367)
    //   CLASS -> [c] [l] [a] [s] . [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [s] => State(169):CLASS
    //   [$, 0..9, A..Z, _, a..r, t..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 169, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(368)
    //   CONST -> [c] [o] [n] [s] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [t] => State(170):CONST
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 170, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(369)
    //   SUPER -> [s] [u] [p] [e] . [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [r] => State(191):SUPER
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 191, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(370)
    //   THROW -> [t] [h] [r] [o] . [w]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [w] => State(194):THROW
    //   [$, 0..9, A..Z, _, a..v, x..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 194, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(371)
    //   FALSE -> [f] [a] [l] [s] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [e] => State(180):FALSE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 180, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(372)
    //   YIELD -> [y] [i] [e] [l] . [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [d] => State(203):YIELD
    //   [$, 0..9, A..Z, _, a..c, e..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 203, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(373)
    //   WHILE -> [w] [h] [i] [l] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [e] => State(200):WHILE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 200, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(374)
    //   RETURN -> [r] [e] [t] [u] [r] . [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [n] => State(190):RETURN
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 190, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(375)
    //   EXPORT -> [e] [x] [p] [o] [r] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [t] => State(178):EXPORT
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 178, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(376)
    //   STATIC -> [s] [t] [a] [t] [i] . [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [c] => State(205):STATIC
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 205, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(377)
    //   SWITCH -> [s] [w] [i] [t] [c] . [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [h] => State(192):SWITCH
    //   [$, 0..9, A..Z, _, a..g, i..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        192, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(378)
    //   TARGET -> [t] [a] [r] [g] [e] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [t] => State(219):TARGET
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 219, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(379)
    //   TYPEOF -> [t] [y] [p] [e] [o] . [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [f] => State(197):TYPEOF
    //   [$, 0..9, A..Z, _, a..e, g..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        197, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(380)
    //   IMPORT -> [i] [m] [p] [o] [r] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [t] => State(185):IMPORT
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 185, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(381)
    //   DELETE -> [d] [e] [l] [e] [t] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [e] => State(174):DELETE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 174, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(382)
    //   PUBLIC -> [p] [u] [b] [l] [i] . [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [c] => State(211):PUBLIC
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 211, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(383)
    //   EXTENDS -> [e] [x] [t] [e] [n] [d] . [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [s] => State(179):EXTENDS
    //   [$, 0..9, A..Z, _, a..r, t..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 179, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(384)
    //   DEFAULT -> [d] [e] [f] [a] [u] [l] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [t] => State(173):DEFAULT
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 173, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(385)
    //   FINALLY -> [f] [i] [n] [a] [l] [l] . [y]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [y] => State(181):FINALLY
    //   [$, 0..9, A..Z, _, a..x, z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 181, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(386)
    //   PRIVATE -> [p] [r] [i] [v] [a] [t] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [e] => State(209):PRIVATE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 209, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(387)
    //   PACKAGE -> [p] [a] [c] [k] [a] [g] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [e] => State(208):PACKAGE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 208, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(388)
    //   CONTINUE -> [c] [o] [n] [t] [i] [n] [u] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [e] => State(171):CONTINUE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 171, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(389)
    //   DEBUGGER -> [d] [e] [b] [u] [g] [g] [e] . [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [r] => State(172):DEBUGGER
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 172, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(390)
    //   FUNCTION -> [f] [u] [n] [c] [t] [i] [o] . [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [n] => State(183):FUNCTION
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 183, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(391)
    //   INTERFACE -> [i] [n] [t] [e] [r] [f] [a] [c] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [e] => State(207):INTERFACE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 207, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(392)
    //   PROTECTED -> [p] [r] [o] [t] [e] [c] [t] [e] . [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [d] => State(210):PROTECTED
    //   [$, 0..9, A..Z, _, a..c, e..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 210, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(393)
    //   INSTANCEOF -> [i] [n] [s] [t] [a] [n] [c] [e] [o] . [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [f] => State(187):INSTANCEOF
    //   [$, 0..9, A..Z, _, a..e, g..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        187, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(394)
    //   IMPLEMENTS -> [i] [m] [p] [l] [e] [m] [e] [n] [t] . [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [s] => State(206):IMPLEMENTS
    //   [$, 0..9, A..Z, _, a..r, t..z, U+200C..U+200D] => State(222):IdentifierName
    [
        467, 467, 3, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 206, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 222, 222, 222, 222, 222, 467, 3, 467,
    ],
    // State(395)
    //   PrivateIdentifier -> [#] IdentifierName .
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    //   IdentifierStartChar -> [$] .
    //   IdentifierStartChar -> [_] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   IdentifierPartChar -> [$] .
    //   IdentifierPartChar -> [<ZWNJ>] .
    //   IdentifierPartChar -> [<ZWJ>] .
    //   IdentifierStart -> [\] UnicodeEscapeSequence .
    //   UnicodeEscapeSequence -> [u] [{] CodePoint [}] .
    //   IdentifierPart -> [\] UnicodeEscapeSequence .
    //   UnicodeEscapeSequence -> [u] Hex4Digits .
    //   Hex4Digits -> HexDigit HexDigit HexDigit HexDigit .
    //   HexDigit -> [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F] .
    // Transitions
    //   [\] => State(4)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(395):PrivateIdentifier
    [
        467, 467, 4, 467, 467, 467, 467, 467, 467, 467, 467, 395, 395, 395, 395, 395, 395, 395,
        395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
        395, 395, 395, 395, 395, 395, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 395, 395, 395, 395, 395, 467, 4, 467,
    ],
    // State(396)
    //   OPTIONAL_CHAINING -> [?] [.] ?![DecimalDigit] .
    //   OPTIONAL_CHAINING -> [?] [.] . ?![DecimalDigit]
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(397)
    //   LBRACE -> [{] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(398)
    //   LPAREN -> [(] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(399)
    //   RPAREN -> [)] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(400)
    //   LBRACK -> [[] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(401)
    //   RBRACK -> []] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(402)
    //   DOT -> [.] .
    //   ELLIPSIS -> [.] . [.] [.]
    //   DecimalDigits_Sep -> . DecimalDigits_Sep DecimalDigit
    //   DecimalDigits_Sep -> . DecimalDigits_Sep NumericLiteralSeparator DecimalDigit
    //   DecimalLiteral -> [.] . DecimalDigits_Sep
    //   DecimalDigits_Sep -> . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   DecimalLiteral -> [.] . DecimalDigits_Sep ExponentPart_Sep
    // Transitions
    //   [.] => State(80)
    //   [0..9] => State(456):NumericLiteral
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 80, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 456, 456, 456, 456, 467, 467, 80, 467,
    ],
    // State(403)
    //   ELLIPSIS -> [.] [.] [.] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(404)
    //   SEMICOLON -> [;] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(405)
    //   COMMA -> [,] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(406)
    //   LT -> [<] .
    //   LTE -> [<] . [=]
    //   SHL -> [<] . [<]
    //   SHL_ASSIGN -> [<] . [<] [=]
    // Transitions
    //   [=] => State(408):LTE
    //   [<] => State(421):SHL
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 421, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 408, 467, 467, 467, 467, 467, 467, 408, 467,
    ],
    // State(407)
    //   GT -> [>] .
    //   GTE -> [>] . [=]
    //   SAR -> [>] . [>]
    //   SHR -> [>] . [>] [>]
    //   SAR_ASSIGN -> [>] . [>] [=]
    //   SHR_ASSIGN -> [>] . [>] [>] [=]
    // Transitions
    //   [=] => State(409):GTE
    //   [>] => State(422):SAR
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 422, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 409, 467, 467, 467, 467, 467, 467, 409, 467,
    ],
    // State(408)
    //   LTE -> [<] [=] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(409)
    //   GTE -> [>] [=] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(410)
    //   EQ -> [=] [=] .
    //   EQ_STRICT -> [=] [=] . [=]
    // Transitions
    //   [=] => State(412):EQ_STRICT
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 412, 467, 467, 467, 467, 467, 467, 412, 467,
    ],
    // State(411)
    //   NE -> [!] [=] .
    //   NE_STRICT -> [!] [=] . [=]
    // Transitions
    //   [=] => State(413):NE_STRICT
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 413, 467, 467, 467, 467, 467, 467, 413, 467,
    ],
    // State(412)
    //   EQ_STRICT -> [=] [=] [=] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(413)
    //   NE_STRICT -> [!] [=] [=] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(414)
    //   ADD -> [+] .
    //   INC -> [+] . [+]
    //   ADD_ASSIGN -> [+] . [=]
    // Transitions
    //   [+] => State(419):INC
    //   [=] => State(435):ADD_ASSIGN
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 419, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 435, 467, 467, 467, 467, 467, 467, 419, 467,
    ],
    // State(415)
    //   SUB -> [-] .
    //   DEC -> [-] . [-]
    //   SUB_ASSIGN -> [-] . [=]
    // Transitions
    //   [-] => State(420):DEC
    //   [=] => State(436):SUB_ASSIGN
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 420,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 436, 467, 467, 467, 467, 467, 467, 420, 467,
    ],
    // State(416)
    //   MUL -> [*] .
    //   EXP -> [*] . [*]
    //   MUL_ASSIGN -> [*] . [=]
    //   EXP_ASSIGN -> [*] . [*] [=]
    // Transitions
    //   [*] => State(418):EXP
    //   [=] => State(437):MUL_ASSIGN
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        418, 467, 467, 467, 467, 467, 467, 467, 467, 437, 467, 467, 467, 467, 467, 467, 418, 467,
    ],
    // State(417)
    //   MOD -> [%] .
    //   MOD_ASSIGN -> [%] . [=]
    // Transitions
    //   [=] => State(438):MOD_ASSIGN
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 438, 467, 467, 467, 467, 467, 467, 438, 467,
    ],
    // State(418)
    //   EXP -> [*] [*] .
    //   EXP_ASSIGN -> [*] [*] . [=]
    // Transitions
    //   [=] => State(439):EXP_ASSIGN
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 439, 467, 467, 467, 467, 467, 467, 439, 467,
    ],
    // State(419)
    //   INC -> [+] [+] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(420)
    //   DEC -> [-] [-] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(421)
    //   SHL -> [<] [<] .
    //   SHL_ASSIGN -> [<] [<] . [=]
    // Transitions
    //   [=] => State(440):SHL_ASSIGN
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 440, 467, 467, 467, 467, 467, 467, 440, 467,
    ],
    // State(422)
    //   SAR -> [>] [>] .
    //   SHR -> [>] [>] . [>]
    //   SAR_ASSIGN -> [>] [>] . [=]
    //   SHR_ASSIGN -> [>] [>] . [>] [=]
    // Transitions
    //   [>] => State(423):SHR
    //   [=] => State(441):SAR_ASSIGN
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 423, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 441, 467, 467, 467, 467, 467, 467, 423, 467,
    ],
    // State(423)
    //   SHR -> [>] [>] [>] .
    //   SHR_ASSIGN -> [>] [>] [>] . [=]
    // Transitions
    //   [=] => State(442):SHR_ASSIGN
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 442, 467, 467, 467, 467, 467, 467, 442, 467,
    ],
    // State(424)
    //   BIT_AND -> [&] .
    //   AND -> [&] . [&]
    //   BIT_AND_ASSIGN -> [&] . [=]
    //   AND_ASSIGN -> [&] . [&] [=]
    // Transitions
    //   [&] => State(429):AND
    //   [=] => State(443):BIT_AND_ASSIGN
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 429, 467, 467, 467, 467, 467, 467, 443, 467, 467, 467, 467, 467, 467, 429, 467,
    ],
    // State(425)
    //   BIT_OR -> [|] .
    //   OR -> [|] . [|]
    //   BIT_OR_ASSIGN -> [|] . [=]
    //   OR_ASSIGN -> [|] . [|] [=]
    // Transitions
    //   [|] => State(430):OR
    //   [=] => State(444):BIT_OR_ASSIGN
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 430, 467, 467, 467, 467, 467, 444, 467, 467, 467, 467, 467, 467, 430, 467,
    ],
    // State(426)
    //   BIT_XOR -> [^] .
    //   BIT_XOR_ASSIGN -> [^] . [=]
    // Transitions
    //   [=] => State(445):BIT_XOR_ASSIGN
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 445, 467, 467, 467, 467, 467, 467, 445, 467,
    ],
    // State(427)
    //   NE -> [!] . [=]
    //   NE_STRICT -> [!] . [=] [=]
    //   NOT -> [!] .
    // Transitions
    //   [=] => State(411):NE
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 411, 467, 467, 467, 467, 467, 467, 411, 467,
    ],
    // State(428)
    //   BIT_NOT -> [~] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(429)
    //   AND -> [&] [&] .
    //   AND_ASSIGN -> [&] [&] . [=]
    // Transitions
    //   [=] => State(446):AND_ASSIGN
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 446, 467, 467, 467, 467, 467, 467, 446, 467,
    ],
    // State(430)
    //   OR -> [|] [|] .
    //   OR_ASSIGN -> [|] [|] . [=]
    // Transitions
    //   [=] => State(447):OR_ASSIGN
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 447, 467, 467, 467, 467, 467, 467, 447, 467,
    ],
    // State(431)
    //   NULLISH -> [?] [?] .
    //   NULLISH_ASSIGN -> [?] [?] . [=]
    // Transitions
    //   [=] => State(448):NULLISH_ASSIGN
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 448, 467, 467, 467, 467, 467, 467, 448, 467,
    ],
    // State(432)
    //   OPTIONAL_CHAINING -> [?] . [.] ?![DecimalDigit]
    //   NULLISH -> [?] . [?]
    //   CONDITIONAL -> [?] .
    //   NULLISH_ASSIGN -> [?] . [?] [=]
    // Transitions
    //   [.] => State(79)
    //   [?] => State(431):NULLISH
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 79, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 431, 467, 467, 467, 467, 467, 467, 467, 467, 79, 467,
    ],
    // State(433)
    //   COLON -> [:] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(434)
    //   EQ -> [=] . [=]
    //   EQ_STRICT -> [=] . [=] [=]
    //   ASSIGN -> [=] .
    //   ARROW -> [=] . [>]
    // Transitions
    //   [=] => State(410):EQ
    //   [>] => State(449):ARROW
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 449, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 410, 467, 467, 467, 467, 467, 467, 410, 467,
    ],
    // State(435)
    //   ADD_ASSIGN -> [+] [=] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(436)
    //   SUB_ASSIGN -> [-] [=] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(437)
    //   MUL_ASSIGN -> [*] [=] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(438)
    //   MOD_ASSIGN -> [%] [=] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(439)
    //   EXP_ASSIGN -> [*] [*] [=] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(440)
    //   SHL_ASSIGN -> [<] [<] [=] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(441)
    //   SAR_ASSIGN -> [>] [>] [=] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(442)
    //   SHR_ASSIGN -> [>] [>] [>] [=] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(443)
    //   BIT_AND_ASSIGN -> [&] [=] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(444)
    //   BIT_OR_ASSIGN -> [|] [=] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(445)
    //   BIT_XOR_ASSIGN -> [^] [=] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(446)
    //   AND_ASSIGN -> [&] [&] [=] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(447)
    //   OR_ASSIGN -> [|] [|] [=] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(448)
    //   NULLISH_ASSIGN -> [?] [?] [=] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(449)
    //   ARROW -> [=] [>] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(450)
    //   NumericLiteral -> DecimalLiteral .
    //   DecimalDigits_Sep -> . DecimalDigits_Sep DecimalDigit
    //   DecimalDigits_Sep -> . DecimalDigits_Sep NumericLiteralSeparator DecimalDigit
    //   DecimalIntegerLiteral -> NonZeroDigit . DecimalDigits_Sep
    //   DecimalDigits_Sep -> . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   DecimalIntegerLiteral -> NonZeroDigit . NumericLiteralSeparator DecimalDigits_Sep
    //   NumericLiteralSeparator -> . [_]
    //   DecimalLiteral -> DecimalIntegerLiteral . [.]
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] DecimalDigits_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] ExponentPart_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] DecimalDigits_Sep ExponentPart_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral .
    //   DecimalIntegerLiteral -> NonZeroDigit .
    //   NonZeroDigit -> [1 2 3 4 5 6 7 8 9] .
    //   DecimalLiteral -> DecimalIntegerLiteral . ExponentPart_Sep
    //   ExponentPart_Sep -> . ExponentIndicator SignedInteger_Sep
    //   ExponentIndicator -> . [e E]
    //   DecimalBigIntegerLiteral -> NonZeroDigit . BigIntLiteralSuffix
    //   BigIntLiteralSuffix -> . [n]
    //   DecimalBigIntegerLiteral -> NonZeroDigit . DecimalDigits_Sep BigIntLiteralSuffix
    //   DecimalBigIntegerLiteral -> NonZeroDigit . NumericLiteralSeparator DecimalDigits_Sep BigIntLiteralSuffix
    //   DecimalDigits_Sep -> DecimalDigits_Sep . DecimalDigit
    //   DecimalDigits_Sep -> DecimalDigits_Sep . NumericLiteralSeparator DecimalDigit
    //   DecimalIntegerLiteral -> NonZeroDigit DecimalDigits_Sep .
    //   DecimalDigits_Sep -> DecimalDigit .
    //   DecimalDigit -> [0 1 2 3 4 5 6 7 8 9] .
    //   DecimalBigIntegerLiteral -> NonZeroDigit DecimalDigits_Sep . BigIntLiteralSuffix
    //   DecimalIntegerLiteral -> NonZeroDigit NumericLiteralSeparator DecimalDigits_Sep .
    //   DecimalBigIntegerLiteral -> NonZeroDigit NumericLiteralSeparator DecimalDigits_Sep . BigIntLiteralSuffix
    //   DecimalDigits_Sep -> DecimalDigits_Sep DecimalDigit .
    //   DecimalDigits_Sep -> DecimalDigits_Sep NumericLiteralSeparator DecimalDigit .
    // Transitions
    //   [E, e] => State(71)
    //   [_] => State(72)
    //   [0..9] => State(450):NumericLiteral
    //   [n] => State(452):NumericLiteral
    //   [.] => State(453):NumericLiteral
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 72, 467, 467, 467,
        467, 467, 467, 71, 467, 467, 467, 467, 467, 71, 467, 467, 467, 467, 467, 467, 452, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 453, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 450, 450, 450, 450, 467, 467, 71, 467,
    ],
    // State(451)
    //   NumericLiteral -> DecimalLiteral .
    //   NonOctalDecimalIntegerLiteral -> [0] . NonOctalDigit
    //   NonOctalDigit -> . [8 9]
    //   LegacyOctalLikeDecimalIntegerLiteral -> [0] . OctalDigit
    //   OctalDigit -> . [0 1 2 3 4 5 6 7]
    //   DecimalLiteral -> DecimalIntegerLiteral . [.]
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] DecimalDigits_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] ExponentPart_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] DecimalDigits_Sep ExponentPart_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral .
    //   DecimalIntegerLiteral -> [0] .
    //   DecimalLiteral -> DecimalIntegerLiteral . ExponentPart_Sep
    //   ExponentPart_Sep -> . ExponentIndicator SignedInteger_Sep
    //   ExponentIndicator -> . [e E]
    //   DecimalBigIntegerLiteral -> [0] . BigIntLiteralSuffix
    //   BigIntLiteralSuffix -> . [n]
    //   BinaryIntegerLiteral_Sep -> [0] . [b] BinaryDigits_Sep
    //   BinaryIntegerLiteral_Sep -> [0] . [B] BinaryDigits_Sep
    //   OctalIntegerLiteral_Sep -> [0] . [o] OctalDigits_Sep
    //   OctalIntegerLiteral_Sep -> [0] . [O] OctalDigits_Sep
    //   HexIntegerLiteral_Sep -> [0] . [x] HexDigits_Sep
    //   HexIntegerLiteral_Sep -> [0] . [X] HexDigits_Sep
    //   LegacyOctalIntegerLiteral -> [0] . OctalDigit
    // Transitions
    //   [E, e] => State(71)
    //   [B, b] => State(75)
    //   [O, o] => State(76)
    //   [X, x] => State(77)
    //   [n] => State(452):NumericLiteral
    //   [.] => State(453):NumericLiteral
    //   [0..7] => State(454):NumericLiteral
    //   [8..9] => State(455):NumericLiteral
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 75, 467, 467, 467, 76, 77, 467, 467,
        467, 77, 71, 75, 467, 467, 467, 467, 71, 467, 467, 467, 467, 467, 467, 452, 467, 467, 467,
        467, 76, 467, 467, 467, 467, 467, 467, 467, 453, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 454, 454, 455, 454, 467, 467, 71, 467,
    ],
    // State(452)
    //   NumericLiteral -> DecimalBigIntegerLiteral .
    //   DecimalBigIntegerLiteral -> NonZeroDigit BigIntLiteralSuffix .
    //   BigIntLiteralSuffix -> [n] .
    //   DecimalBigIntegerLiteral -> [0] BigIntLiteralSuffix .
    //   DecimalBigIntegerLiteral -> NonZeroDigit DecimalDigits_Sep BigIntLiteralSuffix .
    //   DecimalBigIntegerLiteral -> NonZeroDigit NumericLiteralSeparator DecimalDigits_Sep BigIntLiteralSuffix .
    //   NumericLiteral -> NonDecimalIntegerLiteral_Sep BigIntLiteralSuffix .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(453)
    //   NumericLiteral -> DecimalLiteral .
    //   DecimalLiteral -> DecimalIntegerLiteral [.] .
    //   DecimalDigits_Sep -> . DecimalDigits_Sep DecimalDigit
    //   DecimalDigits_Sep -> . DecimalDigits_Sep NumericLiteralSeparator DecimalDigit
    //   DecimalLiteral -> DecimalIntegerLiteral [.] . DecimalDigits_Sep
    //   DecimalDigits_Sep -> . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   DecimalLiteral -> DecimalIntegerLiteral [.] . ExponentPart_Sep
    //   ExponentPart_Sep -> . ExponentIndicator SignedInteger_Sep
    //   ExponentIndicator -> . [e E]
    //   DecimalLiteral -> DecimalIntegerLiteral [.] . DecimalDigits_Sep ExponentPart_Sep
    // Transitions
    //   [E, e] => State(71)
    //   [0..9] => State(456):NumericLiteral
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 71, 467, 467, 467, 467, 467, 71, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 456, 456, 456, 456, 467, 467, 71, 467,
    ],
    // State(454)
    //   LegacyOctalLikeDecimalIntegerLiteral -> LegacyOctalLikeDecimalIntegerLiteral . OctalDigit
    //   OctalDigit -> . [0 1 2 3 4 5 6 7]
    //   NonOctalDecimalIntegerLiteral -> LegacyOctalLikeDecimalIntegerLiteral . NonOctalDigit
    //   NonOctalDigit -> . [8 9]
    //   NumericLiteral -> LegacyOctalIntegerLiteral .
    //   LegacyOctalIntegerLiteral -> [0] OctalDigit .
    //   OctalDigit -> [0 1 2 3 4 5 6 7] .
    //   LegacyOctalIntegerLiteral -> LegacyOctalIntegerLiteral . OctalDigit
    //   LegacyOctalIntegerLiteral -> LegacyOctalIntegerLiteral OctalDigit .
    // Transitions
    //   [0..7] => State(454):NumericLiteral
    //   [8..9] => State(455):NumericLiteral
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 454, 454, 455, 454, 467, 467, 454, 467,
    ],
    // State(455)
    //   NumericLiteral -> DecimalLiteral .
    //   NonOctalDecimalIntegerLiteral -> NonOctalDecimalIntegerLiteral . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   DecimalLiteral -> DecimalIntegerLiteral . [.]
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] DecimalDigits_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] ExponentPart_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] DecimalDigits_Sep ExponentPart_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral .
    //   DecimalIntegerLiteral -> NonOctalDecimalIntegerLiteral .
    //   NonOctalDecimalIntegerLiteral -> [0] NonOctalDigit .
    //   NonOctalDigit -> [8 9] .
    //   DecimalLiteral -> DecimalIntegerLiteral . ExponentPart_Sep
    //   ExponentPart_Sep -> . ExponentIndicator SignedInteger_Sep
    //   ExponentIndicator -> . [e E]
    //   NonOctalDecimalIntegerLiteral -> LegacyOctalLikeDecimalIntegerLiteral NonOctalDigit .
    //   NonOctalDecimalIntegerLiteral -> NonOctalDecimalIntegerLiteral DecimalDigit .
    //   DecimalDigit -> [0 1 2 3 4 5 6 7 8 9] .
    // Transitions
    //   [E, e] => State(71)
    //   [.] => State(453):NumericLiteral
    //   [0..9] => State(455):NumericLiteral
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 71, 467, 467, 467, 467, 467, 71, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 453, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 455, 455, 455, 455, 467, 467, 71, 467,
    ],
    // State(456)
    //   NumericLiteral -> DecimalLiteral .
    //   DecimalLiteral -> [.] DecimalDigits_Sep .
    //   DecimalDigits_Sep -> DecimalDigit .
    //   DecimalDigit -> [0 1 2 3 4 5 6 7 8 9] .
    //   DecimalDigits_Sep -> DecimalDigits_Sep . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   DecimalDigits_Sep -> DecimalDigits_Sep . NumericLiteralSeparator DecimalDigit
    //   NumericLiteralSeparator -> . [_]
    //   DecimalLiteral -> [.] DecimalDigits_Sep . ExponentPart_Sep
    //   ExponentPart_Sep -> . ExponentIndicator SignedInteger_Sep
    //   ExponentIndicator -> . [e E]
    //   DecimalLiteral -> DecimalIntegerLiteral [.] DecimalDigits_Sep .
    //   DecimalLiteral -> DecimalIntegerLiteral [.] DecimalDigits_Sep . ExponentPart_Sep
    //   DecimalDigits_Sep -> DecimalDigits_Sep DecimalDigit .
    //   DecimalDigits_Sep -> DecimalDigits_Sep NumericLiteralSeparator DecimalDigit .
    // Transitions
    //   [E, e] => State(71)
    //   [_] => State(74)
    //   [0..9] => State(456):NumericLiteral
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 74, 467, 467, 467,
        467, 467, 467, 71, 467, 467, 467, 467, 467, 71, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 456, 456, 456, 456, 467, 467, 71, 467,
    ],
    // State(457)
    //   NumericLiteral -> DecimalLiteral .
    //   DecimalLiteral -> DecimalIntegerLiteral ExponentPart_Sep .
    //   ExponentPart_Sep -> ExponentIndicator SignedInteger_Sep .
    //   SignedInteger_Sep -> DecimalDigits_Sep .
    //   DecimalDigits_Sep -> DecimalDigit .
    //   DecimalDigit -> [0 1 2 3 4 5 6 7 8 9] .
    //   DecimalDigits_Sep -> DecimalDigits_Sep . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   DecimalDigits_Sep -> DecimalDigits_Sep . NumericLiteralSeparator DecimalDigit
    //   NumericLiteralSeparator -> . [_]
    //   DecimalDigits_Sep -> DecimalDigits_Sep DecimalDigit .
    //   SignedInteger_Sep -> [+] DecimalDigits_Sep .
    //   SignedInteger_Sep -> [-] DecimalDigits_Sep .
    //   DecimalLiteral -> DecimalIntegerLiteral [.] ExponentPart_Sep .
    //   DecimalLiteral -> [.] DecimalDigits_Sep ExponentPart_Sep .
    //   DecimalDigits_Sep -> DecimalDigits_Sep NumericLiteralSeparator DecimalDigit .
    //   DecimalLiteral -> DecimalIntegerLiteral [.] DecimalDigits_Sep ExponentPart_Sep .
    // Transitions
    //   [_] => State(73)
    //   [0..9] => State(457):NumericLiteral
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 73, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 457, 457, 457, 457, 467, 467, 73, 467,
    ],
    // State(458)
    //   NumericLiteral -> NonDecimalIntegerLiteral_Sep .
    //   NonDecimalIntegerLiteral_Sep -> BinaryIntegerLiteral_Sep .
    //   BinaryIntegerLiteral_Sep -> [0] [b] BinaryDigits_Sep .
    //   BinaryDigits_Sep -> BinaryDigit .
    //   BinaryDigit -> [0 1] .
    //   BinaryDigits_Sep -> BinaryDigits_Sep . BinaryDigit
    //   BinaryDigit -> . [0 1]
    //   BinaryDigits_Sep -> BinaryDigits_Sep . NumericLiteralSeparator BinaryDigit
    //   NumericLiteralSeparator -> . [_]
    //   NumericLiteral -> NonDecimalIntegerLiteral_Sep . BigIntLiteralSuffix
    //   BigIntLiteralSuffix -> . [n]
    //   BinaryIntegerLiteral_Sep -> [0] [B] BinaryDigits_Sep .
    //   BinaryDigits_Sep -> BinaryDigits_Sep BinaryDigit .
    //   BinaryDigits_Sep -> BinaryDigits_Sep NumericLiteralSeparator BinaryDigit .
    // Transitions
    //   [_] => State(75)
    //   [n] => State(452):NumericLiteral
    //   [0..1] => State(458):NumericLiteral
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 75, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 452, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 458, 467, 467, 458, 467, 467, 75, 467,
    ],
    // State(459)
    //   NumericLiteral -> NonDecimalIntegerLiteral_Sep .
    //   NonDecimalIntegerLiteral_Sep -> OctalIntegerLiteral_Sep .
    //   OctalIntegerLiteral_Sep -> [0] [o] OctalDigits_Sep .
    //   OctalDigits_Sep -> OctalDigit .
    //   OctalDigit -> [0 1 2 3 4 5 6 7] .
    //   OctalDigits_Sep -> OctalDigits_Sep . OctalDigit
    //   OctalDigit -> . [0 1 2 3 4 5 6 7]
    //   OctalDigits_Sep -> OctalDigits_Sep . NumericLiteralSeparator OctalDigit
    //   NumericLiteralSeparator -> . [_]
    //   NumericLiteral -> NonDecimalIntegerLiteral_Sep . BigIntLiteralSuffix
    //   BigIntLiteralSuffix -> . [n]
    //   OctalIntegerLiteral_Sep -> [0] [O] OctalDigits_Sep .
    //   OctalDigits_Sep -> OctalDigits_Sep OctalDigit .
    //   OctalDigits_Sep -> OctalDigits_Sep NumericLiteralSeparator OctalDigit .
    // Transitions
    //   [_] => State(76)
    //   [n] => State(452):NumericLiteral
    //   [0..7] => State(459):NumericLiteral
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 76, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 452, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 459, 459, 467, 459, 467, 467, 76, 467,
    ],
    // State(460)
    //   NumericLiteral -> NonDecimalIntegerLiteral_Sep .
    //   NonDecimalIntegerLiteral_Sep -> HexIntegerLiteral_Sep .
    //   HexIntegerLiteral_Sep -> [0] [x] HexDigits_Sep .
    //   HexDigits_Sep -> HexDigit .
    //   HexDigit -> [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F] .
    //   HexDigits_Sep -> HexDigits_Sep . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   HexDigits_Sep -> HexDigits_Sep . NumericLiteralSeparator HexDigit
    //   NumericLiteralSeparator -> . [_]
    //   NumericLiteral -> NonDecimalIntegerLiteral_Sep . BigIntLiteralSuffix
    //   BigIntLiteralSuffix -> . [n]
    //   HexIntegerLiteral_Sep -> [0] [X] HexDigits_Sep .
    //   HexDigits_Sep -> HexDigits_Sep HexDigit .
    //   HexDigits_Sep -> HexDigits_Sep NumericLiteralSeparator HexDigit .
    // Transitions
    //   [_] => State(77)
    //   [n] => State(452):NumericLiteral
    //   [0..9, A..F, a..f] => State(460):NumericLiteral
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 460, 467, 467, 77, 467, 467, 467,
        467, 467, 467, 460, 460, 460, 467, 467, 467, 460, 460, 467, 467, 467, 467, 467, 452, 467,
        460, 467, 460, 467, 467, 460, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 460, 460, 460, 460, 467, 467, 77, 467,
    ],
    // State(461)
    //   StringLiteral -> ["] ["] .
    //   StringLiteral -> ['] ['] .
    //   StringLiteral -> ["] DoubleStringCharacters ["] .
    //   StringLiteral -> ['] SingleStringCharacters ['] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(462)
    //   NoSubstitutionTemplate -> [`] [`] .
    //   NoSubstitutionTemplate -> [`] TemplateCharacters [`] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(463)
    //   TemplateHead -> [`] [$] [{] .
    //   TemplateHead -> [`] TemplateCharacters [$] [{] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(464)
    //   RegularExpressionLiteral -> [/] RegularExpressionBody [/] RegularExpressionFlags .
    //   RegularExpressionFlags -> . RegularExpressionFlags IdentifierPartChar
    //   RegularExpressionLiteral -> [/] RegularExpressionBody [/] . RegularExpressionFlags
    //   RegularExpressionFlags -> (empty) .
    //   RegularExpressionFlags -> . (empty)
    //   RegularExpressionFlags -> RegularExpressionFlags . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   RegularExpressionFlags -> RegularExpressionFlags IdentifierPartChar .
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   IdentifierPartChar -> [$] .
    //   IdentifierPartChar -> [<ZWNJ>] .
    //   IdentifierPartChar -> [<ZWJ>] .
    // Transitions
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(464):RegularExpressionLiteral
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 464, 464, 464, 464, 464, 464, 464,
        464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464,
        464, 464, 464, 464, 464, 464, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 464, 464, 464, 464, 464, 467, 464, 467,
    ],
    // State(465)
    //   TemplateMiddle -> [}] [$] [{] .
    //   TemplateMiddle -> [}] TemplateCharacters [$] [{] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
    // State(466)
    //   TemplateTail -> [}] [`] .
    //   TemplateTail -> [}] TemplateCharacters [`] .
    [
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
    ],
];

const ACCEPT_TABLE: [Option<TokenKind>; 467] = [
    None,                                      // State(0)
    None,                                      // State(1)
    None,                                      // State(2)
    None,                                      // State(3)
    None,                                      // State(4)
    None,                                      // State(5)
    None,                                      // State(6)
    None,                                      // State(7)
    None,                                      // State(8)
    None,                                      // State(9)
    None,                                      // State(10)
    None,                                      // State(11)
    None,                                      // State(12)
    None,                                      // State(13)
    None,                                      // State(14)
    None,                                      // State(15)
    None,                                      // State(16)
    None,                                      // State(17)
    None,                                      // State(18)
    None,                                      // State(19)
    None,                                      // State(20)
    None,                                      // State(21)
    None,                                      // State(22)
    None,                                      // State(23)
    None,                                      // State(24)
    None,                                      // State(25)
    None,                                      // State(26)
    None,                                      // State(27)
    None,                                      // State(28)
    None,                                      // State(29)
    None,                                      // State(30)
    None,                                      // State(31)
    None,                                      // State(32)
    None,                                      // State(33)
    None,                                      // State(34)
    None,                                      // State(35)
    None,                                      // State(36)
    None,                                      // State(37)
    None,                                      // State(38)
    None,                                      // State(39)
    None,                                      // State(40)
    None,                                      // State(41)
    None,                                      // State(42)
    None,                                      // State(43)
    None,                                      // State(44)
    None,                                      // State(45)
    None,                                      // State(46)
    None,                                      // State(47)
    None,                                      // State(48)
    None,                                      // State(49)
    None,                                      // State(50)
    None,                                      // State(51)
    None,                                      // State(52)
    None,                                      // State(53)
    None,                                      // State(54)
    None,                                      // State(55)
    None,                                      // State(56)
    None,                                      // State(57)
    None,                                      // State(58)
    None,                                      // State(59)
    None,                                      // State(60)
    None,                                      // State(61)
    None,                                      // State(62)
    None,                                      // State(63)
    None,                                      // State(64)
    None,                                      // State(65)
    None,                                      // State(66)
    None,                                      // State(67)
    None,                                      // State(68)
    None,                                      // State(69)
    None,                                      // State(70)
    None,                                      // State(71)
    None,                                      // State(72)
    None,                                      // State(73)
    None,                                      // State(74)
    None,                                      // State(75)
    None,                                      // State(76)
    None,                                      // State(77)
    None,                                      // State(78)
    None,                                      // State(79)
    None,                                      // State(80)
    None,                                      // State(81)
    None,                                      // State(82)
    None,                                      // State(83)
    None,                                      // State(84)
    None,                                      // State(85)
    None,                                      // State(86)
    None,                                      // State(87)
    None,                                      // State(88)
    None,                                      // State(89)
    None,                                      // State(90)
    None,                                      // State(91)
    None,                                      // State(92)
    None,                                      // State(93)
    None,                                      // State(94)
    None,                                      // State(95)
    None,                                      // State(96)
    None,                                      // State(97)
    None,                                      // State(98)
    None,                                      // State(99)
    None,                                      // State(100)
    None,                                      // State(101)
    None,                                      // State(102)
    None,                                      // State(103)
    None,                                      // State(104)
    None,                                      // State(105)
    None,                                      // State(106)
    None,                                      // State(107)
    None,                                      // State(108)
    None,                                      // State(109)
    None,                                      // State(110)
    None,                                      // State(111)
    None,                                      // State(112)
    None,                                      // State(113)
    None,                                      // State(114)
    None,                                      // State(115)
    None,                                      // State(116)
    None,                                      // State(117)
    None,                                      // State(118)
    None,                                      // State(119)
    None,                                      // State(120)
    None,                                      // State(121)
    None,                                      // State(122)
    None,                                      // State(123)
    None,                                      // State(124)
    None,                                      // State(125)
    None,                                      // State(126)
    None,                                      // State(127)
    None,                                      // State(128)
    None,                                      // State(129)
    None,                                      // State(130)
    None,                                      // State(131)
    None,                                      // State(132)
    None,                                      // State(133)
    None,                                      // State(134)
    None,                                      // State(135)
    None,                                      // State(136)
    None,                                      // State(137)
    None,                                      // State(138)
    None,                                      // State(139)
    None,                                      // State(140)
    None,                                      // State(141)
    None,                                      // State(142)
    None,                                      // State(143)
    None,                                      // State(144)
    None,                                      // State(145)
    None,                                      // State(146)
    None,                                      // State(147)
    None,                                      // State(148)
    None,                                      // State(149)
    None,                                      // State(150)
    None,                                      // State(151)
    None,                                      // State(152)
    None,                                      // State(153)
    None,                                      // State(154)
    None,                                      // State(155)
    None,                                      // State(156)
    None,                                      // State(157)
    None,                                      // State(158)
    None,                                      // State(159)
    None,                                      // State(160)
    Some(TokenKind::WhiteSpaceSequence),       // State(161)
    Some(TokenKind::LineTerminatorSequence),   // State(162)
    Some(TokenKind::LineTerminatorSequence),   // State(163)
    Some(TokenKind::Comment),                  // State(164)
    Some(TokenKind::Comment),                  // State(165)
    Some(TokenKind::Break),                    // State(166)
    Some(TokenKind::Case),                     // State(167)
    Some(TokenKind::Catch),                    // State(168)
    Some(TokenKind::Class),                    // State(169)
    Some(TokenKind::Const),                    // State(170)
    Some(TokenKind::Continue),                 // State(171)
    Some(TokenKind::Debugger),                 // State(172)
    Some(TokenKind::Default),                  // State(173)
    Some(TokenKind::Delete),                   // State(174)
    Some(TokenKind::Do),                       // State(175)
    Some(TokenKind::Else),                     // State(176)
    Some(TokenKind::Enum),                     // State(177)
    Some(TokenKind::Export),                   // State(178)
    Some(TokenKind::Extends),                  // State(179)
    Some(TokenKind::False),                    // State(180)
    Some(TokenKind::Finally),                  // State(181)
    Some(TokenKind::For),                      // State(182)
    Some(TokenKind::Function),                 // State(183)
    Some(TokenKind::If),                       // State(184)
    Some(TokenKind::Import),                   // State(185)
    Some(TokenKind::In),                       // State(186)
    Some(TokenKind::Instanceof),               // State(187)
    Some(TokenKind::New),                      // State(188)
    Some(TokenKind::Null),                     // State(189)
    Some(TokenKind::Return),                   // State(190)
    Some(TokenKind::Super),                    // State(191)
    Some(TokenKind::Switch),                   // State(192)
    Some(TokenKind::This),                     // State(193)
    Some(TokenKind::Throw),                    // State(194)
    Some(TokenKind::True),                     // State(195)
    Some(TokenKind::Try),                      // State(196)
    Some(TokenKind::Typeof),                   // State(197)
    Some(TokenKind::Var),                      // State(198)
    Some(TokenKind::Void),                     // State(199)
    Some(TokenKind::While),                    // State(200)
    Some(TokenKind::With),                     // State(201)
    Some(TokenKind::Await),                    // State(202)
    Some(TokenKind::Yield),                    // State(203)
    Some(TokenKind::Let),                      // State(204)
    Some(TokenKind::Static),                   // State(205)
    Some(TokenKind::Implements),               // State(206)
    Some(TokenKind::Interface),                // State(207)
    Some(TokenKind::Package),                  // State(208)
    Some(TokenKind::Private),                  // State(209)
    Some(TokenKind::Protected),                // State(210)
    Some(TokenKind::Public),                   // State(211)
    Some(TokenKind::As),                       // State(212)
    Some(TokenKind::Async),                    // State(213)
    Some(TokenKind::From),                     // State(214)
    Some(TokenKind::Get),                      // State(215)
    Some(TokenKind::Meta),                     // State(216)
    Some(TokenKind::Of),                       // State(217)
    Some(TokenKind::Set),                      // State(218)
    Some(TokenKind::Target),                   // State(219)
    Some(TokenKind::IdentifierName),           // State(220)
    Some(TokenKind::IdentifierName),           // State(221)
    Some(TokenKind::IdentifierName),           // State(222)
    Some(TokenKind::IdentifierName),           // State(223)
    Some(TokenKind::IdentifierName),           // State(224)
    Some(TokenKind::IdentifierName),           // State(225)
    Some(TokenKind::IdentifierName),           // State(226)
    Some(TokenKind::IdentifierName),           // State(227)
    Some(TokenKind::IdentifierName),           // State(228)
    Some(TokenKind::IdentifierName),           // State(229)
    Some(TokenKind::IdentifierName),           // State(230)
    Some(TokenKind::IdentifierName),           // State(231)
    Some(TokenKind::IdentifierName),           // State(232)
    Some(TokenKind::IdentifierName),           // State(233)
    Some(TokenKind::IdentifierName),           // State(234)
    Some(TokenKind::IdentifierName),           // State(235)
    Some(TokenKind::IdentifierName),           // State(236)
    Some(TokenKind::IdentifierName),           // State(237)
    Some(TokenKind::IdentifierName),           // State(238)
    Some(TokenKind::IdentifierName),           // State(239)
    Some(TokenKind::IdentifierName),           // State(240)
    Some(TokenKind::IdentifierName),           // State(241)
    Some(TokenKind::IdentifierName),           // State(242)
    Some(TokenKind::IdentifierName),           // State(243)
    Some(TokenKind::IdentifierName),           // State(244)
    Some(TokenKind::IdentifierName),           // State(245)
    Some(TokenKind::IdentifierName),           // State(246)
    Some(TokenKind::IdentifierName),           // State(247)
    Some(TokenKind::IdentifierName),           // State(248)
    Some(TokenKind::IdentifierName),           // State(249)
    Some(TokenKind::IdentifierName),           // State(250)
    Some(TokenKind::IdentifierName),           // State(251)
    Some(TokenKind::IdentifierName),           // State(252)
    Some(TokenKind::IdentifierName),           // State(253)
    Some(TokenKind::IdentifierName),           // State(254)
    Some(TokenKind::IdentifierName),           // State(255)
    Some(TokenKind::IdentifierName),           // State(256)
    Some(TokenKind::IdentifierName),           // State(257)
    Some(TokenKind::IdentifierName),           // State(258)
    Some(TokenKind::IdentifierName),           // State(259)
    Some(TokenKind::IdentifierName),           // State(260)
    Some(TokenKind::IdentifierName),           // State(261)
    Some(TokenKind::IdentifierName),           // State(262)
    Some(TokenKind::IdentifierName),           // State(263)
    Some(TokenKind::IdentifierName),           // State(264)
    Some(TokenKind::IdentifierName),           // State(265)
    Some(TokenKind::IdentifierName),           // State(266)
    Some(TokenKind::IdentifierName),           // State(267)
    Some(TokenKind::IdentifierName),           // State(268)
    Some(TokenKind::IdentifierName),           // State(269)
    Some(TokenKind::IdentifierName),           // State(270)
    Some(TokenKind::IdentifierName),           // State(271)
    Some(TokenKind::IdentifierName),           // State(272)
    Some(TokenKind::IdentifierName),           // State(273)
    Some(TokenKind::IdentifierName),           // State(274)
    Some(TokenKind::IdentifierName),           // State(275)
    Some(TokenKind::IdentifierName),           // State(276)
    Some(TokenKind::IdentifierName),           // State(277)
    Some(TokenKind::IdentifierName),           // State(278)
    Some(TokenKind::IdentifierName),           // State(279)
    Some(TokenKind::IdentifierName),           // State(280)
    Some(TokenKind::IdentifierName),           // State(281)
    Some(TokenKind::IdentifierName),           // State(282)
    Some(TokenKind::IdentifierName),           // State(283)
    Some(TokenKind::IdentifierName),           // State(284)
    Some(TokenKind::IdentifierName),           // State(285)
    Some(TokenKind::IdentifierName),           // State(286)
    Some(TokenKind::IdentifierName),           // State(287)
    Some(TokenKind::IdentifierName),           // State(288)
    Some(TokenKind::IdentifierName),           // State(289)
    Some(TokenKind::IdentifierName),           // State(290)
    Some(TokenKind::IdentifierName),           // State(291)
    Some(TokenKind::IdentifierName),           // State(292)
    Some(TokenKind::IdentifierName),           // State(293)
    Some(TokenKind::IdentifierName),           // State(294)
    Some(TokenKind::IdentifierName),           // State(295)
    Some(TokenKind::IdentifierName),           // State(296)
    Some(TokenKind::IdentifierName),           // State(297)
    Some(TokenKind::IdentifierName),           // State(298)
    Some(TokenKind::IdentifierName),           // State(299)
    Some(TokenKind::IdentifierName),           // State(300)
    Some(TokenKind::IdentifierName),           // State(301)
    Some(TokenKind::IdentifierName),           // State(302)
    Some(TokenKind::IdentifierName),           // State(303)
    Some(TokenKind::IdentifierName),           // State(304)
    Some(TokenKind::IdentifierName),           // State(305)
    Some(TokenKind::IdentifierName),           // State(306)
    Some(TokenKind::IdentifierName),           // State(307)
    Some(TokenKind::IdentifierName),           // State(308)
    Some(TokenKind::IdentifierName),           // State(309)
    Some(TokenKind::IdentifierName),           // State(310)
    Some(TokenKind::IdentifierName),           // State(311)
    Some(TokenKind::IdentifierName),           // State(312)
    Some(TokenKind::IdentifierName),           // State(313)
    Some(TokenKind::IdentifierName),           // State(314)
    Some(TokenKind::IdentifierName),           // State(315)
    Some(TokenKind::IdentifierName),           // State(316)
    Some(TokenKind::IdentifierName),           // State(317)
    Some(TokenKind::IdentifierName),           // State(318)
    Some(TokenKind::IdentifierName),           // State(319)
    Some(TokenKind::IdentifierName),           // State(320)
    Some(TokenKind::IdentifierName),           // State(321)
    Some(TokenKind::IdentifierName),           // State(322)
    Some(TokenKind::IdentifierName),           // State(323)
    Some(TokenKind::IdentifierName),           // State(324)
    Some(TokenKind::IdentifierName),           // State(325)
    Some(TokenKind::IdentifierName),           // State(326)
    Some(TokenKind::IdentifierName),           // State(327)
    Some(TokenKind::IdentifierName),           // State(328)
    Some(TokenKind::IdentifierName),           // State(329)
    Some(TokenKind::IdentifierName),           // State(330)
    Some(TokenKind::IdentifierName),           // State(331)
    Some(TokenKind::IdentifierName),           // State(332)
    Some(TokenKind::IdentifierName),           // State(333)
    Some(TokenKind::IdentifierName),           // State(334)
    Some(TokenKind::IdentifierName),           // State(335)
    Some(TokenKind::IdentifierName),           // State(336)
    Some(TokenKind::IdentifierName),           // State(337)
    Some(TokenKind::IdentifierName),           // State(338)
    Some(TokenKind::IdentifierName),           // State(339)
    Some(TokenKind::IdentifierName),           // State(340)
    Some(TokenKind::IdentifierName),           // State(341)
    Some(TokenKind::IdentifierName),           // State(342)
    Some(TokenKind::IdentifierName),           // State(343)
    Some(TokenKind::IdentifierName),           // State(344)
    Some(TokenKind::IdentifierName),           // State(345)
    Some(TokenKind::IdentifierName),           // State(346)
    Some(TokenKind::IdentifierName),           // State(347)
    Some(TokenKind::IdentifierName),           // State(348)
    Some(TokenKind::IdentifierName),           // State(349)
    Some(TokenKind::IdentifierName),           // State(350)
    Some(TokenKind::IdentifierName),           // State(351)
    Some(TokenKind::IdentifierName),           // State(352)
    Some(TokenKind::IdentifierName),           // State(353)
    Some(TokenKind::IdentifierName),           // State(354)
    Some(TokenKind::IdentifierName),           // State(355)
    Some(TokenKind::IdentifierName),           // State(356)
    Some(TokenKind::IdentifierName),           // State(357)
    Some(TokenKind::IdentifierName),           // State(358)
    Some(TokenKind::IdentifierName),           // State(359)
    Some(TokenKind::IdentifierName),           // State(360)
    Some(TokenKind::IdentifierName),           // State(361)
    Some(TokenKind::IdentifierName),           // State(362)
    Some(TokenKind::IdentifierName),           // State(363)
    Some(TokenKind::IdentifierName),           // State(364)
    Some(TokenKind::IdentifierName),           // State(365)
    Some(TokenKind::IdentifierName),           // State(366)
    Some(TokenKind::IdentifierName),           // State(367)
    Some(TokenKind::IdentifierName),           // State(368)
    Some(TokenKind::IdentifierName),           // State(369)
    Some(TokenKind::IdentifierName),           // State(370)
    Some(TokenKind::IdentifierName),           // State(371)
    Some(TokenKind::IdentifierName),           // State(372)
    Some(TokenKind::IdentifierName),           // State(373)
    Some(TokenKind::IdentifierName),           // State(374)
    Some(TokenKind::IdentifierName),           // State(375)
    Some(TokenKind::IdentifierName),           // State(376)
    Some(TokenKind::IdentifierName),           // State(377)
    Some(TokenKind::IdentifierName),           // State(378)
    Some(TokenKind::IdentifierName),           // State(379)
    Some(TokenKind::IdentifierName),           // State(380)
    Some(TokenKind::IdentifierName),           // State(381)
    Some(TokenKind::IdentifierName),           // State(382)
    Some(TokenKind::IdentifierName),           // State(383)
    Some(TokenKind::IdentifierName),           // State(384)
    Some(TokenKind::IdentifierName),           // State(385)
    Some(TokenKind::IdentifierName),           // State(386)
    Some(TokenKind::IdentifierName),           // State(387)
    Some(TokenKind::IdentifierName),           // State(388)
    Some(TokenKind::IdentifierName),           // State(389)
    Some(TokenKind::IdentifierName),           // State(390)
    Some(TokenKind::IdentifierName),           // State(391)
    Some(TokenKind::IdentifierName),           // State(392)
    Some(TokenKind::IdentifierName),           // State(393)
    Some(TokenKind::IdentifierName),           // State(394)
    Some(TokenKind::PrivateIdentifier),        // State(395)
    Some(TokenKind::OptionalChaining),         // State(396)
    Some(TokenKind::Lbrace),                   // State(397)
    Some(TokenKind::Lparen),                   // State(398)
    Some(TokenKind::Rparen),                   // State(399)
    Some(TokenKind::Lbrack),                   // State(400)
    Some(TokenKind::Rbrack),                   // State(401)
    Some(TokenKind::Dot),                      // State(402)
    Some(TokenKind::Ellipsis),                 // State(403)
    Some(TokenKind::Semicolon),                // State(404)
    Some(TokenKind::Comma),                    // State(405)
    Some(TokenKind::Lt),                       // State(406)
    Some(TokenKind::Gt),                       // State(407)
    Some(TokenKind::Lte),                      // State(408)
    Some(TokenKind::Gte),                      // State(409)
    Some(TokenKind::Eq),                       // State(410)
    Some(TokenKind::Ne),                       // State(411)
    Some(TokenKind::EqStrict),                 // State(412)
    Some(TokenKind::NeStrict),                 // State(413)
    Some(TokenKind::Add),                      // State(414)
    Some(TokenKind::Sub),                      // State(415)
    Some(TokenKind::Mul),                      // State(416)
    Some(TokenKind::Mod),                      // State(417)
    Some(TokenKind::Exp),                      // State(418)
    Some(TokenKind::Inc),                      // State(419)
    Some(TokenKind::Dec),                      // State(420)
    Some(TokenKind::Shl),                      // State(421)
    Some(TokenKind::Sar),                      // State(422)
    Some(TokenKind::Shr),                      // State(423)
    Some(TokenKind::BitAnd),                   // State(424)
    Some(TokenKind::BitOr),                    // State(425)
    Some(TokenKind::BitXor),                   // State(426)
    Some(TokenKind::Not),                      // State(427)
    Some(TokenKind::BitNot),                   // State(428)
    Some(TokenKind::And),                      // State(429)
    Some(TokenKind::Or),                       // State(430)
    Some(TokenKind::Nullish),                  // State(431)
    Some(TokenKind::Conditional),              // State(432)
    Some(TokenKind::Colon),                    // State(433)
    Some(TokenKind::Assign),                   // State(434)
    Some(TokenKind::AddAssign),                // State(435)
    Some(TokenKind::SubAssign),                // State(436)
    Some(TokenKind::MulAssign),                // State(437)
    Some(TokenKind::ModAssign),                // State(438)
    Some(TokenKind::ExpAssign),                // State(439)
    Some(TokenKind::ShlAssign),                // State(440)
    Some(TokenKind::SarAssign),                // State(441)
    Some(TokenKind::ShrAssign),                // State(442)
    Some(TokenKind::BitAndAssign),             // State(443)
    Some(TokenKind::BitOrAssign),              // State(444)
    Some(TokenKind::BitXorAssign),             // State(445)
    Some(TokenKind::AndAssign),                // State(446)
    Some(TokenKind::OrAssign),                 // State(447)
    Some(TokenKind::NullishAssign),            // State(448)
    Some(TokenKind::Arrow),                    // State(449)
    Some(TokenKind::NumericLiteral),           // State(450)
    Some(TokenKind::NumericLiteral),           // State(451)
    Some(TokenKind::NumericLiteral),           // State(452)
    Some(TokenKind::NumericLiteral),           // State(453)
    Some(TokenKind::NumericLiteral),           // State(454)
    Some(TokenKind::NumericLiteral),           // State(455)
    Some(TokenKind::NumericLiteral),           // State(456)
    Some(TokenKind::NumericLiteral),           // State(457)
    Some(TokenKind::NumericLiteral),           // State(458)
    Some(TokenKind::NumericLiteral),           // State(459)
    Some(TokenKind::NumericLiteral),           // State(460)
    Some(TokenKind::StringLiteral),            // State(461)
    Some(TokenKind::NoSubstitutionTemplate),   // State(462)
    Some(TokenKind::TemplateHead),             // State(463)
    Some(TokenKind::RegularExpressionLiteral), // State(464)
    Some(TokenKind::TemplateMiddle),           // State(465)
    Some(TokenKind::TemplateTail),             // State(466)
];

const LOOKAHEAD_TABLE: [bool; 467] = [
    false, // State(0)
    false, // State(1)
    false, // State(2)
    false, // State(3)
    false, // State(4)
    false, // State(5)
    false, // State(6)
    false, // State(7)
    false, // State(8)
    false, // State(9)
    false, // State(10)
    false, // State(11)
    false, // State(12)
    false, // State(13)
    false, // State(14)
    false, // State(15)
    false, // State(16)
    false, // State(17)
    false, // State(18)
    false, // State(19)
    false, // State(20)
    false, // State(21)
    false, // State(22)
    false, // State(23)
    false, // State(24)
    false, // State(25)
    false, // State(26)
    false, // State(27)
    false, // State(28)
    false, // State(29)
    false, // State(30)
    false, // State(31)
    false, // State(32)
    false, // State(33)
    false, // State(34)
    false, // State(35)
    false, // State(36)
    false, // State(37)
    false, // State(38)
    false, // State(39)
    false, // State(40)
    false, // State(41)
    false, // State(42)
    false, // State(43)
    false, // State(44)
    false, // State(45)
    false, // State(46)
    false, // State(47)
    false, // State(48)
    false, // State(49)
    false, // State(50)
    false, // State(51)
    false, // State(52)
    false, // State(53)
    false, // State(54)
    false, // State(55)
    false, // State(56)
    false, // State(57)
    false, // State(58)
    false, // State(59)
    false, // State(60)
    false, // State(61)
    false, // State(62)
    false, // State(63)
    false, // State(64)
    false, // State(65)
    false, // State(66)
    false, // State(67)
    false, // State(68)
    false, // State(69)
    false, // State(70)
    false, // State(71)
    false, // State(72)
    false, // State(73)
    false, // State(74)
    false, // State(75)
    false, // State(76)
    false, // State(77)
    false, // State(78)
    false, // State(79)
    false, // State(80)
    false, // State(81)
    false, // State(82)
    false, // State(83)
    false, // State(84)
    false, // State(85)
    false, // State(86)
    false, // State(87)
    false, // State(88)
    false, // State(89)
    false, // State(90)
    false, // State(91)
    false, // State(92)
    false, // State(93)
    false, // State(94)
    false, // State(95)
    false, // State(96)
    false, // State(97)
    false, // State(98)
    false, // State(99)
    false, // State(100)
    false, // State(101)
    false, // State(102)
    false, // State(103)
    false, // State(104)
    false, // State(105)
    false, // State(106)
    false, // State(107)
    false, // State(108)
    false, // State(109)
    false, // State(110)
    false, // State(111)
    false, // State(112)
    false, // State(113)
    false, // State(114)
    false, // State(115)
    false, // State(116)
    false, // State(117)
    false, // State(118)
    false, // State(119)
    false, // State(120)
    false, // State(121)
    false, // State(122)
    false, // State(123)
    false, // State(124)
    false, // State(125)
    false, // State(126)
    false, // State(127)
    false, // State(128)
    false, // State(129)
    false, // State(130)
    false, // State(131)
    false, // State(132)
    false, // State(133)
    false, // State(134)
    false, // State(135)
    false, // State(136)
    false, // State(137)
    false, // State(138)
    false, // State(139)
    false, // State(140)
    false, // State(141)
    false, // State(142)
    false, // State(143)
    false, // State(144)
    false, // State(145)
    false, // State(146)
    false, // State(147)
    false, // State(148)
    false, // State(149)
    false, // State(150)
    false, // State(151)
    false, // State(152)
    false, // State(153)
    false, // State(154)
    false, // State(155)
    false, // State(156)
    false, // State(157)
    false, // State(158)
    false, // State(159)
    false, // State(160)
    false, // State(161)
    false, // State(162)
    true,  // State(163)
    false, // State(164)
    false, // State(165)
    false, // State(166)
    false, // State(167)
    false, // State(168)
    false, // State(169)
    false, // State(170)
    false, // State(171)
    false, // State(172)
    false, // State(173)
    false, // State(174)
    false, // State(175)
    false, // State(176)
    false, // State(177)
    false, // State(178)
    false, // State(179)
    false, // State(180)
    false, // State(181)
    false, // State(182)
    false, // State(183)
    false, // State(184)
    false, // State(185)
    false, // State(186)
    false, // State(187)
    false, // State(188)
    false, // State(189)
    false, // State(190)
    false, // State(191)
    false, // State(192)
    false, // State(193)
    false, // State(194)
    false, // State(195)
    false, // State(196)
    false, // State(197)
    false, // State(198)
    false, // State(199)
    false, // State(200)
    false, // State(201)
    false, // State(202)
    false, // State(203)
    false, // State(204)
    false, // State(205)
    false, // State(206)
    false, // State(207)
    false, // State(208)
    false, // State(209)
    false, // State(210)
    false, // State(211)
    false, // State(212)
    false, // State(213)
    false, // State(214)
    false, // State(215)
    false, // State(216)
    false, // State(217)
    false, // State(218)
    false, // State(219)
    false, // State(220)
    false, // State(221)
    false, // State(222)
    false, // State(223)
    false, // State(224)
    false, // State(225)
    false, // State(226)
    false, // State(227)
    false, // State(228)
    false, // State(229)
    false, // State(230)
    false, // State(231)
    false, // State(232)
    false, // State(233)
    false, // State(234)
    false, // State(235)
    false, // State(236)
    false, // State(237)
    false, // State(238)
    false, // State(239)
    false, // State(240)
    false, // State(241)
    false, // State(242)
    false, // State(243)
    false, // State(244)
    false, // State(245)
    false, // State(246)
    false, // State(247)
    false, // State(248)
    false, // State(249)
    false, // State(250)
    false, // State(251)
    false, // State(252)
    false, // State(253)
    false, // State(254)
    false, // State(255)
    false, // State(256)
    false, // State(257)
    false, // State(258)
    false, // State(259)
    false, // State(260)
    false, // State(261)
    false, // State(262)
    false, // State(263)
    false, // State(264)
    false, // State(265)
    false, // State(266)
    false, // State(267)
    false, // State(268)
    false, // State(269)
    false, // State(270)
    false, // State(271)
    false, // State(272)
    false, // State(273)
    false, // State(274)
    false, // State(275)
    false, // State(276)
    false, // State(277)
    false, // State(278)
    false, // State(279)
    false, // State(280)
    false, // State(281)
    false, // State(282)
    false, // State(283)
    false, // State(284)
    false, // State(285)
    false, // State(286)
    false, // State(287)
    false, // State(288)
    false, // State(289)
    false, // State(290)
    false, // State(291)
    false, // State(292)
    false, // State(293)
    false, // State(294)
    false, // State(295)
    false, // State(296)
    false, // State(297)
    false, // State(298)
    false, // State(299)
    false, // State(300)
    false, // State(301)
    false, // State(302)
    false, // State(303)
    false, // State(304)
    false, // State(305)
    false, // State(306)
    false, // State(307)
    false, // State(308)
    false, // State(309)
    false, // State(310)
    false, // State(311)
    false, // State(312)
    false, // State(313)
    false, // State(314)
    false, // State(315)
    false, // State(316)
    false, // State(317)
    false, // State(318)
    false, // State(319)
    false, // State(320)
    false, // State(321)
    false, // State(322)
    false, // State(323)
    false, // State(324)
    false, // State(325)
    false, // State(326)
    false, // State(327)
    false, // State(328)
    false, // State(329)
    false, // State(330)
    false, // State(331)
    false, // State(332)
    false, // State(333)
    false, // State(334)
    false, // State(335)
    false, // State(336)
    false, // State(337)
    false, // State(338)
    false, // State(339)
    false, // State(340)
    false, // State(341)
    false, // State(342)
    false, // State(343)
    false, // State(344)
    false, // State(345)
    false, // State(346)
    false, // State(347)
    false, // State(348)
    false, // State(349)
    false, // State(350)
    false, // State(351)
    false, // State(352)
    false, // State(353)
    false, // State(354)
    false, // State(355)
    false, // State(356)
    false, // State(357)
    false, // State(358)
    false, // State(359)
    false, // State(360)
    false, // State(361)
    false, // State(362)
    false, // State(363)
    false, // State(364)
    false, // State(365)
    false, // State(366)
    false, // State(367)
    false, // State(368)
    false, // State(369)
    false, // State(370)
    false, // State(371)
    false, // State(372)
    false, // State(373)
    false, // State(374)
    false, // State(375)
    false, // State(376)
    false, // State(377)
    false, // State(378)
    false, // State(379)
    false, // State(380)
    false, // State(381)
    false, // State(382)
    false, // State(383)
    false, // State(384)
    false, // State(385)
    false, // State(386)
    false, // State(387)
    false, // State(388)
    false, // State(389)
    false, // State(390)
    false, // State(391)
    false, // State(392)
    false, // State(393)
    false, // State(394)
    false, // State(395)
    true,  // State(396)
    false, // State(397)
    false, // State(398)
    false, // State(399)
    false, // State(400)
    false, // State(401)
    false, // State(402)
    false, // State(403)
    false, // State(404)
    false, // State(405)
    false, // State(406)
    false, // State(407)
    false, // State(408)
    false, // State(409)
    false, // State(410)
    false, // State(411)
    false, // State(412)
    false, // State(413)
    false, // State(414)
    false, // State(415)
    false, // State(416)
    false, // State(417)
    false, // State(418)
    false, // State(419)
    false, // State(420)
    false, // State(421)
    false, // State(422)
    false, // State(423)
    false, // State(424)
    false, // State(425)
    false, // State(426)
    false, // State(427)
    false, // State(428)
    false, // State(429)
    false, // State(430)
    false, // State(431)
    false, // State(432)
    false, // State(433)
    false, // State(434)
    false, // State(435)
    false, // State(436)
    false, // State(437)
    false, // State(438)
    false, // State(439)
    false, // State(440)
    false, // State(441)
    false, // State(442)
    false, // State(443)
    false, // State(444)
    false, // State(445)
    false, // State(446)
    false, // State(447)
    false, // State(448)
    false, // State(449)
    false, // State(450)
    false, // State(451)
    false, // State(452)
    false, // State(453)
    false, // State(454)
    false, // State(455)
    false, // State(456)
    false, // State(457)
    false, // State(458)
    false, // State(459)
    false, // State(460)
    false, // State(461)
    false, // State(462)
    false, // State(463)
    false, // State(464)
    false, // State(465)
    false, // State(466)
];

#[derive(Clone, Copy)]
#[repr(u8)]
enum CheckIdStartContinue {
    None,
    CheckIdStart,
    CheckIdContinue,
}

const CHECK_ID_START_CONTINUE_TABLE: [CheckIdStartContinue; 467] = [
    CheckIdStartContinue::CheckIdStart,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::CheckIdStart,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
    CheckIdStartContinue::CheckIdContinue,
    CheckIdStartContinue::None,
    CheckIdStartContinue::None,
];
