// DO NOT EDIT THIS FILE BY HAND.
//
// This file was automagically generated with:
// template: {{ template }}

#include "type_holder.hh"

#include <climits>

namespace {
constexpr unsigned kWorkBits = sizeof(size_t) * CHAR_BIT;
}

llvm::Type* TypeHolder::GetWordType() {
  return builder_.getIntNTy(kWorkBits);
}

llvm::Value* TypeHolder::GetWord(size_t value) {
  return builder_.getIntN(kWorkBits, value);
}

llvm::StructType* TypeHolder::CreateValueType() {
  if (value_type_ == nullptr) {
    value_type_ = llvm::StructType::create(context_, "Value");
    value_type_->setBody({
        // kind
        builder_.getInt8Ty(),
        // holder
        builder_.getInt64Ty(),
    });
  }
  return value_type_;
}

llvm::StructType* TypeHolder::CreateVariableType() {
  if (variable_type_ == nullptr) {
    variable_type_ = llvm::StructType::create(context_, "Variable");
    variable_type_->setBody({
        // kind
        builder_.getInt8Ty(),
        // flags
        builder_.getInt8Ty(),
        // reserved
        builder_.getInt16Ty(),
        // symbol
        builder_.getInt32Ty(),
        // holder
        builder_.getInt64Ty(),
    });
  }
  return variable_type_;
}

llvm::StructType* TypeHolder::CreateCaptureType() {
  if (capture_type_ == nullptr) {
    capture_type_ = llvm::StructType::create(context_, "Capture");
    capture_type_->setBody({
        // target
        builder_.getPtrTy(),
        // escaped
        CreateVariableType(),
    });
  }
  return capture_type_;
}

llvm::StructType* TypeHolder::CreateClosureType() {
  if (closure_type_ == nullptr) {
    closure_type_ = llvm::StructType::create(context_, "Closure");
    closure_type_->setBody({
        // lambda
        builder_.getPtrTy(),
        // num_captures
        builder_.getInt16Ty(),
        // captures
        builder_.getPtrTy(),
    });
  }
  return closure_type_;
}

llvm::FunctionType* TypeHolder::CreateLambdaType() {
  if (lambda_type_ == nullptr) {
    lambda_type_ = llvm::FunctionType::get(
        // status code
        builder_.getInt32Ty(),
        {
            // ctx (pointer to the exec context)
            builder_.getPtrTy(),
            // caps (pointer to a list of captures)
            builder_.getPtrTy(),
            // argc
            GetWordType(),
            // argv (pointer to a list of variables)
            builder_.getPtrTy(),
            // ret (pointer to a return value)
            builder_.getPtrTy(),
        },
        false);
  }
  return lambda_type_;
}
{%- for function in data.functions %}

llvm::Function* TypeHolder::CreateRuntime{{ function.name | pascalCase }}() {
  if (runtime_{{ function.name }}_ == nullptr) {
    auto* prototype = llvm::FunctionType::get({{ function.llvmir_ret }}, {{ function.llvmir_args }}, false);
    runtime_{{ function.name }}_ = llvm::Function::Create(prototype, llvm::Function::ExternalLinkage, "runtime_{{ function.name }}", module_);
  }
  return runtime_{{ function.name }}_;
}
{%- endfor %}
