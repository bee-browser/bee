{
  "tests": [
    {
      "description": "DOCTYPE without name",
      "input": [
        60,
        33,
        68,
        79,
        67,
        84,
        89,
        80,
        69,
        62
      ],
      "output": [
        {
          "Doctype": {
            "name": null,
            "public_id": null,
            "system_id": null,
            "force_quirks": true
          }
        }
      ],
      "errors": [
        {
          "code": "MissingDoctypeName",
          "location": {
            "line": 1,
            "column": 10
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "DOCTYPE without space before name",
      "input": [
        60,
        33,
        68,
        79,
        67,
        84,
        89,
        80,
        69,
        104,
        116,
        109,
        108,
        62
      ],
      "output": [
        {
          "Doctype": {
            "name": "html",
            "public_id": null,
            "system_id": null,
            "force_quirks": false
          }
        }
      ],
      "errors": [
        {
          "code": "MissingWhitespaceBeforeDoctypeName",
          "location": {
            "line": 1,
            "column": 10
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Incorrect DOCTYPE without a space before name",
      "input": [
        60,
        33,
        68,
        79,
        67,
        84,
        89,
        80,
        69,
        102,
        111,
        111,
        62
      ],
      "output": [
        {
          "Doctype": {
            "name": "foo",
            "public_id": null,
            "system_id": null,
            "force_quirks": false
          }
        }
      ],
      "errors": [
        {
          "code": "MissingWhitespaceBeforeDoctypeName",
          "location": {
            "line": 1,
            "column": 10
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "DOCTYPE with publicId",
      "input": [
        60,
        33,
        68,
        79,
        67,
        84,
        89,
        80,
        69,
        32,
        104,
        116,
        109,
        108,
        32,
        80,
        85,
        66,
        76,
        73,
        67,
        32,
        34,
        45,
        47,
        47,
        87,
        51,
        67,
        47,
        47,
        68,
        84,
        68,
        32,
        72,
        84,
        77,
        76,
        32,
        84,
        114,
        97,
        110,
        115,
        105,
        116,
        105,
        111,
        110,
        97,
        108,
        32,
        52,
        46,
        48,
        49,
        47,
        47,
        69,
        78,
        34,
        62
      ],
      "output": [
        {
          "Doctype": {
            "name": "html",
            "public_id": "-//W3C//DTD HTML Transitional 4.01//EN",
            "system_id": null,
            "force_quirks": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "DOCTYPE with EOF after PUBLIC",
      "input": [
        60,
        33,
        68,
        79,
        67,
        84,
        89,
        80,
        69,
        32,
        104,
        116,
        109,
        108,
        32,
        80,
        85,
        66,
        76,
        73,
        67
      ],
      "output": [
        {
          "Doctype": {
            "name": "html",
            "public_id": null,
            "system_id": null,
            "force_quirks": true
          }
        }
      ],
      "errors": [
        {
          "code": "EofInDoctype",
          "location": {
            "line": 1,
            "column": 22
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "DOCTYPE with EOF after PUBLIC '",
      "input": [
        60,
        33,
        68,
        79,
        67,
        84,
        89,
        80,
        69,
        32,
        104,
        116,
        109,
        108,
        32,
        80,
        85,
        66,
        76,
        73,
        67,
        32,
        39
      ],
      "output": [
        {
          "Doctype": {
            "name": "html",
            "public_id": "",
            "system_id": null,
            "force_quirks": true
          }
        }
      ],
      "errors": [
        {
          "code": "EofInDoctype",
          "location": {
            "line": 1,
            "column": 24
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "DOCTYPE with EOF after PUBLIC 'x",
      "input": [
        60,
        33,
        68,
        79,
        67,
        84,
        89,
        80,
        69,
        32,
        104,
        116,
        109,
        108,
        32,
        80,
        85,
        66,
        76,
        73,
        67,
        32,
        39,
        120
      ],
      "output": [
        {
          "Doctype": {
            "name": "html",
            "public_id": "x",
            "system_id": null,
            "force_quirks": true
          }
        }
      ],
      "errors": [
        {
          "code": "EofInDoctype",
          "location": {
            "line": 1,
            "column": 25
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "DOCTYPE with systemId",
      "input": [
        60,
        33,
        68,
        79,
        67,
        84,
        89,
        80,
        69,
        32,
        104,
        116,
        109,
        108,
        32,
        83,
        89,
        83,
        84,
        69,
        77,
        32,
        34,
        45,
        47,
        47,
        87,
        51,
        67,
        47,
        47,
        68,
        84,
        68,
        32,
        72,
        84,
        77,
        76,
        32,
        84,
        114,
        97,
        110,
        115,
        105,
        116,
        105,
        111,
        110,
        97,
        108,
        32,
        52,
        46,
        48,
        49,
        47,
        47,
        69,
        78,
        34,
        62
      ],
      "output": [
        {
          "Doctype": {
            "name": "html",
            "public_id": null,
            "system_id": "-//W3C//DTD HTML Transitional 4.01//EN",
            "force_quirks": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "DOCTYPE with single-quoted systemId",
      "input": [
        60,
        33,
        68,
        79,
        67,
        84,
        89,
        80,
        69,
        32,
        104,
        116,
        109,
        108,
        32,
        83,
        89,
        83,
        84,
        69,
        77,
        32,
        39,
        45,
        47,
        47,
        87,
        51,
        67,
        47,
        47,
        68,
        84,
        68,
        32,
        72,
        84,
        77,
        76,
        32,
        84,
        114,
        97,
        110,
        115,
        105,
        116,
        105,
        111,
        110,
        97,
        108,
        32,
        52,
        46,
        48,
        49,
        47,
        47,
        69,
        78,
        39,
        62
      ],
      "output": [
        {
          "Doctype": {
            "name": "html",
            "public_id": null,
            "system_id": "-//W3C//DTD HTML Transitional 4.01//EN",
            "force_quirks": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "DOCTYPE with publicId and systemId",
      "input": [
        60,
        33,
        68,
        79,
        67,
        84,
        89,
        80,
        69,
        32,
        104,
        116,
        109,
        108,
        32,
        80,
        85,
        66,
        76,
        73,
        67,
        32,
        34,
        45,
        47,
        47,
        87,
        51,
        67,
        47,
        47,
        68,
        84,
        68,
        32,
        72,
        84,
        77,
        76,
        32,
        84,
        114,
        97,
        110,
        115,
        105,
        116,
        105,
        111,
        110,
        97,
        108,
        32,
        52,
        46,
        48,
        49,
        47,
        47,
        69,
        78,
        34,
        32,
        34,
        45,
        47,
        47,
        87,
        51,
        67,
        47,
        47,
        68,
        84,
        68,
        32,
        72,
        84,
        77,
        76,
        32,
        84,
        114,
        97,
        110,
        115,
        105,
        116,
        105,
        111,
        110,
        97,
        108,
        32,
        52,
        46,
        48,
        49,
        47,
        47,
        69,
        78,
        34,
        62
      ],
      "output": [
        {
          "Doctype": {
            "name": "html",
            "public_id": "-//W3C//DTD HTML Transitional 4.01//EN",
            "system_id": "-//W3C//DTD HTML Transitional 4.01//EN",
            "force_quirks": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "DOCTYPE with > in double-quoted publicId",
      "input": [
        60,
        33,
        68,
        79,
        67,
        84,
        89,
        80,
        69,
        32,
        104,
        116,
        109,
        108,
        32,
        80,
        85,
        66,
        76,
        73,
        67,
        32,
        34,
        62,
        120
      ],
      "output": [
        {
          "Doctype": {
            "name": "html",
            "public_id": "",
            "system_id": null,
            "force_quirks": true
          }
        },
        {
          "Character": {
            "data": "x"
          }
        }
      ],
      "errors": [
        {
          "code": "AbruptDoctypePublicIdentifier",
          "location": {
            "line": 1,
            "column": 24
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "DOCTYPE with > in single-quoted publicId",
      "input": [
        60,
        33,
        68,
        79,
        67,
        84,
        89,
        80,
        69,
        32,
        104,
        116,
        109,
        108,
        32,
        80,
        85,
        66,
        76,
        73,
        67,
        32,
        39,
        62,
        120
      ],
      "output": [
        {
          "Doctype": {
            "name": "html",
            "public_id": "",
            "system_id": null,
            "force_quirks": true
          }
        },
        {
          "Character": {
            "data": "x"
          }
        }
      ],
      "errors": [
        {
          "code": "AbruptDoctypePublicIdentifier",
          "location": {
            "line": 1,
            "column": 24
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "DOCTYPE with > in double-quoted systemId",
      "input": [
        60,
        33,
        68,
        79,
        67,
        84,
        89,
        80,
        69,
        32,
        104,
        116,
        109,
        108,
        32,
        80,
        85,
        66,
        76,
        73,
        67,
        32,
        34,
        102,
        111,
        111,
        34,
        32,
        34,
        62,
        120
      ],
      "output": [
        {
          "Doctype": {
            "name": "html",
            "public_id": "foo",
            "system_id": "",
            "force_quirks": true
          }
        },
        {
          "Character": {
            "data": "x"
          }
        }
      ],
      "errors": [
        {
          "code": "AbruptDoctypeSystemIdentifier",
          "location": {
            "line": 1,
            "column": 30
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "DOCTYPE with > in single-quoted systemId",
      "input": [
        60,
        33,
        68,
        79,
        67,
        84,
        89,
        80,
        69,
        32,
        104,
        116,
        109,
        108,
        32,
        80,
        85,
        66,
        76,
        73,
        67,
        32,
        39,
        102,
        111,
        111,
        39,
        32,
        39,
        62,
        120
      ],
      "output": [
        {
          "Doctype": {
            "name": "html",
            "public_id": "foo",
            "system_id": "",
            "force_quirks": true
          }
        },
        {
          "Character": {
            "data": "x"
          }
        }
      ],
      "errors": [
        {
          "code": "AbruptDoctypeSystemIdentifier",
          "location": {
            "line": 1,
            "column": 30
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Incomplete doctype",
      "input": [
        60,
        33,
        68,
        79,
        67,
        84,
        89,
        80,
        69,
        32,
        104,
        116,
        109,
        108,
        32
      ],
      "output": [
        {
          "Doctype": {
            "name": "html",
            "public_id": null,
            "system_id": null,
            "force_quirks": true
          }
        }
      ],
      "errors": [
        {
          "code": "EofInDoctype",
          "location": {
            "line": 1,
            "column": 16
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Numeric entity representing the NUL character",
      "input": [
        38,
        35,
        48,
        48,
        48,
        48,
        59
      ],
      "output": [
        {
          "Character": {
            "data": "�"
          }
        }
      ],
      "errors": [
        {
          "code": "NullCharacterReference",
          "location": {
            "line": 1,
            "column": 8
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Hexadecimal entity representing the NUL character",
      "input": [
        38,
        35,
        120,
        48,
        48,
        48,
        48,
        59
      ],
      "output": [
        {
          "Character": {
            "data": "�"
          }
        }
      ],
      "errors": [
        {
          "code": "NullCharacterReference",
          "location": {
            "line": 1,
            "column": 9
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Numeric entity representing a codepoint after 1114111 (U+10FFFF)",
      "input": [
        38,
        35,
        50,
        50,
        50,
        53,
        50,
        50,
        50,
        59
      ],
      "output": [
        {
          "Character": {
            "data": "�"
          }
        }
      ],
      "errors": [
        {
          "code": "CharacterReferenceOutsideUnicodeRange",
          "location": {
            "line": 1,
            "column": 11
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Hexadecimal entity representing a codepoint after 1114111 (U+10FFFF)",
      "input": [
        38,
        35,
        120,
        49,
        48,
        49,
        48,
        70,
        70,
        70,
        70,
        59
      ],
      "output": [
        {
          "Character": {
            "data": "�"
          }
        }
      ],
      "errors": [
        {
          "code": "CharacterReferenceOutsideUnicodeRange",
          "location": {
            "line": 1,
            "column": 13
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Hexadecimal entity pair representing a surrogate pair",
      "input": [
        38,
        35,
        120,
        68,
        56,
        54,
        57,
        59,
        38,
        35,
        120,
        68,
        69,
        68,
        54,
        59
      ],
      "output": [
        {
          "Character": {
            "data": "��"
          }
        }
      ],
      "errors": [
        {
          "code": "SurrogateCharacterReference",
          "location": {
            "line": 1,
            "column": 9
          }
        },
        {
          "code": "SurrogateCharacterReference",
          "location": {
            "line": 1,
            "column": 17
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Hexadecimal entity with mixed uppercase and lowercase",
      "input": [
        38,
        35,
        120,
        97,
        66,
        99,
        68,
        59
      ],
      "output": [
        {
          "Character": {
            "data": "ꯍ"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Entity without a name",
      "input": [
        38,
        59
      ],
      "output": [
        {
          "Character": {
            "data": "&;"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Unescaped ampersand in attribute value",
      "input": [
        60,
        104,
        32,
        97,
        61,
        39,
        38,
        39,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "h",
            "attrs": {
              "a": "&"
            },
            "self_closing": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "StartTag containing <",
      "input": [
        60,
        97,
        60,
        98,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "a<b",
            "attrs": {},
            "self_closing": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Non-void element containing trailing /",
      "input": [
        60,
        104,
        47,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "h",
            "attrs": {},
            "self_closing": true
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Void element with permitted slash",
      "input": [
        60,
        98,
        114,
        47,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "br",
            "attrs": {},
            "self_closing": true
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Void element with permitted slash (with attribute)",
      "input": [
        60,
        98,
        114,
        32,
        102,
        111,
        111,
        61,
        39,
        98,
        97,
        114,
        39,
        47,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "br",
            "attrs": {
              "foo": "bar"
            },
            "self_closing": true
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "StartTag containing /",
      "input": [
        60,
        104,
        47,
        97,
        61,
        39,
        98,
        39,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "h",
            "attrs": {
              "a": "b"
            },
            "self_closing": false
          }
        }
      ],
      "errors": [
        {
          "code": "UnexpectedSolidusInTag",
          "location": {
            "line": 1,
            "column": 4
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Double-quoted attribute value",
      "input": [
        60,
        104,
        32,
        97,
        61,
        34,
        98,
        34,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "h",
            "attrs": {
              "a": "b"
            },
            "self_closing": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Unescaped </",
      "input": [
        60,
        47
      ],
      "output": [
        {
          "Character": {
            "data": "</"
          }
        }
      ],
      "errors": [
        {
          "code": "EofBeforeTagName",
          "location": {
            "line": 1,
            "column": 3
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Illegal end tag name",
      "input": [
        60,
        47,
        49,
        62
      ],
      "output": [
        {
          "Comment": {
            "data": "1"
          }
        }
      ],
      "errors": [
        {
          "code": "InvalidFirstCharacterOfTagName",
          "location": {
            "line": 1,
            "column": 3
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Simili processing instruction",
      "input": [
        60,
        63,
        110,
        97,
        109,
        101,
        115,
        112,
        97,
        99,
        101,
        62
      ],
      "output": [
        {
          "Comment": {
            "data": "?namespace"
          }
        }
      ],
      "errors": [
        {
          "code": "UnexpectedQuestionMarkInsteadOfTagName",
          "location": {
            "line": 1,
            "column": 2
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "A bogus comment stops at >, even if preceeded by two dashes",
      "input": [
        60,
        63,
        102,
        111,
        111,
        45,
        45,
        62
      ],
      "output": [
        {
          "Comment": {
            "data": "?foo--"
          }
        }
      ],
      "errors": [
        {
          "code": "UnexpectedQuestionMarkInsteadOfTagName",
          "location": {
            "line": 1,
            "column": 2
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Unescaped <",
      "input": [
        102,
        111,
        111,
        32,
        60,
        32,
        98,
        97,
        114
      ],
      "output": [
        {
          "Character": {
            "data": "foo < bar"
          }
        }
      ],
      "errors": [
        {
          "code": "InvalidFirstCharacterOfTagName",
          "location": {
            "line": 1,
            "column": 6
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Null Byte Replacement",
      "input": [
        0
      ],
      "output": [
        {
          "Character": {
            "data": "\u0000"
          }
        }
      ],
      "errors": [
        {
          "code": "UnexpectedNullCharacter",
          "location": {
            "line": 1,
            "column": 1
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Comment with dash",
      "input": [
        60,
        33,
        45,
        45,
        45,
        120
      ],
      "output": [
        {
          "Comment": {
            "data": "-x"
          }
        }
      ],
      "errors": [
        {
          "code": "EofInComment",
          "location": {
            "line": 1,
            "column": 7
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Entity + newline",
      "input": [
        10,
        120,
        10,
        38,
        103,
        116,
        59,
        10
      ],
      "output": [
        {
          "Character": {
            "data": "\nx\n>\n"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Start tag with no attributes but space before the greater-than sign",
      "input": [
        60,
        104,
        32,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "h",
            "attrs": {},
            "self_closing": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Empty attribute followed by uppercase attribute",
      "input": [
        60,
        104,
        32,
        97,
        32,
        66,
        61,
        39,
        39,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "h",
            "attrs": {
              "a": "",
              "b": ""
            },
            "self_closing": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Double-quote after attribute name",
      "input": [
        60,
        104,
        32,
        97,
        32,
        34,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "h",
            "attrs": {
              "a": "",
              "\"": ""
            },
            "self_closing": false
          }
        }
      ],
      "errors": [
        {
          "code": "UnexpectedCharacterInAttributeName",
          "location": {
            "line": 1,
            "column": 6
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Single-quote after attribute name",
      "input": [
        60,
        104,
        32,
        97,
        32,
        39,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "h",
            "attrs": {
              "a": "",
              "'": ""
            },
            "self_closing": false
          }
        }
      ],
      "errors": [
        {
          "code": "UnexpectedCharacterInAttributeName",
          "location": {
            "line": 1,
            "column": 6
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Empty end tag with following characters",
      "input": [
        97,
        60,
        47,
        62,
        98,
        99
      ],
      "output": [
        {
          "Character": {
            "data": "abc"
          }
        }
      ],
      "errors": [
        {
          "code": "MissingEndTagName",
          "location": {
            "line": 1,
            "column": 4
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Empty end tag with following tag",
      "input": [
        97,
        60,
        47,
        62,
        60,
        98,
        62,
        99
      ],
      "output": [
        {
          "Character": {
            "data": "a"
          }
        },
        {
          "StartTag": {
            "name": "b",
            "attrs": {},
            "self_closing": false
          }
        },
        {
          "Character": {
            "data": "c"
          }
        }
      ],
      "errors": [
        {
          "code": "MissingEndTagName",
          "location": {
            "line": 1,
            "column": 4
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Empty end tag with following comment",
      "input": [
        97,
        60,
        47,
        62,
        60,
        33,
        45,
        45,
        98,
        45,
        45,
        62,
        99
      ],
      "output": [
        {
          "Character": {
            "data": "a"
          }
        },
        {
          "Comment": {
            "data": "b"
          }
        },
        {
          "Character": {
            "data": "c"
          }
        }
      ],
      "errors": [
        {
          "code": "MissingEndTagName",
          "location": {
            "line": 1,
            "column": 4
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Empty end tag with following end tag",
      "input": [
        97,
        60,
        47,
        62,
        60,
        47,
        98,
        62,
        99
      ],
      "output": [
        {
          "Character": {
            "data": "a"
          }
        },
        {
          "EndTag": {
            "name": "b"
          }
        },
        {
          "Character": {
            "data": "c"
          }
        }
      ],
      "errors": [
        {
          "code": "MissingEndTagName",
          "location": {
            "line": 1,
            "column": 4
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    }
  ],
  "name": "test2"
}
