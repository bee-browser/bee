// DO NOT EDIT THIS FILE BY HAND.
//
// This file was automagically generated by:
// bee-tools-codegen --no-escape --input-stdin dfa/dfa.rs.hbs

use super::SourceCursor;
use super::Token;
use super::TokenKind;

pub fn recognize<'a>(cursor: &SourceCursor<'a>) -> Token<'a> {
    let mut token = Token::default();

    let mut state = State::default();
    tracing::trace!(opcode = "init", ?state);

    let mut lexeme_end = 0;
    let mut chars = cursor.chars();
    loop {
        let (pos, unicode_set) = match chars.next() {
            Some((i, ch)) => (cursor.pos() + i, UnicodeSet::from(ch)),
            None => (cursor.len(), UnicodeSet::EOF),
        };

        state = state.next_state(&unicode_set);
        tracing::trace!(opcode = "next", ?state, ?unicode_set, pos);
        if state.is_invalid() {
            break;
        }
        if !state.lookahead() {
            lexeme_end = pos + unicode_set.1.map(|ch| ch.len_utf8()).unwrap_or(0);
        }
        if let Some(kind) = state.accept() {
            token.kind = kind;
            token.lexeme = cursor.lexeme(lexeme_end);
            tracing::trace!(opcode = "accept", ?token.kind, ?token.lexeme);
        }
    }

    token
}

// UnicodeSet(0): [<CR>]
// UnicodeSet(1): [\]
// UnicodeSet(2): [#]
// UnicodeSet(3): ["]
// UnicodeSet(4): [']
// UnicodeSet(5): [`]
// UnicodeSet(6): [<HT>, <VT>..<FF>, <SP>, U+00A0, U+1680, U+2000..U+200A, U+200F, U+205F, U+FEFF]
// UnicodeSet(7): [<LF>]
// UnicodeSet(8): [U+2028..U+2029]
// UnicodeSet(9): [b]
// UnicodeSet(10): [r]
// UnicodeSet(11): [u]
// UnicodeSet(12): [_]
// UnicodeSet(13): [O]
// UnicodeSet(14): [X]
// UnicodeSet(15): [G..N, P..W, Y..Z, j, q, z]
// UnicodeSet(16): [h]
// UnicodeSet(17): [k]
// UnicodeSet(18): [x]
// UnicodeSet(19): [E]
// UnicodeSet(20): [B]
// UnicodeSet(21): [A, C..D, F]
// UnicodeSet(22): [$]
// UnicodeSet(23): [p]
// UnicodeSet(24): [y]
// UnicodeSet(25): [e]
// UnicodeSet(26): [c]
// UnicodeSet(27): [m]
// UnicodeSet(28): [w]
// UnicodeSet(29): [s]
// UnicodeSet(30): [t]
// UnicodeSet(31): [l]
// UnicodeSet(32): [n]
// UnicodeSet(33): [g]
// UnicodeSet(34): [f]
// UnicodeSet(35): [v]
// UnicodeSet(36): [a]
// UnicodeSet(37): [o]
// UnicodeSet(38): [i]
// UnicodeSet(39): [d]
// UnicodeSet(40): [{]
// UnicodeSet(41): [(]
// UnicodeSet(42): [)]
// UnicodeSet(43): [[]
// UnicodeSet(44): []]
// UnicodeSet(45): [.]
// UnicodeSet(46): [;]
// UnicodeSet(47): [,]
// UnicodeSet(48): [<]
// UnicodeSet(49): [>]
// UnicodeSet(50): [+]
// UnicodeSet(51): [-]
// UnicodeSet(52): [*]
// UnicodeSet(53): [%]
// UnicodeSet(54): [&]
// UnicodeSet(55): [|]
// UnicodeSet(56): [^]
// UnicodeSet(57): [!]
// UnicodeSet(58): [~]
// UnicodeSet(59): [?]
// UnicodeSet(60): [:]
// UnicodeSet(61): [=]
// UnicodeSet(62): [1]
// UnicodeSet(63): [2..7]
// UnicodeSet(64): [8..9]
// UnicodeSet(65): [0]
// UnicodeSet(66): [/]
// UnicodeSet(67): [}]
// UnicodeSet(68): [U+200C..U+200D]
// UnicodeSet(69): [<NUL>..<BS>, <SO>..<US>, @, <DEL>..U+009F, U+00A1..U+167F, U+1681..U+1FFF, U+200B, U+200E, U+2010..U+2027, U+202A..U+205E, U+2060..U+FEFE, U+FF00..U+10FFFF]
// UnicodeSet(70): [(eof)]
#[derive(Clone, Copy, Debug)]
struct UnicodeSet(u8, Option<char>);

impl UnicodeSet {
    const EOF: Self = UnicodeSet(71, None);
}

impl From<char> for UnicodeSet {
    fn from(ch: char) -> Self {
        let c = ch as usize;
        if c < 128 {
            return UnicodeSet(ASCII_TABLE[c], Some(ch));
        }
        if c == 160 {
            return UnicodeSet(6, Some(ch));
        }
        if c == 5760 {
            return UnicodeSet(6, Some(ch));
        }
        if c >= 8192 && c <= 8202 {
            return UnicodeSet(6, Some(ch));
        }
        if c == 8207 {
            return UnicodeSet(6, Some(ch));
        }
        if c == 8287 {
            return UnicodeSet(6, Some(ch));
        }
        if c == 65279 {
            return UnicodeSet(6, Some(ch));
        }
        if c >= 8232 && c <= 8233 {
            return UnicodeSet(8, Some(ch));
        }
        if c >= 8204 && c <= 8205 {
            return UnicodeSet(68, Some(ch));
        }
        if c >= 128 && c <= 159 {
            return UnicodeSet(69, Some(ch));
        }
        if c >= 161 && c <= 5759 {
            return UnicodeSet(69, Some(ch));
        }
        if c >= 5761 && c <= 8191 {
            return UnicodeSet(69, Some(ch));
        }
        if c == 8203 {
            return UnicodeSet(69, Some(ch));
        }
        if c == 8206 {
            return UnicodeSet(69, Some(ch));
        }
        if c >= 8208 && c <= 8231 {
            return UnicodeSet(69, Some(ch));
        }
        if c >= 8234 && c <= 8286 {
            return UnicodeSet(69, Some(ch));
        }
        if c >= 8288 && c <= 65278 {
            return UnicodeSet(69, Some(ch));
        }
        if c >= 65280 && c <= 1114111 {
            return UnicodeSet(69, Some(ch));
        }
        UnicodeSet(71, Some(ch))
    }
}

const ASCII_TABLE: [u8; 128] = [
    69, 69, 69, 69, 69, 69, 69, 69, 69, 6, 7, 6, 6, 0, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
    69, 69, 69, 69, 69, 69, 69, 6, 57, 3, 2, 22, 53, 54, 4, 41, 42, 52, 50, 47, 51, 45, 66, 65, 62,
    63, 63, 63, 63, 63, 63, 64, 64, 60, 46, 48, 61, 49, 59, 69, 21, 20, 21, 21, 19, 21, 15, 15, 15,
    15, 15, 15, 15, 15, 13, 15, 15, 15, 15, 15, 15, 15, 15, 14, 15, 15, 43, 1, 44, 56, 12, 5, 36,
    9, 26, 39, 25, 34, 33, 16, 38, 15, 17, 31, 27, 32, 37, 23, 15, 10, 29, 30, 11, 35, 28, 18, 24,
    15, 40, 55, 67, 58, 69,
];

#[derive(Clone, Copy, Debug, Default)]
struct State(u16);

impl State {
    #[inline(always)]
    fn is_invalid(&self) -> bool {
        self.0 == 419
    }

    #[inline(always)]
    fn next_state(&self, unicode_set: &UnicodeSet) -> State {
        State(TRANSITION_TABLE[self.0 as usize][unicode_set.0 as usize])
    }

    #[inline(always)]
    fn lookahead(&self) -> bool {
        LOOKAHEAD_TABLE[self.0 as usize]
    }

    #[inline(always)]
    fn accept(&self) -> Option<TokenKind> {
        ACCEPT_TABLE[self.0 as usize]
    }
}

const TRANSITION_TABLE: [[u16; 72]; 419] = [
    // State(0)
    //   @start
    // Transitions
    //   [<CR>] => State(1)
    //   [\] => State(2)
    //   [#] => State(4)
    //   ["] => State(5)
    //   ['] => State(6)
    //   [`] => State(7)
    //   [<HT>, <VT>..<FF>, <SP>, U+00A0, U+1680, U+2000..U+200A, U+200F, U+205F, U+FEFF] => State(113):WhiteSpaceSequence
    //   [<LF>, U+2028..U+2029] => State(114):LineTerminatorSequence
    //   [b] => State(172):IdentifierName
    //   [r] => State(173):IdentifierName
    //   [$, A..Z, _, h, j..k, q, u, x, z] => State(174):IdentifierName
    //   [p] => State(181):IdentifierName
    //   [y] => State(191):IdentifierName
    //   [e] => State(213):IdentifierName
    //   [c] => State(214):IdentifierName
    //   [m] => State(215):IdentifierName
    //   [w] => State(216):IdentifierName
    //   [s] => State(246):IdentifierName
    //   [t] => State(247):IdentifierName
    //   [l] => State(248):IdentifierName
    //   [n] => State(249):IdentifierName
    //   [g] => State(250):IdentifierName
    //   [f] => State(251):IdentifierName
    //   [v] => State(252):IdentifierName
    //   [a] => State(294):IdentifierName
    //   [o] => State(295):IdentifierName
    //   [i] => State(296):IdentifierName
    //   [d] => State(297):IdentifierName
    //   [{] => State(349):LBRACE
    //   [(] => State(350):LPAREN
    //   [)] => State(351):RPAREN
    //   [[] => State(352):LBRACK
    //   []] => State(353):RBRACK
    //   [.] => State(354):DOT
    //   [;] => State(356):SEMI_COLON
    //   [,] => State(357):COMMA
    //   [<] => State(358):LT
    //   [>] => State(359):GT
    //   [+] => State(366):ADD
    //   [-] => State(367):SUB
    //   [*] => State(368):MUL
    //   [%] => State(369):MOD
    //   [&] => State(376):BIT_AND
    //   [|] => State(377):BIT_OR
    //   [^] => State(378):BIT_XOR
    //   [!] => State(379):NOT
    //   [~] => State(380):BIT_NOT
    //   [?] => State(384):CONDITIONAL
    //   [:] => State(385):COLON
    //   [=] => State(386):ASSIGN
    //   [1..9] => State(402):NumericLiteral
    //   [0] => State(403):NumericLiteral
    //   [/] => State(416):DIV
    //   [}] => State(418):RBRACE
    [
        1, 2, 4, 5, 6, 7, 113, 114, 114, 172, 173, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 181, 191, 213, 214, 215, 216, 246, 247, 248, 249, 250, 251, 252, 294, 295,
        296, 297, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 366, 367, 368, 369, 376, 377,
        378, 379, 380, 384, 385, 386, 402, 402, 402, 403, 416, 418, 419, 419, 1, 419,
    ],
    // State(1)
    //   LineTerminatorSequence -> [<CR>] . [<LF>]
    // Transitions
    //   [<LF>] => State(114):LineTerminatorSequence
    //   [<NUL>..<HT>, <VT>..U+10FFFF, (eof)] => State(115):LineTerminatorSequence?
    [
        115, 115, 115, 115, 115, 115, 115, 114, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
        115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
        115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
        115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 114, 115,
    ],
    // State(2)
    //   IdentifierStart -> [\] . UnicodeEscapeSequence
    //   UnicodeEscapeSequence -> . [u] Hex4Digits
    //   UnicodeEscapeSequence -> . [u] [{] CodePoint [}]
    //   IdentifierPart -> [\] . UnicodeEscapeSequence
    // Transitions
    //   [u] => State(36)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 36, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 36, 419,
    ],
    // State(3)
    //   IdentifierStart -> [\] . UnicodeEscapeSequence
    //   UnicodeEscapeSequence -> . [u] Hex4Digits
    //   UnicodeEscapeSequence -> . [u] [{] CodePoint [}]
    //   IdentifierPart -> [\] . UnicodeEscapeSequence
    // Transitions
    //   [u] => State(37)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 37, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 37, 419,
    ],
    // State(4)
    //   IdentifierName -> . IdentifierName IdentifierPart
    //   PrivateIdentifier -> [#] . IdentifierName
    //   IdentifierName -> . IdentifierStart
    //   IdentifierStart -> . IdentifierStartChar
    //   IdentifierStartChar -> . UnicodeIDStart
    //   UnicodeIDStart -> . [a..z A..Z $ _]
    //   IdentifierStartChar -> . [$]
    //   IdentifierStartChar -> . [_]
    //   IdentifierStart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(3)
    //   [$, A..Z, _, a..z] => State(347):PrivateIdentifier
    [
        419, 3, 419, 419, 419, 419, 419, 419, 419, 347, 347, 347, 347, 347, 347, 347, 347, 347,
        347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
        347, 347, 347, 347, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 3, 419,
    ],
    // State(5)
    //   StringLiteral -> ["] . ["]
    //   DoubleStringCharacters -> DoubleStringCharacter . DoubleStringCharacters
    //   StringLiteral -> ["] . DoubleStringCharacters ["]
    //   DoubleStringCharacters -> . DoubleStringCharacter
    //   DoubleStringCharacter -> . [SourceCharacter -" -\ -LineTerminator]
    //   DoubleStringCharacter -> . [<LS>]
    //   DoubleStringCharacter -> . [<PS>]
    //   DoubleStringCharacter -> . [\] EscapeSequence
    //   DoubleStringCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   DoubleStringCharacters -> . DoubleStringCharacter DoubleStringCharacters
    //   StringLiteral -> ["] DoubleStringCharacters . ["]
    //   LegacyOctalEscapeSequence -> NonZeroOctalDigit . ?![OctalDigit]
    //   LegacyOctalEscapeSequence -> ZeroToThree . OctalDigit ?![OctalDigit]
    //   OctalDigit -> . [0 1 2 3 4 5 6 7]
    //   LegacyOctalEscapeSequence -> ZeroToThree . OctalDigit OctalDigit
    //   EscapeSequence -> [0] . ?![DecimalDigit]
    //   LegacyOctalEscapeSequence -> [0] . ?=[8 9]
    //   LegacyOctalEscapeSequence -> FourToSeven . OctalDigit
    //   LegacyOctalEscapeSequence -> ZeroToThree OctalDigit . ?![OctalDigit]
    //   LegacyOctalEscapeSequence -> ZeroToThree OctalDigit . OctalDigit
    // Transitions
    //   [<NUL>..<HT>, <VT>..<FF>, <SO>..!, #..[, ]..U+10FFFF] => State(5)
    //   [\] => State(33)
    //   ["] => State(413):StringLiteral
    [
        419, 33, 5, 413, 5, 5, 5, 419, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 419,
    ],
    // State(6)
    //   StringLiteral -> ['] . [']
    //   SingleStringCharacters -> SingleStringCharacter . SingleStringCharacters
    //   StringLiteral -> ['] . SingleStringCharacters [']
    //   SingleStringCharacters -> . SingleStringCharacter
    //   SingleStringCharacter -> . [SourceCharacter -' -\ -LineTerminator]
    //   SingleStringCharacter -> . [<LS>]
    //   SingleStringCharacter -> . [<PS>]
    //   SingleStringCharacter -> . [\] EscapeSequence
    //   SingleStringCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   SingleStringCharacters -> . SingleStringCharacter SingleStringCharacters
    //   StringLiteral -> ['] SingleStringCharacters . [']
    //   LegacyOctalEscapeSequence -> NonZeroOctalDigit . ?![OctalDigit]
    //   LegacyOctalEscapeSequence -> ZeroToThree . OctalDigit ?![OctalDigit]
    //   OctalDigit -> . [0 1 2 3 4 5 6 7]
    //   LegacyOctalEscapeSequence -> ZeroToThree . OctalDigit OctalDigit
    //   EscapeSequence -> [0] . ?![DecimalDigit]
    //   LegacyOctalEscapeSequence -> [0] . ?=[8 9]
    //   LegacyOctalEscapeSequence -> FourToSeven . OctalDigit
    //   LegacyOctalEscapeSequence -> ZeroToThree OctalDigit . ?![OctalDigit]
    //   LegacyOctalEscapeSequence -> ZeroToThree OctalDigit . OctalDigit
    // Transitions
    //   [<NUL>..<HT>, <VT>..<FF>, <SO>..&, (..[, ]..U+10FFFF] => State(6)
    //   [\] => State(34)
    //   ['] => State(413):StringLiteral
    [
        419, 34, 6, 6, 413, 6, 6, 419, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 419,
    ],
    // State(7)
    //   NoSubstitutionTemplate -> [`] . [`]
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateHead -> [`] . [$] [{]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   LineTerminatorSequence -> [<CR>] . ?![<LF>]
    //   LineTerminatorSequence -> [<CR>] . [<LF>]
    //   HexEscapeSequence -> [x] . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotEscapeSequence -> [x] . ?![HexDigit]
    //   NotEscapeSequence -> [x] . HexDigit ?![HexDigit]
    //   TemplateEscapeSequence -> [0] . ?![DecimalDigit]
    //   NotEscapeSequence -> [0] . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotEscapeSequence -> [u] HexDigit . ?![HexDigit]
    //   NotEscapeSequence -> [u] HexDigit . HexDigit ?![HexDigit]
    //   NotEscapeSequence -> [u] HexDigit . HexDigit HexDigit ?![HexDigit]
    //   HexEscapeSequence -> [x] HexDigit . HexDigit
    //   NotEscapeSequence -> [x] HexDigit . ?![HexDigit]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotEscapeSequence -> [u] HexDigit HexDigit . ?![HexDigit]
    //   NotEscapeSequence -> [u] HexDigit HexDigit . HexDigit ?![HexDigit]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotEscapeSequence -> [u] HexDigit HexDigit HexDigit . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %..[, ].._, a..U+10FFFF] => State(7)
    //   [\] => State(35)
    //   [$] => State(49)
    //   [`] => State(414):NoSubstitutionTemplate
    [
        7, 35, 7, 7, 7, 414, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 49, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 419,
    ],
    // State(8)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   UnicodeEscapeSequence -> [u] . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] . [{] CodePoint [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotEscapeSequence -> [u] . ?![HexDigit] ?![{]
    //   NotEscapeSequence -> [u] . HexDigit ?![HexDigit]
    //   NotEscapeSequence -> [u] . HexDigit HexDigit ?![HexDigit]
    //   NotEscapeSequence -> [u] . HexDigit HexDigit HexDigit ?![HexDigit]
    //   NotEscapeSequence -> [u] . [{] ?![HexDigit]
    //   NotEscapeSequence -> [u] . [{] NotCodePoint ?![HexDigit]
    //   NotEscapeSequence -> [u] . [{] CodePoint ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    // Transitions
    //   [<NUL>..#, %..[, ].._, a..z, |..U+10FFFF] => State(7)
    //   [{] => State(9)
    //   [\] => State(35)
    //   [$] => State(49)
    //   [`] => State(414):NoSubstitutionTemplate
    [
        7, 35, 7, 7, 7, 414, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 49, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 419,
    ],
    // State(9)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotEscapeSequence -> [u] [{] . ?![HexDigit]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] . CodePoint ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   CodePoint -> HexDigit . HexDigit
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(7)
    //   [0] => State(9)
    //   [1] => State(10)
    //   [2..9, A..F, a..f] => State(11)
    //   [\] => State(35)
    //   [$] => State(49)
    //   [`] => State(414):NoSubstitutionTemplate
    [
        7, 35, 7, 7, 7, 414, 7, 7, 7, 11, 7, 7, 7, 7, 7, 7, 7, 7, 7, 11, 11, 11, 49, 7, 7, 11, 11,
        7, 7, 7, 7, 7, 7, 7, 11, 7, 11, 7, 7, 11, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 10, 11, 11, 9, 7, 7, 7, 7, 7, 419,
    ],
    // State(10)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> [1] . [0] Hex4Digits
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(7)
    //   [1..9, A..F, a..f] => State(11)
    //   [0] => State(12)
    //   [\] => State(35)
    //   [$] => State(49)
    //   [`] => State(414):NoSubstitutionTemplate
    [
        7, 35, 7, 7, 7, 414, 7, 7, 7, 11, 7, 7, 7, 7, 7, 7, 7, 7, 7, 11, 11, 11, 49, 7, 7, 11, 11,
        7, 7, 7, 7, 7, 7, 7, 11, 7, 11, 7, 7, 11, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 11, 11, 11, 12, 7, 7, 7, 7, 7, 419,
    ],
    // State(11)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(7)
    //   [1..9, A..F, a..f] => State(11)
    //   [0] => State(13)
    //   [\] => State(35)
    //   [$] => State(49)
    //   [`] => State(414):NoSubstitutionTemplate
    [
        7, 35, 7, 7, 7, 414, 7, 7, 7, 11, 7, 7, 7, 7, 7, 7, 7, 7, 7, 11, 11, 11, 49, 7, 7, 11, 11,
        7, 7, 7, 7, 7, 7, 7, 11, 7, 11, 7, 7, 11, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 11, 11, 11, 13, 7, 7, 7, 7, 7, 419,
    ],
    // State(12)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> [1] [0] . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(7)
    //   [0] => State(13)
    //   [1..9, A..F, a..f] => State(14)
    //   [\] => State(35)
    //   [$] => State(49)
    //   [`] => State(414):NoSubstitutionTemplate
    [
        7, 35, 7, 7, 7, 414, 7, 7, 7, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 49, 7, 7, 14, 14,
        7, 7, 7, 7, 7, 7, 7, 14, 7, 14, 7, 7, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 14, 14, 14, 13, 7, 7, 7, 7, 7, 419,
    ],
    // State(13)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(7)
    //   [1..9, A..F, a..f] => State(15)
    //   [0] => State(16)
    //   [\] => State(35)
    //   [$] => State(49)
    //   [`] => State(414):NoSubstitutionTemplate
    [
        7, 35, 7, 7, 7, 414, 7, 7, 7, 15, 7, 7, 7, 7, 7, 7, 7, 7, 7, 15, 15, 15, 49, 7, 7, 15, 15,
        7, 7, 7, 7, 7, 7, 7, 15, 7, 15, 7, 7, 15, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 15, 15, 15, 16, 7, 7, 7, 7, 7, 419,
    ],
    // State(14)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(7)
    //   [0] => State(16)
    //   [1..9, A..F, a..f] => State(17)
    //   [\] => State(35)
    //   [$] => State(49)
    //   [`] => State(414):NoSubstitutionTemplate
    [
        7, 35, 7, 7, 7, 414, 7, 7, 7, 17, 7, 7, 7, 7, 7, 7, 7, 7, 7, 17, 17, 17, 49, 7, 7, 17, 17,
        7, 7, 7, 7, 7, 7, 7, 17, 7, 17, 7, 7, 17, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 17, 17, 17, 16, 7, 7, 7, 7, 7, 419,
    ],
    // State(15)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(7)
    //   [1..9, A..F, a..f] => State(18)
    //   [0] => State(19)
    //   [\] => State(35)
    //   [$] => State(49)
    //   [`] => State(414):NoSubstitutionTemplate
    [
        7, 35, 7, 7, 7, 414, 7, 7, 7, 18, 7, 7, 7, 7, 7, 7, 7, 7, 7, 18, 18, 18, 49, 7, 7, 18, 18,
        7, 7, 7, 7, 7, 7, 7, 18, 7, 18, 7, 7, 18, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 18, 18, 18, 19, 7, 7, 7, 7, 7, 419,
    ],
    // State(16)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(7)
    //   [0] => State(19)
    //   [1..9, A..F, a..f] => State(20)
    //   [\] => State(35)
    //   [$] => State(49)
    //   [`] => State(414):NoSubstitutionTemplate
    [
        7, 35, 7, 7, 7, 414, 7, 7, 7, 20, 7, 7, 7, 7, 7, 7, 7, 7, 7, 20, 20, 20, 49, 7, 7, 20, 20,
        7, 7, 7, 7, 7, 7, 7, 20, 7, 20, 7, 7, 20, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 20, 20, 20, 19, 7, 7, 7, 7, 7, 419,
    ],
    // State(17)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(7)
    //   [1..9, A..F, a..f] => State(21)
    //   [0] => State(22)
    //   [\] => State(35)
    //   [$] => State(49)
    //   [`] => State(414):NoSubstitutionTemplate
    [
        7, 35, 7, 7, 7, 414, 7, 7, 7, 21, 7, 7, 7, 7, 7, 7, 7, 7, 7, 21, 21, 21, 49, 7, 7, 21, 21,
        7, 7, 7, 7, 7, 7, 7, 21, 7, 21, 7, 7, 21, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 21, 21, 21, 22, 7, 7, 7, 7, 7, 419,
    ],
    // State(18)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(7)
    //   [1..9, A..F, a..f] => State(23)
    //   [0] => State(24)
    //   [\] => State(35)
    //   [$] => State(49)
    //   [`] => State(414):NoSubstitutionTemplate
    [
        7, 35, 7, 7, 7, 414, 7, 7, 7, 23, 7, 7, 7, 7, 7, 7, 7, 7, 7, 23, 23, 23, 49, 7, 7, 23, 23,
        7, 7, 7, 7, 7, 7, 7, 23, 7, 23, 7, 7, 23, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 23, 23, 23, 24, 7, 7, 7, 7, 7, 419,
    ],
    // State(19)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(7)
    //   [1..9, A..F, a..f] => State(25)
    //   [0] => State(26)
    //   [\] => State(35)
    //   [$] => State(49)
    //   [`] => State(414):NoSubstitutionTemplate
    [
        7, 35, 7, 7, 7, 414, 7, 7, 7, 25, 7, 7, 7, 7, 7, 7, 7, 7, 7, 25, 25, 25, 49, 7, 7, 25, 25,
        7, 7, 7, 7, 7, 7, 7, 25, 7, 25, 7, 7, 25, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 25, 25, 25, 26, 7, 7, 7, 7, 7, 419,
    ],
    // State(20)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(7)
    //   [0] => State(26)
    //   [1..9, A..F, a..f] => State(27)
    //   [\] => State(35)
    //   [$] => State(49)
    //   [`] => State(414):NoSubstitutionTemplate
    [
        7, 35, 7, 7, 7, 414, 7, 7, 7, 27, 7, 7, 7, 7, 7, 7, 7, 7, 7, 27, 27, 27, 49, 7, 7, 27, 27,
        7, 7, 7, 7, 7, 7, 7, 27, 7, 27, 7, 7, 27, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 27, 27, 27, 26, 7, 7, 7, 7, 7, 419,
    ],
    // State(21)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(7)
    //   [1..9, A..F, a..f] => State(28)
    //   [0] => State(29)
    //   [\] => State(35)
    //   [$] => State(49)
    //   [`] => State(414):NoSubstitutionTemplate
    [
        7, 35, 7, 7, 7, 414, 7, 7, 7, 28, 7, 7, 7, 7, 7, 7, 7, 7, 7, 28, 28, 28, 49, 7, 7, 28, 28,
        7, 7, 7, 7, 7, 7, 7, 28, 7, 28, 7, 7, 28, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 28, 28, 28, 29, 7, 7, 7, 7, 7, 419,
    ],
    // State(22)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(7)
    //   [1..9, A..F, a..f] => State(30)
    //   [0] => State(31)
    //   [\] => State(35)
    //   [$] => State(49)
    //   [`] => State(414):NoSubstitutionTemplate
    [
        7, 35, 7, 7, 7, 414, 7, 7, 7, 30, 7, 7, 7, 7, 7, 7, 7, 7, 7, 30, 30, 30, 49, 7, 7, 30, 30,
        7, 7, 7, 7, 7, 7, 7, 30, 7, 30, 7, 7, 30, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 30, 30, 30, 31, 7, 7, 7, 7, 7, 419,
    ],
    // State(23)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(7)
    //   [\] => State(35)
    //   [$] => State(49)
    //   [1..9, A..F, a..f] => State(62)
    //   [0] => State(63)
    //   [`] => State(414):NoSubstitutionTemplate
    [
        7, 35, 7, 7, 7, 414, 7, 7, 7, 62, 7, 7, 7, 7, 7, 7, 7, 7, 7, 62, 62, 62, 49, 7, 7, 62, 62,
        7, 7, 7, 7, 7, 7, 7, 62, 7, 62, 7, 7, 62, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 62, 62, 62, 63, 7, 7, 7, 7, 7, 419,
    ],
    // State(24)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(7)
    //   [\] => State(35)
    //   [$] => State(49)
    //   [1..9, A..F, a..f] => State(64)
    //   [0] => State(65)
    //   [`] => State(414):NoSubstitutionTemplate
    [
        7, 35, 7, 7, 7, 414, 7, 7, 7, 64, 7, 7, 7, 7, 7, 7, 7, 7, 7, 64, 64, 64, 49, 7, 7, 64, 64,
        7, 7, 7, 7, 7, 7, 7, 64, 7, 64, 7, 7, 64, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 64, 64, 64, 65, 7, 7, 7, 7, 7, 419,
    ],
    // State(25)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(7)
    //   [\] => State(35)
    //   [$] => State(49)
    //   [1..9, A..F, a..f] => State(57)
    //   [0] => State(58)
    //   [`] => State(414):NoSubstitutionTemplate
    [
        7, 35, 7, 7, 7, 414, 7, 7, 7, 57, 7, 7, 7, 7, 7, 7, 7, 7, 7, 57, 57, 57, 49, 7, 7, 57, 57,
        7, 7, 7, 7, 7, 7, 7, 57, 7, 57, 7, 7, 57, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 57, 57, 57, 58, 7, 7, 7, 7, 7, 419,
    ],
    // State(26)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(7)
    //   [\] => State(35)
    //   [$] => State(49)
    //   [0] => State(58)
    //   [1..9, A..F, a..f] => State(59)
    //   [`] => State(414):NoSubstitutionTemplate
    [
        7, 35, 7, 7, 7, 414, 7, 7, 7, 59, 7, 7, 7, 7, 7, 7, 7, 7, 7, 59, 59, 59, 49, 7, 7, 59, 59,
        7, 7, 7, 7, 7, 7, 7, 59, 7, 59, 7, 7, 59, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 59, 59, 59, 58, 7, 7, 7, 7, 7, 419,
    ],
    // State(27)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . ?![HexDigit]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(7)
    //   [\] => State(35)
    //   [$] => State(49)
    //   [1..9, A..F, a..f] => State(60)
    //   [0] => State(61)
    //   [`] => State(414):NoSubstitutionTemplate
    [
        7, 35, 7, 7, 7, 414, 7, 7, 7, 60, 7, 7, 7, 7, 7, 7, 7, 7, 7, 60, 60, 60, 49, 7, 7, 60, 60,
        7, 7, 7, 7, 7, 7, 7, 60, 7, 60, 7, 7, 60, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 60, 60, 60, 61, 7, 7, 7, 7, 7, 419,
    ],
    // State(28)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(7)
    //   [\] => State(35)
    //   [$] => State(49)
    //   [1..9, A..F, a..f] => State(74)
    //   [0] => State(75)
    //   [`] => State(414):NoSubstitutionTemplate
    [
        7, 35, 7, 7, 7, 414, 7, 7, 7, 74, 7, 7, 7, 7, 7, 7, 7, 7, 7, 74, 74, 74, 49, 7, 7, 74, 74,
        7, 7, 7, 7, 7, 7, 7, 74, 7, 74, 7, 7, 74, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 74, 74, 74, 75, 7, 7, 7, 7, 7, 419,
    ],
    // State(29)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(7)
    //   [\] => State(35)
    //   [$] => State(49)
    //   [1..9, A..F, a..f] => State(76)
    //   [0] => State(77)
    //   [`] => State(414):NoSubstitutionTemplate
    [
        7, 35, 7, 7, 7, 414, 7, 7, 7, 76, 7, 7, 7, 7, 7, 7, 7, 7, 7, 76, 76, 76, 49, 7, 7, 76, 76,
        7, 7, 7, 7, 7, 7, 7, 76, 7, 76, 7, 7, 76, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 76, 76, 76, 77, 7, 7, 7, 7, 7, 419,
    ],
    // State(30)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(7)
    //   [\] => State(35)
    //   [$] => State(49)
    //   [1..9, A..F, a..f] => State(78)
    //   [0] => State(79)
    //   [`] => State(414):NoSubstitutionTemplate
    [
        7, 35, 7, 7, 7, 414, 7, 7, 7, 78, 7, 7, 7, 7, 7, 7, 7, 7, 7, 78, 78, 78, 49, 7, 7, 78, 78,
        7, 7, 7, 7, 7, 7, 7, 78, 7, 78, 7, 7, 78, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 78, 78, 78, 79, 7, 7, 7, 7, 7, 419,
    ],
    // State(31)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] CodePoint . ?![HexDigit] ?![}]
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    // Transitions
    //   [<NUL>..#, %../, :..@, G..[, ].._, g..U+10FFFF] => State(7)
    //   [\] => State(35)
    //   [$] => State(49)
    //   [0] => State(79)
    //   [1..9, A..F, a..f] => State(80)
    //   [`] => State(414):NoSubstitutionTemplate
    [
        7, 35, 7, 7, 7, 414, 7, 7, 7, 80, 7, 7, 7, 7, 7, 7, 7, 7, 7, 80, 80, 80, 49, 7, 7, 80, 80,
        7, 7, 7, 7, 7, 7, 7, 80, 7, 80, 7, 7, 80, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 80, 80, 80, 79, 7, 7, 7, 7, 7, 419,
    ],
    // State(32)
    //   MultiLineComment -> [/] [*] . [*] [/]
    //   MultiLineCommentChars -> MultiLineNotAsteriskChar . MultiLineCommentChars
    //   PostAsteriskCommentChars -> MultiLineNotForwardSlashOrAsteriskChar . MultiLineCommentChars
    //   MultiLineComment -> [/] [*] . MultiLineCommentChars [*] [/]
    //   MultiLineCommentChars -> . MultiLineNotAsteriskChar
    //   MultiLineNotAsteriskChar -> . [SourceCharacter -*]
    //   MultiLineCommentChars -> . MultiLineNotAsteriskChar MultiLineCommentChars
    //   MultiLineCommentChars -> . [*]
    //   MultiLineCommentChars -> . [*] PostAsteriskCommentChars
    //   MultiLineComment -> [/] [*] MultiLineCommentChars . [*] [/]
    // Transitions
    //   [<NUL>..), +..U+10FFFF] => State(32)
    //   [*] => State(50)
    [
        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
        32, 32, 32, 32, 32, 32, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
        32, 32, 419,
    ],
    // State(33)
    //   DoubleStringCharacter -> [\] . EscapeSequence
    //   EscapeSequence -> . CharacterEscapeSequence
    //   CharacterEscapeSequence -> . SingleEscapeCharacter
    //   SingleEscapeCharacter -> . [' " \ b f n r t v]
    //   CharacterEscapeSequence -> . NonEscapeCharacter
    //   NonEscapeCharacter -> . [SourceCharacter -EscapeCharacter -LineTerminator]
    //   EscapeSequence -> . [0] ?![DecimalDigit]
    //   EscapeSequence -> . LegacyOctalEscapeSequence
    //   LegacyOctalEscapeSequence -> . [0] ?=[8 9]
    //   LegacyOctalEscapeSequence -> . NonZeroOctalDigit ?![OctalDigit]
    //   NonZeroOctalDigit -> . [OctalDigit -0]
    //   LegacyOctalEscapeSequence -> . ZeroToThree OctalDigit ?![OctalDigit]
    //   ZeroToThree -> . [0 1 2 3]
    //   LegacyOctalEscapeSequence -> . FourToSeven OctalDigit
    //   FourToSeven -> . [4 5 6 7]
    //   LegacyOctalEscapeSequence -> . ZeroToThree OctalDigit OctalDigit
    //   EscapeSequence -> . NonOctalDecimalEscapeSequence
    //   NonOctalDecimalEscapeSequence -> . [8 9]
    //   EscapeSequence -> . HexEscapeSequence
    //   HexEscapeSequence -> . [x] HexDigit HexDigit
    //   EscapeSequence -> . UnicodeEscapeSequence
    //   UnicodeEscapeSequence -> . [u] Hex4Digits
    //   UnicodeEscapeSequence -> . [u] [{] CodePoint [}]
    //   LineContinuation -> [\] . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    // Transitions
    //   [<NUL>..<FF>, <SO>..t, v..w, y..U+10FFFF] => State(5)
    //   [u] => State(38)
    //   [x] => State(52)
    //   [<CR>] => State(81)
    [
        81, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 38, 5, 5, 5, 5, 5, 5, 52, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 419,
    ],
    // State(34)
    //   SingleStringCharacter -> [\] . EscapeSequence
    //   EscapeSequence -> . CharacterEscapeSequence
    //   CharacterEscapeSequence -> . SingleEscapeCharacter
    //   SingleEscapeCharacter -> . [' " \ b f n r t v]
    //   CharacterEscapeSequence -> . NonEscapeCharacter
    //   NonEscapeCharacter -> . [SourceCharacter -EscapeCharacter -LineTerminator]
    //   EscapeSequence -> . [0] ?![DecimalDigit]
    //   EscapeSequence -> . LegacyOctalEscapeSequence
    //   LegacyOctalEscapeSequence -> . [0] ?=[8 9]
    //   LegacyOctalEscapeSequence -> . NonZeroOctalDigit ?![OctalDigit]
    //   NonZeroOctalDigit -> . [OctalDigit -0]
    //   LegacyOctalEscapeSequence -> . ZeroToThree OctalDigit ?![OctalDigit]
    //   ZeroToThree -> . [0 1 2 3]
    //   LegacyOctalEscapeSequence -> . FourToSeven OctalDigit
    //   FourToSeven -> . [4 5 6 7]
    //   LegacyOctalEscapeSequence -> . ZeroToThree OctalDigit OctalDigit
    //   EscapeSequence -> . NonOctalDecimalEscapeSequence
    //   NonOctalDecimalEscapeSequence -> . [8 9]
    //   EscapeSequence -> . HexEscapeSequence
    //   HexEscapeSequence -> . [x] HexDigit HexDigit
    //   EscapeSequence -> . UnicodeEscapeSequence
    //   UnicodeEscapeSequence -> . [u] Hex4Digits
    //   UnicodeEscapeSequence -> . [u] [{] CodePoint [}]
    //   LineContinuation -> [\] . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    // Transitions
    //   [<NUL>..<FF>, <SO>..t, v..w, y..U+10FFFF] => State(6)
    //   [u] => State(39)
    //   [x] => State(53)
    //   [<CR>] => State(82)
    [
        82, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 39, 6, 6, 6, 6, 6, 6, 53, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 419,
    ],
    // State(35)
    //   TemplateCharacter -> [\] . TemplateEscapeSequence
    //   TemplateEscapeSequence -> . CharacterEscapeSequence
    //   CharacterEscapeSequence -> . SingleEscapeCharacter
    //   SingleEscapeCharacter -> . [' " \ b f n r t v]
    //   CharacterEscapeSequence -> . NonEscapeCharacter
    //   NonEscapeCharacter -> . [SourceCharacter -EscapeCharacter -LineTerminator]
    //   TemplateEscapeSequence -> . [0] ?![DecimalDigit]
    //   TemplateEscapeSequence -> . HexEscapeSequence
    //   HexEscapeSequence -> . [x] HexDigit HexDigit
    //   TemplateEscapeSequence -> . UnicodeEscapeSequence
    //   UnicodeEscapeSequence -> . [u] Hex4Digits
    //   UnicodeEscapeSequence -> . [u] [{] CodePoint [}]
    //   TemplateCharacter -> [\] . NotEscapeSequence
    //   NotEscapeSequence -> . [0] DecimalDigit
    //   NotEscapeSequence -> . [DecimalDigit -0]
    //   NotEscapeSequence -> . [x] ?![HexDigit]
    //   NotEscapeSequence -> . [x] HexDigit ?![HexDigit]
    //   NotEscapeSequence -> . [u] ?![HexDigit] ?![{]
    //   NotEscapeSequence -> . [u] HexDigit ?![HexDigit]
    //   NotEscapeSequence -> . [u] HexDigit HexDigit ?![HexDigit]
    //   NotEscapeSequence -> . [u] HexDigit HexDigit HexDigit ?![HexDigit]
    //   NotEscapeSequence -> . [u] [{] ?![HexDigit]
    //   NotEscapeSequence -> . [u] [{] NotCodePoint ?![HexDigit]
    //   NotEscapeSequence -> . [u] [{] CodePoint ?![HexDigit] ?![}]
    //   LineContinuation -> [\] . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    // Transitions
    //   [<NUL>..t, v..U+10FFFF] => State(7)
    //   [u] => State(8)
    [
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 419,
    ],
    // State(36)
    //   UnicodeEscapeSequence -> [u] . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] . [{] CodePoint [}]
    // Transitions
    //   [0..9, A..F, a..f] => State(51)
    //   [{] => State(66)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 51, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 51, 51, 51, 419, 419, 419, 51, 51, 419, 419, 419, 419, 419, 419, 419, 51, 419, 51,
        419, 419, 51, 66, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 51, 51, 51, 51, 419, 419, 419, 419, 51, 419,
    ],
    // State(37)
    //   UnicodeEscapeSequence -> [u] . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] . [{] CodePoint [}]
    // Transitions
    //   [0..9, A..F, a..f] => State(54)
    //   [{] => State(68)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 54, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 54, 54, 54, 419, 419, 419, 54, 54, 419, 419, 419, 419, 419, 419, 419, 54, 419, 54,
        419, 419, 54, 68, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 54, 54, 54, 54, 419, 419, 419, 419, 54, 419,
    ],
    // State(38)
    //   UnicodeEscapeSequence -> [u] . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] . [{] CodePoint [}]
    // Transitions
    //   [0..9, A..F, a..f] => State(55)
    //   [{] => State(69)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 55, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 55, 55, 55, 419, 419, 419, 55, 55, 419, 419, 419, 419, 419, 419, 419, 55, 419, 55,
        419, 419, 55, 69, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 55, 55, 55, 55, 419, 419, 419, 419, 55, 419,
    ],
    // State(39)
    //   UnicodeEscapeSequence -> [u] . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] . [{] CodePoint [}]
    // Transitions
    //   [0..9, A..F, a..f] => State(56)
    //   [{] => State(70)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 56, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 56, 56, 56, 419, 419, 419, 56, 56, 419, 419, 419, 419, 419, 419, 419, 56, 419, 56,
        419, 419, 56, 70, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 56, 56, 56, 56, 419, 419, 419, 419, 56, 419,
    ],
    // State(40)
    //   ExponentPart_Sep -> ExponentIndicator . SignedInteger_Sep
    //   DecimalDigits_Sep -> . DecimalDigits_Sep DecimalDigit
    //   DecimalDigits_Sep -> . DecimalDigits_Sep NumericLiteralSeparator DecimalDigit
    //   SignedInteger_Sep -> . DecimalDigits_Sep
    //   DecimalDigits_Sep -> . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   SignedInteger_Sep -> . [+] DecimalDigits_Sep
    //   SignedInteger_Sep -> . [-] DecimalDigits_Sep
    // Transitions
    //   [+, -] => State(42)
    //   [0..9] => State(409):NumericLiteral
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 42, 42, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 409, 409, 409, 409, 419, 419, 419, 419, 42, 419,
    ],
    // State(41)
    //   DecimalDigits_Sep -> . DecimalDigits_Sep DecimalDigit
    //   DecimalDigits_Sep -> . DecimalDigits_Sep NumericLiteralSeparator DecimalDigit
    //   DecimalIntegerLiteral -> NonZeroDigit NumericLiteralSeparator . DecimalDigits_Sep
    //   DecimalDigits_Sep -> . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   DecimalBigIntegerLiteral -> NonZeroDigit NumericLiteralSeparator . DecimalDigits_Sep BigIntLiteralSuffix
    //   DecimalDigits_Sep -> DecimalDigits_Sep NumericLiteralSeparator . DecimalDigit
    // Transitions
    //   [0..9] => State(402):NumericLiteral
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 402, 402, 402, 402, 419, 419, 419, 419, 402, 419,
    ],
    // State(42)
    //   DecimalDigits_Sep -> . DecimalDigits_Sep DecimalDigit
    //   DecimalDigits_Sep -> . DecimalDigits_Sep NumericLiteralSeparator DecimalDigit
    //   SignedInteger_Sep -> [+] . DecimalDigits_Sep
    //   DecimalDigits_Sep -> . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   SignedInteger_Sep -> [-] . DecimalDigits_Sep
    //   DecimalDigits_Sep -> DecimalDigits_Sep NumericLiteralSeparator . DecimalDigit
    // Transitions
    //   [0..9] => State(409):NumericLiteral
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 409, 409, 409, 409, 419, 419, 419, 419, 409, 419,
    ],
    // State(43)
    //   DecimalDigits_Sep -> DecimalDigits_Sep NumericLiteralSeparator . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    // Transitions
    //   [0..9] => State(408):NumericLiteral
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 408, 408, 408, 408, 419, 419, 419, 419, 408, 419,
    ],
    // State(44)
    //   BinaryDigits_Sep -> . BinaryDigits_Sep BinaryDigit
    //   BinaryDigits_Sep -> . BinaryDigits_Sep NumericLiteralSeparator BinaryDigit
    //   BinaryIntegerLiteral_Sep -> [0] [b] . BinaryDigits_Sep
    //   BinaryDigits_Sep -> . BinaryDigit
    //   BinaryDigit -> . [0 1]
    //   BinaryIntegerLiteral_Sep -> [0] [B] . BinaryDigits_Sep
    //   BinaryDigits_Sep -> BinaryDigits_Sep NumericLiteralSeparator . BinaryDigit
    // Transitions
    //   [0..1] => State(410):NumericLiteral
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 410, 419, 419, 410, 419, 419, 419, 419, 410, 419,
    ],
    // State(45)
    //   OctalDigits_Sep -> . OctalDigits_Sep OctalDigit
    //   OctalDigits_Sep -> . OctalDigits_Sep NumericLiteralSeparator OctalDigit
    //   OctalIntegerLiteral_Sep -> [0] [o] . OctalDigits_Sep
    //   OctalDigits_Sep -> . OctalDigit
    //   OctalDigit -> . [0 1 2 3 4 5 6 7]
    //   OctalIntegerLiteral_Sep -> [0] [O] . OctalDigits_Sep
    //   OctalDigits_Sep -> OctalDigits_Sep NumericLiteralSeparator . OctalDigit
    // Transitions
    //   [0..7] => State(411):NumericLiteral
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 411, 411, 419, 411, 419, 419, 419, 419, 411, 419,
    ],
    // State(46)
    //   HexDigits_Sep -> . HexDigits_Sep HexDigit
    //   HexDigits_Sep -> . HexDigits_Sep NumericLiteralSeparator HexDigit
    //   HexIntegerLiteral_Sep -> [0] [x] . HexDigits_Sep
    //   HexDigits_Sep -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   HexIntegerLiteral_Sep -> [0] [X] . HexDigits_Sep
    //   HexDigits_Sep -> HexDigits_Sep NumericLiteralSeparator . HexDigit
    // Transitions
    //   [0..9, A..F, a..f] => State(412):NumericLiteral
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 412, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 412, 412, 412, 419, 419, 419, 412, 412, 419, 419, 419, 419, 419, 419, 419, 412, 419,
        412, 419, 419, 412, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 412, 412, 412, 412, 419, 419, 419, 419, 412, 419,
    ],
    // State(47)
    // Transitions
    //   [<NUL>../, :..U+10FFFF, (eof)] => State(348):OPTIONAL_CHAINING?
    [
        348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
        348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
        348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
        348, 348, 348, 348, 348, 348, 348, 348, 419, 419, 419, 419, 348, 348, 348, 348, 348, 348,
    ],
    // State(48)
    //   ELLIPSIS -> [.] [.] . [.]
    // Transitions
    //   [.] => State(355):ELLIPSIS
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 355, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 355, 419,
    ],
    // State(49)
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] ?![{]
    //   TemplateCharacter -> [$] . ?![{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] ?![<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] [$] . [{]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   TemplateHead -> [`] TemplateCharacters [$] . [{]
    // Transitions
    //   [<NUL>..#, %..[, ].._, a..z, |..U+10FFFF] => State(7)
    //   [\] => State(35)
    //   [$] => State(49)
    //   [`] => State(414):NoSubstitutionTemplate
    //   [{] => State(415):TemplateHead
    [
        7, 35, 7, 7, 7, 414, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 49, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 415, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 419,
    ],
    // State(50)
    //   MultiLineComment -> [/] [*] [*] . [/]
    //   PostAsteriskCommentChars -> [*] . PostAsteriskCommentChars
    //   MultiLineCommentChars -> [*] . PostAsteriskCommentChars
    //   PostAsteriskCommentChars -> . MultiLineNotForwardSlashOrAsteriskChar
    //   MultiLineNotForwardSlashOrAsteriskChar -> . [SourceCharacter -/ -*]
    //   PostAsteriskCommentChars -> . MultiLineNotForwardSlashOrAsteriskChar MultiLineCommentChars
    //   PostAsteriskCommentChars -> . [*]
    //   PostAsteriskCommentChars -> . [*] PostAsteriskCommentChars
    //   MultiLineComment -> [/] [*] MultiLineCommentChars . [*] [/]
    //   MultiLineComment -> [/] [*] MultiLineCommentChars [*] . [/]
    // Transitions
    //   [<NUL>..), +..., 0..U+10FFFF] => State(32)
    //   [*] => State(50)
    //   [/] => State(117):Comment
    [
        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
        32, 32, 32, 32, 32, 32, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 32,
        32, 32, 32, 419,
    ],
    // State(51)
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions
    //   [0..9, A..F, a..f] => State(67)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 67, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 67, 67, 67, 419, 419, 419, 67, 67, 419, 419, 419, 419, 419, 419, 419, 67, 419, 67,
        419, 419, 67, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 67, 67, 67, 67, 419, 419, 419, 419, 67, 419,
    ],
    // State(52)
    //   HexEscapeSequence -> [x] . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    // Transitions
    //   [0..9, A..F, a..f] => State(71)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 71, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 71, 71, 71, 419, 419, 419, 71, 71, 419, 419, 419, 419, 419, 419, 419, 71, 419, 71,
        419, 419, 71, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 71, 71, 71, 71, 419, 419, 419, 419, 71, 419,
    ],
    // State(53)
    //   HexEscapeSequence -> [x] . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    // Transitions
    //   [0..9, A..F, a..f] => State(72)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 72, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 72, 72, 72, 419, 419, 419, 72, 72, 419, 419, 419, 419, 419, 419, 419, 72, 419, 72,
        419, 419, 72, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 72, 72, 72, 72, 419, 419, 419, 419, 72, 419,
    ],
    // State(54)
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions
    //   [0..9, A..F, a..f] => State(73)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 73, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 73, 73, 73, 419, 419, 419, 73, 73, 419, 419, 419, 419, 419, 419, 419, 73, 419, 73,
        419, 419, 73, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 73, 73, 73, 73, 419, 419, 419, 419, 73, 419,
    ],
    // State(55)
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions
    //   [0..9, A..F, a..f] => State(52)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 52, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 52, 52, 52, 419, 419, 419, 52, 52, 419, 419, 419, 419, 419, 419, 419, 52, 419, 52,
        419, 419, 52, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 52, 52, 52, 52, 419, 419, 419, 419, 52, 419,
    ],
    // State(56)
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions
    //   [0..9, A..F, a..f] => State(53)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 53, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 53, 53, 53, 419, 419, 419, 53, 53, 419, 419, 419, 419, 419, 419, 419, 53, 419, 53,
        419, 419, 53, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 53, 53, 53, 53, 419, 419, 419, 419, 53, 419,
    ],
    // State(57)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(60)
    //   [0] => State(61)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 60, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 60, 60, 60, 419, 419, 419, 60, 60, 419, 419, 419, 419, 419, 419, 419, 60, 419, 60,
        419, 419, 60, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 60, 60, 60, 61, 419, 419, 419, 419, 60, 419,
    ],
    // State(58)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions
    //   [0] => State(58)
    //   [1..9, A..F, a..f] => State(59)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 59, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 59, 59, 59, 419, 419, 419, 59, 59, 419, 419, 419, 419, 419, 419, 419, 59, 419, 59,
        419, 419, 59, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 59, 59, 59, 58, 419, 419, 419, 419, 58, 419,
    ],
    // State(59)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions
    //   [1..9, A..F, a..f] => State(57)
    //   [0] => State(58)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 57, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 57, 57, 57, 419, 419, 419, 57, 57, 419, 419, 419, 419, 419, 419, 419, 57, 419, 57,
        419, 419, 57, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 57, 57, 57, 58, 419, 419, 419, 419, 57, 419,
    ],
    // State(60)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(62)
    //   [0] => State(63)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 62, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 62, 62, 62, 419, 419, 419, 62, 62, 419, 419, 419, 419, 419, 419, 419, 62, 419, 62,
        419, 419, 62, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 62, 62, 62, 63, 419, 419, 419, 419, 62, 419,
    ],
    // State(61)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(64)
    //   [0] => State(65)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 64, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 64, 64, 64, 419, 419, 419, 64, 64, 419, 419, 419, 419, 419, 419, 419, 64, 419, 64,
        419, 419, 64, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 64, 64, 64, 65, 419, 419, 419, 419, 64, 419,
    ],
    // State(62)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(74)
    //   [0] => State(75)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 74, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 74, 74, 74, 419, 419, 419, 74, 74, 419, 419, 419, 419, 419, 419, 419, 74, 419, 74,
        419, 419, 74, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 74, 74, 74, 75, 419, 419, 419, 419, 74, 419,
    ],
    // State(63)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(76)
    //   [0] => State(77)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 76, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 76, 76, 76, 419, 419, 419, 76, 76, 419, 419, 419, 419, 419, 419, 419, 76, 419, 76,
        419, 419, 76, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 76, 76, 76, 77, 419, 419, 419, 419, 76, 419,
    ],
    // State(64)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(78)
    //   [0] => State(79)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 78, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 78, 78, 78, 419, 419, 419, 78, 78, 419, 419, 419, 419, 419, 419, 419, 78, 419, 78,
        419, 419, 78, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 78, 78, 78, 79, 419, 419, 419, 419, 78, 419,
    ],
    // State(65)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [0] => State(79)
    //   [1..9, A..F, a..f] => State(80)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 80, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 80, 80, 80, 419, 419, 419, 80, 80, 419, 419, 419, 419, 419, 419, 419, 80, 419, 80,
        419, 419, 80, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 80, 80, 80, 79, 419, 419, 419, 419, 79, 419,
    ],
    // State(66)
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    // Transitions
    //   [2..9, A..F, a..f] => State(83)
    //   [1] => State(84)
    //   [0] => State(85)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 83, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 83, 83, 83, 419, 419, 419, 83, 83, 419, 419, 419, 419, 419, 419, 419, 83, 419, 83,
        419, 419, 83, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 84, 83, 83, 85, 419, 419, 419, 419, 83, 419,
    ],
    // State(67)
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions
    //   [0..9, A..F, a..f] => State(89)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 89, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 89, 89, 89, 419, 419, 419, 89, 89, 419, 419, 419, 419, 419, 419, 419, 89, 419, 89,
        419, 419, 89, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 89, 89, 89, 89, 419, 419, 419, 419, 89, 419,
    ],
    // State(68)
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    // Transitions
    //   [2..9, A..F, a..f] => State(90)
    //   [1] => State(91)
    //   [0] => State(92)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 90, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 90, 90, 90, 419, 419, 419, 90, 90, 419, 419, 419, 419, 419, 419, 419, 90, 419, 90,
        419, 419, 90, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 91, 90, 90, 92, 419, 419, 419, 419, 90, 419,
    ],
    // State(69)
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    // Transitions
    //   [2..9, A..F, a..f] => State(96)
    //   [1] => State(97)
    //   [0] => State(98)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 96, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 96, 96, 96, 419, 419, 419, 96, 96, 419, 419, 419, 419, 419, 419, 419, 96, 419, 96,
        419, 419, 96, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 97, 96, 96, 98, 419, 419, 419, 419, 96, 419,
    ],
    // State(70)
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    // Transitions
    //   [2..9, A..F, a..f] => State(101)
    //   [1] => State(102)
    //   [0] => State(103)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 101, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 101, 101, 101, 419, 419, 419, 101, 101, 419, 419, 419, 419, 419, 419, 419, 101, 419,
        101, 419, 419, 101, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 102, 101, 101, 103, 419, 419, 419, 419, 101, 419,
    ],
    // State(71)
    //   HexEscapeSequence -> [x] HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [0..9, A..F, a..f] => State(5)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 5, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 5, 5, 5, 419, 419, 419, 5, 5, 419, 419, 419, 419, 419, 419, 419, 5, 419, 5, 419, 419,
        5, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 5, 5, 5, 5, 419, 419, 419, 419, 5, 419,
    ],
    // State(72)
    //   HexEscapeSequence -> [x] HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [0..9, A..F, a..f] => State(6)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 6, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 6, 6, 6, 419, 419, 419, 6, 6, 419, 419, 419, 419, 419, 419, 419, 6, 419, 6, 419, 419,
        6, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 6, 6, 6, 6, 419, 419, 419, 419, 6, 419,
    ],
    // State(73)
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions
    //   [0..9, A..F, a..f] => State(108)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 108, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 108, 108, 108, 419, 419, 419, 108, 108, 419, 419, 419, 419, 419, 419, 419, 108, 419,
        108, 419, 419, 108, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 108, 108, 108, 108, 419, 419, 419, 419, 108, 419,
    ],
    // State(74)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(11)
    //   [0] => State(13)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 11, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 11, 11, 11, 419, 419, 419, 11, 11, 419, 419, 419, 419, 419, 419, 419, 11, 419, 11,
        419, 419, 11, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 11, 11, 11, 13, 419, 419, 419, 419, 11, 419,
    ],
    // State(75)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(15)
    //   [0] => State(16)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 15, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 15, 15, 15, 419, 419, 419, 15, 15, 419, 419, 419, 419, 419, 419, 419, 15, 419, 15,
        419, 419, 15, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 15, 15, 15, 16, 419, 419, 419, 419, 15, 419,
    ],
    // State(76)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(18)
    //   [0] => State(19)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 18, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 18, 18, 18, 419, 419, 419, 18, 18, 419, 419, 419, 419, 419, 419, 419, 18, 419, 18,
        419, 419, 18, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 18, 18, 18, 19, 419, 419, 419, 419, 18, 419,
    ],
    // State(77)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [0] => State(19)
    //   [1..9, A..F, a..f] => State(20)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 20, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 20, 20, 20, 419, 419, 419, 20, 20, 419, 419, 419, 419, 419, 419, 419, 20, 419, 20,
        419, 419, 20, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 20, 20, 20, 19, 419, 419, 419, 419, 19, 419,
    ],
    // State(78)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(23)
    //   [0] => State(24)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 23, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 23, 23, 23, 419, 419, 419, 23, 23, 419, 419, 419, 419, 419, 419, 419, 23, 419, 23,
        419, 419, 23, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 23, 23, 23, 24, 419, 419, 419, 419, 23, 419,
    ],
    // State(79)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [1..9, A..F, a..f] => State(25)
    //   [0] => State(26)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 25, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 25, 25, 25, 419, 419, 419, 25, 25, 419, 419, 419, 419, 419, 419, 419, 25, 419, 25,
        419, 419, 25, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 25, 25, 25, 26, 419, 419, 419, 419, 25, 419,
    ],
    // State(80)
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint ?![HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions
    //   [0] => State(26)
    //   [1..9, A..F, a..f] => State(27)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 27, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 27, 27, 27, 419, 419, 419, 27, 27, 419, 419, 419, 419, 419, 419, 419, 27, 419, 27,
        419, 419, 27, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 27, 27, 27, 26, 419, 419, 419, 419, 26, 419,
    ],
    // State(81)
    //   DoubleStringCharacters -> DoubleStringCharacter . DoubleStringCharacters
    //   StringLiteral -> ["] . DoubleStringCharacters ["]
    //   DoubleStringCharacters -> . DoubleStringCharacter
    //   DoubleStringCharacter -> . [SourceCharacter -" -\ -LineTerminator]
    //   DoubleStringCharacter -> . [<LS>]
    //   DoubleStringCharacter -> . [<PS>]
    //   DoubleStringCharacter -> . [\] EscapeSequence
    //   DoubleStringCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   LineTerminatorSequence -> [<CR>] . ?![<LF>]
    //   LineTerminatorSequence -> [<CR>] . [<LF>]
    //   DoubleStringCharacters -> . DoubleStringCharacter DoubleStringCharacters
    //   StringLiteral -> ["] DoubleStringCharacters . ["]
    // Transitions
    //   [<NUL>..<FF>, <SO>..!, #..[, ]..U+10FFFF] => State(5)
    //   [\] => State(33)
    //   ["] => State(413):StringLiteral
    [
        419, 33, 5, 413, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 419,
    ],
    // State(82)
    //   SingleStringCharacters -> SingleStringCharacter . SingleStringCharacters
    //   StringLiteral -> ['] . SingleStringCharacters [']
    //   SingleStringCharacters -> . SingleStringCharacter
    //   SingleStringCharacter -> . [SourceCharacter -' -\ -LineTerminator]
    //   SingleStringCharacter -> . [<LS>]
    //   SingleStringCharacter -> . [<PS>]
    //   SingleStringCharacter -> . [\] EscapeSequence
    //   SingleStringCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   LineTerminatorSequence -> [<CR>] . ?![<LF>]
    //   LineTerminatorSequence -> [<CR>] . [<LF>]
    //   SingleStringCharacters -> . SingleStringCharacter SingleStringCharacters
    //   StringLiteral -> ['] SingleStringCharacters . [']
    // Transitions
    //   [<NUL>..<FF>, <SO>..&, (..[, ]..U+10FFFF] => State(6)
    //   [\] => State(34)
    //   ['] => State(413):StringLiteral
    [
        419, 34, 6, 6, 413, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 419,
    ],
    // State(83)
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   CodePoint -> [1] [0] . Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [0..9, A..F, a..f] => State(86)
    //   [}] => State(174):IdentifierName
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 86, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 86, 86, 86, 419, 419, 419, 86, 86, 419, 419, 419, 419, 419, 419, 419, 86, 419, 86,
        419, 419, 86, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 86, 86, 86, 86, 419, 174, 419, 419, 86, 419,
    ],
    // State(84)
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> [1] . [0] Hex4Digits
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [0] => State(83)
    //   [1..9, A..F, a..f] => State(86)
    //   [}] => State(174):IdentifierName
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 86, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 86, 86, 86, 419, 419, 419, 86, 86, 419, 419, 419, 419, 419, 419, 419, 86, 419, 86,
        419, 419, 86, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 86, 86, 86, 83, 419, 174, 419, 419, 83, 419,
    ],
    // State(85)
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> HexDigit . Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [2..9, A..F, a..f] => State(83)
    //   [1] => State(84)
    //   [0] => State(85)
    //   [}] => State(174):IdentifierName
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 83, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 83, 83, 83, 419, 419, 419, 83, 83, 419, 419, 419, 419, 419, 419, 419, 83, 419, 83,
        419, 419, 83, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 84, 83, 83, 85, 419, 174, 419, 419, 83, 419,
    ],
    // State(86)
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [0..9, A..F, a..f] => State(87)
    //   [}] => State(174):IdentifierName
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 87, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 87, 87, 87, 419, 419, 419, 87, 87, 419, 419, 419, 419, 419, 419, 419, 87, 419, 87,
        419, 419, 87, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 87, 87, 87, 87, 419, 174, 419, 419, 87, 419,
    ],
    // State(87)
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions
    //   [0..9, A..F, a..f] => State(88)
    //   [}] => State(174):IdentifierName
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 88, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 88, 88, 88, 419, 419, 419, 88, 88, 419, 419, 419, 419, 419, 419, 419, 88, 419, 88,
        419, 419, 88, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 88, 88, 88, 88, 419, 174, 419, 419, 88, 419,
    ],
    // State(88)
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions
    //   [0..9, A..F, a..f] => State(109)
    //   [}] => State(174):IdentifierName
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 109, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 109, 109, 109, 419, 419, 419, 109, 109, 419, 419, 419, 419, 419, 419, 419, 109, 419,
        109, 419, 419, 109, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 109, 109, 109, 109, 419, 174, 419, 419, 109, 419,
    ],
    // State(89)
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions
    //   [0..9, A..F, a..f] => State(174):IdentifierName
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 174, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 174, 174, 174, 419, 419, 419, 174, 174, 419, 419, 419, 419, 419, 419, 419, 174, 419,
        174, 419, 419, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 419, 419, 174, 419,
    ],
    // State(90)
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   CodePoint -> [1] [0] . Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [0..9, A..F, a..f] => State(93)
    //   [}] => State(347):PrivateIdentifier
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 93, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 93, 93, 93, 419, 419, 419, 93, 93, 419, 419, 419, 419, 419, 419, 419, 93, 419, 93,
        419, 419, 93, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 93, 93, 93, 93, 419, 347, 419, 419, 93, 419,
    ],
    // State(91)
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> [1] . [0] Hex4Digits
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [0] => State(90)
    //   [1..9, A..F, a..f] => State(93)
    //   [}] => State(347):PrivateIdentifier
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 93, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 93, 93, 93, 419, 419, 419, 93, 93, 419, 419, 419, 419, 419, 419, 419, 93, 419, 93,
        419, 419, 93, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 93, 93, 93, 90, 419, 347, 419, 419, 90, 419,
    ],
    // State(92)
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> HexDigit . Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [2..9, A..F, a..f] => State(90)
    //   [1] => State(91)
    //   [0] => State(92)
    //   [}] => State(347):PrivateIdentifier
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 90, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 90, 90, 90, 419, 419, 419, 90, 90, 419, 419, 419, 419, 419, 419, 419, 90, 419, 90,
        419, 419, 90, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 91, 90, 90, 92, 419, 347, 419, 419, 90, 419,
    ],
    // State(93)
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [0..9, A..F, a..f] => State(94)
    //   [}] => State(347):PrivateIdentifier
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 94, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 94, 94, 94, 419, 419, 419, 94, 94, 419, 419, 419, 419, 419, 419, 419, 94, 419, 94,
        419, 419, 94, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 94, 94, 94, 94, 419, 347, 419, 419, 94, 419,
    ],
    // State(94)
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions
    //   [0..9, A..F, a..f] => State(95)
    //   [}] => State(347):PrivateIdentifier
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 95, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 95, 95, 95, 419, 419, 419, 95, 95, 419, 419, 419, 419, 419, 419, 419, 95, 419, 95,
        419, 419, 95, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 95, 95, 95, 95, 419, 347, 419, 419, 95, 419,
    ],
    // State(95)
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions
    //   [0..9, A..F, a..f] => State(110)
    //   [}] => State(347):PrivateIdentifier
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 110, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 110, 110, 110, 419, 419, 419, 110, 110, 419, 419, 419, 419, 419, 419, 419, 110, 419,
        110, 419, 419, 110, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 110, 110, 110, 110, 419, 347, 419, 419, 110, 419,
    ],
    // State(96)
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   CodePoint -> [1] [0] . Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [}] => State(5)
    //   [0..9, A..F, a..f] => State(99)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 99, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 99, 99, 99, 419, 419, 419, 99, 99, 419, 419, 419, 419, 419, 419, 419, 99, 419, 99,
        419, 419, 99, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 99, 99, 99, 99, 419, 5, 419, 419, 5, 419,
    ],
    // State(97)
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> [1] . [0] Hex4Digits
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [}] => State(5)
    //   [0] => State(96)
    //   [1..9, A..F, a..f] => State(99)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 99, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 99, 99, 99, 419, 419, 419, 99, 99, 419, 419, 419, 419, 419, 419, 419, 99, 419, 99,
        419, 419, 99, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 99, 99, 99, 96, 419, 5, 419, 419, 5, 419,
    ],
    // State(98)
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> HexDigit . Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [}] => State(5)
    //   [2..9, A..F, a..f] => State(96)
    //   [1] => State(97)
    //   [0] => State(98)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 96, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 96, 96, 96, 419, 419, 419, 96, 96, 419, 419, 419, 419, 419, 419, 419, 96, 419, 96,
        419, 419, 96, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 97, 96, 96, 98, 419, 5, 419, 419, 5, 419,
    ],
    // State(99)
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [}] => State(5)
    //   [0..9, A..F, a..f] => State(100)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 100, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 100, 100, 100, 419, 419, 419, 100, 100, 419, 419, 419, 419, 419, 419, 419, 100, 419,
        100, 419, 419, 100, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 100, 100, 100, 100, 419, 5, 419, 419, 5, 419,
    ],
    // State(100)
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions
    //   [}] => State(5)
    //   [0..9, A..F, a..f] => State(106)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 106, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 106, 106, 106, 419, 419, 419, 106, 106, 419, 419, 419, 419, 419, 419, 419, 106, 419,
        106, 419, 419, 106, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 106, 106, 106, 106, 419, 5, 419, 419, 5, 419,
    ],
    // State(101)
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   CodePoint -> [1] [0] . Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [}] => State(6)
    //   [0..9, A..F, a..f] => State(104)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 104, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 104, 104, 104, 419, 419, 419, 104, 104, 419, 419, 419, 419, 419, 419, 419, 104, 419,
        104, 419, 419, 104, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 104, 104, 104, 104, 419, 6, 419, 419, 6, 419,
    ],
    // State(102)
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> [1] . [0] Hex4Digits
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [}] => State(6)
    //   [0] => State(101)
    //   [1..9, A..F, a..f] => State(104)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 104, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 104, 104, 104, 419, 419, 419, 104, 104, 419, 419, 419, 419, 419, 419, 419, 104, 419,
        104, 419, 419, 104, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 104, 104, 104, 101, 419, 6, 419, 419, 6, 419,
    ],
    // State(103)
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> HexDigit . Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [}] => State(6)
    //   [2..9, A..F, a..f] => State(101)
    //   [1] => State(102)
    //   [0] => State(103)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 101, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 101, 101, 101, 419, 419, 419, 101, 101, 419, 419, 419, 419, 419, 419, 419, 101, 419,
        101, 419, 419, 101, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 102, 101, 101, 103, 419, 6, 419, 419, 6, 419,
    ],
    // State(104)
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions
    //   [}] => State(6)
    //   [0..9, A..F, a..f] => State(105)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 105, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 105, 105, 105, 419, 419, 419, 105, 105, 419, 419, 419, 419, 419, 419, 419, 105, 419,
        105, 419, 419, 105, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 105, 105, 105, 105, 419, 6, 419, 419, 6, 419,
    ],
    // State(105)
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions
    //   [}] => State(6)
    //   [0..9, A..F, a..f] => State(107)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 107, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 107, 107, 107, 419, 419, 419, 107, 107, 419, 419, 419, 419, 419, 419, 419, 107, 419,
        107, 419, 419, 107, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 107, 107, 107, 107, 419, 6, 419, 419, 6, 419,
    ],
    // State(106)
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions
    //   [}] => State(5)
    //   [0..9, A..F, a..f] => State(111)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 111, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 111, 111, 111, 419, 419, 419, 111, 111, 419, 419, 419, 419, 419, 419, 419, 111, 419,
        111, 419, 419, 111, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 111, 111, 111, 111, 419, 5, 419, 419, 5, 419,
    ],
    // State(107)
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions
    //   [}] => State(6)
    //   [0..9, A..F, a..f] => State(112)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 112, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 112, 112, 112, 419, 419, 419, 112, 112, 419, 419, 419, 419, 419, 419, 419, 112, 419,
        112, 419, 419, 112, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 112, 112, 112, 112, 419, 6, 419, 419, 6, 419,
    ],
    // State(108)
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions
    //   [0..9, A..F, a..f] => State(347):PrivateIdentifier
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 347, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 347, 347, 347, 419, 419, 419, 347, 347, 419, 419, 419, 419, 419, 419, 419, 347, 419,
        347, 419, 419, 347, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 347, 347, 347, 347, 419, 419, 419, 419, 347, 419,
    ],
    // State(109)
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions
    //   [}] => State(174):IdentifierName
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 174, 419, 419, 174, 419,
    ],
    // State(110)
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions
    //   [}] => State(347):PrivateIdentifier
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 347, 419, 419, 347, 419,
    ],
    // State(111)
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions
    //   [}] => State(5)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 5, 419, 419, 5, 419,
    ],
    // State(112)
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions
    //   [}] => State(6)
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 6, 419, 419, 6, 419,
    ],
    // State(113)
    //   WhiteSpaceSequence -> WhiteSpace . WhiteSpaceSequence
    //   WhiteSpaceSequence -> WhiteSpace .
    //   WhiteSpaceSequence -> . WhiteSpace
    //   WhiteSpace -> [<TAB> <VT> <FF> <ZWNBSP> <USP>] .
    //   WhiteSpace -> . [<TAB> <VT> <FF> <ZWNBSP> <USP>]
    //   WhiteSpaceSequence -> WhiteSpace WhiteSpaceSequence .
    //   WhiteSpaceSequence -> . WhiteSpace WhiteSpaceSequence
    // Transitions
    //   [<HT>, <VT>..<FF>, <SP>, U+00A0, U+1680, U+2000..U+200A, U+200F, U+205F, U+FEFF] => State(113):WhiteSpaceSequence
    [
        419, 419, 419, 419, 419, 419, 113, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 113, 419,
    ],
    // State(114)
    //   LineTerminatorSequence -> [<LF>] .
    //   LineTerminatorSequence -> [<LS>] .
    //   LineTerminatorSequence -> [<PS>] .
    //   LineTerminatorSequence -> [<CR>] [<LF>] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(115)
    //   LineTerminatorSequence -> [<CR>] ?![<LF>] .
    //   LineTerminatorSequence -> [<CR>] . ?![<LF>]
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(116)
    //   Comment -> SingleLineComment .
    //   SingleLineComment -> [/] [/] .
    //   SingleLineCommentChars -> SingleLineCommentChar . SingleLineCommentChars
    //   SingleLineComment -> [/] [/] . SingleLineCommentChars
    //   SingleLineCommentChars -> . SingleLineCommentChar
    //   SingleLineCommentChar -> . [SourceCharacter -LineTerminator]
    //   SingleLineCommentChars -> . SingleLineCommentChar SingleLineCommentChars
    //   SingleLineComment -> [/] [/] SingleLineCommentChars .
    //   SingleLineCommentChars -> SingleLineCommentChar .
    //   SingleLineCommentChar -> [SourceCharacter -LineTerminator] .
    //   SingleLineCommentChars -> SingleLineCommentChar SingleLineCommentChars .
    // Transitions
    //   [<NUL>..<HT>, <VT>..<FF>, <SO>..U+2027, U+202A..U+10FFFF] => State(116):Comment
    [
        419, 116, 116, 116, 116, 116, 116, 419, 419, 116, 116, 116, 116, 116, 116, 116, 116, 116,
        116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
        116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
        116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 419,
    ],
    // State(117)
    //   Comment -> MultiLineComment .
    //   MultiLineComment -> [/] [*] [*] [/] .
    //   MultiLineComment -> [/] [*] MultiLineCommentChars [*] [/] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(118)
    //   BREAK -> [b] [r] [e] [a] [k] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(119)
    //   CASE -> [c] [a] [s] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(120)
    //   CATCH -> [c] [a] [t] [c] [h] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(121)
    //   CLASS -> [c] [l] [a] [s] [s] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(122)
    //   CONST -> [c] [o] [n] [s] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(123)
    //   CONTINUE -> [c] [o] [n] [t] [i] [n] [u] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(124)
    //   DEBUGGER -> [d] [e] [b] [u] [g] [g] [e] [r] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(125)
    //   DEFAULT -> [d] [e] [f] [a] [u] [l] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(126)
    //   DELETE -> [d] [e] [l] [e] [t] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(127)
    //   DO -> [d] [o] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(128)
    //   ELSE -> [e] [l] [s] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(129)
    //   ENUM -> [e] [n] [u] [m] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(130)
    //   EXPORT -> [e] [x] [p] [o] [r] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(131)
    //   EXTENDS -> [e] [x] [t] [e] [n] [d] [s] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(132)
    //   FALSE -> [f] [a] [l] [s] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(133)
    //   FINALLY -> [f] [i] [n] [a] [l] [l] [y] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(134)
    //   FOR -> [f] [o] [r] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(135)
    //   FUNCTION -> [f] [u] [n] [c] [t] [i] [o] [n] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(136)
    //   IF -> [i] [f] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(137)
    //   IMPORT -> [i] [m] [p] [o] [r] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(138)
    //   IN -> [i] [n] .
    //   INSTANCEOF -> [i] [n] . [s] [t] [a] [n] [c] [e] [o] [f]
    //   INTERFACE -> [i] [n] . [t] [e] [r] [f] [a] [c] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..r, u..z, U+200C..U+200D] => State(174):IdentifierName
    //   [s] => State(175):IdentifierName
    //   [t] => State(177):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 175, 177, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(139)
    //   INSTANCEOF -> [i] [n] [s] [t] [a] [n] [c] [e] [o] [f] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(140)
    //   NEW -> [n] [e] [w] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(141)
    //   NULL -> [n] [u] [l] [l] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(142)
    //   RETURN -> [r] [e] [t] [u] [r] [n] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(143)
    //   SUPER -> [s] [u] [p] [e] [r] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(144)
    //   SWITCH -> [s] [w] [i] [t] [c] [h] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(145)
    //   THIS -> [t] [h] [i] [s] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(146)
    //   THROW -> [t] [h] [r] [o] [w] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(147)
    //   TRUE -> [t] [r] [u] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(148)
    //   TRY -> [t] [r] [y] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(149)
    //   TYPEOF -> [t] [y] [p] [e] [o] [f] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(150)
    //   VAR -> [v] [a] [r] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(151)
    //   VOID -> [v] [o] [i] [d] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(152)
    //   WHILE -> [w] [h] [i] [l] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(153)
    //   WITH -> [w] [i] [t] [h] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(154)
    //   AWAIT -> [a] [w] [a] [i] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(155)
    //   YIELD -> [y] [i] [e] [l] [d] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(156)
    //   LET -> [l] [e] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(157)
    //   STATIC -> [s] [t] [a] [t] [i] [c] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(158)
    //   IMPLEMENTS -> [i] [m] [p] [l] [e] [m] [e] [n] [t] [s] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(159)
    //   INTERFACE -> [i] [n] [t] [e] [r] [f] [a] [c] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(160)
    //   PACKAGE -> [p] [a] [c] [k] [a] [g] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(161)
    //   PRIVATE -> [p] [r] [i] [v] [a] [t] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(162)
    //   PROTECTED -> [p] [r] [o] [t] [e] [c] [t] [e] [d] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(163)
    //   PUBLIC -> [p] [u] [b] [l] [i] [c] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(164)
    //   AS -> [a] [s] .
    //   ASYNC -> [a] [s] . [y] [n] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..x, z, U+200C..U+200D] => State(174):IdentifierName
    //   [y] => State(263):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 263, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(165)
    //   ASYNC -> [a] [s] [y] [n] [c] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(166)
    //   FROM -> [f] [r] [o] [m] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(167)
    //   GET -> [g] [e] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(168)
    //   META -> [m] [e] [t] [a] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(169)
    //   OF -> [o] [f] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(170)
    //   SET -> [s] [e] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(171)
    //   TARGET -> [t] [a] [r] [g] [e] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(172)
    //   BREAK -> [b] . [r] [e] [a] [k]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(174):IdentifierName
    //   [r] => State(217):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 217, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(173)
    //   RETURN -> [r] . [e] [t] [u] [r] [n]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(174):IdentifierName
    //   [e] => State(192):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 192, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(174)
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    //   IdentifierStartChar -> [$] .
    //   IdentifierStartChar -> [_] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   IdentifierPartChar -> [$] .
    //   IdentifierPartChar -> [<ZWNJ>] .
    //   IdentifierPartChar -> [<ZWJ>] .
    //   IdentifierStart -> [\] UnicodeEscapeSequence .
    //   UnicodeEscapeSequence -> [u] [{] CodePoint [}] .
    //   IdentifierPart -> [\] UnicodeEscapeSequence .
    //   UnicodeEscapeSequence -> [u] Hex4Digits .
    //   Hex4Digits -> HexDigit HexDigit HexDigit HexDigit .
    //   HexDigit -> [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F] .
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(175)
    //   INSTANCEOF -> [i] [n] [s] . [t] [a] [n] [c] [e] [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(174):IdentifierName
    //   [t] => State(179):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 179, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(176)
    //   FUNCTION -> [f] [u] . [n] [c] [t] [i] [o] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(174):IdentifierName
    //   [n] => State(186):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 186, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(177)
    //   INTERFACE -> [i] [n] [t] . [e] [r] [f] [a] [c] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(174):IdentifierName
    //   [e] => State(187):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 187, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(178)
    //   PROTECTED -> [p] [r] [o] . [t] [e] [c] [t] [e] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(174):IdentifierName
    //   [t] => State(188):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 188, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(179)
    //   INSTANCEOF -> [i] [n] [s] [t] . [a] [n] [c] [e] [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(174):IdentifierName
    //   [a] => State(189):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        189, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(180)
    //   IMPLEMENTS -> [i] [m] [p] [l] . [e] [m] [e] [n] [t] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(174):IdentifierName
    //   [e] => State(190):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 190, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(181)
    //   PACKAGE -> [p] . [a] [c] [k] [a] [g] [e]
    //   PRIVATE -> [p] . [r] [i] [v] [a] [t] [e]
    //   PROTECTED -> [p] . [r] [o] [t] [e] [c] [t] [e] [d]
    //   PUBLIC -> [p] . [u] [b] [l] [i] [c]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, b..q, s..t, v..z, U+200C..U+200D] => State(174):IdentifierName
    //   [r] => State(183):IdentifierName
    //   [a] => State(184):IdentifierName
    //   [u] => State(200):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 183, 200, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        184, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(182)
    //   FINALLY -> [f] [i] . [n] [a] [l] [l] [y]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(174):IdentifierName
    //   [n] => State(203):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 203, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(183)
    //   PRIVATE -> [p] [r] . [i] [v] [a] [t] [e]
    //   PROTECTED -> [p] [r] . [o] [t] [e] [c] [t] [e] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..h, j..n, p..z, U+200C..U+200D] => State(174):IdentifierName
    //   [o] => State(178):IdentifierName
    //   [i] => State(204):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 178, 204, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(184)
    //   PACKAGE -> [p] [a] . [c] [k] [a] [g] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(174):IdentifierName
    //   [c] => State(205):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 205, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(185)
    //   DEBUGGER -> [d] [e] [b] . [u] [g] [g] [e] [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..t, v..z, U+200C..U+200D] => State(174):IdentifierName
    //   [u] => State(207):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 207, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(186)
    //   FUNCTION -> [f] [u] [n] . [c] [t] [i] [o] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(174):IdentifierName
    //   [c] => State(208):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 208, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(187)
    //   INTERFACE -> [i] [n] [t] [e] . [r] [f] [a] [c] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(174):IdentifierName
    //   [r] => State(209):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 209, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(188)
    //   PROTECTED -> [p] [r] [o] [t] . [e] [c] [t] [e] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(174):IdentifierName
    //   [e] => State(210):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 210, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(189)
    //   INSTANCEOF -> [i] [n] [s] [t] [a] . [n] [c] [e] [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(174):IdentifierName
    //   [n] => State(211):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 211, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(190)
    //   IMPLEMENTS -> [i] [m] [p] [l] [e] . [m] [e] [n] [t] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..l, n..z, U+200C..U+200D] => State(174):IdentifierName
    //   [m] => State(212):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 212, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(191)
    //   YIELD -> [y] . [i] [e] [l] [d]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(174):IdentifierName
    //   [i] => State(223):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 223, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(192)
    //   RETURN -> [r] [e] . [t] [u] [r] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(174):IdentifierName
    //   [t] => State(225):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 225, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(193)
    //   EXPORT -> [e] [x] . [p] [o] [r] [t]
    //   EXTENDS -> [e] [x] . [t] [e] [n] [d] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..o, q..s, u..z, U+200C..U+200D] => State(174):IdentifierName
    //   [t] => State(201):IdentifierName
    //   [p] => State(226):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 226, 174, 174, 174, 174, 174, 174, 201, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(194)
    //   STATIC -> [s] [t] . [a] [t] [i] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(174):IdentifierName
    //   [a] => State(227):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        227, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(195)
    //   SWITCH -> [s] [w] . [i] [t] [c] [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(174):IdentifierName
    //   [i] => State(228):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 228, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(196)
    //   TARGET -> [t] [a] . [r] [g] [e] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(174):IdentifierName
    //   [r] => State(229):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 229, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(197)
    //   TYPEOF -> [t] [y] . [p] [e] [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..o, q..z, U+200C..U+200D] => State(174):IdentifierName
    //   [p] => State(230):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 230, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(198)
    //   IMPORT -> [i] [m] . [p] [o] [r] [t]
    //   IMPLEMENTS -> [i] [m] . [p] [l] [e] [m] [e] [n] [t] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..o, q..z, U+200C..U+200D] => State(174):IdentifierName
    //   [p] => State(231):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 231, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(199)
    //   DEBUGGER -> [d] [e] . [b] [u] [g] [g] [e] [r]
    //   DEFAULT -> [d] [e] . [f] [a] [u] [l] [t]
    //   DELETE -> [d] [e] . [l] [e] [t] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a, c..e, g..k, m..z, U+200C..U+200D] => State(174):IdentifierName
    //   [b] => State(185):IdentifierName
    //   [f] => State(202):IdentifierName
    //   [l] => State(232):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 185, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 232, 174, 174, 202, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(200)
    //   PUBLIC -> [p] [u] . [b] [l] [i] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a, c..z, U+200C..U+200D] => State(174):IdentifierName
    //   [b] => State(233):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 233, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(201)
    //   EXTENDS -> [e] [x] [t] . [e] [n] [d] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(174):IdentifierName
    //   [e] => State(234):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 234, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(202)
    //   DEFAULT -> [d] [e] [f] . [a] [u] [l] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(174):IdentifierName
    //   [a] => State(235):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        235, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(203)
    //   FINALLY -> [f] [i] [n] . [a] [l] [l] [y]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(174):IdentifierName
    //   [a] => State(236):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        236, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(204)
    //   PRIVATE -> [p] [r] [i] . [v] [a] [t] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..u, w..z, U+200C..U+200D] => State(174):IdentifierName
    //   [v] => State(237):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 237,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(205)
    //   PACKAGE -> [p] [a] [c] . [k] [a] [g] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..j, l..z, U+200C..U+200D] => State(174):IdentifierName
    //   [k] => State(238):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 238,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(206)
    //   CONTINUE -> [c] [o] [n] [t] . [i] [n] [u] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(174):IdentifierName
    //   [i] => State(239):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 239, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(207)
    //   DEBUGGER -> [d] [e] [b] [u] . [g] [g] [e] [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..f, h..z, U+200C..U+200D] => State(174):IdentifierName
    //   [g] => State(240):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 240, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(208)
    //   FUNCTION -> [f] [u] [n] [c] . [t] [i] [o] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(174):IdentifierName
    //   [t] => State(241):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 241, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(209)
    //   INTERFACE -> [i] [n] [t] [e] [r] . [f] [a] [c] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..e, g..z, U+200C..U+200D] => State(174):IdentifierName
    //   [f] => State(242):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 242, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(210)
    //   PROTECTED -> [p] [r] [o] [t] [e] . [c] [t] [e] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(174):IdentifierName
    //   [c] => State(243):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 243, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(211)
    //   INSTANCEOF -> [i] [n] [s] [t] [a] [n] . [c] [e] [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(174):IdentifierName
    //   [c] => State(244):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 244, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(212)
    //   IMPLEMENTS -> [i] [m] [p] [l] [e] [m] . [e] [n] [t] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(174):IdentifierName
    //   [e] => State(245):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 245, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(213)
    //   ELSE -> [e] . [l] [s] [e]
    //   ENUM -> [e] . [n] [u] [m]
    //   EXPORT -> [e] . [x] [p] [o] [r] [t]
    //   EXTENDS -> [e] . [x] [t] [e] [n] [d] [s]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..k, m, o..w, y..z, U+200C..U+200D] => State(174):IdentifierName
    //   [x] => State(193):IdentifierName
    //   [l] => State(253):IdentifierName
    //   [n] => State(254):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        193, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 253, 254, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(214)
    //   CASE -> [c] . [a] [s] [e]
    //   CATCH -> [c] . [a] [t] [c] [h]
    //   CLASS -> [c] . [l] [a] [s] [s]
    //   CONST -> [c] . [o] [n] [s] [t]
    //   CONTINUE -> [c] . [o] [n] [t] [i] [n] [u] [e]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, b..k, m..n, p..z, U+200C..U+200D] => State(174):IdentifierName
    //   [l] => State(219):IdentifierName
    //   [o] => State(220):IdentifierName
    //   [a] => State(255):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 219, 174, 174, 174, 174,
        255, 220, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(215)
    //   META -> [m] . [e] [t] [a]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(174):IdentifierName
    //   [e] => State(259):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 259, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(216)
    //   WHILE -> [w] . [h] [i] [l] [e]
    //   WITH -> [w] . [i] [t] [h]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..g, j..z, U+200C..U+200D] => State(174):IdentifierName
    //   [h] => State(224):IdentifierName
    //   [i] => State(260):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 224, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 260, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(217)
    //   BREAK -> [b] [r] . [e] [a] [k]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(174):IdentifierName
    //   [e] => State(262):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 262, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(218)
    //   AWAIT -> [a] [w] . [a] [i] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(174):IdentifierName
    //   [a] => State(264):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        264, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(219)
    //   CLASS -> [c] [l] . [a] [s] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(174):IdentifierName
    //   [a] => State(266):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        266, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(220)
    //   CONST -> [c] [o] . [n] [s] [t]
    //   CONTINUE -> [c] [o] . [n] [t] [i] [n] [u] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(174):IdentifierName
    //   [n] => State(267):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 267, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(221)
    //   SUPER -> [s] [u] . [p] [e] [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..o, q..z, U+200C..U+200D] => State(174):IdentifierName
    //   [p] => State(268):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 268, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(222)
    //   FALSE -> [f] [a] . [l] [s] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(174):IdentifierName
    //   [l] => State(270):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 270, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(223)
    //   YIELD -> [y] [i] . [e] [l] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(174):IdentifierName
    //   [e] => State(271):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 271, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(224)
    //   WHILE -> [w] [h] . [i] [l] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(174):IdentifierName
    //   [i] => State(272):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 272, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(225)
    //   RETURN -> [r] [e] [t] . [u] [r] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..t, v..z, U+200C..U+200D] => State(174):IdentifierName
    //   [u] => State(273):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 273, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(226)
    //   EXPORT -> [e] [x] [p] . [o] [r] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..n, p..z, U+200C..U+200D] => State(174):IdentifierName
    //   [o] => State(274):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 274, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(227)
    //   STATIC -> [s] [t] [a] . [t] [i] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(174):IdentifierName
    //   [t] => State(275):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 275, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(228)
    //   SWITCH -> [s] [w] [i] . [t] [c] [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(174):IdentifierName
    //   [t] => State(276):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 276, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(229)
    //   TARGET -> [t] [a] [r] . [g] [e] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..f, h..z, U+200C..U+200D] => State(174):IdentifierName
    //   [g] => State(277):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 277, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(230)
    //   TYPEOF -> [t] [y] [p] . [e] [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(174):IdentifierName
    //   [e] => State(278):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 278, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(231)
    //   IMPORT -> [i] [m] [p] . [o] [r] [t]
    //   IMPLEMENTS -> [i] [m] [p] . [l] [e] [m] [e] [n] [t] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..k, m..n, p..z, U+200C..U+200D] => State(174):IdentifierName
    //   [l] => State(180):IdentifierName
    //   [o] => State(279):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 180, 174, 174, 174, 174,
        174, 279, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(232)
    //   DELETE -> [d] [e] [l] . [e] [t] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(174):IdentifierName
    //   [e] => State(280):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 280, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(233)
    //   PUBLIC -> [p] [u] [b] . [l] [i] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(174):IdentifierName
    //   [l] => State(281):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 281, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(234)
    //   EXTENDS -> [e] [x] [t] [e] . [n] [d] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(174):IdentifierName
    //   [n] => State(282):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 282, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(235)
    //   DEFAULT -> [d] [e] [f] [a] . [u] [l] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..t, v..z, U+200C..U+200D] => State(174):IdentifierName
    //   [u] => State(283):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 283, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(236)
    //   FINALLY -> [f] [i] [n] [a] . [l] [l] [y]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(174):IdentifierName
    //   [l] => State(284):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 284, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(237)
    //   PRIVATE -> [p] [r] [i] [v] . [a] [t] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(174):IdentifierName
    //   [a] => State(285):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        285, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(238)
    //   PACKAGE -> [p] [a] [c] [k] . [a] [g] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(174):IdentifierName
    //   [a] => State(286):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        286, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(239)
    //   CONTINUE -> [c] [o] [n] [t] [i] . [n] [u] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(174):IdentifierName
    //   [n] => State(287):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 287, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(240)
    //   DEBUGGER -> [d] [e] [b] [u] [g] . [g] [e] [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..f, h..z, U+200C..U+200D] => State(174):IdentifierName
    //   [g] => State(288):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 288, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(241)
    //   FUNCTION -> [f] [u] [n] [c] [t] . [i] [o] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(174):IdentifierName
    //   [i] => State(289):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 289, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(242)
    //   INTERFACE -> [i] [n] [t] [e] [r] [f] . [a] [c] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(174):IdentifierName
    //   [a] => State(290):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        290, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(243)
    //   PROTECTED -> [p] [r] [o] [t] [e] [c] . [t] [e] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(174):IdentifierName
    //   [t] => State(291):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 291, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(244)
    //   INSTANCEOF -> [i] [n] [s] [t] [a] [n] [c] . [e] [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(174):IdentifierName
    //   [e] => State(292):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 292, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(245)
    //   IMPLEMENTS -> [i] [m] [p] [l] [e] [m] [e] . [n] [t] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(174):IdentifierName
    //   [n] => State(293):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 293, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(246)
    //   SUPER -> [s] . [u] [p] [e] [r]
    //   SWITCH -> [s] . [w] [i] [t] [c] [h]
    //   STATIC -> [s] . [t] [a] [t] [i] [c]
    //   SET -> [s] . [e] [t]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..s, v, x..z, U+200C..U+200D] => State(174):IdentifierName
    //   [t] => State(194):IdentifierName
    //   [w] => State(195):IdentifierName
    //   [u] => State(221):IdentifierName
    //   [e] => State(298):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 221, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 298, 174, 174, 195, 174, 194, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(247)
    //   THIS -> [t] . [h] [i] [s]
    //   THROW -> [t] . [h] [r] [o] [w]
    //   TRUE -> [t] . [r] [u] [e]
    //   TRY -> [t] . [r] [y]
    //   TYPEOF -> [t] . [y] [p] [e] [o] [f]
    //   TARGET -> [t] . [a] [r] [g] [e] [t]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, b..g, i..q, s..x, z, U+200C..U+200D] => State(174):IdentifierName
    //   [a] => State(196):IdentifierName
    //   [y] => State(197):IdentifierName
    //   [h] => State(256):IdentifierName
    //   [r] => State(299):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 299, 174, 174, 174, 174, 174, 256, 174,
        174, 174, 174, 174, 174, 174, 197, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        196, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(248)
    //   LET -> [l] . [e] [t]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(174):IdentifierName
    //   [e] => State(300):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 300, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(249)
    //   NEW -> [n] . [e] [w]
    //   NULL -> [n] . [u] [l] [l]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..t, v..z, U+200C..U+200D] => State(174):IdentifierName
    //   [u] => State(257):IdentifierName
    //   [e] => State(301):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 257, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 301, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(250)
    //   GET -> [g] . [e] [t]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(174):IdentifierName
    //   [e] => State(302):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 302, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(251)
    //   FALSE -> [f] . [a] [l] [s] [e]
    //   FINALLY -> [f] . [i] [n] [a] [l] [l] [y]
    //   FOR -> [f] . [o] [r]
    //   FUNCTION -> [f] . [u] [n] [c] [t] [i] [o] [n]
    //   FROM -> [f] . [r] [o] [m]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, b..h, j..n, p..q, s..t, v..z, U+200C..U+200D] => State(174):IdentifierName
    //   [u] => State(176):IdentifierName
    //   [i] => State(182):IdentifierName
    //   [a] => State(222):IdentifierName
    //   [r] => State(258):IdentifierName
    //   [o] => State(303):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 258, 176, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        222, 303, 182, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(252)
    //   VAR -> [v] . [a] [r]
    //   VOID -> [v] . [o] [i] [d]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, b..n, p..z, U+200C..U+200D] => State(174):IdentifierName
    //   [o] => State(261):IdentifierName
    //   [a] => State(304):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        304, 261, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(253)
    //   ELSE -> [e] [l] . [s] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..r, t..z, U+200C..U+200D] => State(174):IdentifierName
    //   [s] => State(305):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 305, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(254)
    //   ENUM -> [e] [n] . [u] [m]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..t, v..z, U+200C..U+200D] => State(174):IdentifierName
    //   [u] => State(306):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 306, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(255)
    //   CASE -> [c] [a] . [s] [e]
    //   CATCH -> [c] [a] . [t] [c] [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..r, u..z, U+200C..U+200D] => State(174):IdentifierName
    //   [t] => State(265):IdentifierName
    //   [s] => State(307):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 307, 265, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(256)
    //   THIS -> [t] [h] . [i] [s]
    //   THROW -> [t] [h] . [r] [o] [w]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..h, j..q, s..z, U+200C..U+200D] => State(174):IdentifierName
    //   [r] => State(269):IdentifierName
    //   [i] => State(309):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 269, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 309, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(257)
    //   NULL -> [n] [u] . [l] [l]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(174):IdentifierName
    //   [l] => State(310):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 310, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(258)
    //   FROM -> [f] [r] . [o] [m]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..n, p..z, U+200C..U+200D] => State(174):IdentifierName
    //   [o] => State(311):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 311, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(259)
    //   META -> [m] [e] . [t] [a]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(174):IdentifierName
    //   [t] => State(312):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 312, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(260)
    //   WITH -> [w] [i] . [t] [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(174):IdentifierName
    //   [t] => State(313):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 313, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(261)
    //   VOID -> [v] [o] . [i] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(174):IdentifierName
    //   [i] => State(314):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 314, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(262)
    //   BREAK -> [b] [r] [e] . [a] [k]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(174):IdentifierName
    //   [a] => State(315):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        315, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(263)
    //   ASYNC -> [a] [s] [y] . [n] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(174):IdentifierName
    //   [n] => State(316):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 316, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(264)
    //   AWAIT -> [a] [w] [a] . [i] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(174):IdentifierName
    //   [i] => State(317):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 317, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(265)
    //   CATCH -> [c] [a] [t] . [c] [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(174):IdentifierName
    //   [c] => State(318):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 318, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(266)
    //   CLASS -> [c] [l] [a] . [s] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..r, t..z, U+200C..U+200D] => State(174):IdentifierName
    //   [s] => State(319):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 319, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(267)
    //   CONST -> [c] [o] [n] . [s] [t]
    //   CONTINUE -> [c] [o] [n] . [t] [i] [n] [u] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..r, u..z, U+200C..U+200D] => State(174):IdentifierName
    //   [t] => State(206):IdentifierName
    //   [s] => State(320):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 320, 206, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(268)
    //   SUPER -> [s] [u] [p] . [e] [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(174):IdentifierName
    //   [e] => State(321):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 321, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(269)
    //   THROW -> [t] [h] [r] . [o] [w]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..n, p..z, U+200C..U+200D] => State(174):IdentifierName
    //   [o] => State(322):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 322, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(270)
    //   FALSE -> [f] [a] [l] . [s] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..r, t..z, U+200C..U+200D] => State(174):IdentifierName
    //   [s] => State(323):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 323, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(271)
    //   YIELD -> [y] [i] [e] . [l] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(174):IdentifierName
    //   [l] => State(324):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 324, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(272)
    //   WHILE -> [w] [h] [i] . [l] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(174):IdentifierName
    //   [l] => State(325):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 325, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(273)
    //   RETURN -> [r] [e] [t] [u] . [r] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(174):IdentifierName
    //   [r] => State(326):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 326, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(274)
    //   EXPORT -> [e] [x] [p] [o] . [r] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(174):IdentifierName
    //   [r] => State(327):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 327, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(275)
    //   STATIC -> [s] [t] [a] [t] . [i] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(174):IdentifierName
    //   [i] => State(328):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 328, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(276)
    //   SWITCH -> [s] [w] [i] [t] . [c] [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(174):IdentifierName
    //   [c] => State(329):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 329, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(277)
    //   TARGET -> [t] [a] [r] [g] . [e] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(174):IdentifierName
    //   [e] => State(330):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 330, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(278)
    //   TYPEOF -> [t] [y] [p] [e] . [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..n, p..z, U+200C..U+200D] => State(174):IdentifierName
    //   [o] => State(331):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 331, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(279)
    //   IMPORT -> [i] [m] [p] [o] . [r] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(174):IdentifierName
    //   [r] => State(332):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 332, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(280)
    //   DELETE -> [d] [e] [l] [e] . [t] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(174):IdentifierName
    //   [t] => State(333):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 333, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(281)
    //   PUBLIC -> [p] [u] [b] [l] . [i] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(174):IdentifierName
    //   [i] => State(334):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 334, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(282)
    //   EXTENDS -> [e] [x] [t] [e] [n] . [d] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..c, e..z, U+200C..U+200D] => State(174):IdentifierName
    //   [d] => State(335):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 335, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(283)
    //   DEFAULT -> [d] [e] [f] [a] [u] . [l] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(174):IdentifierName
    //   [l] => State(336):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 336, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(284)
    //   FINALLY -> [f] [i] [n] [a] [l] . [l] [y]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(174):IdentifierName
    //   [l] => State(337):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 337, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(285)
    //   PRIVATE -> [p] [r] [i] [v] [a] . [t] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(174):IdentifierName
    //   [t] => State(338):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 338, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(286)
    //   PACKAGE -> [p] [a] [c] [k] [a] . [g] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..f, h..z, U+200C..U+200D] => State(174):IdentifierName
    //   [g] => State(339):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 339, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(287)
    //   CONTINUE -> [c] [o] [n] [t] [i] [n] . [u] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..t, v..z, U+200C..U+200D] => State(174):IdentifierName
    //   [u] => State(340):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 340, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(288)
    //   DEBUGGER -> [d] [e] [b] [u] [g] [g] . [e] [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(174):IdentifierName
    //   [e] => State(341):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 341, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(289)
    //   FUNCTION -> [f] [u] [n] [c] [t] [i] . [o] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..n, p..z, U+200C..U+200D] => State(174):IdentifierName
    //   [o] => State(342):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 342, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(290)
    //   INTERFACE -> [i] [n] [t] [e] [r] [f] [a] . [c] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(174):IdentifierName
    //   [c] => State(343):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 343, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(291)
    //   PROTECTED -> [p] [r] [o] [t] [e] [c] [t] . [e] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(174):IdentifierName
    //   [e] => State(344):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 344, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(292)
    //   INSTANCEOF -> [i] [n] [s] [t] [a] [n] [c] [e] . [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..n, p..z, U+200C..U+200D] => State(174):IdentifierName
    //   [o] => State(345):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 345, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(293)
    //   IMPLEMENTS -> [i] [m] [p] [l] [e] [m] [e] [n] . [t] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(174):IdentifierName
    //   [t] => State(346):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 346, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(294)
    //   AWAIT -> [a] . [w] [a] [i] [t]
    //   AS -> [a] . [s]
    //   ASYNC -> [a] . [s] [y] [n] [c]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [s] => State(164):AS
    //   [$, 0..9, A..Z, _, a..r, t..v, x..z, U+200C..U+200D] => State(174):IdentifierName
    //   [w] => State(218):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 218, 164, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(295)
    //   OF -> [o] . [f]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [f] => State(169):OF
    //   [$, 0..9, A..Z, _, a..e, g..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 169, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(296)
    //   IF -> [i] . [f]
    //   IMPORT -> [i] . [m] [p] [o] [r] [t]
    //   IN -> [i] . [n]
    //   INSTANCEOF -> [i] . [n] [s] [t] [a] [n] [c] [e] [o] [f]
    //   IMPLEMENTS -> [i] . [m] [p] [l] [e] [m] [e] [n] [t] [s]
    //   INTERFACE -> [i] . [n] [t] [e] [r] [f] [a] [c] [e]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [f] => State(136):IF
    //   [n] => State(138):IN
    //   [$, 0..9, A..Z, _, a..e, g..l, o..z, U+200C..U+200D] => State(174):IdentifierName
    //   [m] => State(198):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 198, 174, 174, 174, 174, 138, 174, 136, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(297)
    //   DEBUGGER -> [d] . [e] [b] [u] [g] [g] [e] [r]
    //   DEFAULT -> [d] . [e] [f] [a] [u] [l] [t]
    //   DELETE -> [d] . [e] [l] [e] [t] [e]
    //   DO -> [d] . [o]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [o] => State(127):DO
    //   [$, 0..9, A..Z, _, a..d, f..n, p..z, U+200C..U+200D] => State(174):IdentifierName
    //   [e] => State(199):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 199, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 127, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(298)
    //   SET -> [s] [e] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [t] => State(170):SET
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 170, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(299)
    //   TRUE -> [t] [r] . [u] [e]
    //   TRY -> [t] [r] . [y]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [y] => State(148):TRY
    //   [$, 0..9, A..Z, _, a..t, v..x, z, U+200C..U+200D] => State(174):IdentifierName
    //   [u] => State(308):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 308, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 148, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(300)
    //   LET -> [l] [e] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [t] => State(156):LET
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 156, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(301)
    //   NEW -> [n] [e] . [w]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [w] => State(140):NEW
    //   [$, 0..9, A..Z, _, a..v, x..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 140, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(302)
    //   GET -> [g] [e] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [t] => State(167):GET
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 167, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(303)
    //   FOR -> [f] [o] . [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [r] => State(134):FOR
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 134, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(304)
    //   VAR -> [v] [a] . [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [r] => State(150):VAR
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 150, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(305)
    //   ELSE -> [e] [l] [s] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [e] => State(128):ELSE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 128, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(306)
    //   ENUM -> [e] [n] [u] . [m]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [m] => State(129):ENUM
    //   [$, 0..9, A..Z, _, a..l, n..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 129, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(307)
    //   CASE -> [c] [a] [s] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [e] => State(119):CASE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 119, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(308)
    //   TRUE -> [t] [r] [u] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [e] => State(147):TRUE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 147, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(309)
    //   THIS -> [t] [h] [i] . [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [s] => State(145):THIS
    //   [$, 0..9, A..Z, _, a..r, t..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 145, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(310)
    //   NULL -> [n] [u] [l] . [l]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [l] => State(141):NULL
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 141, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(311)
    //   FROM -> [f] [r] [o] . [m]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [m] => State(166):FROM
    //   [$, 0..9, A..Z, _, a..l, n..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 166, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(312)
    //   META -> [m] [e] [t] . [a]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [a] => State(168):META
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        168, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(313)
    //   WITH -> [w] [i] [t] . [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [h] => State(153):WITH
    //   [$, 0..9, A..Z, _, a..g, i..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 153, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(314)
    //   VOID -> [v] [o] [i] . [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [d] => State(151):VOID
    //   [$, 0..9, A..Z, _, a..c, e..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 151, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(315)
    //   BREAK -> [b] [r] [e] [a] . [k]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [k] => State(118):BREAK
    //   [$, 0..9, A..Z, _, a..j, l..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 118,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(316)
    //   ASYNC -> [a] [s] [y] [n] . [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [c] => State(165):ASYNC
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 165, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(317)
    //   AWAIT -> [a] [w] [a] [i] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [t] => State(154):AWAIT
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 154, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(318)
    //   CATCH -> [c] [a] [t] [c] . [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [h] => State(120):CATCH
    //   [$, 0..9, A..Z, _, a..g, i..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 120, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(319)
    //   CLASS -> [c] [l] [a] [s] . [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [s] => State(121):CLASS
    //   [$, 0..9, A..Z, _, a..r, t..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 121, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(320)
    //   CONST -> [c] [o] [n] [s] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [t] => State(122):CONST
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 122, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(321)
    //   SUPER -> [s] [u] [p] [e] . [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [r] => State(143):SUPER
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 143, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(322)
    //   THROW -> [t] [h] [r] [o] . [w]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [w] => State(146):THROW
    //   [$, 0..9, A..Z, _, a..v, x..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 146, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(323)
    //   FALSE -> [f] [a] [l] [s] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [e] => State(132):FALSE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 132, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(324)
    //   YIELD -> [y] [i] [e] [l] . [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [d] => State(155):YIELD
    //   [$, 0..9, A..Z, _, a..c, e..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 155, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(325)
    //   WHILE -> [w] [h] [i] [l] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [e] => State(152):WHILE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 152, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(326)
    //   RETURN -> [r] [e] [t] [u] [r] . [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [n] => State(142):RETURN
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 142, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(327)
    //   EXPORT -> [e] [x] [p] [o] [r] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [t] => State(130):EXPORT
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 130, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(328)
    //   STATIC -> [s] [t] [a] [t] [i] . [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [c] => State(157):STATIC
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 157, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(329)
    //   SWITCH -> [s] [w] [i] [t] [c] . [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [h] => State(144):SWITCH
    //   [$, 0..9, A..Z, _, a..g, i..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 144, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(330)
    //   TARGET -> [t] [a] [r] [g] [e] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [t] => State(171):TARGET
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 171, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(331)
    //   TYPEOF -> [t] [y] [p] [e] [o] . [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [f] => State(149):TYPEOF
    //   [$, 0..9, A..Z, _, a..e, g..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 149, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(332)
    //   IMPORT -> [i] [m] [p] [o] [r] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [t] => State(137):IMPORT
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 137, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(333)
    //   DELETE -> [d] [e] [l] [e] [t] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [e] => State(126):DELETE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 126, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(334)
    //   PUBLIC -> [p] [u] [b] [l] [i] . [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [c] => State(163):PUBLIC
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 163, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(335)
    //   EXTENDS -> [e] [x] [t] [e] [n] [d] . [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [s] => State(131):EXTENDS
    //   [$, 0..9, A..Z, _, a..r, t..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 131, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(336)
    //   DEFAULT -> [d] [e] [f] [a] [u] [l] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [t] => State(125):DEFAULT
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 125, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(337)
    //   FINALLY -> [f] [i] [n] [a] [l] [l] . [y]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [y] => State(133):FINALLY
    //   [$, 0..9, A..Z, _, a..x, z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 133, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(338)
    //   PRIVATE -> [p] [r] [i] [v] [a] [t] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [e] => State(161):PRIVATE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 161, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(339)
    //   PACKAGE -> [p] [a] [c] [k] [a] [g] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [e] => State(160):PACKAGE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 160, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(340)
    //   CONTINUE -> [c] [o] [n] [t] [i] [n] [u] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [e] => State(123):CONTINUE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 123, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(341)
    //   DEBUGGER -> [d] [e] [b] [u] [g] [g] [e] . [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [r] => State(124):DEBUGGER
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 124, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(342)
    //   FUNCTION -> [f] [u] [n] [c] [t] [i] [o] . [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [n] => State(135):FUNCTION
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 135, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(343)
    //   INTERFACE -> [i] [n] [t] [e] [r] [f] [a] [c] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [e] => State(159):INTERFACE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 159, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(344)
    //   PROTECTED -> [p] [r] [o] [t] [e] [c] [t] [e] . [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [d] => State(162):PROTECTED
    //   [$, 0..9, A..Z, _, a..c, e..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 162, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(345)
    //   INSTANCEOF -> [i] [n] [s] [t] [a] [n] [c] [e] [o] . [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [f] => State(139):INSTANCEOF
    //   [$, 0..9, A..Z, _, a..e, g..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 139, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(346)
    //   IMPLEMENTS -> [i] [m] [p] [l] [e] [m] [e] [n] [t] . [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions
    //   [\] => State(2)
    //   [s] => State(158):IMPLEMENTS
    //   [$, 0..9, A..Z, _, a..r, t..z, U+200C..U+200D] => State(174):IdentifierName
    [
        419, 2, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 158, 174, 174, 174, 174, 174, 174,
        174, 174, 174, 174, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 174, 174, 174, 174, 419, 419, 174, 419, 2, 419,
    ],
    // State(347)
    //   PrivateIdentifier -> [#] IdentifierName .
    //   IdentifierName -> IdentifierStart .
    //   IdentifierStart -> IdentifierStartChar .
    //   IdentifierStartChar -> UnicodeIDStart .
    //   UnicodeIDStart -> [a..z A..Z $ _] .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    //   IdentifierStartChar -> [$] .
    //   IdentifierStartChar -> [_] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierPart -> IdentifierPartChar .
    //   IdentifierPartChar -> UnicodeIDContinue .
    //   UnicodeIDContinue -> [0..9 a..z A..Z $ _] .
    //   IdentifierPartChar -> [$] .
    //   IdentifierPartChar -> [<ZWNJ>] .
    //   IdentifierPartChar -> [<ZWJ>] .
    //   IdentifierStart -> [\] UnicodeEscapeSequence .
    //   UnicodeEscapeSequence -> [u] [{] CodePoint [}] .
    //   IdentifierPart -> [\] UnicodeEscapeSequence .
    //   UnicodeEscapeSequence -> [u] Hex4Digits .
    //   Hex4Digits -> HexDigit HexDigit HexDigit HexDigit .
    //   HexDigit -> [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F] .
    // Transitions
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(347):PrivateIdentifier
    [
        419, 3, 419, 419, 419, 419, 419, 419, 419, 347, 347, 347, 347, 347, 347, 347, 347, 347,
        347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
        347, 347, 347, 347, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 347, 347, 347, 347, 419, 419, 347, 419, 3, 419,
    ],
    // State(348)
    //   OPTIONAL_CHAINING -> [?] [.] ?![DecimalDigit] .
    //   OPTIONAL_CHAINING -> [?] [.] . ?![DecimalDigit]
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(349)
    //   LBRACE -> [{] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(350)
    //   LPAREN -> [(] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(351)
    //   RPAREN -> [)] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(352)
    //   LBRACK -> [[] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(353)
    //   RBRACK -> []] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(354)
    //   DOT -> [.] .
    //   ELLIPSIS -> [.] . [.] [.]
    //   DecimalDigits_Sep -> . DecimalDigits_Sep DecimalDigit
    //   DecimalDigits_Sep -> . DecimalDigits_Sep NumericLiteralSeparator DecimalDigit
    //   DecimalLiteral -> [.] . DecimalDigits_Sep
    //   DecimalDigits_Sep -> . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   DecimalLiteral -> [.] . DecimalDigits_Sep ExponentPart_Sep
    // Transitions
    //   [.] => State(48)
    //   [0..9] => State(408):NumericLiteral
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 48, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 408, 408, 408, 408, 419, 419, 419, 419, 48, 419,
    ],
    // State(355)
    //   ELLIPSIS -> [.] [.] [.] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(356)
    //   SEMI_COLON -> [;] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(357)
    //   COMMA -> [,] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(358)
    //   LT -> [<] .
    //   LTE -> [<] . [=]
    //   SHL -> [<] . [<]
    //   SHL_ASSIGN -> [<] . [<] [=]
    // Transitions
    //   [=] => State(360):LTE
    //   [<] => State(373):SHL
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 373, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 360, 419, 419, 419, 419, 419, 419, 419, 419, 360, 419,
    ],
    // State(359)
    //   GT -> [>] .
    //   GTE -> [>] . [=]
    //   SAR -> [>] . [>]
    //   SHR -> [>] . [>] [>]
    //   SAR_ASSIGN -> [>] . [>] [=]
    //   SHR_ASSIGN -> [>] . [>] [>] [=]
    // Transitions
    //   [=] => State(361):GTE
    //   [>] => State(374):SAR
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 374, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 361, 419, 419, 419, 419, 419, 419, 419, 419, 361, 419,
    ],
    // State(360)
    //   LTE -> [<] [=] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(361)
    //   GTE -> [>] [=] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(362)
    //   EQ -> [=] [=] .
    //   EQ_STRICT -> [=] [=] . [=]
    // Transitions
    //   [=] => State(364):EQ_STRICT
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 364, 419, 419, 419, 419, 419, 419, 419, 419, 364, 419,
    ],
    // State(363)
    //   NE -> [!] [=] .
    //   NE_STRICT -> [!] [=] . [=]
    // Transitions
    //   [=] => State(365):NE_STRICT
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 365, 419, 419, 419, 419, 419, 419, 419, 419, 365, 419,
    ],
    // State(364)
    //   EQ_STRICT -> [=] [=] [=] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(365)
    //   NE_STRICT -> [!] [=] [=] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(366)
    //   ADD -> [+] .
    //   INC -> [+] . [+]
    //   ADD_ASSIGN -> [+] . [=]
    // Transitions
    //   [+] => State(371):INC
    //   [=] => State(387):ADD_ASSIGN
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 371, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 387, 419, 419, 419, 419, 419, 419, 419, 419, 371, 419,
    ],
    // State(367)
    //   SUB -> [-] .
    //   DEC -> [-] . [-]
    //   SUB_ASSIGN -> [-] . [=]
    // Transitions
    //   [-] => State(372):DEC
    //   [=] => State(388):SUB_ASSIGN
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 372, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 388, 419, 419, 419, 419, 419, 419, 419, 419, 372, 419,
    ],
    // State(368)
    //   MUL -> [*] .
    //   EXP -> [*] . [*]
    //   MUL_ASSIGN -> [*] . [=]
    //   EXP_ASSIGN -> [*] . [*] [=]
    // Transitions
    //   [*] => State(370):EXP
    //   [=] => State(389):MUL_ASSIGN
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 370, 419,
        419, 419, 419, 419, 419, 419, 419, 389, 419, 419, 419, 419, 419, 419, 419, 419, 370, 419,
    ],
    // State(369)
    //   MOD -> [%] .
    //   MOD_ASSIGN -> [%] . [=]
    // Transitions
    //   [=] => State(390):MOD_ASSIGN
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 390, 419, 419, 419, 419, 419, 419, 419, 419, 390, 419,
    ],
    // State(370)
    //   EXP -> [*] [*] .
    //   EXP_ASSIGN -> [*] [*] . [=]
    // Transitions
    //   [=] => State(391):EXP_ASSIGN
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 391, 419, 419, 419, 419, 419, 419, 419, 419, 391, 419,
    ],
    // State(371)
    //   INC -> [+] [+] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(372)
    //   DEC -> [-] [-] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(373)
    //   SHL -> [<] [<] .
    //   SHL_ASSIGN -> [<] [<] . [=]
    // Transitions
    //   [=] => State(392):SHL_ASSIGN
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 392, 419, 419, 419, 419, 419, 419, 419, 419, 392, 419,
    ],
    // State(374)
    //   SAR -> [>] [>] .
    //   SHR -> [>] [>] . [>]
    //   SAR_ASSIGN -> [>] [>] . [=]
    //   SHR_ASSIGN -> [>] [>] . [>] [=]
    // Transitions
    //   [>] => State(375):SHR
    //   [=] => State(393):SAR_ASSIGN
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 375, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 393, 419, 419, 419, 419, 419, 419, 419, 419, 375, 419,
    ],
    // State(375)
    //   SHR -> [>] [>] [>] .
    //   SHR_ASSIGN -> [>] [>] [>] . [=]
    // Transitions
    //   [=] => State(394):SHR_ASSIGN
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 394, 419, 419, 419, 419, 419, 419, 419, 419, 394, 419,
    ],
    // State(376)
    //   BIT_AND -> [&] .
    //   AND -> [&] . [&]
    //   BIT_AND_ASSIGN -> [&] . [=]
    //   AND_ASSIGN -> [&] . [&] [=]
    // Transitions
    //   [&] => State(381):AND
    //   [=] => State(395):BIT_AND_ASSIGN
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        381, 419, 419, 419, 419, 419, 419, 395, 419, 419, 419, 419, 419, 419, 419, 419, 381, 419,
    ],
    // State(377)
    //   BIT_OR -> [|] .
    //   OR -> [|] . [|]
    //   BIT_OR_ASSIGN -> [|] . [=]
    //   OR_ASSIGN -> [|] . [|] [=]
    // Transitions
    //   [|] => State(382):OR
    //   [=] => State(396):BIT_OR_ASSIGN
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 382, 419, 419, 419, 419, 419, 396, 419, 419, 419, 419, 419, 419, 419, 419, 382, 419,
    ],
    // State(378)
    //   BIT_XOR -> [^] .
    //   BIT_XOR_ASSIGN -> [^] . [=]
    // Transitions
    //   [=] => State(397):BIT_XOR_ASSIGN
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 397, 419, 419, 419, 419, 419, 419, 419, 419, 397, 419,
    ],
    // State(379)
    //   NE -> [!] . [=]
    //   NE_STRICT -> [!] . [=] [=]
    //   NOT -> [!] .
    // Transitions
    //   [=] => State(363):NE
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 363, 419, 419, 419, 419, 419, 419, 419, 419, 363, 419,
    ],
    // State(380)
    //   BIT_NOT -> [~] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(381)
    //   AND -> [&] [&] .
    //   AND_ASSIGN -> [&] [&] . [=]
    // Transitions
    //   [=] => State(398):AND_ASSIGN
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 398, 419, 419, 419, 419, 419, 419, 419, 419, 398, 419,
    ],
    // State(382)
    //   OR -> [|] [|] .
    //   OR_ASSIGN -> [|] [|] . [=]
    // Transitions
    //   [=] => State(399):OR_ASSIGN
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 399, 419, 419, 419, 419, 419, 419, 419, 419, 399, 419,
    ],
    // State(383)
    //   NULLISH -> [?] [?] .
    //   NULLISH_ASSIGN -> [?] [?] . [=]
    // Transitions
    //   [=] => State(400):NULLISH_ASSIGN
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 400, 419, 419, 419, 419, 419, 419, 419, 419, 400, 419,
    ],
    // State(384)
    //   OPTIONAL_CHAINING -> [?] . [.] ?![DecimalDigit]
    //   NULLISH -> [?] . [?]
    //   CONDITIONAL -> [?] .
    //   NULLISH_ASSIGN -> [?] . [?] [=]
    // Transitions
    //   [.] => State(47)
    //   [?] => State(383):NULLISH
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 47, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 383, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 47, 419,
    ],
    // State(385)
    //   COLON -> [:] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(386)
    //   EQ -> [=] . [=]
    //   EQ_STRICT -> [=] . [=] [=]
    //   ASSIGN -> [=] .
    //   ARROW -> [=] . [>]
    // Transitions
    //   [=] => State(362):EQ
    //   [>] => State(401):ARROW
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 401, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 362, 419, 419, 419, 419, 419, 419, 419, 419, 362, 419,
    ],
    // State(387)
    //   ADD_ASSIGN -> [+] [=] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(388)
    //   SUB_ASSIGN -> [-] [=] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(389)
    //   MUL_ASSIGN -> [*] [=] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(390)
    //   MOD_ASSIGN -> [%] [=] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(391)
    //   EXP_ASSIGN -> [*] [*] [=] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(392)
    //   SHL_ASSIGN -> [<] [<] [=] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(393)
    //   SAR_ASSIGN -> [>] [>] [=] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(394)
    //   SHR_ASSIGN -> [>] [>] [>] [=] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(395)
    //   BIT_AND_ASSIGN -> [&] [=] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(396)
    //   BIT_OR_ASSIGN -> [|] [=] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(397)
    //   BIT_XOR_ASSIGN -> [^] [=] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(398)
    //   AND_ASSIGN -> [&] [&] [=] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(399)
    //   OR_ASSIGN -> [|] [|] [=] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(400)
    //   NULLISH_ASSIGN -> [?] [?] [=] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(401)
    //   ARROW -> [=] [>] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(402)
    //   NumericLiteral -> DecimalLiteral .
    //   DecimalDigits_Sep -> . DecimalDigits_Sep DecimalDigit
    //   DecimalDigits_Sep -> . DecimalDigits_Sep NumericLiteralSeparator DecimalDigit
    //   DecimalIntegerLiteral -> NonZeroDigit . DecimalDigits_Sep
    //   DecimalDigits_Sep -> . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   DecimalIntegerLiteral -> NonZeroDigit . NumericLiteralSeparator DecimalDigits_Sep
    //   NumericLiteralSeparator -> . [_]
    //   DecimalLiteral -> DecimalIntegerLiteral . [.]
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] DecimalDigits_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] ExponentPart_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] DecimalDigits_Sep ExponentPart_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral .
    //   DecimalIntegerLiteral -> NonZeroDigit .
    //   NonZeroDigit -> [1 2 3 4 5 6 7 8 9] .
    //   DecimalLiteral -> DecimalIntegerLiteral . ExponentPart_Sep
    //   ExponentPart_Sep -> . ExponentIndicator SignedInteger_Sep
    //   ExponentIndicator -> . [e E]
    //   DecimalBigIntegerLiteral -> NonZeroDigit . BigIntLiteralSuffix
    //   BigIntLiteralSuffix -> . [n]
    //   DecimalBigIntegerLiteral -> NonZeroDigit . DecimalDigits_Sep BigIntLiteralSuffix
    //   DecimalBigIntegerLiteral -> NonZeroDigit . NumericLiteralSeparator DecimalDigits_Sep BigIntLiteralSuffix
    //   DecimalDigits_Sep -> DecimalDigits_Sep . DecimalDigit
    //   DecimalDigits_Sep -> DecimalDigits_Sep . NumericLiteralSeparator DecimalDigit
    //   DecimalIntegerLiteral -> NonZeroDigit DecimalDigits_Sep .
    //   DecimalDigits_Sep -> DecimalDigit .
    //   DecimalDigit -> [0 1 2 3 4 5 6 7 8 9] .
    //   DecimalBigIntegerLiteral -> NonZeroDigit DecimalDigits_Sep . BigIntLiteralSuffix
    //   DecimalIntegerLiteral -> NonZeroDigit NumericLiteralSeparator DecimalDigits_Sep .
    //   DecimalBigIntegerLiteral -> NonZeroDigit NumericLiteralSeparator DecimalDigits_Sep . BigIntLiteralSuffix
    //   DecimalDigits_Sep -> DecimalDigits_Sep DecimalDigit .
    //   DecimalDigits_Sep -> DecimalDigits_Sep NumericLiteralSeparator DecimalDigit .
    // Transitions
    //   [E, e] => State(40)
    //   [_] => State(41)
    //   [0..9] => State(402):NumericLiteral
    //   [n] => State(404):NumericLiteral
    //   [.] => State(405):NumericLiteral
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 41, 419, 419, 419, 419, 419,
        419, 40, 419, 419, 419, 419, 419, 40, 419, 419, 419, 419, 419, 419, 404, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 405, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 402, 402, 402, 402, 419, 419, 419, 419, 40, 419,
    ],
    // State(403)
    //   NumericLiteral -> DecimalLiteral .
    //   NonOctalDecimalIntegerLiteral -> [0] . NonOctalDigit
    //   NonOctalDigit -> . [8 9]
    //   LegacyOctalLikeDecimalIntegerLiteral -> [0] . OctalDigit
    //   OctalDigit -> . [0 1 2 3 4 5 6 7]
    //   DecimalLiteral -> DecimalIntegerLiteral . [.]
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] DecimalDigits_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] ExponentPart_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] DecimalDigits_Sep ExponentPart_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral .
    //   DecimalIntegerLiteral -> [0] .
    //   DecimalLiteral -> DecimalIntegerLiteral . ExponentPart_Sep
    //   ExponentPart_Sep -> . ExponentIndicator SignedInteger_Sep
    //   ExponentIndicator -> . [e E]
    //   DecimalBigIntegerLiteral -> [0] . BigIntLiteralSuffix
    //   BigIntLiteralSuffix -> . [n]
    //   BinaryIntegerLiteral_Sep -> [0] . [b] BinaryDigits_Sep
    //   BinaryIntegerLiteral_Sep -> [0] . [B] BinaryDigits_Sep
    //   OctalIntegerLiteral_Sep -> [0] . [o] OctalDigits_Sep
    //   OctalIntegerLiteral_Sep -> [0] . [O] OctalDigits_Sep
    //   HexIntegerLiteral_Sep -> [0] . [x] HexDigits_Sep
    //   HexIntegerLiteral_Sep -> [0] . [X] HexDigits_Sep
    //   LegacyOctalIntegerLiteral -> [0] . OctalDigit
    // Transitions
    //   [E, e] => State(40)
    //   [B, b] => State(44)
    //   [O, o] => State(45)
    //   [X, x] => State(46)
    //   [n] => State(404):NumericLiteral
    //   [.] => State(405):NumericLiteral
    //   [0..7] => State(406):NumericLiteral
    //   [8..9] => State(407):NumericLiteral
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 44, 419, 419, 419, 45, 46, 419, 419, 419, 46,
        40, 44, 419, 419, 419, 419, 40, 419, 419, 419, 419, 419, 419, 404, 419, 419, 419, 419, 45,
        419, 419, 419, 419, 419, 419, 419, 405, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 406, 406, 407, 406, 419, 419, 419, 419, 40, 419,
    ],
    // State(404)
    //   NumericLiteral -> DecimalBigIntegerLiteral .
    //   DecimalBigIntegerLiteral -> NonZeroDigit BigIntLiteralSuffix .
    //   BigIntLiteralSuffix -> [n] .
    //   DecimalBigIntegerLiteral -> [0] BigIntLiteralSuffix .
    //   DecimalBigIntegerLiteral -> NonZeroDigit DecimalDigits_Sep BigIntLiteralSuffix .
    //   DecimalBigIntegerLiteral -> NonZeroDigit NumericLiteralSeparator DecimalDigits_Sep BigIntLiteralSuffix .
    //   NumericLiteral -> NonDecimalIntegerLiteral_Sep BigIntLiteralSuffix .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(405)
    //   NumericLiteral -> DecimalLiteral .
    //   DecimalLiteral -> DecimalIntegerLiteral [.] .
    //   DecimalDigits_Sep -> . DecimalDigits_Sep DecimalDigit
    //   DecimalDigits_Sep -> . DecimalDigits_Sep NumericLiteralSeparator DecimalDigit
    //   DecimalLiteral -> DecimalIntegerLiteral [.] . DecimalDigits_Sep
    //   DecimalDigits_Sep -> . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   DecimalLiteral -> DecimalIntegerLiteral [.] . ExponentPart_Sep
    //   ExponentPart_Sep -> . ExponentIndicator SignedInteger_Sep
    //   ExponentIndicator -> . [e E]
    //   DecimalLiteral -> DecimalIntegerLiteral [.] . DecimalDigits_Sep ExponentPart_Sep
    // Transitions
    //   [E, e] => State(40)
    //   [0..9] => State(408):NumericLiteral
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 40, 419, 419, 419, 419, 419, 40, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 408, 408, 408, 408, 419, 419, 419, 419, 40, 419,
    ],
    // State(406)
    //   LegacyOctalLikeDecimalIntegerLiteral -> LegacyOctalLikeDecimalIntegerLiteral . OctalDigit
    //   OctalDigit -> . [0 1 2 3 4 5 6 7]
    //   NonOctalDecimalIntegerLiteral -> LegacyOctalLikeDecimalIntegerLiteral . NonOctalDigit
    //   NonOctalDigit -> . [8 9]
    //   NumericLiteral -> LegacyOctalIntegerLiteral .
    //   LegacyOctalIntegerLiteral -> [0] OctalDigit .
    //   OctalDigit -> [0 1 2 3 4 5 6 7] .
    //   LegacyOctalIntegerLiteral -> LegacyOctalIntegerLiteral . OctalDigit
    //   LegacyOctalIntegerLiteral -> LegacyOctalIntegerLiteral OctalDigit .
    // Transitions
    //   [0..7] => State(406):NumericLiteral
    //   [8..9] => State(407):NumericLiteral
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 406, 406, 407, 406, 419, 419, 419, 419, 406, 419,
    ],
    // State(407)
    //   NumericLiteral -> DecimalLiteral .
    //   NonOctalDecimalIntegerLiteral -> NonOctalDecimalIntegerLiteral . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   DecimalLiteral -> DecimalIntegerLiteral . [.]
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] DecimalDigits_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] ExponentPart_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] DecimalDigits_Sep ExponentPart_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral .
    //   DecimalIntegerLiteral -> NonOctalDecimalIntegerLiteral .
    //   NonOctalDecimalIntegerLiteral -> [0] NonOctalDigit .
    //   NonOctalDigit -> [8 9] .
    //   DecimalLiteral -> DecimalIntegerLiteral . ExponentPart_Sep
    //   ExponentPart_Sep -> . ExponentIndicator SignedInteger_Sep
    //   ExponentIndicator -> . [e E]
    //   NonOctalDecimalIntegerLiteral -> LegacyOctalLikeDecimalIntegerLiteral NonOctalDigit .
    //   NonOctalDecimalIntegerLiteral -> NonOctalDecimalIntegerLiteral DecimalDigit .
    //   DecimalDigit -> [0 1 2 3 4 5 6 7 8 9] .
    // Transitions
    //   [E, e] => State(40)
    //   [.] => State(405):NumericLiteral
    //   [0..9] => State(407):NumericLiteral
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 40, 419, 419, 419, 419, 419, 40, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 405, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 407, 407, 407, 407, 419, 419, 419, 419, 40, 419,
    ],
    // State(408)
    //   NumericLiteral -> DecimalLiteral .
    //   DecimalLiteral -> [.] DecimalDigits_Sep .
    //   DecimalDigits_Sep -> DecimalDigit .
    //   DecimalDigit -> [0 1 2 3 4 5 6 7 8 9] .
    //   DecimalDigits_Sep -> DecimalDigits_Sep . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   DecimalDigits_Sep -> DecimalDigits_Sep . NumericLiteralSeparator DecimalDigit
    //   NumericLiteralSeparator -> . [_]
    //   DecimalLiteral -> [.] DecimalDigits_Sep . ExponentPart_Sep
    //   ExponentPart_Sep -> . ExponentIndicator SignedInteger_Sep
    //   ExponentIndicator -> . [e E]
    //   DecimalLiteral -> DecimalIntegerLiteral [.] DecimalDigits_Sep .
    //   DecimalLiteral -> DecimalIntegerLiteral [.] DecimalDigits_Sep . ExponentPart_Sep
    //   DecimalDigits_Sep -> DecimalDigits_Sep DecimalDigit .
    //   DecimalDigits_Sep -> DecimalDigits_Sep NumericLiteralSeparator DecimalDigit .
    // Transitions
    //   [E, e] => State(40)
    //   [_] => State(43)
    //   [0..9] => State(408):NumericLiteral
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 43, 419, 419, 419, 419, 419,
        419, 40, 419, 419, 419, 419, 419, 40, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 408, 408, 408, 408, 419, 419, 419, 419, 40, 419,
    ],
    // State(409)
    //   NumericLiteral -> DecimalLiteral .
    //   DecimalLiteral -> DecimalIntegerLiteral ExponentPart_Sep .
    //   ExponentPart_Sep -> ExponentIndicator SignedInteger_Sep .
    //   SignedInteger_Sep -> DecimalDigits_Sep .
    //   DecimalDigits_Sep -> DecimalDigit .
    //   DecimalDigit -> [0 1 2 3 4 5 6 7 8 9] .
    //   DecimalDigits_Sep -> DecimalDigits_Sep . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   DecimalDigits_Sep -> DecimalDigits_Sep . NumericLiteralSeparator DecimalDigit
    //   NumericLiteralSeparator -> . [_]
    //   DecimalDigits_Sep -> DecimalDigits_Sep DecimalDigit .
    //   SignedInteger_Sep -> [+] DecimalDigits_Sep .
    //   SignedInteger_Sep -> [-] DecimalDigits_Sep .
    //   DecimalLiteral -> DecimalIntegerLiteral [.] ExponentPart_Sep .
    //   DecimalLiteral -> [.] DecimalDigits_Sep ExponentPart_Sep .
    //   DecimalDigits_Sep -> DecimalDigits_Sep NumericLiteralSeparator DecimalDigit .
    //   DecimalLiteral -> DecimalIntegerLiteral [.] DecimalDigits_Sep ExponentPart_Sep .
    // Transitions
    //   [_] => State(42)
    //   [0..9] => State(409):NumericLiteral
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 42, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 409, 409, 409, 409, 419, 419, 419, 419, 42, 419,
    ],
    // State(410)
    //   NumericLiteral -> NonDecimalIntegerLiteral_Sep .
    //   NonDecimalIntegerLiteral_Sep -> BinaryIntegerLiteral_Sep .
    //   BinaryIntegerLiteral_Sep -> [0] [b] BinaryDigits_Sep .
    //   BinaryDigits_Sep -> BinaryDigit .
    //   BinaryDigit -> [0 1] .
    //   BinaryDigits_Sep -> BinaryDigits_Sep . BinaryDigit
    //   BinaryDigit -> . [0 1]
    //   BinaryDigits_Sep -> BinaryDigits_Sep . NumericLiteralSeparator BinaryDigit
    //   NumericLiteralSeparator -> . [_]
    //   NumericLiteral -> NonDecimalIntegerLiteral_Sep . BigIntLiteralSuffix
    //   BigIntLiteralSuffix -> . [n]
    //   BinaryIntegerLiteral_Sep -> [0] [B] BinaryDigits_Sep .
    //   BinaryDigits_Sep -> BinaryDigits_Sep BinaryDigit .
    //   BinaryDigits_Sep -> BinaryDigits_Sep NumericLiteralSeparator BinaryDigit .
    // Transitions
    //   [_] => State(44)
    //   [n] => State(404):NumericLiteral
    //   [0..1] => State(410):NumericLiteral
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 44, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 404, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 410, 419, 419, 410, 419, 419, 419, 419, 44, 419,
    ],
    // State(411)
    //   NumericLiteral -> NonDecimalIntegerLiteral_Sep .
    //   NonDecimalIntegerLiteral_Sep -> OctalIntegerLiteral_Sep .
    //   OctalIntegerLiteral_Sep -> [0] [o] OctalDigits_Sep .
    //   OctalDigits_Sep -> OctalDigit .
    //   OctalDigit -> [0 1 2 3 4 5 6 7] .
    //   OctalDigits_Sep -> OctalDigits_Sep . OctalDigit
    //   OctalDigit -> . [0 1 2 3 4 5 6 7]
    //   OctalDigits_Sep -> OctalDigits_Sep . NumericLiteralSeparator OctalDigit
    //   NumericLiteralSeparator -> . [_]
    //   NumericLiteral -> NonDecimalIntegerLiteral_Sep . BigIntLiteralSuffix
    //   BigIntLiteralSuffix -> . [n]
    //   OctalIntegerLiteral_Sep -> [0] [O] OctalDigits_Sep .
    //   OctalDigits_Sep -> OctalDigits_Sep OctalDigit .
    //   OctalDigits_Sep -> OctalDigits_Sep NumericLiteralSeparator OctalDigit .
    // Transitions
    //   [_] => State(45)
    //   [n] => State(404):NumericLiteral
    //   [0..7] => State(411):NumericLiteral
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 45, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 404, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 411, 411, 419, 411, 419, 419, 419, 419, 45, 419,
    ],
    // State(412)
    //   NumericLiteral -> NonDecimalIntegerLiteral_Sep .
    //   NonDecimalIntegerLiteral_Sep -> HexIntegerLiteral_Sep .
    //   HexIntegerLiteral_Sep -> [0] [x] HexDigits_Sep .
    //   HexDigits_Sep -> HexDigit .
    //   HexDigit -> [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F] .
    //   HexDigits_Sep -> HexDigits_Sep . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   HexDigits_Sep -> HexDigits_Sep . NumericLiteralSeparator HexDigit
    //   NumericLiteralSeparator -> . [_]
    //   NumericLiteral -> NonDecimalIntegerLiteral_Sep . BigIntLiteralSuffix
    //   BigIntLiteralSuffix -> . [n]
    //   HexIntegerLiteral_Sep -> [0] [X] HexDigits_Sep .
    //   HexDigits_Sep -> HexDigits_Sep HexDigit .
    //   HexDigits_Sep -> HexDigits_Sep NumericLiteralSeparator HexDigit .
    // Transitions
    //   [_] => State(46)
    //   [n] => State(404):NumericLiteral
    //   [0..9, A..F, a..f] => State(412):NumericLiteral
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 412, 419, 419, 46, 419, 419, 419, 419, 419,
        419, 412, 412, 412, 419, 419, 419, 412, 412, 419, 419, 419, 419, 419, 404, 419, 412, 419,
        412, 419, 419, 412, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 412, 412, 412, 412, 419, 419, 419, 419, 46, 419,
    ],
    // State(413)
    //   StringLiteral -> ["] ["] .
    //   StringLiteral -> ['] ['] .
    //   StringLiteral -> ["] DoubleStringCharacters ["] .
    //   StringLiteral -> ['] SingleStringCharacters ['] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(414)
    //   NoSubstitutionTemplate -> [`] [`] .
    //   NoSubstitutionTemplate -> [`] TemplateCharacters [`] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(415)
    //   TemplateHead -> [`] [$] [{] .
    //   TemplateHead -> [`] TemplateCharacters [$] [{] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(416)
    //   MultiLineComment -> [/] . [*] [*] [/]
    //   MultiLineComment -> [/] . [*] MultiLineCommentChars [*] [/]
    //   SingleLineComment -> [/] . [/]
    //   SingleLineComment -> [/] . [/] SingleLineCommentChars
    //   DIV -> [/] .
    //   DIV_ASSIGN -> [/] . [=]
    // Transitions
    //   [*] => State(32)
    //   [/] => State(116):Comment
    //   [=] => State(417):DIV_ASSIGN
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 32, 419,
        419, 419, 419, 419, 419, 419, 419, 417, 419, 419, 419, 419, 116, 419, 419, 419, 32, 419,
    ],
    // State(417)
    //   DIV_ASSIGN -> [/] [=] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
    // State(418)
    //   RBRACE -> [}] .
    [
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
        419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
    ],
];

const ACCEPT_TABLE: [Option<TokenKind>; 419] = [
    None,                                    // State(0)
    None,                                    // State(1)
    None,                                    // State(2)
    None,                                    // State(3)
    None,                                    // State(4)
    None,                                    // State(5)
    None,                                    // State(6)
    None,                                    // State(7)
    None,                                    // State(8)
    None,                                    // State(9)
    None,                                    // State(10)
    None,                                    // State(11)
    None,                                    // State(12)
    None,                                    // State(13)
    None,                                    // State(14)
    None,                                    // State(15)
    None,                                    // State(16)
    None,                                    // State(17)
    None,                                    // State(18)
    None,                                    // State(19)
    None,                                    // State(20)
    None,                                    // State(21)
    None,                                    // State(22)
    None,                                    // State(23)
    None,                                    // State(24)
    None,                                    // State(25)
    None,                                    // State(26)
    None,                                    // State(27)
    None,                                    // State(28)
    None,                                    // State(29)
    None,                                    // State(30)
    None,                                    // State(31)
    None,                                    // State(32)
    None,                                    // State(33)
    None,                                    // State(34)
    None,                                    // State(35)
    None,                                    // State(36)
    None,                                    // State(37)
    None,                                    // State(38)
    None,                                    // State(39)
    None,                                    // State(40)
    None,                                    // State(41)
    None,                                    // State(42)
    None,                                    // State(43)
    None,                                    // State(44)
    None,                                    // State(45)
    None,                                    // State(46)
    None,                                    // State(47)
    None,                                    // State(48)
    None,                                    // State(49)
    None,                                    // State(50)
    None,                                    // State(51)
    None,                                    // State(52)
    None,                                    // State(53)
    None,                                    // State(54)
    None,                                    // State(55)
    None,                                    // State(56)
    None,                                    // State(57)
    None,                                    // State(58)
    None,                                    // State(59)
    None,                                    // State(60)
    None,                                    // State(61)
    None,                                    // State(62)
    None,                                    // State(63)
    None,                                    // State(64)
    None,                                    // State(65)
    None,                                    // State(66)
    None,                                    // State(67)
    None,                                    // State(68)
    None,                                    // State(69)
    None,                                    // State(70)
    None,                                    // State(71)
    None,                                    // State(72)
    None,                                    // State(73)
    None,                                    // State(74)
    None,                                    // State(75)
    None,                                    // State(76)
    None,                                    // State(77)
    None,                                    // State(78)
    None,                                    // State(79)
    None,                                    // State(80)
    None,                                    // State(81)
    None,                                    // State(82)
    None,                                    // State(83)
    None,                                    // State(84)
    None,                                    // State(85)
    None,                                    // State(86)
    None,                                    // State(87)
    None,                                    // State(88)
    None,                                    // State(89)
    None,                                    // State(90)
    None,                                    // State(91)
    None,                                    // State(92)
    None,                                    // State(93)
    None,                                    // State(94)
    None,                                    // State(95)
    None,                                    // State(96)
    None,                                    // State(97)
    None,                                    // State(98)
    None,                                    // State(99)
    None,                                    // State(100)
    None,                                    // State(101)
    None,                                    // State(102)
    None,                                    // State(103)
    None,                                    // State(104)
    None,                                    // State(105)
    None,                                    // State(106)
    None,                                    // State(107)
    None,                                    // State(108)
    None,                                    // State(109)
    None,                                    // State(110)
    None,                                    // State(111)
    None,                                    // State(112)
    Some(TokenKind::WhiteSpaceSequence),     // State(113)
    Some(TokenKind::LineTerminatorSequence), // State(114)
    Some(TokenKind::LineTerminatorSequence), // State(115)
    Some(TokenKind::Comment),                // State(116)
    Some(TokenKind::Comment),                // State(117)
    Some(TokenKind::Break),                  // State(118)
    Some(TokenKind::Case),                   // State(119)
    Some(TokenKind::Catch),                  // State(120)
    Some(TokenKind::Class),                  // State(121)
    Some(TokenKind::Const),                  // State(122)
    Some(TokenKind::Continue),               // State(123)
    Some(TokenKind::Debugger),               // State(124)
    Some(TokenKind::Default),                // State(125)
    Some(TokenKind::Delete),                 // State(126)
    Some(TokenKind::Do),                     // State(127)
    Some(TokenKind::Else),                   // State(128)
    Some(TokenKind::Enum),                   // State(129)
    Some(TokenKind::Export),                 // State(130)
    Some(TokenKind::Extends),                // State(131)
    Some(TokenKind::False),                  // State(132)
    Some(TokenKind::Finally),                // State(133)
    Some(TokenKind::For),                    // State(134)
    Some(TokenKind::Function),               // State(135)
    Some(TokenKind::If),                     // State(136)
    Some(TokenKind::Import),                 // State(137)
    Some(TokenKind::In),                     // State(138)
    Some(TokenKind::Instanceof),             // State(139)
    Some(TokenKind::New),                    // State(140)
    Some(TokenKind::Null),                   // State(141)
    Some(TokenKind::Return),                 // State(142)
    Some(TokenKind::Super),                  // State(143)
    Some(TokenKind::Switch),                 // State(144)
    Some(TokenKind::This),                   // State(145)
    Some(TokenKind::Throw),                  // State(146)
    Some(TokenKind::True),                   // State(147)
    Some(TokenKind::Try),                    // State(148)
    Some(TokenKind::Typeof),                 // State(149)
    Some(TokenKind::Var),                    // State(150)
    Some(TokenKind::Void),                   // State(151)
    Some(TokenKind::While),                  // State(152)
    Some(TokenKind::With),                   // State(153)
    Some(TokenKind::Await),                  // State(154)
    Some(TokenKind::Yield),                  // State(155)
    Some(TokenKind::Let),                    // State(156)
    Some(TokenKind::Static),                 // State(157)
    Some(TokenKind::Implements),             // State(158)
    Some(TokenKind::Interface),              // State(159)
    Some(TokenKind::Package),                // State(160)
    Some(TokenKind::Private),                // State(161)
    Some(TokenKind::Protected),              // State(162)
    Some(TokenKind::Public),                 // State(163)
    Some(TokenKind::As),                     // State(164)
    Some(TokenKind::Async),                  // State(165)
    Some(TokenKind::From),                   // State(166)
    Some(TokenKind::Get),                    // State(167)
    Some(TokenKind::Meta),                   // State(168)
    Some(TokenKind::Of),                     // State(169)
    Some(TokenKind::Set),                    // State(170)
    Some(TokenKind::Target),                 // State(171)
    Some(TokenKind::IdentifierName),         // State(172)
    Some(TokenKind::IdentifierName),         // State(173)
    Some(TokenKind::IdentifierName),         // State(174)
    Some(TokenKind::IdentifierName),         // State(175)
    Some(TokenKind::IdentifierName),         // State(176)
    Some(TokenKind::IdentifierName),         // State(177)
    Some(TokenKind::IdentifierName),         // State(178)
    Some(TokenKind::IdentifierName),         // State(179)
    Some(TokenKind::IdentifierName),         // State(180)
    Some(TokenKind::IdentifierName),         // State(181)
    Some(TokenKind::IdentifierName),         // State(182)
    Some(TokenKind::IdentifierName),         // State(183)
    Some(TokenKind::IdentifierName),         // State(184)
    Some(TokenKind::IdentifierName),         // State(185)
    Some(TokenKind::IdentifierName),         // State(186)
    Some(TokenKind::IdentifierName),         // State(187)
    Some(TokenKind::IdentifierName),         // State(188)
    Some(TokenKind::IdentifierName),         // State(189)
    Some(TokenKind::IdentifierName),         // State(190)
    Some(TokenKind::IdentifierName),         // State(191)
    Some(TokenKind::IdentifierName),         // State(192)
    Some(TokenKind::IdentifierName),         // State(193)
    Some(TokenKind::IdentifierName),         // State(194)
    Some(TokenKind::IdentifierName),         // State(195)
    Some(TokenKind::IdentifierName),         // State(196)
    Some(TokenKind::IdentifierName),         // State(197)
    Some(TokenKind::IdentifierName),         // State(198)
    Some(TokenKind::IdentifierName),         // State(199)
    Some(TokenKind::IdentifierName),         // State(200)
    Some(TokenKind::IdentifierName),         // State(201)
    Some(TokenKind::IdentifierName),         // State(202)
    Some(TokenKind::IdentifierName),         // State(203)
    Some(TokenKind::IdentifierName),         // State(204)
    Some(TokenKind::IdentifierName),         // State(205)
    Some(TokenKind::IdentifierName),         // State(206)
    Some(TokenKind::IdentifierName),         // State(207)
    Some(TokenKind::IdentifierName),         // State(208)
    Some(TokenKind::IdentifierName),         // State(209)
    Some(TokenKind::IdentifierName),         // State(210)
    Some(TokenKind::IdentifierName),         // State(211)
    Some(TokenKind::IdentifierName),         // State(212)
    Some(TokenKind::IdentifierName),         // State(213)
    Some(TokenKind::IdentifierName),         // State(214)
    Some(TokenKind::IdentifierName),         // State(215)
    Some(TokenKind::IdentifierName),         // State(216)
    Some(TokenKind::IdentifierName),         // State(217)
    Some(TokenKind::IdentifierName),         // State(218)
    Some(TokenKind::IdentifierName),         // State(219)
    Some(TokenKind::IdentifierName),         // State(220)
    Some(TokenKind::IdentifierName),         // State(221)
    Some(TokenKind::IdentifierName),         // State(222)
    Some(TokenKind::IdentifierName),         // State(223)
    Some(TokenKind::IdentifierName),         // State(224)
    Some(TokenKind::IdentifierName),         // State(225)
    Some(TokenKind::IdentifierName),         // State(226)
    Some(TokenKind::IdentifierName),         // State(227)
    Some(TokenKind::IdentifierName),         // State(228)
    Some(TokenKind::IdentifierName),         // State(229)
    Some(TokenKind::IdentifierName),         // State(230)
    Some(TokenKind::IdentifierName),         // State(231)
    Some(TokenKind::IdentifierName),         // State(232)
    Some(TokenKind::IdentifierName),         // State(233)
    Some(TokenKind::IdentifierName),         // State(234)
    Some(TokenKind::IdentifierName),         // State(235)
    Some(TokenKind::IdentifierName),         // State(236)
    Some(TokenKind::IdentifierName),         // State(237)
    Some(TokenKind::IdentifierName),         // State(238)
    Some(TokenKind::IdentifierName),         // State(239)
    Some(TokenKind::IdentifierName),         // State(240)
    Some(TokenKind::IdentifierName),         // State(241)
    Some(TokenKind::IdentifierName),         // State(242)
    Some(TokenKind::IdentifierName),         // State(243)
    Some(TokenKind::IdentifierName),         // State(244)
    Some(TokenKind::IdentifierName),         // State(245)
    Some(TokenKind::IdentifierName),         // State(246)
    Some(TokenKind::IdentifierName),         // State(247)
    Some(TokenKind::IdentifierName),         // State(248)
    Some(TokenKind::IdentifierName),         // State(249)
    Some(TokenKind::IdentifierName),         // State(250)
    Some(TokenKind::IdentifierName),         // State(251)
    Some(TokenKind::IdentifierName),         // State(252)
    Some(TokenKind::IdentifierName),         // State(253)
    Some(TokenKind::IdentifierName),         // State(254)
    Some(TokenKind::IdentifierName),         // State(255)
    Some(TokenKind::IdentifierName),         // State(256)
    Some(TokenKind::IdentifierName),         // State(257)
    Some(TokenKind::IdentifierName),         // State(258)
    Some(TokenKind::IdentifierName),         // State(259)
    Some(TokenKind::IdentifierName),         // State(260)
    Some(TokenKind::IdentifierName),         // State(261)
    Some(TokenKind::IdentifierName),         // State(262)
    Some(TokenKind::IdentifierName),         // State(263)
    Some(TokenKind::IdentifierName),         // State(264)
    Some(TokenKind::IdentifierName),         // State(265)
    Some(TokenKind::IdentifierName),         // State(266)
    Some(TokenKind::IdentifierName),         // State(267)
    Some(TokenKind::IdentifierName),         // State(268)
    Some(TokenKind::IdentifierName),         // State(269)
    Some(TokenKind::IdentifierName),         // State(270)
    Some(TokenKind::IdentifierName),         // State(271)
    Some(TokenKind::IdentifierName),         // State(272)
    Some(TokenKind::IdentifierName),         // State(273)
    Some(TokenKind::IdentifierName),         // State(274)
    Some(TokenKind::IdentifierName),         // State(275)
    Some(TokenKind::IdentifierName),         // State(276)
    Some(TokenKind::IdentifierName),         // State(277)
    Some(TokenKind::IdentifierName),         // State(278)
    Some(TokenKind::IdentifierName),         // State(279)
    Some(TokenKind::IdentifierName),         // State(280)
    Some(TokenKind::IdentifierName),         // State(281)
    Some(TokenKind::IdentifierName),         // State(282)
    Some(TokenKind::IdentifierName),         // State(283)
    Some(TokenKind::IdentifierName),         // State(284)
    Some(TokenKind::IdentifierName),         // State(285)
    Some(TokenKind::IdentifierName),         // State(286)
    Some(TokenKind::IdentifierName),         // State(287)
    Some(TokenKind::IdentifierName),         // State(288)
    Some(TokenKind::IdentifierName),         // State(289)
    Some(TokenKind::IdentifierName),         // State(290)
    Some(TokenKind::IdentifierName),         // State(291)
    Some(TokenKind::IdentifierName),         // State(292)
    Some(TokenKind::IdentifierName),         // State(293)
    Some(TokenKind::IdentifierName),         // State(294)
    Some(TokenKind::IdentifierName),         // State(295)
    Some(TokenKind::IdentifierName),         // State(296)
    Some(TokenKind::IdentifierName),         // State(297)
    Some(TokenKind::IdentifierName),         // State(298)
    Some(TokenKind::IdentifierName),         // State(299)
    Some(TokenKind::IdentifierName),         // State(300)
    Some(TokenKind::IdentifierName),         // State(301)
    Some(TokenKind::IdentifierName),         // State(302)
    Some(TokenKind::IdentifierName),         // State(303)
    Some(TokenKind::IdentifierName),         // State(304)
    Some(TokenKind::IdentifierName),         // State(305)
    Some(TokenKind::IdentifierName),         // State(306)
    Some(TokenKind::IdentifierName),         // State(307)
    Some(TokenKind::IdentifierName),         // State(308)
    Some(TokenKind::IdentifierName),         // State(309)
    Some(TokenKind::IdentifierName),         // State(310)
    Some(TokenKind::IdentifierName),         // State(311)
    Some(TokenKind::IdentifierName),         // State(312)
    Some(TokenKind::IdentifierName),         // State(313)
    Some(TokenKind::IdentifierName),         // State(314)
    Some(TokenKind::IdentifierName),         // State(315)
    Some(TokenKind::IdentifierName),         // State(316)
    Some(TokenKind::IdentifierName),         // State(317)
    Some(TokenKind::IdentifierName),         // State(318)
    Some(TokenKind::IdentifierName),         // State(319)
    Some(TokenKind::IdentifierName),         // State(320)
    Some(TokenKind::IdentifierName),         // State(321)
    Some(TokenKind::IdentifierName),         // State(322)
    Some(TokenKind::IdentifierName),         // State(323)
    Some(TokenKind::IdentifierName),         // State(324)
    Some(TokenKind::IdentifierName),         // State(325)
    Some(TokenKind::IdentifierName),         // State(326)
    Some(TokenKind::IdentifierName),         // State(327)
    Some(TokenKind::IdentifierName),         // State(328)
    Some(TokenKind::IdentifierName),         // State(329)
    Some(TokenKind::IdentifierName),         // State(330)
    Some(TokenKind::IdentifierName),         // State(331)
    Some(TokenKind::IdentifierName),         // State(332)
    Some(TokenKind::IdentifierName),         // State(333)
    Some(TokenKind::IdentifierName),         // State(334)
    Some(TokenKind::IdentifierName),         // State(335)
    Some(TokenKind::IdentifierName),         // State(336)
    Some(TokenKind::IdentifierName),         // State(337)
    Some(TokenKind::IdentifierName),         // State(338)
    Some(TokenKind::IdentifierName),         // State(339)
    Some(TokenKind::IdentifierName),         // State(340)
    Some(TokenKind::IdentifierName),         // State(341)
    Some(TokenKind::IdentifierName),         // State(342)
    Some(TokenKind::IdentifierName),         // State(343)
    Some(TokenKind::IdentifierName),         // State(344)
    Some(TokenKind::IdentifierName),         // State(345)
    Some(TokenKind::IdentifierName),         // State(346)
    Some(TokenKind::PrivateIdentifier),      // State(347)
    Some(TokenKind::OptionalChaining),       // State(348)
    Some(TokenKind::Lbrace),                 // State(349)
    Some(TokenKind::Lparen),                 // State(350)
    Some(TokenKind::Rparen),                 // State(351)
    Some(TokenKind::Lbrack),                 // State(352)
    Some(TokenKind::Rbrack),                 // State(353)
    Some(TokenKind::Dot),                    // State(354)
    Some(TokenKind::Ellipsis),               // State(355)
    Some(TokenKind::SemiColon),              // State(356)
    Some(TokenKind::Comma),                  // State(357)
    Some(TokenKind::Lt),                     // State(358)
    Some(TokenKind::Gt),                     // State(359)
    Some(TokenKind::Lte),                    // State(360)
    Some(TokenKind::Gte),                    // State(361)
    Some(TokenKind::Eq),                     // State(362)
    Some(TokenKind::Ne),                     // State(363)
    Some(TokenKind::EqStrict),               // State(364)
    Some(TokenKind::NeStrict),               // State(365)
    Some(TokenKind::Add),                    // State(366)
    Some(TokenKind::Sub),                    // State(367)
    Some(TokenKind::Mul),                    // State(368)
    Some(TokenKind::Mod),                    // State(369)
    Some(TokenKind::Exp),                    // State(370)
    Some(TokenKind::Inc),                    // State(371)
    Some(TokenKind::Dec),                    // State(372)
    Some(TokenKind::Shl),                    // State(373)
    Some(TokenKind::Sar),                    // State(374)
    Some(TokenKind::Shr),                    // State(375)
    Some(TokenKind::BitAnd),                 // State(376)
    Some(TokenKind::BitOr),                  // State(377)
    Some(TokenKind::BitXor),                 // State(378)
    Some(TokenKind::Not),                    // State(379)
    Some(TokenKind::BitNot),                 // State(380)
    Some(TokenKind::And),                    // State(381)
    Some(TokenKind::Or),                     // State(382)
    Some(TokenKind::Nullish),                // State(383)
    Some(TokenKind::Conditional),            // State(384)
    Some(TokenKind::Colon),                  // State(385)
    Some(TokenKind::Assign),                 // State(386)
    Some(TokenKind::AddAssign),              // State(387)
    Some(TokenKind::SubAssign),              // State(388)
    Some(TokenKind::MulAssign),              // State(389)
    Some(TokenKind::ModAssign),              // State(390)
    Some(TokenKind::ExpAssign),              // State(391)
    Some(TokenKind::ShlAssign),              // State(392)
    Some(TokenKind::SarAssign),              // State(393)
    Some(TokenKind::ShrAssign),              // State(394)
    Some(TokenKind::BitAndAssign),           // State(395)
    Some(TokenKind::BitOrAssign),            // State(396)
    Some(TokenKind::BitXorAssign),           // State(397)
    Some(TokenKind::AndAssign),              // State(398)
    Some(TokenKind::OrAssign),               // State(399)
    Some(TokenKind::NullishAssign),          // State(400)
    Some(TokenKind::Arrow),                  // State(401)
    Some(TokenKind::NumericLiteral),         // State(402)
    Some(TokenKind::NumericLiteral),         // State(403)
    Some(TokenKind::NumericLiteral),         // State(404)
    Some(TokenKind::NumericLiteral),         // State(405)
    Some(TokenKind::NumericLiteral),         // State(406)
    Some(TokenKind::NumericLiteral),         // State(407)
    Some(TokenKind::NumericLiteral),         // State(408)
    Some(TokenKind::NumericLiteral),         // State(409)
    Some(TokenKind::NumericLiteral),         // State(410)
    Some(TokenKind::NumericLiteral),         // State(411)
    Some(TokenKind::NumericLiteral),         // State(412)
    Some(TokenKind::StringLiteral),          // State(413)
    Some(TokenKind::NoSubstitutionTemplate), // State(414)
    Some(TokenKind::TemplateHead),           // State(415)
    Some(TokenKind::Div),                    // State(416)
    Some(TokenKind::DivAssign),              // State(417)
    Some(TokenKind::Rbrace),                 // State(418)
];

const LOOKAHEAD_TABLE: [bool; 419] = [
    false, // State(0)
    false, // State(1)
    false, // State(2)
    false, // State(3)
    false, // State(4)
    false, // State(5)
    false, // State(6)
    false, // State(7)
    false, // State(8)
    false, // State(9)
    false, // State(10)
    false, // State(11)
    false, // State(12)
    false, // State(13)
    false, // State(14)
    false, // State(15)
    false, // State(16)
    false, // State(17)
    false, // State(18)
    false, // State(19)
    false, // State(20)
    false, // State(21)
    false, // State(22)
    false, // State(23)
    false, // State(24)
    false, // State(25)
    false, // State(26)
    false, // State(27)
    false, // State(28)
    false, // State(29)
    false, // State(30)
    false, // State(31)
    false, // State(32)
    false, // State(33)
    false, // State(34)
    false, // State(35)
    false, // State(36)
    false, // State(37)
    false, // State(38)
    false, // State(39)
    false, // State(40)
    false, // State(41)
    false, // State(42)
    false, // State(43)
    false, // State(44)
    false, // State(45)
    false, // State(46)
    false, // State(47)
    false, // State(48)
    false, // State(49)
    false, // State(50)
    false, // State(51)
    false, // State(52)
    false, // State(53)
    false, // State(54)
    false, // State(55)
    false, // State(56)
    false, // State(57)
    false, // State(58)
    false, // State(59)
    false, // State(60)
    false, // State(61)
    false, // State(62)
    false, // State(63)
    false, // State(64)
    false, // State(65)
    false, // State(66)
    false, // State(67)
    false, // State(68)
    false, // State(69)
    false, // State(70)
    false, // State(71)
    false, // State(72)
    false, // State(73)
    false, // State(74)
    false, // State(75)
    false, // State(76)
    false, // State(77)
    false, // State(78)
    false, // State(79)
    false, // State(80)
    false, // State(81)
    false, // State(82)
    false, // State(83)
    false, // State(84)
    false, // State(85)
    false, // State(86)
    false, // State(87)
    false, // State(88)
    false, // State(89)
    false, // State(90)
    false, // State(91)
    false, // State(92)
    false, // State(93)
    false, // State(94)
    false, // State(95)
    false, // State(96)
    false, // State(97)
    false, // State(98)
    false, // State(99)
    false, // State(100)
    false, // State(101)
    false, // State(102)
    false, // State(103)
    false, // State(104)
    false, // State(105)
    false, // State(106)
    false, // State(107)
    false, // State(108)
    false, // State(109)
    false, // State(110)
    false, // State(111)
    false, // State(112)
    false, // State(113)
    false, // State(114)
    true,  // State(115)
    false, // State(116)
    false, // State(117)
    false, // State(118)
    false, // State(119)
    false, // State(120)
    false, // State(121)
    false, // State(122)
    false, // State(123)
    false, // State(124)
    false, // State(125)
    false, // State(126)
    false, // State(127)
    false, // State(128)
    false, // State(129)
    false, // State(130)
    false, // State(131)
    false, // State(132)
    false, // State(133)
    false, // State(134)
    false, // State(135)
    false, // State(136)
    false, // State(137)
    false, // State(138)
    false, // State(139)
    false, // State(140)
    false, // State(141)
    false, // State(142)
    false, // State(143)
    false, // State(144)
    false, // State(145)
    false, // State(146)
    false, // State(147)
    false, // State(148)
    false, // State(149)
    false, // State(150)
    false, // State(151)
    false, // State(152)
    false, // State(153)
    false, // State(154)
    false, // State(155)
    false, // State(156)
    false, // State(157)
    false, // State(158)
    false, // State(159)
    false, // State(160)
    false, // State(161)
    false, // State(162)
    false, // State(163)
    false, // State(164)
    false, // State(165)
    false, // State(166)
    false, // State(167)
    false, // State(168)
    false, // State(169)
    false, // State(170)
    false, // State(171)
    false, // State(172)
    false, // State(173)
    false, // State(174)
    false, // State(175)
    false, // State(176)
    false, // State(177)
    false, // State(178)
    false, // State(179)
    false, // State(180)
    false, // State(181)
    false, // State(182)
    false, // State(183)
    false, // State(184)
    false, // State(185)
    false, // State(186)
    false, // State(187)
    false, // State(188)
    false, // State(189)
    false, // State(190)
    false, // State(191)
    false, // State(192)
    false, // State(193)
    false, // State(194)
    false, // State(195)
    false, // State(196)
    false, // State(197)
    false, // State(198)
    false, // State(199)
    false, // State(200)
    false, // State(201)
    false, // State(202)
    false, // State(203)
    false, // State(204)
    false, // State(205)
    false, // State(206)
    false, // State(207)
    false, // State(208)
    false, // State(209)
    false, // State(210)
    false, // State(211)
    false, // State(212)
    false, // State(213)
    false, // State(214)
    false, // State(215)
    false, // State(216)
    false, // State(217)
    false, // State(218)
    false, // State(219)
    false, // State(220)
    false, // State(221)
    false, // State(222)
    false, // State(223)
    false, // State(224)
    false, // State(225)
    false, // State(226)
    false, // State(227)
    false, // State(228)
    false, // State(229)
    false, // State(230)
    false, // State(231)
    false, // State(232)
    false, // State(233)
    false, // State(234)
    false, // State(235)
    false, // State(236)
    false, // State(237)
    false, // State(238)
    false, // State(239)
    false, // State(240)
    false, // State(241)
    false, // State(242)
    false, // State(243)
    false, // State(244)
    false, // State(245)
    false, // State(246)
    false, // State(247)
    false, // State(248)
    false, // State(249)
    false, // State(250)
    false, // State(251)
    false, // State(252)
    false, // State(253)
    false, // State(254)
    false, // State(255)
    false, // State(256)
    false, // State(257)
    false, // State(258)
    false, // State(259)
    false, // State(260)
    false, // State(261)
    false, // State(262)
    false, // State(263)
    false, // State(264)
    false, // State(265)
    false, // State(266)
    false, // State(267)
    false, // State(268)
    false, // State(269)
    false, // State(270)
    false, // State(271)
    false, // State(272)
    false, // State(273)
    false, // State(274)
    false, // State(275)
    false, // State(276)
    false, // State(277)
    false, // State(278)
    false, // State(279)
    false, // State(280)
    false, // State(281)
    false, // State(282)
    false, // State(283)
    false, // State(284)
    false, // State(285)
    false, // State(286)
    false, // State(287)
    false, // State(288)
    false, // State(289)
    false, // State(290)
    false, // State(291)
    false, // State(292)
    false, // State(293)
    false, // State(294)
    false, // State(295)
    false, // State(296)
    false, // State(297)
    false, // State(298)
    false, // State(299)
    false, // State(300)
    false, // State(301)
    false, // State(302)
    false, // State(303)
    false, // State(304)
    false, // State(305)
    false, // State(306)
    false, // State(307)
    false, // State(308)
    false, // State(309)
    false, // State(310)
    false, // State(311)
    false, // State(312)
    false, // State(313)
    false, // State(314)
    false, // State(315)
    false, // State(316)
    false, // State(317)
    false, // State(318)
    false, // State(319)
    false, // State(320)
    false, // State(321)
    false, // State(322)
    false, // State(323)
    false, // State(324)
    false, // State(325)
    false, // State(326)
    false, // State(327)
    false, // State(328)
    false, // State(329)
    false, // State(330)
    false, // State(331)
    false, // State(332)
    false, // State(333)
    false, // State(334)
    false, // State(335)
    false, // State(336)
    false, // State(337)
    false, // State(338)
    false, // State(339)
    false, // State(340)
    false, // State(341)
    false, // State(342)
    false, // State(343)
    false, // State(344)
    false, // State(345)
    false, // State(346)
    false, // State(347)
    true,  // State(348)
    false, // State(349)
    false, // State(350)
    false, // State(351)
    false, // State(352)
    false, // State(353)
    false, // State(354)
    false, // State(355)
    false, // State(356)
    false, // State(357)
    false, // State(358)
    false, // State(359)
    false, // State(360)
    false, // State(361)
    false, // State(362)
    false, // State(363)
    false, // State(364)
    false, // State(365)
    false, // State(366)
    false, // State(367)
    false, // State(368)
    false, // State(369)
    false, // State(370)
    false, // State(371)
    false, // State(372)
    false, // State(373)
    false, // State(374)
    false, // State(375)
    false, // State(376)
    false, // State(377)
    false, // State(378)
    false, // State(379)
    false, // State(380)
    false, // State(381)
    false, // State(382)
    false, // State(383)
    false, // State(384)
    false, // State(385)
    false, // State(386)
    false, // State(387)
    false, // State(388)
    false, // State(389)
    false, // State(390)
    false, // State(391)
    false, // State(392)
    false, // State(393)
    false, // State(394)
    false, // State(395)
    false, // State(396)
    false, // State(397)
    false, // State(398)
    false, // State(399)
    false, // State(400)
    false, // State(401)
    false, // State(402)
    false, // State(403)
    false, // State(404)
    false, // State(405)
    false, // State(406)
    false, // State(407)
    false, // State(408)
    false, // State(409)
    false, // State(410)
    false, // State(411)
    false, // State(412)
    false, // State(413)
    false, // State(414)
    false, // State(415)
    false, // State(416)
    false, // State(417)
    false, // State(418)
];
