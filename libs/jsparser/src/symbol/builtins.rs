// DO NOT EDIT THIS FILE BY HAND.
//
// This file was automagically generated with:
// template: libs/jsparser/src/symbol/builtins.rs.njk

use super::Symbol;
use super::SymbolTable;

impl SymbolTable {
    pub(crate) const ASYNC: Symbol = Symbol(0);
    pub(crate) const AWAIT: Symbol = Symbol(1);
    pub(crate) const ARGUMENTS: Symbol = Symbol(2);
    pub(crate) const EVAL: Symbol = Symbol(3);
    pub(crate) const IMPLEMENTS: Symbol = Symbol(4);
    pub(crate) const INTERFACE: Symbol = Symbol(5);
    pub(crate) const LET: Symbol = Symbol(6);
    pub(crate) const PACKAGE: Symbol = Symbol(7);
    pub(crate) const PRIVATE: Symbol = Symbol(8);
    pub(crate) const PROTECTED: Symbol = Symbol(9);
    pub(crate) const PUBLIC: Symbol = Symbol(10);
    pub(crate) const STATIC: Symbol = Symbol(11);
    pub(crate) const YIELD: Symbol = Symbol(12);

    pub(super) fn register_builtin_symbols(&mut self) {
        self.register_builtin_symbol(Self::ASYNC, "async");
        self.register_builtin_symbol(Self::AWAIT, "await");
        self.register_builtin_symbol(Self::ARGUMENTS, "arguments");
        self.register_builtin_symbol(Self::EVAL, "eval");
        self.register_builtin_symbol(Self::IMPLEMENTS, "implements");
        self.register_builtin_symbol(Self::INTERFACE, "interface");
        self.register_builtin_symbol(Self::LET, "let");
        self.register_builtin_symbol(Self::PACKAGE, "package");
        self.register_builtin_symbol(Self::PRIVATE, "private");
        self.register_builtin_symbol(Self::PROTECTED, "protected");
        self.register_builtin_symbol(Self::PUBLIC, "public");
        self.register_builtin_symbol(Self::STATIC, "static");
        self.register_builtin_symbol(Self::YIELD, "yield");
    }

    fn register_builtin_symbol(&mut self, symbol: Symbol, value: &str) {
        let utf16: Vec<u16> = value.encode_utf16().collect();
        let (index, inserted) = self.symbols.insert_full(utf16);
        debug_assert_eq!(Symbol(index as u32), symbol, "{value}");
        debug_assert!(inserted, "{value}");
    }
}
