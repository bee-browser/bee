// DO NOT EDIT THIS FILE BY HAND.
//
// This file was automagically generated with:
// template: {{ template }}

use jsparser::Symbol;

use crate::Runtime;
use crate::U16Chunk;
use crate::U16String;
use crate::logger;
use crate::objects::ObjectHandle;
use crate::objects::Property;
use crate::types::CallContext;
use crate::types::Status;
use crate::types::Value;

impl<X> Runtime<X> {
    pub(super) fn create_{{ data.name }}_constructor(&mut self) -> ObjectHandle {
        logger::debug!(event = "create_{{ data.name }}_constructor");
        debug_assert!(self.{{ data.name }}_prototype.is_some());
        let constructor = self.create_builtin_function(constructor::<X>, self.{{ data.name }}_prototype);
        if let Some(mut prototype) = self.{{ data.name }}_prototype {
            let _ = prototype.define_own_property(
                Symbol::CONSTRUCTOR.into(),
                Property::data_xxx(Value::Function(constructor)),
            );
        }
        constructor
    }

    pub(super) fn create_{{ data.name }}_prototype(&mut self) -> ObjectHandle {
        logger::debug!(event = "creater_{{ data.name }}_prototype");
        debug_assert!(self.error_prototype.is_some());

        use jsparser::symbol::builtin::names;
        const NAME: U16Chunk = U16Chunk::new_const(names::{{ data.name | upper }});

        let mut prototype = self.create_object(self.error_prototype);
        let _ = prototype.define_own_property(
            Symbol::MESSAGE.into(),
            Property::data_xxx(Value::String(U16String::EMPTY)),
        );
        let _ = prototype.define_own_property(
            Symbol::NAME.into(),
            Property::data_xxx(Value::String(U16String::new(&NAME))),
        );

        prototype
    }

    pub(crate) fn create_{{ data.name }}(&mut self, new: bool, message: &Value, options: &Value) -> Result<ObjectHandle, Value> {
        logger::debug!(event = "create_{{ data.name }}", new, ?message, ?options);
        // TODO(feat): NewTarget
        let mut object = self.create_object(self.{{ data.name }}_prototype);

        object.set_error();

        match message {
            Value::Undefined => (),
            _ => {
                let msg = self.perform_to_string(message);
                // TODO: error handling
                let _ = object.define_own_property(
                    Symbol::MESSAGE.into(),
                    Property::data_wxc(Value::String(msg)),
                );
            }
        }

        match options {
            Value::Object(value) | Value::Function(value) => {
                let key = Symbol::CAUSE.into();
                if let Some(value) = value.get_value(&key) {
                    // TODO: error handling
                    let _ = object.define_own_property(key, Property::data_wxc(value.clone()));
                }
            }
            _ => (),
        }

        Ok(object)
    }
}

// lambda functions

extern "C" fn constructor<X>(
    runtime: &mut Runtime<X>,
    context: &mut CallContext,
    retv: &mut Value,
) -> Status {
    let new = context.is_new();
    let args = context.args();
    let message = args.first().unwrap_or(&Value::Undefined);
    let options = args.get(1).unwrap_or(&Value::Undefined);
    match runtime.create_{{ data.name }}(new, message, options) {
        Ok(value) => {
            *retv = Value::Object(value);
            Status::Normal
        }
        Err(value) => {
            *retv = value;
            Status::Exception
        }
    }
}
