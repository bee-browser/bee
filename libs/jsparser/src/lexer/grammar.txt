InputElementDiv ::
  WhiteSpace
  LineTerminator
  Comment
  CommonToken
  DivPunctuator
  RightBracePunctuator

InputElementRegExp ::
  WhiteSpace
  LineTerminator
  Comment
  CommonToken
  RightBracePunctuator
  RegularExpressionLiteral

InputElementRegExpOrTemplateTail ::
  WhiteSpace
  LineTerminator
  Comment
  CommonToken
  RegularExpressionLiteral
  TemplateSubstitutionTail

InputElementTemplateTail ::
  WhiteSpace
  LineTerminator
  Comment
  CommonToken
  DivPunctuator
  TemplateSubstitutionTail

InputElementHashbangOrRegExp ::
  WhiteSpace
  LineTerminator
  Comment
  CommonToken
  HashbangComment
  RegularExpressionLiteral

WhiteSpace ::
  <TAB>
  <VT>
  <FF>
  <ZWNBSP>
  <USP>

LineTerminator ::
  <LF>
  <CR>
  <LS>
  <PS>

LineTerminatorSequence ::
  <LF>
  <CR> [lookahead != <LF>]
  <LS>
  <PS>
  <CR> <LF>

Comment ::
  MultiLineComment
  SingleLineComment

MultiLineComment ::
  `/*` MultiLineCommentChars? `*/`

MultiLineCommentChars ::
  MultiLineNotAsteriskChar MultiLineCommentChars?
  `*` PostAsteriskCommentChars?

PostAsteriskCommentChars ::
  MultiLineNotForwardSlashOrAsteriskChar MultiLineCommentChars?
  `*` PostAsteriskCommentChars?

MultiLineNotAsteriskChar ::
  SourceCharacter but not `*`

MultiLineNotForwardSlashOrAsteriskChar ::
  SourceCharacter but not one of `/` or `*`

SingleLineComment ::
  `//` SingleLineCommentChars?

SingleLineCommentChars ::
  SingleLineCommentChar SingleLineCommentChars?

SingleLineCommentChar ::
  SourceCharacter but not LineTerminator

HashbangComment ::
  `#!` SingleLineCommentChars?

CommonToken ::
  IdentifierName
  PrivateIdentifier
  Punctuator
  NumericLiteral
  StringLiteral
  Template

PrivateIdentifier ::
  `#` IdentifierName

IdentifierName ::
  IdentifierStart
  IdentifierName IdentifierPart

IdentifierStart ::
  IdentifierStartChar
  `\` UnicodeEscapeSequence

IdentifierPart ::
  IdentifierPartChar
  `\` UnicodeEscapeSequence

IdentifierStartChar ::
  UnicodeIDStart
  `$`
  `_`

IdentifierPartChar ::
  UnicodeIDContinue
  `$`
  <ZWNJ>
  <ZWJ>

AsciiLetter :: one of
  `a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m` `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`
  `A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M` `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`

UnicodeIDStart ::
  > any Unicode code point with the Unicode property “ID_Start”

UnicodeIDContinue ::
  > any Unicode code point with the Unicode property “ID_Continue”

ReservedWord :: one of
  `await`
  `break`
  `case` `catch` `class` `const` `continue`
  `debugger` `default` `delete` `do`
  `else` `enum` `export` `extends`
  `false` `finally` `for` `function`
  `if` `import` `in` `instanceof`
  `new` `null`
  `return`
  `super` `switch`
  `this` `throw` `true` `try` `typeof`
  `var` `void`
  `while` `with`
  `yield`

Punctuator ::
  OptionalChainingPunctuator
  OtherPunctuator

OptionalChainingPunctuator ::
  `?.` [lookahead ∉ DecimalDigit]

OtherPunctuator :: one of
  `{` `(` `)` `[` `]`
  `.` `...` `;` `,`
  `<` `>` `<=` `>=`
  `==` `!=` `===` `!==`
  `+` `-` `*` `%` `**`
  `++` `--`
  `<<` `>>` `>>>`
  `&` `|` `^`
  `!` `~`
  `&&` `||` `??`
  `?` `:`
  `=` `+=` `-=` `*=` `%=` `**=` `<<=` `>>=` `>>>=` `&=` `|=` `^=`
  `&&=` `||=` `??=`
  `=>`

DivPunctuator ::
  `/`
  `/=`

RightBracePunctuator ::
  `}`

NullLiteral ::
  `null`

BooleanLiteral ::
  `true`
  `false`

NumericLiteralSeparator ::
  `_`

NumericLiteral ::
  DecimalLiteral
  DecimalBigIntegerLiteral
  NonDecimalIntegerLiteral[+Sep]
  NonDecimalIntegerLiteral[+Sep] BigIntLiteralSuffix
  LegacyOctalIntegerLiteral

DecimalBigIntegerLiteral ::
  `0` BigIntLiteralSuffix
  NonZeroDigit DecimalDigits[+Sep]? BigIntLiteralSuffix
  NonZeroDigit NumericLiteralSeparator DecimalDigits[+Sep] BigIntLiteralSuffix

NonDecimalIntegerLiteral[Sep] ::
  BinaryIntegerLiteral[?Sep]
  OctalIntegerLiteral[?Sep]
  HexIntegerLiteral[?Sep]

BigIntLiteralSuffix ::
  `n`

DecimalLiteral ::
  DecimalIntegerLiteral `.` DecimalDigits[+Sep]? ExponentPart[+Sep]?
  `.` DecimalDigits[+Sep] ExponentPart[+Sep]?
  DecimalIntegerLiteral ExponentPart[+Sep]?

DecimalIntegerLiteral ::
  `0`
  NonZeroDigit
  NonZeroDigit NumericLiteralSeparator? DecimalDigits[+Sep]
  NonOctalDecimalIntegerLiteral

DecimalDigits[Sep] ::
  DecimalDigit
  DecimalDigits[?Sep] DecimalDigit
  [+Sep] DecimalDigits[+Sep] NumericLiteralSeparator DecimalDigit

DecimalDigit :: one of
  `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`

NonZeroDigit :: one of
  `1` `2` `3` `4` `5` `6` `7` `8` `9`

ExponentPart[Sep] ::
  ExponentIndicator SignedInteger[?Sep]

ExponentIndicator :: one of
  `e` `E`

SignedInteger[Sep] ::
  DecimalDigits[?Sep]
  `+` DecimalDigits[?Sep]
  `-` DecimalDigits[?Sep]

BinaryIntegerLiteral[Sep] ::
  `0b` BinaryDigits[?Sep]
  `0B` BinaryDigits[?Sep]

BinaryDigits[Sep] ::
  BinaryDigit
  BinaryDigits[?Sep] BinaryDigit
  [+Sep] BinaryDigits[+Sep] NumericLiteralSeparator BinaryDigit

BinaryDigit :: one of
  `0` `1`

OctalIntegerLiteral[Sep] ::
  `0o` OctalDigits[?Sep]
  `0O` OctalDigits[?Sep]

OctalDigits[Sep] ::
  OctalDigit
  OctalDigits[?Sep] OctalDigit
  [+Sep] OctalDigits[+Sep] NumericLiteralSeparator OctalDigit

LegacyOctalIntegerLiteral ::
  `0` OctalDigit
  LegacyOctalIntegerLiteral OctalDigit

NonOctalDecimalIntegerLiteral ::
  `0` NonOctalDigit
  LegacyOctalLikeDecimalIntegerLiteral NonOctalDigit
  NonOctalDecimalIntegerLiteral DecimalDigit

LegacyOctalLikeDecimalIntegerLiteral ::
  `0` OctalDigit
  LegacyOctalLikeDecimalIntegerLiteral OctalDigit

OctalDigit :: one of
  `0` `1` `2` `3` `4` `5` `6` `7`

NonOctalDigit :: one of
  `8` `9`

HexIntegerLiteral[Sep] ::
  `0x` HexDigits[?Sep]
  `0X` HexDigits[?Sep]

HexDigits[Sep] ::
  HexDigit
  HexDigits[?Sep] HexDigit
  [+Sep] HexDigits[+Sep] NumericLiteralSeparator HexDigit

HexDigit :: one of
  `0` `1` `2` `3` `4` `5` `6` `7` `8` `9` `a` `b` `c` `d` `e` `f` `A` `B` `C` `D` `E` `F`

StringLiteral ::
  `"` DoubleStringCharacters? `"`
  `'` SingleStringCharacters? `'`

DoubleStringCharacters ::
  DoubleStringCharacter DoubleStringCharacters?

SingleStringCharacters ::
  SingleStringCharacter SingleStringCharacters?

DoubleStringCharacter ::
  SourceCharacter but not one of `"` or `\` or LineTerminator
  <LS>
  <PS>
  `\` EscapeSequence
  LineContinuation

SingleStringCharacter ::
  SourceCharacter but not one of `'` or `\` or LineTerminator
  <LS>
  <PS>
  `\` EscapeSequence
  LineContinuation

LineContinuation ::
  `\` LineTerminatorSequence

EscapeSequence ::
  CharacterEscapeSequence
  `0` [lookahead ∉ DecimalDigit]
  LegacyOctalEscapeSequence
  NonOctalDecimalEscapeSequence
  HexEscapeSequence
  UnicodeEscapeSequence

CharacterEscapeSequence ::
  SingleEscapeCharacter
  NonEscapeCharacter

SingleEscapeCharacter :: one of
  `'` `"` `\` `b` `f` `n` `r` `t` `v`

NonEscapeCharacter ::
  SourceCharacter but not one of EscapeCharacter or LineTerminator

EscapeCharacter ::
  SingleEscapeCharacter
  DecimalDigit
  `x`
  `u`

LegacyOctalEscapeSequence ::
  `0` [lookahead ∈ { `8`, `9` }]
  NonZeroOctalDigit [lookahead ∉ OctalDigit]
  ZeroToThree OctalDigit [lookahead ∉ OctalDigit]
  FourToSeven OctalDigit
  ZeroToThree OctalDigit OctalDigit

NonZeroOctalDigit ::
  OctalDigit but not `0`

ZeroToThree :: one of
  `0` `1` `2` `3`

FourToSeven :: one of
  `4` `5` `6` `7`

NonOctalDecimalEscapeSequence :: one of
  `8` `9`

HexEscapeSequence ::
  `x` HexDigit HexDigit

UnicodeEscapeSequence ::
  `u` Hex4Digits
  `u{` CodePoint `}`

Hex4Digits ::
  HexDigit HexDigit HexDigit HexDigit

RegularExpressionLiteral ::
  `/` RegularExpressionBody `/` RegularExpressionFlags

RegularExpressionBody ::
  RegularExpressionFirstChar RegularExpressionChars

RegularExpressionChars ::
  [empty]
  RegularExpressionChars RegularExpressionChar

RegularExpressionFirstChar ::
  RegularExpressionNonTerminator but not one of `*` or `\` or `/` or `[`
  RegularExpressionBackslashSequence
  RegularExpressionClass

RegularExpressionChar ::
  RegularExpressionNonTerminator but not one of `\` or `/` or `[`
  RegularExpressionBackslashSequence
  RegularExpressionClass

RegularExpressionBackslashSequence ::
  `\` RegularExpressionNonTerminator

RegularExpressionNonTerminator ::
  SourceCharacter but not LineTerminator

RegularExpressionClass ::
  `[` RegularExpressionClassChars `]`

RegularExpressionClassChars ::
  [empty]
  RegularExpressionClassChars RegularExpressionClassChar

RegularExpressionClassChar ::
  RegularExpressionNonTerminator but not one of `]` or `\`
  RegularExpressionBackslashSequence

RegularExpressionFlags ::
  [empty]
  RegularExpressionFlags IdentifierPartChar

Template ::
  NoSubstitutionTemplate
  TemplateHead

NoSubstitutionTemplate ::
  ``` TemplateCharacters? ```

TemplateHead ::
  ``` TemplateCharacters? `${`

TemplateSubstitutionTail ::
  TemplateMiddle
  TemplateTail

TemplateMiddle ::
  `}` TemplateCharacters? `${`

TemplateTail ::
  `}` TemplateCharacters? ```

TemplateCharacters ::
  TemplateCharacter TemplateCharacters?

TemplateCharacter ::
  `$` [lookahead != `{`]
  `\` TemplateEscapeSequence
  `\` NotEscapeSequence
  LineContinuation
  LineTerminatorSequence
  SourceCharacter but not one of ``` or `\` or `$` or LineTerminator

TemplateEscapeSequence ::
  CharacterEscapeSequence
  `0` [lookahead ∉ DecimalDigit]
  HexEscapeSequence
  UnicodeEscapeSequence

NotEscapeSequence ::
  `0` DecimalDigit
  DecimalDigit but not `0`
  `x` [lookahead ∉ HexDigit]
  `x` HexDigit [lookahead ∉ HexDigit]
  `u` [lookahead ∉ HexDigit] [lookahead != `{`]
  `u` HexDigit [lookahead ∉ HexDigit]
  `u` HexDigit HexDigit [lookahead ∉ HexDigit]
  `u` HexDigit HexDigit HexDigit [lookahead ∉ HexDigit]
  `u` `{` [lookahead ∉ HexDigit]
  `u` `{` NotCodePoint [lookahead ∉ HexDigit]
  `u` `{` CodePoint [lookahead ∉ HexDigit] [lookahead != `}`]

NotCodePoint ::
  HexDigits[~Sep] [> but only if MV of |HexDigits| > 0x10FFFF]

CodePoint ::
  HexDigits[~Sep] [> but only if MV of |HexDigits| ≤ 0x10FFFF]

