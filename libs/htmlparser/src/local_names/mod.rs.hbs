// DO NOT EDIT THIS FILE BY HAND.
//
// This file was automagically generated by:
// {{@command}}

//<coverage:exclude>

use phf::phf_map;
use phf::Map;

#[derive(Clone, Copy, Debug)]
pub enum LocalName {
    {{#each .}}
    {{{pascalCase @key}}},
    {{/each}}
    Unknown,
}

impl LocalName {
    pub fn lookup(s: &str) -> Self {
        LOCAL_NAMES.get(s).cloned().unwrap_or(Self::Unknown)
    }

    pub fn name(self) -> &'static str {
        DATA[self.as_index()].name
    }

    pub fn is_special(self) -> bool {
        match DATA[self.as_index()].category {
            Category::Special => true,
            _ => false,
        }
    }

    pub fn is_formatting(self) -> bool {
        match DATA[self.as_index()].category {
            Category::Formatting => true,
            _ => false,
        }
    }

    fn as_index(self) -> usize {
        match self {
          Self::Unknown => panic!(),
          _ => self as usize,
        }
    }
}

// models

struct LocalNameData {
    name: &'static str,
    category: Category,
    obsolete: bool,
}

enum Category {
    Special,
    Formatting,
    Ordinary,
}

static LOCAL_NAMES: Map<&'static str, LocalName> = phf_map! {
    {{#each .}}
    "{{{lowerCase @key}}}" => LocalName::{{{pascalCase @key}}},
    {{/each}}
};

macro_rules! data {
    ($name:literal, $category:ident) => {
        LocalNameData {
            name: $name,
            category: Category::$category,
            obsolete: false,
        }
    };
    (obsolete: $name:literal, $category:ident) => {
        LocalNameData {
            name: $name,
            category: Category::$category,
            obsolete: true,
        }
    };
}

const DATA: [LocalNameData; {{{length .}}}] = [
    {{#each .}}
    {{#if obsolete}}
    data![obsolete: "{{{@key}}}", {{{pascalCase category}}}],
    {{else}}
    data!["{{{@key}}}", {{{pascalCase category}}}],
    {{/if}}
    {{/each}}
];

//</coverage:exclude>
