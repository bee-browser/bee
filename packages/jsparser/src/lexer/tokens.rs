// DO NOT EDIT THIS FILE BY HAND.
//
// This file was automagically generated by:
// codegen.js tokens.rs.hbs tokens.json

#[derive(Clone, Debug, PartialEq)]
pub struct Token<'a> {
    pub kind: TokenKind,
    pub lexeme: &'a str,
}

impl<'a> Default for Token<'a> {
    fn default() -> Self {
        Token {
            kind: TokenKind::Eof,
            lexeme: "",
        }
    }
}

#[derive(Clone, Copy, Debug, PartialEq)]
#[repr(u8)]
pub enum TokenKind {
    Add,
    AddAssign,
    And,
    AndAssign,
    Arrow,
    As,
    Assign,
    Async,
    Await,
    BitAnd,
    BitAndAssign,
    BitNot,
    BitOr,
    BitOrAssign,
    BitXor,
    BitXorAssign,
    Break,
    Case,
    Catch,
    Class,
    Colon,
    Comma,
    Conditional,
    Const,
    Continue,
    Comment,
    Debugger,
    Dec,
    Default,
    Delete,
    Div,
    DivAssign,
    Do,
    Dot,
    Ellipsis,
    Else,
    Enum,
    Eq,
    EqStrict,
    Exp,
    Export,
    ExpAssign,
    Extends,
    False,
    Finally,
    For,
    From,
    Function,
    Get,
    Gt,
    Gte,
    If,
    Implements,
    Import,
    In,
    Inc,
    Instanceof,
    Interface,
    IdentifierName,
    Lbrace,
    Lbrack,
    Let,
    Lparen,
    Lt,
    Lte,
    LineTerminatorSequence,
    Meta,
    Mod,
    ModAssign,
    Mul,
    MulAssign,
    Ne,
    New,
    NeStrict,
    Not,
    Null,
    Nullish,
    NullishAssign,
    NoSubstitutionTemplate,
    NumericLiteral,
    Of,
    OptionalChaining,
    Or,
    OrAssign,
    Package,
    Private,
    Protected,
    Public,
    PrivateIdentifier,
    Rbrace,
    Rbrack,
    Return,
    Rparen,
    RegularExpressionLiteral,
    Sar,
    SarAssign,
    SemiColon,
    Set,
    Shl,
    ShlAssign,
    Shr,
    ShrAssign,
    Static,
    Sub,
    SubAssign,
    Super,
    Switch,
    StringLiteral,
    Target,
    This,
    Throw,
    True,
    Try,
    Typeof,
    TemplateHead,
    TemplateMiddle,
    TemplateTail,
    Var,
    Void,
    While,
    With,
    WhiteSpaceSequence,
    Yield,
    Eof,
}
