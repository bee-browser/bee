// DO NOT EDIT THIS FILE BY HAND.
//
// This file was automagically generated by:
// codegen.js layout_test.rs.hbs layout_tests.json

// This file is included from //libs/layout/tests/layout_test.rs.

//<coverage:exclude>
mod helper;

use std::path::PathBuf;

use helper::layout_test;

#[test]
fn absolutely_positioned_box_0000_layout_test() {
    layout_test(
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("absolutely_positioned_box_0000.scenario.jsonl")
            .as_path(),
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("data")
            .join("absolutely_positioned_box_0000.expected.yaml")
            .as_path(),
    );
}

#[test]
fn absolutely_positioned_box_0001_layout_test() {
    layout_test(
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("absolutely_positioned_box_0001.scenario.jsonl")
            .as_path(),
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("data")
            .join("absolutely_positioned_box_0001.expected.yaml")
            .as_path(),
    );
}

#[test]
fn block_box_constraints_0000_layout_test() {
    layout_test(
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("block_box_constraints_0000.scenario.jsonl")
            .as_path(),
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("data")
            .join("block_box_constraints_0000.expected.yaml")
            .as_path(),
    );
}

#[test]
fn block_box_constraints_0001_layout_test() {
    layout_test(
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("block_box_constraints_0001.scenario.jsonl")
            .as_path(),
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("data")
            .join("block_box_constraints_0001.expected.yaml")
            .as_path(),
    );
}

#[test]
fn block_box_constraints_0002_layout_test() {
    layout_test(
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("block_box_constraints_0002.scenario.jsonl")
            .as_path(),
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("data")
            .join("block_box_constraints_0002.expected.yaml")
            .as_path(),
    );
}

#[test]
fn containing_block_0000_layout_test() {
    layout_test(
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("containing_block_0000.scenario.jsonl")
            .as_path(),
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("data")
            .join("containing_block_0000.expected.yaml")
            .as_path(),
    );
}

#[test]
fn containing_block_0001_layout_test() {
    layout_test(
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("containing_block_0001.scenario.jsonl")
            .as_path(),
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("data")
            .join("containing_block_0001.expected.yaml")
            .as_path(),
    );
}

#[test]
fn containing_block_0002_layout_test() {
    layout_test(
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("containing_block_0002.scenario.jsonl")
            .as_path(),
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("data")
            .join("containing_block_0002.expected.yaml")
            .as_path(),
    );
}

#[test]
fn containing_block_0003_layout_test() {
    layout_test(
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("containing_block_0003.scenario.jsonl")
            .as_path(),
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("data")
            .join("containing_block_0003.expected.yaml")
            .as_path(),
    );
}

#[test]
fn fixed_positioned_box_0000_layout_test() {
    layout_test(
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("fixed_positioned_box_0000.scenario.jsonl")
            .as_path(),
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("data")
            .join("fixed_positioned_box_0000.expected.yaml")
            .as_path(),
    );
}

#[test]
fn fixed_positioned_box_0001_layout_test() {
    layout_test(
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("fixed_positioned_box_0001.scenario.jsonl")
            .as_path(),
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("data")
            .join("fixed_positioned_box_0001.expected.yaml")
            .as_path(),
    );
}

#[test]
fn flex_direction_column_layout_test() {
    layout_test(
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("flex_direction_column.scenario.jsonl")
            .as_path(),
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("data")
            .join("flex_direction_column.expected.yaml")
            .as_path(),
    );
}

#[test]
fn flex_direction_column_reverse_layout_test() {
    layout_test(
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("flex_direction_column_reverse.scenario.jsonl")
            .as_path(),
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("data")
            .join("flex_direction_column_reverse.expected.yaml")
            .as_path(),
    );
}

#[test]
fn flex_direction_row_layout_test() {
    layout_test(
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("flex_direction_row.scenario.jsonl")
            .as_path(),
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("data")
            .join("flex_direction_row.expected.yaml")
            .as_path(),
    );
}

#[test]
fn flex_direction_row_reverse_layout_test() {
    layout_test(
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("flex_direction_row_reverse.scenario.jsonl")
            .as_path(),
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("data")
            .join("flex_direction_row_reverse.expected.yaml")
            .as_path(),
    );
}

#[test]
fn flex_wrap_layout_test() {
    layout_test(
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("flex_wrap.scenario.jsonl")
            .as_path(),
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("data")
            .join("flex_wrap.expected.yaml")
            .as_path(),
    );
}

#[test]
fn flex_wrap_reverse_layout_test() {
    layout_test(
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("flex_wrap_reverse.scenario.jsonl")
            .as_path(),
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("data")
            .join("flex_wrap_reverse.expected.yaml")
            .as_path(),
    );
}

#[test]
fn margin_collapse_0000_layout_test() {
    layout_test(
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("margin_collapse_0000.scenario.jsonl")
            .as_path(),
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("data")
            .join("margin_collapse_0000.expected.yaml")
            .as_path(),
    );
}

#[test]
fn z_index_0000_layout_test() {
    layout_test(
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("z_index_0000.scenario.jsonl")
            .as_path(),
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("data")
            .join("z_index_0000.expected.yaml")
            .as_path(),
    );
}

#[test]
fn z_index_0001_layout_test() {
    layout_test(
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("z_index_0001.scenario.jsonl")
            .as_path(),
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("data")
            .join("z_index_0001.expected.yaml")
            .as_path(),
    );
}

#[test]
fn z_index_0002_layout_test() {
    layout_test(
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("z_index_0002.scenario.jsonl")
            .as_path(),
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("data")
            .join("z_index_0002.expected.yaml")
            .as_path(),
    );
}

#[test]
fn z_index_0003_layout_test() {
    layout_test(
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("z_index_0003.scenario.jsonl")
            .as_path(),
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("data")
            .join("z_index_0003.expected.yaml")
            .as_path(),
    );
}

#[test]
fn z_index_0004_layout_test() {
    layout_test(
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("z_index_0004.scenario.jsonl")
            .as_path(),
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("data")
            .join("z_index_0004.expected.yaml")
            .as_path(),
    );
}

#[test]
fn z_index_0005_layout_test() {
    layout_test(
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("z_index_0005.scenario.jsonl")
            .as_path(),
        PathBuf::from(env!("CARGO_MANIFEST_DIR"))
            .join("tests")
            .join("data")
            .join("z_index_0005.expected.yaml")
            .as_path(),
    );
}
//</coverage:exclude>
