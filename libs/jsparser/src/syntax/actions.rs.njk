// DO NOT EDIT THIS FILE BY HAND.
//
// This file was automagically generated with:
// template: {{ template }}

use super::Action;
use super::SemanticHandler;
use super::Processor;

impl<'s, H> Processor<'s, H>
where
    H: SemanticHandler<'s>,
{
    /// A constant variable of a list of semantic actions.
    ///
    /// This constant variable will be instantiated for each concrete type of `Processor<H>` even
    /// though each action for each concrete type implements the same algorithm.  Instantiating
    /// multiple concrete types of `Processor<H>` causes clones of this constant variable.
    /// However, the only one concrete type of `Processor<H>` is instantiated in most use cases.
    ///
    /// We cannot specify `static` instead of `const`.  Rust does not support static variables of
    /// generic types.  Additionally, Rust does not support associated static variables.
    pub(super) const ACTIONS: [Action<'s, H>; {{ data | length }}] = [
        {%- for item in data %}
        // {{ item.rule }}
        {%- if item.action === 'undefined' %}
        Action::Undefined,
        {%- elif item.action === 'nop' %}
        Action::Nop,
        {%- else %}
        Action::Invoke(Self::{{ item.action }}, "{{ item.action }}"),
        {%- endif %}
        {%- endfor %}
    ];
}
