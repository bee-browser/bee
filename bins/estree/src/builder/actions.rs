// DO NOT EDIT THIS FILE BY HAND.
//
// This file was automagically generated with:
// template: bins/estree/src/builder/actions.rs.hbs

use super::Builder;

type Action = fn(&mut Builder) -> Result<(), String>;

pub static ACTIONS: [Option<(Action, &'static str)>; 2113] = [
    // Script -> (empty)
    Some((Builder::empty_script, "empty_script")),
    // Script -> ScriptBody
    Some((Builder::script, "script")),
    // Module -> (empty)
    Some((Builder::empty_module, "empty_module")),
    // Module -> ModuleBody
    Some((Builder::module, "module")),
    // ScriptBody -> StatementList
    Some((Builder::nop, "nop")),
    // ModuleBody -> ModuleItemList
    Some((Builder::nop, "nop")),
    // StatementList -> StatementListItem
    Some((Builder::create_list, "create_list")),
    // StatementList -> StatementList StatementListItem
    Some((Builder::append_to_list, "append_to_list")),
    // ModuleItemList -> ModuleItem
    Some((Builder::create_list, "create_list")),
    // ModuleItemList -> ModuleItemList ModuleItem
    Some((Builder::append_to_list, "append_to_list")),
    // StatementListItem -> Statement
    Some((Builder::nop, "nop")),
    // StatementListItem -> Declaration
    Some((Builder::nop, "nop")),
    // ModuleItem -> ImportDeclaration
    Some((Builder::nop, "nop")),
    // ModuleItem -> ExportDeclaration
    Some((Builder::nop, "nop")),
    // ModuleItem -> StatementListItem_Await
    Some((Builder::nop, "nop")),
    // Statement -> BlockStatement
    Some((Builder::nop, "nop")),
    // Statement -> VariableStatement
    Some((Builder::nop, "nop")),
    // Statement -> EmptyStatement
    Some((Builder::nop, "nop")),
    // Statement -> ExpressionStatement
    Some((Builder::nop, "nop")),
    // Statement -> IfStatement
    Some((Builder::nop, "nop")),
    // Statement -> BreakableStatement
    Some((Builder::nop, "nop")),
    // Statement -> ContinueStatement
    Some((Builder::nop, "nop")),
    // Statement -> BreakStatement
    Some((Builder::nop, "nop")),
    // Statement -> WithStatement
    Some((Builder::nop, "nop")),
    // Statement -> LabelledStatement
    Some((Builder::nop, "nop")),
    // Statement -> ThrowStatement
    Some((Builder::nop, "nop")),
    // Statement -> TryStatement
    Some((Builder::nop, "nop")),
    // Statement -> DebuggerStatement
    Some((Builder::nop, "nop")),
    // Declaration -> HoistableDeclaration
    Some((Builder::nop, "nop")),
    // Declaration -> ClassDeclaration
    Some((Builder::nop, "nop")),
    // Declaration -> LexicalDeclaration_In
    Some((Builder::nop, "nop")),
    // ImportDeclaration -> IMPORT ImportClause FromClause SEMICOLON
    Some((Builder::import_from, "import_from")),
    // ImportDeclaration -> IMPORT ModuleSpecifier SEMICOLON
    Some((Builder::side_effect_import, "side_effect_import")),
    // ExportDeclaration -> EXPORT ExportFromClause FromClause SEMICOLON
    Some((Builder::export_from, "export_from")),
    // ExportDeclaration -> EXPORT NamedExports SEMICOLON
    Some((Builder::export_list, "export_list")),
    // ExportDeclaration -> EXPORT VariableStatement_Await
    Some((Builder::export_vars, "export_vars")),
    // ExportDeclaration -> EXPORT Declaration_Await
    Some((Builder::export_decl, "export_decl")),
    // ExportDeclaration -> EXPORT DEFAULT HoistableDeclaration_Await_Default
    Some((Builder::default_export_decl, "default_export_decl")),
    // ExportDeclaration -> EXPORT DEFAULT ClassDeclaration_Await_Default
    Some((Builder::default_export_class, "default_export_class")),
    // ExportDeclaration -> EXPORT DEFAULT (?![ASYNC (!LINE_TERMINATOR_SEQUENCE) FUNCTION, CLASS, FUNCTION]) AssignmentExpression_In_Await SEMICOLON
    Some((Builder::default_export_expr, "default_export_expr")),
    // StatementListItem_Await -> Statement_Await
    Some((Builder::nop, "nop")),
    // StatementListItem_Await -> Declaration_Await
    Some((Builder::nop, "nop")),
    // BlockStatement -> Block
    Some((Builder::nop, "nop")),
    // VariableStatement -> VAR VariableDeclarationList_In SEMICOLON
    Some((Builder::variable_declaration, "variable_declaration")),
    // EmptyStatement -> SEMICOLON
    Some((Builder::empty_statement, "empty_statement")),
    // ExpressionStatement -> (?![ASYNC (!LINE_TERMINATOR_SEQUENCE) FUNCTION, CLASS, FUNCTION, LBRACE, LET LBRACK]) Expression_In SEMICOLON
    Some((Builder::expression_statement, "expression_statement")),
    // IfStatement -> IF LPAREN Expression_In RPAREN _THEN_BLOCK_ Statement ELSE _ELSE_BLOCK_ Statement
    Some((Builder::if_else_statement, "if_else_statement")),
    // IfStatement -> IF LPAREN Expression_In RPAREN _THEN_BLOCK_ Statement (?![ELSE])
    Some((Builder::if_statement, "if_statement")),
    // BreakableStatement -> IterationStatement
    Some((Builder::nop, "nop")),
    // BreakableStatement -> SwitchStatement
    Some((Builder::nop, "nop")),
    // ContinueStatement -> CONTINUE SEMICOLON
    Some((Builder::continue_statement, "continue_statement")),
    // ContinueStatement -> CONTINUE (!LINE_TERMINATOR_SEQUENCE) LabelIdentifier SEMICOLON
    Some((
        Builder::labeled_continue_statement,
        "labeled_continue_statement",
    )),
    // BreakStatement -> BREAK SEMICOLON
    Some((Builder::break_statement, "break_statement")),
    // BreakStatement -> BREAK (!LINE_TERMINATOR_SEQUENCE) LabelIdentifier SEMICOLON
    Some((Builder::labeled_break_statement, "labeled_break_statement")),
    // WithStatement -> WITH LPAREN Expression_In RPAREN Statement
    Some((Builder::with_statement, "with_statement")),
    // LabelledStatement -> LabelIdentifier COLON LabelledItem
    Some((Builder::labeled_statement, "labeled_statement")),
    // ThrowStatement -> THROW (!LINE_TERMINATOR_SEQUENCE) Expression_In SEMICOLON
    Some((Builder::throw_statement, "throw_statement")),
    // TryStatement -> TRY Block Catch
    Some((Builder::try_catch_statement, "try_catch_statement")),
    // TryStatement -> TRY Block Finally
    Some((Builder::try_finally_statement, "try_finally_statement")),
    // TryStatement -> TRY Block Catch Finally
    Some((
        Builder::try_catch_finally_statement,
        "try_catch_finally_statement",
    )),
    // DebuggerStatement -> DEBUGGER SEMICOLON
    Some((Builder::debugger_statement, "debugger_statement")),
    // HoistableDeclaration -> FunctionDeclaration
    Some((Builder::nop, "nop")),
    // HoistableDeclaration -> GeneratorDeclaration
    Some((Builder::nop, "nop")),
    // HoistableDeclaration -> AsyncFunctionDeclaration
    Some((Builder::nop, "nop")),
    // HoistableDeclaration -> AsyncGeneratorDeclaration
    Some((Builder::nop, "nop")),
    // ClassDeclaration -> CLASS BindingIdentifier ClassTail
    Some((Builder::class_declaration, "class_declaration")),
    // LexicalDeclaration_In -> LET BindingList_In SEMICOLON
    Some((Builder::variable_declaration, "variable_declaration")),
    // LexicalDeclaration_In -> CONST BindingList_In SEMICOLON
    Some((Builder::variable_declaration, "variable_declaration")),
    // ImportClause -> ImportedDefaultBinding
    Some((Builder::create_list, "create_list")),
    // ImportClause -> NameSpaceImport
    Some((Builder::create_list, "create_list")),
    // ImportClause -> NamedImports
    Some((Builder::nop, "nop")),
    // ImportClause -> ImportedDefaultBinding COMMA NameSpaceImport
    Some((Builder::csv_list, "csv_list")),
    // ImportClause -> ImportedDefaultBinding COMMA NamedImports
    Some((Builder::prepend_to_csv_list, "prepend_to_csv_list")),
    // FromClause -> FROM ModuleSpecifier
    Some((Builder::process_from_clause, "process_from_clause")),
    // ModuleSpecifier -> STRING_LITERAL
    Some((Builder::string_literal, "string_literal")),
    // ExportFromClause -> MUL
    Some((Builder::nop, "nop")),
    // ExportFromClause -> MUL AS ModuleExportName
    Some((Builder::export_all_as, "export_all_as")),
    // ExportFromClause -> NamedExports
    Some((Builder::nop, "nop")),
    // NamedExports -> LBRACE RBRACE
    Some((Builder::empty_list_block, "empty_list_block")),
    // NamedExports -> LBRACE ExportsList RBRACE
    Some((Builder::list_block, "list_block")),
    // NamedExports -> LBRACE ExportsList COMMA RBRACE
    Some((
        Builder::list_block_ended_with_comma,
        "list_block_ended_with_comma",
    )),
    // VariableStatement_Await -> VAR VariableDeclarationList_In_Await SEMICOLON
    Some((Builder::variable_declaration, "variable_declaration")),
    // Declaration_Await -> HoistableDeclaration_Await
    Some((Builder::nop, "nop")),
    // Declaration_Await -> ClassDeclaration_Await
    Some((Builder::nop, "nop")),
    // Declaration_Await -> LexicalDeclaration_In_Await
    Some((Builder::nop, "nop")),
    // HoistableDeclaration_Await_Default -> FunctionDeclaration_Await_Default
    Some((Builder::nop, "nop")),
    // HoistableDeclaration_Await_Default -> GeneratorDeclaration_Await_Default
    Some((Builder::nop, "nop")),
    // HoistableDeclaration_Await_Default -> AsyncFunctionDeclaration_Await_Default
    Some((Builder::nop, "nop")),
    // HoistableDeclaration_Await_Default -> AsyncGeneratorDeclaration_Await_Default
    Some((Builder::nop, "nop")),
    // ClassDeclaration_Await_Default -> CLASS BindingIdentifier_Await ClassTail_Await
    Some((Builder::class_declaration, "class_declaration")),
    // ClassDeclaration_Await_Default -> CLASS ClassTail_Await
    Some((
        Builder::anonymous_class_declaration,
        "anonymous_class_declaration",
    )),
    // AssignmentExpression_In_Await -> ConditionalExpression_In_Await
    Some((Builder::nop, "nop")),
    // AssignmentExpression_In_Await -> ArrowFunction_In_Await
    Some((Builder::nop, "nop")),
    // AssignmentExpression_In_Await -> AsyncArrowFunction_In_Await
    Some((Builder::nop, "nop")),
    // AssignmentExpression_In_Await -> LeftHandSideExpression_Await ASSIGN AssignmentExpression_In_Await
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression_In_Await -> LeftHandSideExpression_Await AssignmentOperator AssignmentExpression_In_Await
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression_In_Await -> LeftHandSideExpression_Await AND_ASSIGN _FALSY_SHORT_CIRCUIT_ASSIGNMENT_ AssignmentExpression_In_Await
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression_In_Await -> LeftHandSideExpression_Await OR_ASSIGN _TRUTHY_SHORT_CIRCUIT_ASSIGNMENT_ AssignmentExpression_In_Await
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression_In_Await -> LeftHandSideExpression_Await NULLISH_ASSIGN _NULLISH_SHORT_CIRCUIT_ASSIGNMENT_ AssignmentExpression_In_Await
    Some((Builder::assignment_expression, "assignment_expression")),
    // Statement_Await -> BlockStatement_Await
    Some((Builder::nop, "nop")),
    // Statement_Await -> VariableStatement_Await
    Some((Builder::nop, "nop")),
    // Statement_Await -> EmptyStatement
    Some((Builder::nop, "nop")),
    // Statement_Await -> ExpressionStatement_Await
    Some((Builder::nop, "nop")),
    // Statement_Await -> IfStatement_Await
    Some((Builder::nop, "nop")),
    // Statement_Await -> BreakableStatement_Await
    Some((Builder::nop, "nop")),
    // Statement_Await -> ContinueStatement_Await
    Some((Builder::nop, "nop")),
    // Statement_Await -> BreakStatement_Await
    Some((Builder::nop, "nop")),
    // Statement_Await -> WithStatement_Await
    Some((Builder::nop, "nop")),
    // Statement_Await -> LabelledStatement_Await
    Some((Builder::nop, "nop")),
    // Statement_Await -> ThrowStatement_Await
    Some((Builder::nop, "nop")),
    // Statement_Await -> TryStatement_Await
    Some((Builder::nop, "nop")),
    // Statement_Await -> DebuggerStatement
    Some((Builder::nop, "nop")),
    // Block -> LBRACE RBRACE
    Some((Builder::block_statement_empty, "block_statement_empty")),
    // Block -> LBRACE _BLOCK_SCOPE_ StatementList RBRACE
    Some((Builder::block_statement, "block_statement")),
    // VariableDeclarationList_In -> VariableDeclaration_In
    Some((Builder::create_list, "create_list")),
    // VariableDeclarationList_In -> VariableDeclarationList_In COMMA VariableDeclaration_In
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // Expression_In -> AssignmentExpression_In
    Some((Builder::nop, "nop")),
    // Expression_In -> Expression_In COMMA AssignmentExpression_In
    Some((Builder::sequence_expression, "sequence_expression")),
    // _THEN_BLOCK_ -> (empty)
    Some((Builder::nop, "nop")),
    // _ELSE_BLOCK_ -> (empty)
    Some((Builder::nop, "nop")),
    // IterationStatement -> DoWhileStatement
    Some((Builder::nop, "nop")),
    // IterationStatement -> WhileStatement
    Some((Builder::nop, "nop")),
    // IterationStatement -> ForStatement
    Some((Builder::nop, "nop")),
    // IterationStatement -> ForInOfStatement
    Some((Builder::nop, "nop")),
    // SwitchStatement -> SWITCH LPAREN Expression_In RPAREN CaseBlock
    Some((Builder::switch_statement, "switch_statement")),
    // LabelIdentifier -> Identifier
    Some((Builder::nop, "nop")),
    // LabelIdentifier -> YIELD
    Some((Builder::identifier, "identifier")),
    // LabelIdentifier -> AWAIT
    Some((Builder::identifier, "identifier")),
    // LabelledItem -> Statement
    Some((Builder::nop, "nop")),
    // LabelledItem -> FunctionDeclaration
    Some((Builder::nop, "nop")),
    // Catch -> CATCH LPAREN CatchParameter RPAREN Block
    Some((Builder::catch_clause, "catch_clause")),
    // Catch -> CATCH Block
    Some((Builder::catch_clause_no_param, "catch_clause_no_param")),
    // Finally -> FINALLY Block
    Some((Builder::finally_clause, "finally_clause")),
    // FunctionDeclaration -> FUNCTION BindingIdentifier _FUNCTION_CONTEXT_ LPAREN FormalParameters RPAREN _FUNCTION_SIGNATURE_ LBRACE FunctionBody RBRACE
    Some((Builder::function_declaration, "function_declaration")),
    // GeneratorDeclaration -> FUNCTION MUL BindingIdentifier LPAREN FormalParameters_Yield RPAREN LBRACE GeneratorBody RBRACE
    Some((Builder::generator_declaration, "generator_declaration")),
    // AsyncFunctionDeclaration -> ASYNC (!LINE_TERMINATOR_SEQUENCE) FUNCTION BindingIdentifier LPAREN FormalParameters_Await RPAREN LBRACE AsyncFunctionBody RBRACE
    Some((
        Builder::async_function_declaration,
        "async_function_declaration",
    )),
    // AsyncGeneratorDeclaration -> ASYNC (!LINE_TERMINATOR_SEQUENCE) FUNCTION MUL BindingIdentifier LPAREN FormalParameters_Yield_Await RPAREN LBRACE AsyncGeneratorBody RBRACE
    Some((
        Builder::async_generator_declaration,
        "async_generator_declaration",
    )),
    // BindingIdentifier -> Identifier
    Some((Builder::nop, "nop")),
    // BindingIdentifier -> YIELD
    Some((Builder::identifier, "identifier")),
    // BindingIdentifier -> AWAIT
    Some((Builder::identifier, "identifier")),
    // ClassTail -> LBRACE RBRACE
    Some((Builder::empty_class_tail, "empty_class_tail")),
    // ClassTail -> ClassHeritage LBRACE RBRACE
    Some((Builder::class_tail_no_body, "class_tail_no_body")),
    // ClassTail -> LBRACE ClassBody RBRACE
    Some((
        Builder::class_tail_no_super_class,
        "class_tail_no_super_class",
    )),
    // ClassTail -> ClassHeritage LBRACE ClassBody RBRACE
    Some((Builder::class_tail, "class_tail")),
    // BindingList_In -> LexicalBinding_In
    Some((Builder::create_list, "create_list")),
    // BindingList_In -> BindingList_In COMMA LexicalBinding_In
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // ImportedDefaultBinding -> ImportedBinding
    Some((
        Builder::import_default_specifier,
        "import_default_specifier",
    )),
    // NameSpaceImport -> MUL AS ImportedBinding
    Some((
        Builder::import_namespace_specifier,
        "import_namespace_specifier",
    )),
    // NamedImports -> LBRACE RBRACE
    Some((Builder::empty_list_block, "empty_list_block")),
    // NamedImports -> LBRACE ImportsList RBRACE
    Some((Builder::list_block, "list_block")),
    // NamedImports -> LBRACE ImportsList COMMA RBRACE
    Some((
        Builder::list_block_ended_with_comma,
        "list_block_ended_with_comma",
    )),
    // ModuleExportName -> KeywordOrIdentifierName
    Some((Builder::nop, "nop")),
    // ModuleExportName -> STRING_LITERAL
    Some((Builder::string_literal, "string_literal")),
    // ExportsList -> ExportSpecifier
    Some((Builder::create_list, "create_list")),
    // ExportsList -> ExportsList COMMA ExportSpecifier
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // VariableDeclarationList_In_Await -> VariableDeclaration_In_Await
    Some((Builder::create_list, "create_list")),
    // VariableDeclarationList_In_Await -> VariableDeclarationList_In_Await COMMA VariableDeclaration_In_Await
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // HoistableDeclaration_Await -> FunctionDeclaration_Await
    Some((Builder::nop, "nop")),
    // HoistableDeclaration_Await -> GeneratorDeclaration_Await
    Some((Builder::nop, "nop")),
    // HoistableDeclaration_Await -> AsyncFunctionDeclaration_Await
    Some((Builder::nop, "nop")),
    // HoistableDeclaration_Await -> AsyncGeneratorDeclaration_Await
    Some((Builder::nop, "nop")),
    // ClassDeclaration_Await -> CLASS BindingIdentifier_Await ClassTail_Await
    Some((Builder::class_declaration, "class_declaration")),
    // LexicalDeclaration_In_Await -> LET BindingList_In_Await SEMICOLON
    Some((Builder::variable_declaration, "variable_declaration")),
    // LexicalDeclaration_In_Await -> CONST BindingList_In_Await SEMICOLON
    Some((Builder::variable_declaration, "variable_declaration")),
    // FunctionDeclaration_Await_Default -> FUNCTION BindingIdentifier_Await _FUNCTION_CONTEXT_ LPAREN FormalParameters RPAREN _FUNCTION_SIGNATURE_ LBRACE FunctionBody RBRACE
    Some((Builder::function_declaration, "function_declaration")),
    // FunctionDeclaration_Await_Default -> FUNCTION _FUNCTION_CONTEXT_ LPAREN FormalParameters RPAREN _FUNCTION_SIGNATURE_ LBRACE FunctionBody RBRACE
    Some((
        Builder::anonymous_function_declaration,
        "anonymous_function_declaration",
    )),
    // GeneratorDeclaration_Await_Default -> FUNCTION MUL BindingIdentifier_Await LPAREN FormalParameters_Yield RPAREN LBRACE GeneratorBody RBRACE
    Some((Builder::generator_declaration, "generator_declaration")),
    // GeneratorDeclaration_Await_Default -> FUNCTION MUL LPAREN FormalParameters_Yield RPAREN LBRACE GeneratorBody RBRACE
    Some((
        Builder::anonymous_generator_declaration,
        "anonymous_generator_declaration",
    )),
    // AsyncFunctionDeclaration_Await_Default -> ASYNC (!LINE_TERMINATOR_SEQUENCE) FUNCTION BindingIdentifier_Await LPAREN FormalParameters_Await RPAREN LBRACE AsyncFunctionBody RBRACE
    Some((
        Builder::async_function_declaration,
        "async_function_declaration",
    )),
    // AsyncFunctionDeclaration_Await_Default -> ASYNC (!LINE_TERMINATOR_SEQUENCE) FUNCTION LPAREN FormalParameters_Await RPAREN LBRACE AsyncFunctionBody RBRACE
    Some((
        Builder::anonymous_async_function_declaration,
        "anonymous_async_function_declaration",
    )),
    // AsyncGeneratorDeclaration_Await_Default -> ASYNC (!LINE_TERMINATOR_SEQUENCE) FUNCTION MUL BindingIdentifier_Await LPAREN FormalParameters_Yield_Await RPAREN LBRACE AsyncGeneratorBody RBRACE
    Some((
        Builder::async_generator_declaration,
        "async_generator_declaration",
    )),
    // AsyncGeneratorDeclaration_Await_Default -> ASYNC (!LINE_TERMINATOR_SEQUENCE) FUNCTION MUL LPAREN FormalParameters_Yield_Await RPAREN LBRACE AsyncGeneratorBody RBRACE
    Some((
        Builder::anonymous_async_generator_declaration,
        "anonymous_async_generator_declaration",
    )),
    // BindingIdentifier_Await -> Identifier
    Some((Builder::nop, "nop")),
    // BindingIdentifier_Await -> YIELD
    Some((Builder::identifier, "identifier")),
    // BindingIdentifier_Await -> AWAIT
    Some((Builder::identifier, "identifier")),
    // ClassTail_Await -> LBRACE RBRACE
    Some((Builder::empty_class_tail, "empty_class_tail")),
    // ClassTail_Await -> ClassHeritage_Await LBRACE RBRACE
    Some((Builder::class_tail_no_body, "class_tail_no_body")),
    // ClassTail_Await -> LBRACE ClassBody_Await RBRACE
    Some((
        Builder::class_tail_no_super_class,
        "class_tail_no_super_class",
    )),
    // ClassTail_Await -> ClassHeritage_Await LBRACE ClassBody_Await RBRACE
    Some((Builder::class_tail, "class_tail")),
    // ConditionalExpression_In_Await -> ShortCircuitExpression_In_Await
    Some((Builder::nop, "nop")),
    // ConditionalExpression_In_Await -> ShortCircuitExpression_In_Await CONDITIONAL _THEN_BLOCK_ AssignmentExpression_In_Await COLON _ELSE_BLOCK_ AssignmentExpression_In_Await
    Some((Builder::conditional_expression, "conditional_expression")),
    // ArrowFunction_In_Await -> ArrowParameters_Await (!LINE_TERMINATOR_SEQUENCE) ARROW ConciseBody_In
    Some((
        Builder::arrow_function_expression,
        "arrow_function_expression",
    )),
    // AsyncArrowFunction_In_Await -> ASYNC (!LINE_TERMINATOR_SEQUENCE) AsyncArrowBindingIdentifier (!LINE_TERMINATOR_SEQUENCE) ARROW AsyncConciseBody_In
    Some((
        Builder::async_arrow_function_expression_single_param,
        "async_arrow_function_expression_single_param",
    )),
    // AsyncArrowFunction_In_Await -> CoverCallExpressionAndAsyncArrowHead_Await (!LINE_TERMINATOR_SEQUENCE) ARROW AsyncConciseBody_In
    Some((
        Builder::async_arrow_function_expression,
        "async_arrow_function_expression",
    )),
    // LeftHandSideExpression_Await -> NewExpression_Await
    Some((Builder::nop, "nop")),
    // LeftHandSideExpression_Await -> CallExpression_Await
    Some((Builder::nop, "nop")),
    // LeftHandSideExpression_Await -> OptionalExpression_Await
    Some((Builder::nop, "nop")),
    // AssignmentOperator -> MUL_ASSIGN
    Some((Builder::nop, "nop")),
    // AssignmentOperator -> DIV_ASSIGN
    Some((Builder::nop, "nop")),
    // AssignmentOperator -> MOD_ASSIGN
    Some((Builder::nop, "nop")),
    // AssignmentOperator -> ADD_ASSIGN
    Some((Builder::nop, "nop")),
    // AssignmentOperator -> SUB_ASSIGN
    Some((Builder::nop, "nop")),
    // AssignmentOperator -> SHL_ASSIGN
    Some((Builder::nop, "nop")),
    // AssignmentOperator -> SAR_ASSIGN
    Some((Builder::nop, "nop")),
    // AssignmentOperator -> SHR_ASSIGN
    Some((Builder::nop, "nop")),
    // AssignmentOperator -> BIT_AND_ASSIGN
    Some((Builder::nop, "nop")),
    // AssignmentOperator -> BIT_XOR_ASSIGN
    Some((Builder::nop, "nop")),
    // AssignmentOperator -> BIT_OR_ASSIGN
    Some((Builder::nop, "nop")),
    // AssignmentOperator -> EXP_ASSIGN
    Some((Builder::nop, "nop")),
    // _FALSY_SHORT_CIRCUIT_ASSIGNMENT_ -> (empty)
    Some((Builder::nop, "nop")),
    // _TRUTHY_SHORT_CIRCUIT_ASSIGNMENT_ -> (empty)
    Some((Builder::nop, "nop")),
    // _NULLISH_SHORT_CIRCUIT_ASSIGNMENT_ -> (empty)
    Some((Builder::nop, "nop")),
    // BlockStatement_Await -> Block_Await
    Some((Builder::nop, "nop")),
    // ExpressionStatement_Await -> (?![ASYNC (!LINE_TERMINATOR_SEQUENCE) FUNCTION, CLASS, FUNCTION, LBRACE, LET LBRACK]) Expression_In_Await SEMICOLON
    Some((Builder::expression_statement, "expression_statement")),
    // IfStatement_Await -> IF LPAREN Expression_In_Await RPAREN _THEN_BLOCK_ Statement_Await ELSE _ELSE_BLOCK_ Statement_Await
    Some((Builder::if_else_statement, "if_else_statement")),
    // IfStatement_Await -> IF LPAREN Expression_In_Await RPAREN _THEN_BLOCK_ Statement_Await (?![ELSE])
    Some((Builder::if_statement, "if_statement")),
    // BreakableStatement_Await -> IterationStatement_Await
    Some((Builder::nop, "nop")),
    // BreakableStatement_Await -> SwitchStatement_Await
    Some((Builder::nop, "nop")),
    // ContinueStatement_Await -> CONTINUE SEMICOLON
    Some((Builder::continue_statement, "continue_statement")),
    // ContinueStatement_Await -> CONTINUE (!LINE_TERMINATOR_SEQUENCE) LabelIdentifier_Await SEMICOLON
    Some((
        Builder::labeled_continue_statement,
        "labeled_continue_statement",
    )),
    // BreakStatement_Await -> BREAK SEMICOLON
    Some((Builder::break_statement, "break_statement")),
    // BreakStatement_Await -> BREAK (!LINE_TERMINATOR_SEQUENCE) LabelIdentifier_Await SEMICOLON
    Some((Builder::labeled_break_statement, "labeled_break_statement")),
    // WithStatement_Await -> WITH LPAREN Expression_In_Await RPAREN Statement_Await
    Some((Builder::with_statement, "with_statement")),
    // LabelledStatement_Await -> LabelIdentifier_Await COLON LabelledItem_Await
    Some((Builder::labeled_statement, "labeled_statement")),
    // ThrowStatement_Await -> THROW (!LINE_TERMINATOR_SEQUENCE) Expression_In_Await SEMICOLON
    Some((Builder::throw_statement, "throw_statement")),
    // TryStatement_Await -> TRY Block_Await Catch_Await
    Some((Builder::try_catch_statement, "try_catch_statement")),
    // TryStatement_Await -> TRY Block_Await Finally_Await
    Some((Builder::try_finally_statement, "try_finally_statement")),
    // TryStatement_Await -> TRY Block_Await Catch_Await Finally_Await
    Some((
        Builder::try_catch_finally_statement,
        "try_catch_finally_statement",
    )),
    // _BLOCK_SCOPE_ -> (empty)
    Some((Builder::nop, "nop")),
    // VariableDeclaration_In -> BindingIdentifier
    Some((Builder::variable_declarator, "variable_declarator")),
    // VariableDeclaration_In -> BindingIdentifier Initializer_In
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // VariableDeclaration_In -> BindingPattern Initializer_In
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // AssignmentExpression_In -> ConditionalExpression_In
    Some((Builder::nop, "nop")),
    // AssignmentExpression_In -> ArrowFunction_In
    Some((Builder::nop, "nop")),
    // AssignmentExpression_In -> AsyncArrowFunction_In
    Some((Builder::nop, "nop")),
    // AssignmentExpression_In -> LeftHandSideExpression ASSIGN AssignmentExpression_In
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression_In -> LeftHandSideExpression AssignmentOperator AssignmentExpression_In
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression_In -> LeftHandSideExpression AND_ASSIGN _FALSY_SHORT_CIRCUIT_ASSIGNMENT_ AssignmentExpression_In
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression_In -> LeftHandSideExpression OR_ASSIGN _TRUTHY_SHORT_CIRCUIT_ASSIGNMENT_ AssignmentExpression_In
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression_In -> LeftHandSideExpression NULLISH_ASSIGN _NULLISH_SHORT_CIRCUIT_ASSIGNMENT_ AssignmentExpression_In
    Some((Builder::assignment_expression, "assignment_expression")),
    // DoWhileStatement -> DO _LOOP_START_ Statement _LOOP_BODY_ WHILE LPAREN Expression_In RPAREN SEMICOLON
    Some((Builder::do_while_statement, "do_while_statement")),
    // WhileStatement -> WHILE _LOOP_START_ LPAREN Expression_In RPAREN _LOOP_TEST_ Statement
    Some((Builder::while_statement, "while_statement")),
    // ForStatement -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) SEMICOLON SEMICOLON RPAREN Statement
    Some((
        Builder::for_statement_no_init_test_update,
        "for_statement_no_init_test_update",
    )),
    // ForStatement -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) Expression SEMICOLON _LOOP_INIT_EXPRESSION_ SEMICOLON RPAREN Statement
    Some((
        Builder::for_statement_no_test_update,
        "for_statement_no_test_update",
    )),
    // ForStatement -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) SEMICOLON Expression_In SEMICOLON _LOOP_TEST_ RPAREN Statement
    Some((
        Builder::for_statement_no_init_update,
        "for_statement_no_init_update",
    )),
    // ForStatement -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) Expression SEMICOLON _LOOP_INIT_EXPRESSION_ Expression_In SEMICOLON _LOOP_TEST_ RPAREN Statement
    Some((Builder::for_statement_no_update, "for_statement_no_update")),
    // ForStatement -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) SEMICOLON SEMICOLON Expression_In RPAREN _LOOP_NEXT_ Statement
    Some((
        Builder::for_statement_no_init_test,
        "for_statement_no_init_test",
    )),
    // ForStatement -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) Expression SEMICOLON _LOOP_INIT_EXPRESSION_ SEMICOLON Expression_In RPAREN _LOOP_NEXT_ Statement
    Some((Builder::for_statement_no_test, "for_statement_no_test")),
    // ForStatement -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) SEMICOLON Expression_In SEMICOLON _LOOP_TEST_ Expression_In RPAREN _LOOP_NEXT_ Statement
    Some((Builder::for_statement_no_init, "for_statement_no_init")),
    // ForStatement -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) Expression SEMICOLON _LOOP_INIT_EXPRESSION_ Expression_In SEMICOLON _LOOP_TEST_ Expression_In RPAREN _LOOP_NEXT_ Statement
    Some((Builder::for_statement, "for_statement")),
    // ForStatement -> FOR _LOOP_START_ LPAREN VAR VariableDeclarationList SEMICOLON _LOOP_INIT_VAR_DECLARATION_ SEMICOLON RPAREN Statement
    Some((
        Builder::for_statement_vars_no_test_update,
        "for_statement_vars_no_test_update",
    )),
    // ForStatement -> FOR _LOOP_START_ LPAREN VAR VariableDeclarationList SEMICOLON _LOOP_INIT_VAR_DECLARATION_ Expression_In SEMICOLON _LOOP_TEST_ RPAREN Statement
    Some((
        Builder::for_statement_vars_no_update,
        "for_statement_vars_no_update",
    )),
    // ForStatement -> FOR _LOOP_START_ LPAREN VAR VariableDeclarationList SEMICOLON _LOOP_INIT_VAR_DECLARATION_ SEMICOLON Expression_In RPAREN _LOOP_NEXT_ Statement
    Some((
        Builder::for_statement_vars_no_test,
        "for_statement_vars_no_test",
    )),
    // ForStatement -> FOR _LOOP_START_ LPAREN VAR VariableDeclarationList SEMICOLON _LOOP_INIT_VAR_DECLARATION_ Expression_In SEMICOLON _LOOP_TEST_ Expression_In RPAREN _LOOP_NEXT_ Statement
    Some((Builder::for_statement_vars, "for_statement_vars")),
    // ForStatement -> FOR _LOOP_START_ LPAREN LexicalDeclaration _LOOP_INIT_LEXICAL_DECLARATION_ SEMICOLON RPAREN Statement
    Some((
        Builder::for_statement_decl_no_test_update,
        "for_statement_decl_no_test_update",
    )),
    // ForStatement -> FOR _LOOP_START_ LPAREN LexicalDeclaration _LOOP_INIT_LEXICAL_DECLARATION_ Expression_In SEMICOLON _LOOP_TEST_ RPAREN Statement
    Some((
        Builder::for_statement_decl_no_update,
        "for_statement_decl_no_update",
    )),
    // ForStatement -> FOR _LOOP_START_ LPAREN LexicalDeclaration _LOOP_INIT_LEXICAL_DECLARATION_ SEMICOLON Expression_In RPAREN _LOOP_NEXT_ Statement
    Some((
        Builder::for_statement_decl_no_test,
        "for_statement_decl_no_test",
    )),
    // ForStatement -> FOR _LOOP_START_ LPAREN LexicalDeclaration _LOOP_INIT_LEXICAL_DECLARATION_ Expression_In SEMICOLON _LOOP_TEST_ Expression_In RPAREN _LOOP_NEXT_ Statement
    Some((Builder::for_statement_decl, "for_statement_decl")),
    // ForInOfStatement -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) LeftHandSideExpression IN Expression_In RPAREN Statement
    Some((Builder::for_in_statement, "for_in_statement")),
    // ForInOfStatement -> FOR _LOOP_START_ LPAREN VAR ForBinding IN Expression_In RPAREN Statement
    Some((Builder::for_in_statement_vars, "for_in_statement_vars")),
    // ForInOfStatement -> FOR _LOOP_START_ LPAREN ForDeclaration IN Expression_In RPAREN Statement
    Some((Builder::for_in_statement, "for_in_statement")),
    // ForInOfStatement -> FOR _LOOP_START_ LPAREN (?![ASYNC OF, LET]) LeftHandSideExpression OF AssignmentExpression_In RPAREN Statement
    Some((Builder::for_of_statement, "for_of_statement")),
    // ForInOfStatement -> FOR _LOOP_START_ LPAREN VAR ForBinding OF AssignmentExpression_In RPAREN Statement
    Some((Builder::for_of_statement_vars, "for_of_statement_vars")),
    // ForInOfStatement -> FOR _LOOP_START_ LPAREN ForDeclaration OF AssignmentExpression_In RPAREN Statement
    Some((Builder::for_of_statement, "for_of_statement")),
    // CaseBlock -> LBRACE RBRACE
    Some((Builder::empty_list_block, "empty_list_block")),
    // CaseBlock -> LBRACE CaseClauses RBRACE
    Some((Builder::list_block, "list_block")),
    // CaseBlock -> LBRACE DefaultClause RBRACE
    Some((Builder::case_block_default, "case_block_default")),
    // CaseBlock -> LBRACE CaseClauses DefaultClause RBRACE
    Some((
        Builder::case_block_cases_default,
        "case_block_cases_default",
    )),
    // CaseBlock -> LBRACE DefaultClause CaseClauses RBRACE
    Some((
        Builder::case_block_default_cases,
        "case_block_default_cases",
    )),
    // CaseBlock -> LBRACE CaseClauses DefaultClause CaseClauses RBRACE
    Some((
        Builder::case_block_cases_default_cases,
        "case_block_cases_default_cases",
    )),
    // Identifier -> IdentifierNameButNotReservedWord
    Some((Builder::identifier, "identifier")),
    // CatchParameter -> BindingIdentifier
    Some((Builder::nop, "nop")),
    // CatchParameter -> BindingPattern
    Some((Builder::nop, "nop")),
    // _FUNCTION_CONTEXT_ -> (empty)
    Some((Builder::nop, "nop")),
    // FormalParameters -> (empty)
    Some((Builder::empty_list, "empty_list")),
    // FormalParameters -> FunctionRestParameter
    Some((Builder::create_list, "create_list")),
    // FormalParameters -> FormalParameterList
    Some((Builder::nop, "nop")),
    // FormalParameters -> FormalParameterList COMMA
    Some((Builder::remove_comma, "remove_comma")),
    // FormalParameters -> FormalParameterList COMMA FunctionRestParameter
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // _FUNCTION_SIGNATURE_ -> (empty)
    Some((Builder::nop, "nop")),
    // FunctionBody -> FunctionStatementList
    Some((Builder::nop, "nop")),
    // FormalParameters_Yield -> (empty)
    Some((Builder::empty_list, "empty_list")),
    // FormalParameters_Yield -> FunctionRestParameter_Yield
    Some((Builder::create_list, "create_list")),
    // FormalParameters_Yield -> FormalParameterList_Yield
    Some((Builder::nop, "nop")),
    // FormalParameters_Yield -> FormalParameterList_Yield COMMA
    Some((Builder::remove_comma, "remove_comma")),
    // FormalParameters_Yield -> FormalParameterList_Yield COMMA FunctionRestParameter_Yield
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // GeneratorBody -> FunctionBody_Yield
    Some((Builder::nop, "nop")),
    // FormalParameters_Await -> (empty)
    Some((Builder::empty_list, "empty_list")),
    // FormalParameters_Await -> FunctionRestParameter_Await
    Some((Builder::create_list, "create_list")),
    // FormalParameters_Await -> FormalParameterList_Await
    Some((Builder::nop, "nop")),
    // FormalParameters_Await -> FormalParameterList_Await COMMA
    Some((Builder::remove_comma, "remove_comma")),
    // FormalParameters_Await -> FormalParameterList_Await COMMA FunctionRestParameter_Await
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // AsyncFunctionBody -> FunctionBody_Await
    Some((Builder::nop, "nop")),
    // FormalParameters_Yield_Await -> (empty)
    Some((Builder::empty_list, "empty_list")),
    // FormalParameters_Yield_Await -> FunctionRestParameter_Yield_Await
    Some((Builder::create_list, "create_list")),
    // FormalParameters_Yield_Await -> FormalParameterList_Yield_Await
    Some((Builder::nop, "nop")),
    // FormalParameters_Yield_Await -> FormalParameterList_Yield_Await COMMA
    Some((Builder::remove_comma, "remove_comma")),
    // FormalParameters_Yield_Await -> FormalParameterList_Yield_Await COMMA FunctionRestParameter_Yield_Await
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // AsyncGeneratorBody -> FunctionBody_Yield_Await
    Some((Builder::nop, "nop")),
    // ClassHeritage -> EXTENDS LeftHandSideExpression
    Some((Builder::class_heritage, "class_heritage")),
    // ClassBody -> ClassElementList
    Some((Builder::nop, "nop")),
    // LexicalBinding_In -> BindingIdentifier
    Some((Builder::variable_declarator, "variable_declarator")),
    // LexicalBinding_In -> BindingIdentifier Initializer_In
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // LexicalBinding_In -> BindingPattern Initializer_In
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // ImportedBinding -> BindingIdentifier_Await
    Some((Builder::nop, "nop")),
    // ImportsList -> ImportSpecifier
    Some((Builder::create_list, "create_list")),
    // ImportsList -> ImportsList COMMA ImportSpecifier
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // KeywordOrIdentifierName -> IDENTIFIER_NAME
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> AWAIT
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> BREAK
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> CASE
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> CATCH
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> CLASS
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> CONST
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> CONTINUE
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> DEBUGGER
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> DEFAULT
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> DELETE
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> DO
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> ELSE
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> ENUM
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> EXPORT
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> EXTENDS
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> FALSE
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> FINALLY
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> FOR
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> FUNCTION
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> IF
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> IMPORT
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> IN
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> INSTANCEOF
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> NEW
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> NULL
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> RETURN
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> SUPER
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> SWITCH
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> THIS
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> THROW
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> TRUE
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> TRY
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> TYPEOF
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> VAR
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> VOID
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> WHILE
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> WITH
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> YIELD
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> LET
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> STATIC
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> IMPLEMENTS
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> INTERFACE
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> PACKAGE
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> PRIVATE
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> PROTECTED
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> PUBLIC
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> AS
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> ASYNC
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> FROM
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> GET
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> META
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> OF
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> SET
    Some((Builder::identifier, "identifier")),
    // KeywordOrIdentifierName -> TARGET
    Some((Builder::identifier, "identifier")),
    // ExportSpecifier -> ModuleExportName
    Some((Builder::export_specifier, "export_specifier")),
    // ExportSpecifier -> ModuleExportName AS ModuleExportName
    Some((Builder::export_specifier_as, "export_specifier_as")),
    // VariableDeclaration_In_Await -> BindingIdentifier_Await
    Some((Builder::variable_declarator, "variable_declarator")),
    // VariableDeclaration_In_Await -> BindingIdentifier_Await Initializer_In_Await
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // VariableDeclaration_In_Await -> BindingPattern_Await Initializer_In_Await
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // FunctionDeclaration_Await -> FUNCTION BindingIdentifier_Await _FUNCTION_CONTEXT_ LPAREN FormalParameters RPAREN _FUNCTION_SIGNATURE_ LBRACE FunctionBody RBRACE
    Some((Builder::function_declaration, "function_declaration")),
    // GeneratorDeclaration_Await -> FUNCTION MUL BindingIdentifier_Await LPAREN FormalParameters_Yield RPAREN LBRACE GeneratorBody RBRACE
    Some((Builder::generator_declaration, "generator_declaration")),
    // AsyncFunctionDeclaration_Await -> ASYNC (!LINE_TERMINATOR_SEQUENCE) FUNCTION BindingIdentifier_Await LPAREN FormalParameters_Await RPAREN LBRACE AsyncFunctionBody RBRACE
    Some((
        Builder::async_function_declaration,
        "async_function_declaration",
    )),
    // AsyncGeneratorDeclaration_Await -> ASYNC (!LINE_TERMINATOR_SEQUENCE) FUNCTION MUL BindingIdentifier_Await LPAREN FormalParameters_Yield_Await RPAREN LBRACE AsyncGeneratorBody RBRACE
    Some((
        Builder::async_generator_declaration,
        "async_generator_declaration",
    )),
    // BindingList_In_Await -> LexicalBinding_In_Await
    Some((Builder::create_list, "create_list")),
    // BindingList_In_Await -> BindingList_In_Await COMMA LexicalBinding_In_Await
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // ClassHeritage_Await -> EXTENDS LeftHandSideExpression_Await
    Some((Builder::class_heritage, "class_heritage")),
    // ClassBody_Await -> ClassElementList_Await
    Some((Builder::nop, "nop")),
    // ShortCircuitExpression_In_Await -> LogicalORExpression_In_Await
    Some((Builder::nop, "nop")),
    // ShortCircuitExpression_In_Await -> CoalesceExpression_In_Await
    Some((Builder::nop, "nop")),
    // ArrowParameters_Await -> BindingIdentifier_Await
    Some((Builder::create_list, "create_list")),
    // ArrowParameters_Await -> CoverParenthesizedExpressionAndArrowParameterList_Await
    Some((Builder::arrow_parameters, "arrow_parameters")),
    // ConciseBody_In -> (?![LBRACE]) ExpressionBody_In
    Some((Builder::convert_to_expression, "convert_to_expression")),
    // ConciseBody_In -> LBRACE FunctionBody RBRACE
    Some((Builder::function_body_block, "function_body_block")),
    // AsyncArrowBindingIdentifier -> BindingIdentifier_Await
    Some((Builder::nop, "nop")),
    // AsyncConciseBody_In -> (?![LBRACE]) ExpressionBody_In_Await
    Some((Builder::convert_to_expression, "convert_to_expression")),
    // AsyncConciseBody_In -> LBRACE AsyncFunctionBody RBRACE
    Some((Builder::function_body_block, "function_body_block")),
    // CoverCallExpressionAndAsyncArrowHead_Await -> MemberExpression_Await Arguments_Await
    Some((Builder::nop, "nop")),
    // NewExpression_Await -> MemberExpression_Await
    Some((Builder::nop, "nop")),
    // NewExpression_Await -> NEW NewExpression_Await
    Some((Builder::new_expression, "new_expression")),
    // CallExpression_Await -> CoverCallExpressionAndAsyncArrowHead_Await
    Some((Builder::call_expression, "call_expression")),
    // CallExpression_Await -> SuperCall_Await
    Some((Builder::nop, "nop")),
    // CallExpression_Await -> ImportCall_Await
    Some((Builder::nop, "nop")),
    // CallExpression_Await -> CallExpression_Await Arguments_Await
    Some((Builder::call_expression, "call_expression")),
    // CallExpression_Await -> CallExpression_Await LBRACK Expression_In_Await RBRACK
    Some((Builder::member_expression_call, "member_expression_call")),
    // CallExpression_Await -> CallExpression_Await DOT KeywordOrIdentifierName
    Some((Builder::member_expression, "member_expression")),
    // CallExpression_Await -> CallExpression_Await TemplateLiteral_Await_Tagged
    Some((
        Builder::tagged_template_expression,
        "tagged_template_expression",
    )),
    // CallExpression_Await -> CallExpression_Await DOT PRIVATE_IDENTIFIER
    Some((
        Builder::member_expression_private,
        "member_expression_private",
    )),
    // OptionalExpression_Await -> MemberExpression_Await OptionalChain_Await
    Some((Builder::optional_expression, "optional_expression")),
    // OptionalExpression_Await -> CallExpression_Await OptionalChain_Await
    Some((Builder::optional_expression, "optional_expression")),
    // OptionalExpression_Await -> OptionalExpression_Await OptionalChain_Await
    Some((Builder::optional_expression, "optional_expression")),
    // Block_Await -> LBRACE RBRACE
    Some((Builder::block_statement_empty, "block_statement_empty")),
    // Block_Await -> LBRACE _BLOCK_SCOPE_ StatementList_Await RBRACE
    Some((Builder::block_statement, "block_statement")),
    // Expression_In_Await -> AssignmentExpression_In_Await
    Some((Builder::nop, "nop")),
    // Expression_In_Await -> Expression_In_Await COMMA AssignmentExpression_In_Await
    Some((Builder::sequence_expression, "sequence_expression")),
    // IterationStatement_Await -> DoWhileStatement_Await
    Some((Builder::nop, "nop")),
    // IterationStatement_Await -> WhileStatement_Await
    Some((Builder::nop, "nop")),
    // IterationStatement_Await -> ForStatement_Await
    Some((Builder::nop, "nop")),
    // IterationStatement_Await -> ForInOfStatement_Await
    Some((Builder::nop, "nop")),
    // SwitchStatement_Await -> SWITCH LPAREN Expression_In_Await RPAREN CaseBlock_Await
    Some((Builder::switch_statement, "switch_statement")),
    // LabelIdentifier_Await -> Identifier
    Some((Builder::nop, "nop")),
    // LabelIdentifier_Await -> YIELD
    Some((Builder::identifier, "identifier")),
    // LabelledItem_Await -> Statement_Await
    Some((Builder::nop, "nop")),
    // LabelledItem_Await -> FunctionDeclaration_Await
    Some((Builder::nop, "nop")),
    // Catch_Await -> CATCH LPAREN CatchParameter_Await RPAREN Block_Await
    Some((Builder::catch_clause, "catch_clause")),
    // Catch_Await -> CATCH Block_Await
    Some((Builder::catch_clause_no_param, "catch_clause_no_param")),
    // Finally_Await -> FINALLY Block_Await
    Some((Builder::finally_clause, "finally_clause")),
    // Initializer_In -> ASSIGN AssignmentExpression_In
    Some((Builder::initializer, "initializer")),
    // BindingPattern -> ObjectBindingPattern
    Some((Builder::nop, "nop")),
    // BindingPattern -> ArrayBindingPattern
    Some((Builder::nop, "nop")),
    // ConditionalExpression_In -> ShortCircuitExpression_In
    Some((Builder::nop, "nop")),
    // ConditionalExpression_In -> ShortCircuitExpression_In CONDITIONAL _THEN_BLOCK_ AssignmentExpression_In COLON _ELSE_BLOCK_ AssignmentExpression_In
    Some((Builder::conditional_expression, "conditional_expression")),
    // ArrowFunction_In -> ArrowParameters (!LINE_TERMINATOR_SEQUENCE) ARROW ConciseBody_In
    Some((
        Builder::arrow_function_expression,
        "arrow_function_expression",
    )),
    // AsyncArrowFunction_In -> ASYNC (!LINE_TERMINATOR_SEQUENCE) AsyncArrowBindingIdentifier (!LINE_TERMINATOR_SEQUENCE) ARROW AsyncConciseBody_In
    Some((
        Builder::async_arrow_function_expression_single_param,
        "async_arrow_function_expression_single_param",
    )),
    // AsyncArrowFunction_In -> CoverCallExpressionAndAsyncArrowHead (!LINE_TERMINATOR_SEQUENCE) ARROW AsyncConciseBody_In
    Some((
        Builder::async_arrow_function_expression,
        "async_arrow_function_expression",
    )),
    // LeftHandSideExpression -> NewExpression
    Some((Builder::nop, "nop")),
    // LeftHandSideExpression -> CallExpression
    Some((Builder::nop, "nop")),
    // LeftHandSideExpression -> OptionalExpression
    Some((Builder::nop, "nop")),
    // _LOOP_START_ -> (empty)
    Some((Builder::nop, "nop")),
    // _LOOP_BODY_ -> (empty)
    Some((Builder::nop, "nop")),
    // _LOOP_TEST_ -> (empty)
    Some((Builder::nop, "nop")),
    // Expression -> AssignmentExpression
    Some((Builder::nop, "nop")),
    // Expression -> Expression COMMA AssignmentExpression
    Some((Builder::sequence_expression, "sequence_expression")),
    // _LOOP_INIT_EXPRESSION_ -> (empty)
    Some((Builder::nop, "nop")),
    // _LOOP_NEXT_ -> (empty)
    Some((Builder::nop, "nop")),
    // VariableDeclarationList -> VariableDeclaration
    Some((Builder::create_list, "create_list")),
    // VariableDeclarationList -> VariableDeclarationList COMMA VariableDeclaration
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // _LOOP_INIT_VAR_DECLARATION_ -> (empty)
    Some((Builder::nop, "nop")),
    // LexicalDeclaration -> LET BindingList SEMICOLON
    Some((Builder::variable_declaration, "variable_declaration")),
    // LexicalDeclaration -> CONST BindingList SEMICOLON
    Some((Builder::variable_declaration, "variable_declaration")),
    // _LOOP_INIT_LEXICAL_DECLARATION_ -> (empty)
    Some((Builder::nop, "nop")),
    // ForBinding -> BindingIdentifier
    Some((Builder::for_binding, "for_binding")),
    // ForBinding -> BindingPattern
    Some((Builder::for_binding, "for_binding")),
    // ForDeclaration -> LET ForBinding
    Some((Builder::for_declaration, "for_declaration")),
    // ForDeclaration -> CONST ForBinding
    Some((Builder::for_declaration, "for_declaration")),
    // CaseClauses -> CaseClause
    Some((Builder::create_list, "create_list")),
    // CaseClauses -> CaseClauses CaseClause
    Some((Builder::append_to_list, "append_to_list")),
    // DefaultClause -> DEFAULT COLON
    Some((
        Builder::switch_case_default_no_consequent,
        "switch_case_default_no_consequent",
    )),
    // DefaultClause -> DEFAULT COLON StatementList
    Some((Builder::switch_case_default, "switch_case_default")),
    // IdentifierNameButNotReservedWord -> IDENTIFIER_NAME
    Some((Builder::nop, "nop")),
    // IdentifierNameButNotReservedWord -> LET
    Some((Builder::nop, "nop")),
    // IdentifierNameButNotReservedWord -> STATIC
    Some((Builder::nop, "nop")),
    // IdentifierNameButNotReservedWord -> IMPLEMENTS
    Some((Builder::nop, "nop")),
    // IdentifierNameButNotReservedWord -> INTERFACE
    Some((Builder::nop, "nop")),
    // IdentifierNameButNotReservedWord -> PACKAGE
    Some((Builder::nop, "nop")),
    // IdentifierNameButNotReservedWord -> PRIVATE
    Some((Builder::nop, "nop")),
    // IdentifierNameButNotReservedWord -> PROTECTED
    Some((Builder::nop, "nop")),
    // IdentifierNameButNotReservedWord -> PUBLIC
    Some((Builder::nop, "nop")),
    // IdentifierNameButNotReservedWord -> AS
    Some((Builder::nop, "nop")),
    // IdentifierNameButNotReservedWord -> ASYNC
    Some((Builder::nop, "nop")),
    // IdentifierNameButNotReservedWord -> FROM
    Some((Builder::nop, "nop")),
    // IdentifierNameButNotReservedWord -> GET
    Some((Builder::nop, "nop")),
    // IdentifierNameButNotReservedWord -> META
    Some((Builder::nop, "nop")),
    // IdentifierNameButNotReservedWord -> OF
    Some((Builder::nop, "nop")),
    // IdentifierNameButNotReservedWord -> SET
    Some((Builder::nop, "nop")),
    // IdentifierNameButNotReservedWord -> TARGET
    Some((Builder::nop, "nop")),
    // FunctionRestParameter -> BindingRestElement
    Some((Builder::nop, "nop")),
    // FormalParameterList -> FormalParameter
    Some((Builder::create_list, "create_list")),
    // FormalParameterList -> FormalParameterList COMMA FormalParameter
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // FunctionStatementList -> (empty)
    Some((Builder::empty_list, "empty_list")),
    // FunctionStatementList -> StatementList_Return
    Some((Builder::nop, "nop")),
    // FunctionRestParameter_Yield -> BindingRestElement_Yield
    Some((Builder::nop, "nop")),
    // FormalParameterList_Yield -> FormalParameter_Yield
    Some((Builder::create_list, "create_list")),
    // FormalParameterList_Yield -> FormalParameterList_Yield COMMA FormalParameter_Yield
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // FunctionBody_Yield -> FunctionStatementList_Yield
    Some((Builder::nop, "nop")),
    // FunctionRestParameter_Await -> BindingRestElement_Await
    Some((Builder::nop, "nop")),
    // FormalParameterList_Await -> FormalParameter_Await
    Some((Builder::create_list, "create_list")),
    // FormalParameterList_Await -> FormalParameterList_Await COMMA FormalParameter_Await
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // FunctionBody_Await -> FunctionStatementList_Await
    Some((Builder::nop, "nop")),
    // FunctionRestParameter_Yield_Await -> BindingRestElement_Yield_Await
    Some((Builder::nop, "nop")),
    // FormalParameterList_Yield_Await -> FormalParameter_Yield_Await
    Some((Builder::create_list, "create_list")),
    // FormalParameterList_Yield_Await -> FormalParameterList_Yield_Await COMMA FormalParameter_Yield_Await
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // FunctionBody_Yield_Await -> FunctionStatementList_Yield_Await
    Some((Builder::nop, "nop")),
    // ClassElementList -> ClassElement
    Some((Builder::class_element_list, "class_element_list")),
    // ClassElementList -> ClassElementList ClassElement
    Some((
        Builder::class_element_list_append,
        "class_element_list_append",
    )),
    // ImportSpecifier -> ImportedBinding
    Some((Builder::import_specifier, "import_specifier")),
    // ImportSpecifier -> ModuleExportName AS ImportedBinding
    Some((Builder::import_specifier_as, "import_specifier_as")),
    // Initializer_In_Await -> ASSIGN AssignmentExpression_In_Await
    Some((Builder::initializer, "initializer")),
    // BindingPattern_Await -> ObjectBindingPattern_Await
    Some((Builder::nop, "nop")),
    // BindingPattern_Await -> ArrayBindingPattern_Await
    Some((Builder::nop, "nop")),
    // LexicalBinding_In_Await -> BindingIdentifier_Await
    Some((Builder::variable_declarator, "variable_declarator")),
    // LexicalBinding_In_Await -> BindingIdentifier_Await Initializer_In_Await
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // LexicalBinding_In_Await -> BindingPattern_Await Initializer_In_Await
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // ClassElementList_Await -> ClassElement_Await
    Some((Builder::class_element_list, "class_element_list")),
    // ClassElementList_Await -> ClassElementList_Await ClassElement_Await
    Some((
        Builder::class_element_list_append,
        "class_element_list_append",
    )),
    // LogicalORExpression_In_Await -> LogicalANDExpression_In_Await
    Some((Builder::nop, "nop")),
    // LogicalORExpression_In_Await -> LogicalORExpression_In_Await OR _TRUTHY_SHORT_CIRCUIT_ LogicalANDExpression_In_Await
    Some((Builder::logical_expression, "logical_expression")),
    // CoalesceExpression_In_Await -> CoalesceExpressionHead_In_Await NULLISH _NULLISH_SHORT_CIRCUIT_ BitwiseORExpression_In_Await
    Some((Builder::logical_expression, "logical_expression")),
    // CoverParenthesizedExpressionAndArrowParameterList_Await -> LPAREN Expression_In_Await RPAREN
    Some((Builder::cpeaapl_expr, "cpeaapl_expr")),
    // CoverParenthesizedExpressionAndArrowParameterList_Await -> LPAREN Expression_In_Await COMMA RPAREN
    Some((Builder::cpeaapl_expr_comma, "cpeaapl_expr_comma")),
    // CoverParenthesizedExpressionAndArrowParameterList_Await -> LPAREN RPAREN
    Some((Builder::cpeaapl_empty, "cpeaapl_empty")),
    // CoverParenthesizedExpressionAndArrowParameterList_Await -> LPAREN ELLIPSIS BindingIdentifier_Await RPAREN
    Some((Builder::cpeaapl_rest, "cpeaapl_rest")),
    // CoverParenthesizedExpressionAndArrowParameterList_Await -> LPAREN ELLIPSIS BindingPattern_Await RPAREN
    Some((Builder::cpeaapl_rest, "cpeaapl_rest")),
    // CoverParenthesizedExpressionAndArrowParameterList_Await -> LPAREN Expression_In_Await COMMA ELLIPSIS BindingIdentifier_Await RPAREN
    Some((Builder::cpeaapl_expr_rest, "cpeaapl_expr_rest")),
    // CoverParenthesizedExpressionAndArrowParameterList_Await -> LPAREN Expression_In_Await COMMA ELLIPSIS BindingPattern_Await RPAREN
    Some((Builder::cpeaapl_expr_rest, "cpeaapl_expr_rest")),
    // ExpressionBody_In -> AssignmentExpression_In
    Some((Builder::nop, "nop")),
    // ExpressionBody_In_Await -> AssignmentExpression_In_Await
    Some((Builder::nop, "nop")),
    // MemberExpression_Await -> PrimaryExpression_Await
    Some((Builder::nop, "nop")),
    // MemberExpression_Await -> MemberExpression_Await LBRACK Expression_In_Await RBRACK
    Some((
        Builder::member_expression_computed,
        "member_expression_computed",
    )),
    // MemberExpression_Await -> MemberExpression_Await DOT KeywordOrIdentifierName
    Some((Builder::member_expression, "member_expression")),
    // MemberExpression_Await -> MemberExpression_Await TemplateLiteral_Await_Tagged
    Some((
        Builder::tagged_template_expression,
        "tagged_template_expression",
    )),
    // MemberExpression_Await -> SuperProperty_Await
    Some((Builder::nop, "nop")),
    // MemberExpression_Await -> MetaProperty
    Some((Builder::nop, "nop")),
    // MemberExpression_Await -> NEW MemberExpression_Await Arguments_Await
    Some((
        Builder::new_expression_arguments,
        "new_expression_arguments",
    )),
    // MemberExpression_Await -> MemberExpression_Await DOT PRIVATE_IDENTIFIER
    Some((
        Builder::member_expression_private,
        "member_expression_private",
    )),
    // Arguments_Await -> LPAREN RPAREN
    Some((Builder::arguments_empty, "arguments_empty")),
    // Arguments_Await -> LPAREN ArgumentList_Await RPAREN
    Some((Builder::arguments, "arguments")),
    // Arguments_Await -> LPAREN ArgumentList_Await COMMA RPAREN
    Some((Builder::arguments_comma, "arguments_comma")),
    // SuperCall_Await -> SUPER Arguments_Await
    Some((Builder::call_expression_super, "call_expression_super")),
    // ImportCall_Await -> IMPORT LPAREN AssignmentExpression_In_Await RPAREN
    Some((Builder::import_expression, "import_expression")),
    // TemplateLiteral_Await_Tagged -> NO_SUBSTITUTION_TEMPLATE
    Some((
        Builder::template_literal_no_subst,
        "template_literal_no_subst",
    )),
    // TemplateLiteral_Await_Tagged -> SubstitutionTemplate_Await_Tagged
    Some((Builder::nop, "nop")),
    // OptionalChain_Await -> OPTIONAL_CHAINING Arguments_Await
    Some((Builder::optional_call, "optional_call")),
    // OptionalChain_Await -> OPTIONAL_CHAINING LBRACK Expression_In_Await RBRACK
    Some((
        Builder::optional_computed_property,
        "optional_computed_property",
    )),
    // OptionalChain_Await -> OPTIONAL_CHAINING KeywordOrIdentifierName
    Some((Builder::optional_member, "optional_member")),
    // OptionalChain_Await -> OPTIONAL_CHAINING TemplateLiteral_Await_Tagged
    Some((Builder::optional_member, "optional_member")),
    // OptionalChain_Await -> OPTIONAL_CHAINING PRIVATE_IDENTIFIER
    Some((
        Builder::optional_private_identifier,
        "optional_private_identifier",
    )),
    // OptionalChain_Await -> OptionalChain_Await Arguments_Await
    Some((
        Builder::optional_chain_append_call,
        "optional_chain_append_call",
    )),
    // OptionalChain_Await -> OptionalChain_Await LBRACK Expression_In_Await RBRACK
    Some((
        Builder::optional_chain_append_computed_property,
        "optional_chain_append_computed_property",
    )),
    // OptionalChain_Await -> OptionalChain_Await DOT KeywordOrIdentifierName
    Some((
        Builder::optional_chain_append_property,
        "optional_chain_append_property",
    )),
    // OptionalChain_Await -> OptionalChain_Await TemplateLiteral_Await_Tagged
    Some((
        Builder::optional_chain_append_tagged_template,
        "optional_chain_append_tagged_template",
    )),
    // OptionalChain_Await -> OptionalChain_Await DOT PRIVATE_IDENTIFIER
    Some((
        Builder::optional_chain_append_private_identifier,
        "optional_chain_append_private_identifier",
    )),
    // StatementList_Await -> StatementListItem_Await
    Some((Builder::create_list, "create_list")),
    // StatementList_Await -> StatementList_Await StatementListItem_Await
    Some((Builder::append_to_list, "append_to_list")),
    // DoWhileStatement_Await -> DO _LOOP_START_ Statement_Await _LOOP_BODY_ WHILE LPAREN Expression_In_Await RPAREN SEMICOLON
    Some((Builder::do_while_statement, "do_while_statement")),
    // WhileStatement_Await -> WHILE _LOOP_START_ LPAREN Expression_In_Await RPAREN _LOOP_TEST_ Statement_Await
    Some((Builder::while_statement, "while_statement")),
    // ForStatement_Await -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) SEMICOLON SEMICOLON RPAREN Statement_Await
    Some((
        Builder::for_statement_no_init_test_update,
        "for_statement_no_init_test_update",
    )),
    // ForStatement_Await -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) Expression_Await SEMICOLON _LOOP_INIT_EXPRESSION_ SEMICOLON RPAREN Statement_Await
    Some((
        Builder::for_statement_no_test_update,
        "for_statement_no_test_update",
    )),
    // ForStatement_Await -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) SEMICOLON Expression_In_Await SEMICOLON _LOOP_TEST_ RPAREN Statement_Await
    Some((
        Builder::for_statement_no_init_update,
        "for_statement_no_init_update",
    )),
    // ForStatement_Await -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) Expression_Await SEMICOLON _LOOP_INIT_EXPRESSION_ Expression_In_Await SEMICOLON _LOOP_TEST_ RPAREN Statement_Await
    Some((Builder::for_statement_no_update, "for_statement_no_update")),
    // ForStatement_Await -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) SEMICOLON SEMICOLON Expression_In_Await RPAREN _LOOP_NEXT_ Statement_Await
    Some((
        Builder::for_statement_no_init_test,
        "for_statement_no_init_test",
    )),
    // ForStatement_Await -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) Expression_Await SEMICOLON _LOOP_INIT_EXPRESSION_ SEMICOLON Expression_In_Await RPAREN _LOOP_NEXT_ Statement_Await
    Some((Builder::for_statement_no_test, "for_statement_no_test")),
    // ForStatement_Await -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) SEMICOLON Expression_In_Await SEMICOLON _LOOP_TEST_ Expression_In_Await RPAREN _LOOP_NEXT_ Statement_Await
    Some((Builder::for_statement_no_init, "for_statement_no_init")),
    // ForStatement_Await -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) Expression_Await SEMICOLON _LOOP_INIT_EXPRESSION_ Expression_In_Await SEMICOLON _LOOP_TEST_ Expression_In_Await RPAREN _LOOP_NEXT_ Statement_Await
    Some((Builder::for_statement, "for_statement")),
    // ForStatement_Await -> FOR _LOOP_START_ LPAREN VAR VariableDeclarationList_Await SEMICOLON _LOOP_INIT_VAR_DECLARATION_ SEMICOLON RPAREN Statement_Await
    Some((
        Builder::for_statement_vars_no_test_update,
        "for_statement_vars_no_test_update",
    )),
    // ForStatement_Await -> FOR _LOOP_START_ LPAREN VAR VariableDeclarationList_Await SEMICOLON _LOOP_INIT_VAR_DECLARATION_ Expression_In_Await SEMICOLON _LOOP_TEST_ RPAREN Statement_Await
    Some((
        Builder::for_statement_vars_no_update,
        "for_statement_vars_no_update",
    )),
    // ForStatement_Await -> FOR _LOOP_START_ LPAREN VAR VariableDeclarationList_Await SEMICOLON _LOOP_INIT_VAR_DECLARATION_ SEMICOLON Expression_In_Await RPAREN _LOOP_NEXT_ Statement_Await
    Some((
        Builder::for_statement_vars_no_test,
        "for_statement_vars_no_test",
    )),
    // ForStatement_Await -> FOR _LOOP_START_ LPAREN VAR VariableDeclarationList_Await SEMICOLON _LOOP_INIT_VAR_DECLARATION_ Expression_In_Await SEMICOLON _LOOP_TEST_ Expression_In_Await RPAREN _LOOP_NEXT_ Statement_Await
    Some((Builder::for_statement_vars, "for_statement_vars")),
    // ForStatement_Await -> FOR _LOOP_START_ LPAREN LexicalDeclaration_Await _LOOP_INIT_LEXICAL_DECLARATION_ SEMICOLON RPAREN Statement_Await
    Some((
        Builder::for_statement_decl_no_test_update,
        "for_statement_decl_no_test_update",
    )),
    // ForStatement_Await -> FOR _LOOP_START_ LPAREN LexicalDeclaration_Await _LOOP_INIT_LEXICAL_DECLARATION_ Expression_In_Await SEMICOLON _LOOP_TEST_ RPAREN Statement_Await
    Some((
        Builder::for_statement_decl_no_update,
        "for_statement_decl_no_update",
    )),
    // ForStatement_Await -> FOR _LOOP_START_ LPAREN LexicalDeclaration_Await _LOOP_INIT_LEXICAL_DECLARATION_ SEMICOLON Expression_In_Await RPAREN _LOOP_NEXT_ Statement_Await
    Some((
        Builder::for_statement_decl_no_test,
        "for_statement_decl_no_test",
    )),
    // ForStatement_Await -> FOR _LOOP_START_ LPAREN LexicalDeclaration_Await _LOOP_INIT_LEXICAL_DECLARATION_ Expression_In_Await SEMICOLON _LOOP_TEST_ Expression_In_Await RPAREN _LOOP_NEXT_ Statement_Await
    Some((Builder::for_statement_decl, "for_statement_decl")),
    // ForInOfStatement_Await -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) LeftHandSideExpression_Await IN Expression_In_Await RPAREN Statement_Await
    Some((Builder::for_in_statement, "for_in_statement")),
    // ForInOfStatement_Await -> FOR _LOOP_START_ LPAREN VAR ForBinding_Await IN Expression_In_Await RPAREN Statement_Await
    Some((Builder::for_in_statement_vars, "for_in_statement_vars")),
    // ForInOfStatement_Await -> FOR _LOOP_START_ LPAREN ForDeclaration_Await IN Expression_In_Await RPAREN Statement_Await
    Some((Builder::for_in_statement, "for_in_statement")),
    // ForInOfStatement_Await -> FOR _LOOP_START_ LPAREN (?![ASYNC OF, LET]) LeftHandSideExpression_Await OF AssignmentExpression_In_Await RPAREN Statement_Await
    Some((Builder::for_of_statement, "for_of_statement")),
    // ForInOfStatement_Await -> FOR _LOOP_START_ LPAREN VAR ForBinding_Await OF AssignmentExpression_In_Await RPAREN Statement_Await
    Some((Builder::for_of_statement_vars, "for_of_statement_vars")),
    // ForInOfStatement_Await -> FOR _LOOP_START_ LPAREN ForDeclaration_Await OF AssignmentExpression_In_Await RPAREN Statement_Await
    Some((Builder::for_of_statement, "for_of_statement")),
    // ForInOfStatement_Await -> FOR AWAIT _LOOP_START_ LPAREN (?![LET]) LeftHandSideExpression_Await OF AssignmentExpression_In_Await RPAREN Statement_Await
    Some((Builder::for_of_statement_await, "for_of_statement_await")),
    // ForInOfStatement_Await -> FOR AWAIT _LOOP_START_ LPAREN VAR ForBinding_Await OF AssignmentExpression_In_Await RPAREN Statement_Await
    Some((
        Builder::for_of_statement_await_vars,
        "for_of_statement_await_vars",
    )),
    // ForInOfStatement_Await -> FOR AWAIT _LOOP_START_ LPAREN ForDeclaration_Await OF AssignmentExpression_In_Await RPAREN Statement_Await
    Some((Builder::for_of_statement_await, "for_of_statement_await")),
    // CaseBlock_Await -> LBRACE RBRACE
    Some((Builder::empty_list_block, "empty_list_block")),
    // CaseBlock_Await -> LBRACE CaseClauses_Await RBRACE
    Some((Builder::list_block, "list_block")),
    // CaseBlock_Await -> LBRACE DefaultClause_Await RBRACE
    Some((Builder::case_block_default, "case_block_default")),
    // CaseBlock_Await -> LBRACE CaseClauses_Await DefaultClause_Await RBRACE
    Some((
        Builder::case_block_cases_default,
        "case_block_cases_default",
    )),
    // CaseBlock_Await -> LBRACE DefaultClause_Await CaseClauses_Await RBRACE
    Some((
        Builder::case_block_default_cases,
        "case_block_default_cases",
    )),
    // CaseBlock_Await -> LBRACE CaseClauses_Await DefaultClause_Await CaseClauses_Await RBRACE
    Some((
        Builder::case_block_cases_default_cases,
        "case_block_cases_default_cases",
    )),
    // CatchParameter_Await -> BindingIdentifier_Await
    Some((Builder::nop, "nop")),
    // CatchParameter_Await -> BindingPattern_Await
    Some((Builder::nop, "nop")),
    // ObjectBindingPattern -> LBRACE RBRACE
    Some((Builder::object_pattern_empty, "object_pattern_empty")),
    // ObjectBindingPattern -> LBRACE BindingRestProperty RBRACE
    Some((Builder::object_pattern_rest, "object_pattern_rest")),
    // ObjectBindingPattern -> LBRACE BindingPropertyList RBRACE
    Some((Builder::object_pattern, "object_pattern")),
    // ObjectBindingPattern -> LBRACE BindingPropertyList COMMA RBRACE
    Some((Builder::object_pattern_comma, "object_pattern_comma")),
    // ObjectBindingPattern -> LBRACE BindingPropertyList COMMA BindingRestProperty RBRACE
    Some((
        Builder::object_pattern_comma_rest,
        "object_pattern_comma_rest",
    )),
    // ArrayBindingPattern -> LBRACK RBRACK
    Some((Builder::array_pattern_empty, "array_pattern_empty")),
    // ArrayBindingPattern -> LBRACK Elision RBRACK
    Some((Builder::array_pattern, "array_pattern")),
    // ArrayBindingPattern -> LBRACK BindingRestElement RBRACK
    Some((Builder::array_pattern_rest, "array_pattern_rest")),
    // ArrayBindingPattern -> LBRACK Elision BindingRestElement RBRACK
    Some((
        Builder::array_pattern_elision_rest,
        "array_pattern_elision_rest",
    )),
    // ArrayBindingPattern -> LBRACK BindingElementList RBRACK
    Some((Builder::array_pattern, "array_pattern")),
    // ArrayBindingPattern -> LBRACK BindingElementList COMMA RBRACK
    Some((Builder::array_pattern_comma, "array_pattern_comma")),
    // ArrayBindingPattern -> LBRACK BindingElementList COMMA Elision RBRACK
    Some((Builder::array_pattern_concat, "array_pattern_concat")),
    // ArrayBindingPattern -> LBRACK BindingElementList COMMA BindingRestElement RBRACK
    Some((
        Builder::array_pattern_comma_rest,
        "array_pattern_comma_rest",
    )),
    // ArrayBindingPattern -> LBRACK BindingElementList COMMA Elision BindingRestElement RBRACK
    Some((
        Builder::array_pattern_concat_rest,
        "array_pattern_concat_rest",
    )),
    // ShortCircuitExpression_In -> LogicalORExpression_In
    Some((Builder::nop, "nop")),
    // ShortCircuitExpression_In -> CoalesceExpression_In
    Some((Builder::nop, "nop")),
    // ArrowParameters -> BindingIdentifier
    Some((Builder::create_list, "create_list")),
    // ArrowParameters -> CoverParenthesizedExpressionAndArrowParameterList
    Some((Builder::arrow_parameters, "arrow_parameters")),
    // CoverCallExpressionAndAsyncArrowHead -> MemberExpression Arguments
    Some((Builder::nop, "nop")),
    // NewExpression -> MemberExpression
    Some((Builder::nop, "nop")),
    // NewExpression -> NEW NewExpression
    Some((Builder::new_expression, "new_expression")),
    // CallExpression -> CoverCallExpressionAndAsyncArrowHead
    Some((Builder::call_expression, "call_expression")),
    // CallExpression -> SuperCall
    Some((Builder::nop, "nop")),
    // CallExpression -> ImportCall
    Some((Builder::nop, "nop")),
    // CallExpression -> CallExpression Arguments
    Some((Builder::call_expression, "call_expression")),
    // CallExpression -> CallExpression LBRACK Expression_In RBRACK
    Some((Builder::member_expression_call, "member_expression_call")),
    // CallExpression -> CallExpression DOT KeywordOrIdentifierName
    Some((Builder::member_expression, "member_expression")),
    // CallExpression -> CallExpression TemplateLiteral_Tagged
    Some((
        Builder::tagged_template_expression,
        "tagged_template_expression",
    )),
    // CallExpression -> CallExpression DOT PRIVATE_IDENTIFIER
    Some((
        Builder::member_expression_private,
        "member_expression_private",
    )),
    // OptionalExpression -> MemberExpression OptionalChain
    Some((Builder::optional_expression, "optional_expression")),
    // OptionalExpression -> CallExpression OptionalChain
    Some((Builder::optional_expression, "optional_expression")),
    // OptionalExpression -> OptionalExpression OptionalChain
    Some((Builder::optional_expression, "optional_expression")),
    // AssignmentExpression -> ConditionalExpression
    Some((Builder::nop, "nop")),
    // AssignmentExpression -> ArrowFunction
    Some((Builder::nop, "nop")),
    // AssignmentExpression -> AsyncArrowFunction
    Some((Builder::nop, "nop")),
    // AssignmentExpression -> LeftHandSideExpression ASSIGN AssignmentExpression
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression -> LeftHandSideExpression AssignmentOperator AssignmentExpression
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression -> LeftHandSideExpression AND_ASSIGN _FALSY_SHORT_CIRCUIT_ASSIGNMENT_ AssignmentExpression
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression -> LeftHandSideExpression OR_ASSIGN _TRUTHY_SHORT_CIRCUIT_ASSIGNMENT_ AssignmentExpression
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression -> LeftHandSideExpression NULLISH_ASSIGN _NULLISH_SHORT_CIRCUIT_ASSIGNMENT_ AssignmentExpression
    Some((Builder::assignment_expression, "assignment_expression")),
    // VariableDeclaration -> BindingIdentifier
    Some((Builder::variable_declarator, "variable_declarator")),
    // VariableDeclaration -> BindingIdentifier Initializer
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // VariableDeclaration -> BindingPattern Initializer
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // BindingList -> LexicalBinding
    Some((Builder::create_list, "create_list")),
    // BindingList -> BindingList COMMA LexicalBinding
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // CaseClause -> CASE Expression_In COLON
    Some((
        Builder::switch_case_no_consequent,
        "switch_case_no_consequent",
    )),
    // CaseClause -> CASE Expression_In COLON StatementList
    Some((Builder::switch_case, "switch_case")),
    // BindingRestElement -> ELLIPSIS BindingIdentifier
    Some((Builder::rest_element, "rest_element")),
    // BindingRestElement -> ELLIPSIS BindingPattern
    Some((Builder::rest_element, "rest_element")),
    // FormalParameter -> BindingElement
    Some((Builder::nop, "nop")),
    // StatementList_Return -> StatementListItem_Return
    Some((Builder::create_list, "create_list")),
    // StatementList_Return -> StatementList_Return StatementListItem_Return
    Some((Builder::append_to_list, "append_to_list")),
    // BindingRestElement_Yield -> ELLIPSIS BindingIdentifier_Yield
    Some((Builder::rest_element, "rest_element")),
    // BindingRestElement_Yield -> ELLIPSIS BindingPattern_Yield
    Some((Builder::rest_element, "rest_element")),
    // FormalParameter_Yield -> BindingElement_Yield
    Some((Builder::nop, "nop")),
    // FunctionStatementList_Yield -> (empty)
    Some((Builder::empty_list, "empty_list")),
    // FunctionStatementList_Yield -> StatementList_Yield_Return
    Some((Builder::nop, "nop")),
    // BindingRestElement_Await -> ELLIPSIS BindingIdentifier_Await
    Some((Builder::rest_element, "rest_element")),
    // BindingRestElement_Await -> ELLIPSIS BindingPattern_Await
    Some((Builder::rest_element, "rest_element")),
    // FormalParameter_Await -> BindingElement_Await
    Some((Builder::nop, "nop")),
    // FunctionStatementList_Await -> (empty)
    Some((Builder::empty_list, "empty_list")),
    // FunctionStatementList_Await -> StatementList_Await_Return
    Some((Builder::nop, "nop")),
    // BindingRestElement_Yield_Await -> ELLIPSIS BindingIdentifier_Yield_Await
    Some((Builder::rest_element, "rest_element")),
    // BindingRestElement_Yield_Await -> ELLIPSIS BindingPattern_Yield_Await
    Some((Builder::rest_element, "rest_element")),
    // FormalParameter_Yield_Await -> BindingElement_Yield_Await
    Some((Builder::nop, "nop")),
    // FunctionStatementList_Yield_Await -> (empty)
    Some((Builder::empty_list, "empty_list")),
    // FunctionStatementList_Yield_Await -> StatementList_Yield_Await_Return
    Some((Builder::nop, "nop")),
    // ClassElement -> MethodDefinition
    Some((Builder::create_nullable, "create_nullable")),
    // ClassElement -> STATIC MethodDefinition
    Some((
        Builder::class_element_static_method_definition,
        "class_element_static_method_definition",
    )),
    // ClassElement -> FieldDefinition SEMICOLON
    Some((
        Builder::class_element_property_definition,
        "class_element_property_definition",
    )),
    // ClassElement -> STATIC FieldDefinition SEMICOLON
    Some((
        Builder::class_element_static_property_definition,
        "class_element_static_property_definition",
    )),
    // ClassElement -> ClassStaticBlock
    Some((Builder::create_nullable, "create_nullable")),
    // ClassElement -> SEMICOLON
    Some((Builder::class_element_semicolon, "class_element_semicolon")),
    // ObjectBindingPattern_Await -> LBRACE RBRACE
    Some((Builder::object_pattern_empty, "object_pattern_empty")),
    // ObjectBindingPattern_Await -> LBRACE BindingRestProperty_Await RBRACE
    Some((Builder::object_pattern_rest, "object_pattern_rest")),
    // ObjectBindingPattern_Await -> LBRACE BindingPropertyList_Await RBRACE
    Some((Builder::object_pattern, "object_pattern")),
    // ObjectBindingPattern_Await -> LBRACE BindingPropertyList_Await COMMA RBRACE
    Some((Builder::object_pattern_comma, "object_pattern_comma")),
    // ObjectBindingPattern_Await -> LBRACE BindingPropertyList_Await COMMA BindingRestProperty_Await RBRACE
    Some((
        Builder::object_pattern_comma_rest,
        "object_pattern_comma_rest",
    )),
    // ArrayBindingPattern_Await -> LBRACK RBRACK
    Some((Builder::array_pattern_empty, "array_pattern_empty")),
    // ArrayBindingPattern_Await -> LBRACK Elision RBRACK
    Some((Builder::array_pattern, "array_pattern")),
    // ArrayBindingPattern_Await -> LBRACK BindingRestElement_Await RBRACK
    Some((Builder::array_pattern_rest, "array_pattern_rest")),
    // ArrayBindingPattern_Await -> LBRACK Elision BindingRestElement_Await RBRACK
    Some((
        Builder::array_pattern_elision_rest,
        "array_pattern_elision_rest",
    )),
    // ArrayBindingPattern_Await -> LBRACK BindingElementList_Await RBRACK
    Some((Builder::array_pattern, "array_pattern")),
    // ArrayBindingPattern_Await -> LBRACK BindingElementList_Await COMMA RBRACK
    Some((Builder::array_pattern_comma, "array_pattern_comma")),
    // ArrayBindingPattern_Await -> LBRACK BindingElementList_Await COMMA Elision RBRACK
    Some((Builder::array_pattern_concat, "array_pattern_concat")),
    // ArrayBindingPattern_Await -> LBRACK BindingElementList_Await COMMA BindingRestElement_Await RBRACK
    Some((
        Builder::array_pattern_comma_rest,
        "array_pattern_comma_rest",
    )),
    // ArrayBindingPattern_Await -> LBRACK BindingElementList_Await COMMA Elision BindingRestElement_Await RBRACK
    Some((
        Builder::array_pattern_concat_rest,
        "array_pattern_concat_rest",
    )),
    // ClassElement_Await -> MethodDefinition_Await
    Some((Builder::create_nullable, "create_nullable")),
    // ClassElement_Await -> STATIC MethodDefinition_Await
    Some((
        Builder::class_element_static_method_definition,
        "class_element_static_method_definition",
    )),
    // ClassElement_Await -> FieldDefinition_Await SEMICOLON
    Some((
        Builder::class_element_property_definition,
        "class_element_property_definition",
    )),
    // ClassElement_Await -> STATIC FieldDefinition_Await SEMICOLON
    Some((
        Builder::class_element_static_property_definition,
        "class_element_static_property_definition",
    )),
    // ClassElement_Await -> ClassStaticBlock
    Some((Builder::create_nullable, "create_nullable")),
    // ClassElement_Await -> SEMICOLON
    Some((Builder::class_element_semicolon, "class_element_semicolon")),
    // LogicalANDExpression_In_Await -> BitwiseORExpression_In_Await
    Some((Builder::nop, "nop")),
    // LogicalANDExpression_In_Await -> LogicalANDExpression_In_Await AND _FALSY_SHORT_CIRCUIT_ BitwiseORExpression_In_Await
    Some((Builder::logical_expression, "logical_expression")),
    // _TRUTHY_SHORT_CIRCUIT_ -> (empty)
    Some((Builder::nop, "nop")),
    // CoalesceExpressionHead_In_Await -> CoalesceExpression_In_Await
    Some((Builder::nop, "nop")),
    // CoalesceExpressionHead_In_Await -> BitwiseORExpression_In_Await
    Some((Builder::nop, "nop")),
    // _NULLISH_SHORT_CIRCUIT_ -> (empty)
    Some((Builder::nop, "nop")),
    // BitwiseORExpression_In_Await -> BitwiseXORExpression_In_Await
    Some((Builder::nop, "nop")),
    // BitwiseORExpression_In_Await -> BitwiseORExpression_In_Await BIT_OR BitwiseXORExpression_In_Await
    Some((Builder::binary_expression, "binary_expression")),
    // PrimaryExpression_Await -> THIS
    Some((Builder::this_expression, "this_expression")),
    // PrimaryExpression_Await -> IdentifierReference_Await
    Some((Builder::nop, "nop")),
    // PrimaryExpression_Await -> Literal
    Some((Builder::nop, "nop")),
    // PrimaryExpression_Await -> ArrayLiteral_Await
    Some((Builder::nop, "nop")),
    // PrimaryExpression_Await -> ObjectLiteral_Await
    Some((Builder::nop, "nop")),
    // PrimaryExpression_Await -> FunctionExpression
    Some((Builder::nop, "nop")),
    // PrimaryExpression_Await -> ClassExpression_Await
    Some((Builder::nop, "nop")),
    // PrimaryExpression_Await -> GeneratorExpression
    Some((Builder::nop, "nop")),
    // PrimaryExpression_Await -> AsyncFunctionExpression
    Some((Builder::nop, "nop")),
    // PrimaryExpression_Await -> AsyncGeneratorExpression
    Some((Builder::nop, "nop")),
    // PrimaryExpression_Await -> REGULAR_EXPRESSION_LITERAL
    Some((Builder::regexp_literal, "regexp_literal")),
    // PrimaryExpression_Await -> TemplateLiteral_Await
    Some((Builder::nop, "nop")),
    // PrimaryExpression_Await -> CoverParenthesizedExpressionAndArrowParameterList_Await
    Some((
        Builder::primary_expression_cpeaapl,
        "primary_expression_cpeaapl",
    )),
    // SuperProperty_Await -> SUPER LBRACK Expression_In_Await RBRACK
    Some((Builder::super_property_computed, "super_property_computed")),
    // SuperProperty_Await -> SUPER DOT KeywordOrIdentifierName
    Some((Builder::super_property, "super_property")),
    // MetaProperty -> NewTarget
    Some((Builder::nop, "nop")),
    // MetaProperty -> ImportMeta
    Some((Builder::nop, "nop")),
    // ArgumentList_Await -> AssignmentExpression_In_Await
    Some((Builder::argument_list, "argument_list")),
    // ArgumentList_Await -> ELLIPSIS AssignmentExpression_In_Await
    Some((Builder::argument_list_rest, "argument_list_rest")),
    // ArgumentList_Await -> ArgumentList_Await COMMA AssignmentExpression_In_Await
    Some((Builder::argument_list_append, "argument_list_append")),
    // ArgumentList_Await -> ArgumentList_Await COMMA ELLIPSIS AssignmentExpression_In_Await
    Some((
        Builder::argument_list_append_rest,
        "argument_list_append_rest",
    )),
    // SubstitutionTemplate_Await_Tagged -> TEMPLATE_HEAD Expression_In_Await TemplateSpans_Await_Tagged
    Some((Builder::template_literal, "template_literal")),
    // Expression_Await -> AssignmentExpression_Await
    Some((Builder::nop, "nop")),
    // Expression_Await -> Expression_Await COMMA AssignmentExpression_Await
    Some((Builder::sequence_expression, "sequence_expression")),
    // VariableDeclarationList_Await -> VariableDeclaration_Await
    Some((Builder::create_list, "create_list")),
    // VariableDeclarationList_Await -> VariableDeclarationList_Await COMMA VariableDeclaration_Await
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // LexicalDeclaration_Await -> LET BindingList_Await SEMICOLON
    Some((Builder::variable_declaration, "variable_declaration")),
    // LexicalDeclaration_Await -> CONST BindingList_Await SEMICOLON
    Some((Builder::variable_declaration, "variable_declaration")),
    // ForBinding_Await -> BindingIdentifier_Await
    Some((Builder::for_binding, "for_binding")),
    // ForBinding_Await -> BindingPattern_Await
    Some((Builder::for_binding, "for_binding")),
    // ForDeclaration_Await -> LET ForBinding_Await
    Some((Builder::for_declaration, "for_declaration")),
    // ForDeclaration_Await -> CONST ForBinding_Await
    Some((Builder::for_declaration, "for_declaration")),
    // CaseClauses_Await -> CaseClause_Await
    Some((Builder::create_list, "create_list")),
    // CaseClauses_Await -> CaseClauses_Await CaseClause_Await
    Some((Builder::append_to_list, "append_to_list")),
    // DefaultClause_Await -> DEFAULT COLON
    Some((
        Builder::switch_case_default_no_consequent,
        "switch_case_default_no_consequent",
    )),
    // DefaultClause_Await -> DEFAULT COLON StatementList_Await
    Some((Builder::switch_case_default, "switch_case_default")),
    // BindingRestProperty -> ELLIPSIS BindingIdentifier
    Some((Builder::rest_element, "rest_element")),
    // BindingPropertyList -> BindingProperty
    Some((Builder::create_list, "create_list")),
    // BindingPropertyList -> BindingPropertyList COMMA BindingProperty
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // Elision -> COMMA
    Some((Builder::elision, "elision")),
    // Elision -> Elision COMMA
    Some((Builder::elision_append, "elision_append")),
    // BindingElementList -> BindingElisionElement
    Some((Builder::nop, "nop")),
    // BindingElementList -> BindingElementList COMMA BindingElisionElement
    Some((Builder::concat_csv_arrays, "concat_csv_arrays")),
    // LogicalORExpression_In -> LogicalANDExpression_In
    Some((Builder::nop, "nop")),
    // LogicalORExpression_In -> LogicalORExpression_In OR _TRUTHY_SHORT_CIRCUIT_ LogicalANDExpression_In
    Some((Builder::logical_expression, "logical_expression")),
    // CoalesceExpression_In -> CoalesceExpressionHead_In NULLISH _NULLISH_SHORT_CIRCUIT_ BitwiseORExpression_In
    Some((Builder::logical_expression, "logical_expression")),
    // CoverParenthesizedExpressionAndArrowParameterList -> LPAREN Expression_In RPAREN
    Some((Builder::cpeaapl_expr, "cpeaapl_expr")),
    // CoverParenthesizedExpressionAndArrowParameterList -> LPAREN Expression_In COMMA RPAREN
    Some((Builder::cpeaapl_expr_comma, "cpeaapl_expr_comma")),
    // CoverParenthesizedExpressionAndArrowParameterList -> LPAREN RPAREN
    Some((Builder::cpeaapl_empty, "cpeaapl_empty")),
    // CoverParenthesizedExpressionAndArrowParameterList -> LPAREN ELLIPSIS BindingIdentifier RPAREN
    Some((Builder::cpeaapl_rest, "cpeaapl_rest")),
    // CoverParenthesizedExpressionAndArrowParameterList -> LPAREN ELLIPSIS BindingPattern RPAREN
    Some((Builder::cpeaapl_rest, "cpeaapl_rest")),
    // CoverParenthesizedExpressionAndArrowParameterList -> LPAREN Expression_In COMMA ELLIPSIS BindingIdentifier RPAREN
    Some((Builder::cpeaapl_expr_rest, "cpeaapl_expr_rest")),
    // CoverParenthesizedExpressionAndArrowParameterList -> LPAREN Expression_In COMMA ELLIPSIS BindingPattern RPAREN
    Some((Builder::cpeaapl_expr_rest, "cpeaapl_expr_rest")),
    // MemberExpression -> PrimaryExpression
    Some((Builder::nop, "nop")),
    // MemberExpression -> MemberExpression LBRACK Expression_In RBRACK
    Some((
        Builder::member_expression_computed,
        "member_expression_computed",
    )),
    // MemberExpression -> MemberExpression DOT KeywordOrIdentifierName
    Some((Builder::member_expression, "member_expression")),
    // MemberExpression -> MemberExpression TemplateLiteral_Tagged
    Some((
        Builder::tagged_template_expression,
        "tagged_template_expression",
    )),
    // MemberExpression -> SuperProperty
    Some((Builder::nop, "nop")),
    // MemberExpression -> MetaProperty
    Some((Builder::nop, "nop")),
    // MemberExpression -> NEW MemberExpression Arguments
    Some((
        Builder::new_expression_arguments,
        "new_expression_arguments",
    )),
    // MemberExpression -> MemberExpression DOT PRIVATE_IDENTIFIER
    Some((
        Builder::member_expression_private,
        "member_expression_private",
    )),
    // Arguments -> LPAREN RPAREN
    Some((Builder::arguments_empty, "arguments_empty")),
    // Arguments -> LPAREN ArgumentList RPAREN
    Some((Builder::arguments, "arguments")),
    // Arguments -> LPAREN ArgumentList COMMA RPAREN
    Some((Builder::arguments_comma, "arguments_comma")),
    // SuperCall -> SUPER Arguments
    Some((Builder::call_expression_super, "call_expression_super")),
    // ImportCall -> IMPORT LPAREN AssignmentExpression_In RPAREN
    Some((Builder::import_expression, "import_expression")),
    // TemplateLiteral_Tagged -> NO_SUBSTITUTION_TEMPLATE
    Some((
        Builder::template_literal_no_subst,
        "template_literal_no_subst",
    )),
    // TemplateLiteral_Tagged -> SubstitutionTemplate_Tagged
    Some((Builder::nop, "nop")),
    // OptionalChain -> OPTIONAL_CHAINING Arguments
    Some((Builder::optional_call, "optional_call")),
    // OptionalChain -> OPTIONAL_CHAINING LBRACK Expression_In RBRACK
    Some((
        Builder::optional_computed_property,
        "optional_computed_property",
    )),
    // OptionalChain -> OPTIONAL_CHAINING KeywordOrIdentifierName
    Some((Builder::optional_member, "optional_member")),
    // OptionalChain -> OPTIONAL_CHAINING TemplateLiteral_Tagged
    Some((Builder::optional_member, "optional_member")),
    // OptionalChain -> OPTIONAL_CHAINING PRIVATE_IDENTIFIER
    Some((
        Builder::optional_private_identifier,
        "optional_private_identifier",
    )),
    // OptionalChain -> OptionalChain Arguments
    Some((
        Builder::optional_chain_append_call,
        "optional_chain_append_call",
    )),
    // OptionalChain -> OptionalChain LBRACK Expression_In RBRACK
    Some((
        Builder::optional_chain_append_computed_property,
        "optional_chain_append_computed_property",
    )),
    // OptionalChain -> OptionalChain DOT KeywordOrIdentifierName
    Some((
        Builder::optional_chain_append_property,
        "optional_chain_append_property",
    )),
    // OptionalChain -> OptionalChain TemplateLiteral_Tagged
    Some((
        Builder::optional_chain_append_tagged_template,
        "optional_chain_append_tagged_template",
    )),
    // OptionalChain -> OptionalChain DOT PRIVATE_IDENTIFIER
    Some((
        Builder::optional_chain_append_private_identifier,
        "optional_chain_append_private_identifier",
    )),
    // ConditionalExpression -> ShortCircuitExpression
    Some((Builder::nop, "nop")),
    // ConditionalExpression -> ShortCircuitExpression CONDITIONAL _THEN_BLOCK_ AssignmentExpression_In COLON _ELSE_BLOCK_ AssignmentExpression
    Some((Builder::conditional_expression, "conditional_expression")),
    // ArrowFunction -> ArrowParameters (!LINE_TERMINATOR_SEQUENCE) ARROW ConciseBody
    Some((
        Builder::arrow_function_expression,
        "arrow_function_expression",
    )),
    // AsyncArrowFunction -> ASYNC (!LINE_TERMINATOR_SEQUENCE) AsyncArrowBindingIdentifier (!LINE_TERMINATOR_SEQUENCE) ARROW AsyncConciseBody
    Some((
        Builder::async_arrow_function_expression_single_param,
        "async_arrow_function_expression_single_param",
    )),
    // AsyncArrowFunction -> CoverCallExpressionAndAsyncArrowHead (!LINE_TERMINATOR_SEQUENCE) ARROW AsyncConciseBody
    Some((
        Builder::async_arrow_function_expression,
        "async_arrow_function_expression",
    )),
    // Initializer -> ASSIGN AssignmentExpression
    Some((Builder::initializer, "initializer")),
    // LexicalBinding -> BindingIdentifier
    Some((Builder::variable_declarator, "variable_declarator")),
    // LexicalBinding -> BindingIdentifier Initializer
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // LexicalBinding -> BindingPattern Initializer
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // BindingElement -> SingleNameBinding
    Some((Builder::either_left, "either_left")),
    // BindingElement -> BindingPattern
    Some((Builder::nop, "nop")),
    // BindingElement -> BindingPattern Initializer_In
    Some((Builder::assignment_pattern, "assignment_pattern")),
    // StatementListItem_Return -> Statement_Return
    Some((Builder::nop, "nop")),
    // StatementListItem_Return -> Declaration
    Some((Builder::nop, "nop")),
    // BindingIdentifier_Yield -> Identifier
    Some((Builder::nop, "nop")),
    // BindingIdentifier_Yield -> YIELD
    Some((Builder::identifier, "identifier")),
    // BindingIdentifier_Yield -> AWAIT
    Some((Builder::identifier, "identifier")),
    // BindingPattern_Yield -> ObjectBindingPattern_Yield
    Some((Builder::nop, "nop")),
    // BindingPattern_Yield -> ArrayBindingPattern_Yield
    Some((Builder::nop, "nop")),
    // BindingElement_Yield -> SingleNameBinding_Yield
    Some((Builder::either_left, "either_left")),
    // BindingElement_Yield -> BindingPattern_Yield
    Some((Builder::nop, "nop")),
    // BindingElement_Yield -> BindingPattern_Yield Initializer_In_Yield
    Some((Builder::assignment_pattern, "assignment_pattern")),
    // StatementList_Yield_Return -> StatementListItem_Yield_Return
    Some((Builder::create_list, "create_list")),
    // StatementList_Yield_Return -> StatementList_Yield_Return StatementListItem_Yield_Return
    Some((Builder::append_to_list, "append_to_list")),
    // BindingElement_Await -> SingleNameBinding_Await
    Some((Builder::either_left, "either_left")),
    // BindingElement_Await -> BindingPattern_Await
    Some((Builder::nop, "nop")),
    // BindingElement_Await -> BindingPattern_Await Initializer_In_Await
    Some((Builder::assignment_pattern, "assignment_pattern")),
    // StatementList_Await_Return -> StatementListItem_Await_Return
    Some((Builder::create_list, "create_list")),
    // StatementList_Await_Return -> StatementList_Await_Return StatementListItem_Await_Return
    Some((Builder::append_to_list, "append_to_list")),
    // BindingIdentifier_Yield_Await -> Identifier
    Some((Builder::nop, "nop")),
    // BindingIdentifier_Yield_Await -> YIELD
    Some((Builder::identifier, "identifier")),
    // BindingIdentifier_Yield_Await -> AWAIT
    Some((Builder::identifier, "identifier")),
    // BindingPattern_Yield_Await -> ObjectBindingPattern_Yield_Await
    Some((Builder::nop, "nop")),
    // BindingPattern_Yield_Await -> ArrayBindingPattern_Yield_Await
    Some((Builder::nop, "nop")),
    // BindingElement_Yield_Await -> SingleNameBinding_Yield_Await
    Some((Builder::either_left, "either_left")),
    // BindingElement_Yield_Await -> BindingPattern_Yield_Await
    Some((Builder::nop, "nop")),
    // BindingElement_Yield_Await -> BindingPattern_Yield_Await Initializer_In_Yield_Await
    Some((Builder::assignment_pattern, "assignment_pattern")),
    // StatementList_Yield_Await_Return -> StatementListItem_Yield_Await_Return
    Some((Builder::create_list, "create_list")),
    // StatementList_Yield_Await_Return -> StatementList_Yield_Await_Return StatementListItem_Yield_Await_Return
    Some((Builder::append_to_list, "append_to_list")),
    // MethodDefinition -> ClassElementName LPAREN UniqueFormalParameters RPAREN LBRACE FunctionBody RBRACE
    Some((Builder::method_definition, "method_definition")),
    // MethodDefinition -> GeneratorMethod
    Some((Builder::nop, "nop")),
    // MethodDefinition -> AsyncMethod
    Some((Builder::nop, "nop")),
    // MethodDefinition -> AsyncGeneratorMethod
    Some((Builder::nop, "nop")),
    // MethodDefinition -> GET ClassElementName LPAREN RPAREN LBRACE FunctionBody RBRACE
    Some((Builder::method_definition_get, "method_definition_get")),
    // MethodDefinition -> SET ClassElementName LPAREN PropertySetParameterList RPAREN LBRACE FunctionBody RBRACE
    Some((Builder::method_definition_set, "method_definition_set")),
    // FieldDefinition -> ClassElementName
    Some((Builder::property_definition, "property_definition")),
    // FieldDefinition -> ClassElementName Initializer_In
    Some((
        Builder::property_definition_value,
        "property_definition_value",
    )),
    // ClassStaticBlock -> STATIC LBRACE ClassStaticBlockBody RBRACE
    Some((Builder::static_block, "static_block")),
    // BindingRestProperty_Await -> ELLIPSIS BindingIdentifier_Await
    Some((Builder::rest_element, "rest_element")),
    // BindingPropertyList_Await -> BindingProperty_Await
    Some((Builder::create_list, "create_list")),
    // BindingPropertyList_Await -> BindingPropertyList_Await COMMA BindingProperty_Await
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // BindingElementList_Await -> BindingElisionElement_Await
    Some((Builder::nop, "nop")),
    // BindingElementList_Await -> BindingElementList_Await COMMA BindingElisionElement_Await
    Some((Builder::concat_csv_arrays, "concat_csv_arrays")),
    // MethodDefinition_Await -> ClassElementName_Await LPAREN UniqueFormalParameters RPAREN LBRACE FunctionBody RBRACE
    Some((Builder::method_definition, "method_definition")),
    // MethodDefinition_Await -> GeneratorMethod_Await
    Some((Builder::nop, "nop")),
    // MethodDefinition_Await -> AsyncMethod_Await
    Some((Builder::nop, "nop")),
    // MethodDefinition_Await -> AsyncGeneratorMethod_Await
    Some((Builder::nop, "nop")),
    // MethodDefinition_Await -> GET ClassElementName_Await LPAREN RPAREN LBRACE FunctionBody RBRACE
    Some((Builder::method_definition_get, "method_definition_get")),
    // MethodDefinition_Await -> SET ClassElementName_Await LPAREN PropertySetParameterList RPAREN LBRACE FunctionBody RBRACE
    Some((Builder::method_definition_set, "method_definition_set")),
    // FieldDefinition_Await -> ClassElementName_Await
    Some((Builder::property_definition, "property_definition")),
    // FieldDefinition_Await -> ClassElementName_Await Initializer_In_Await
    Some((
        Builder::property_definition_value,
        "property_definition_value",
    )),
    // _FALSY_SHORT_CIRCUIT_ -> (empty)
    Some((Builder::nop, "nop")),
    // BitwiseXORExpression_In_Await -> BitwiseANDExpression_In_Await
    Some((Builder::nop, "nop")),
    // BitwiseXORExpression_In_Await -> BitwiseXORExpression_In_Await BIT_XOR BitwiseANDExpression_In_Await
    Some((Builder::binary_expression, "binary_expression")),
    // IdentifierReference_Await -> Identifier
    Some((Builder::nop, "nop")),
    // IdentifierReference_Await -> YIELD
    Some((Builder::identifier, "identifier")),
    // Literal -> NullLiteral
    Some((Builder::nop, "nop")),
    // Literal -> BooleanLiteral
    Some((Builder::nop, "nop")),
    // Literal -> NUMERIC_LITERAL
    Some((Builder::numeric_literal, "numeric_literal")),
    // Literal -> STRING_LITERAL
    Some((Builder::string_literal, "string_literal")),
    // ArrayLiteral_Await -> LBRACK RBRACK
    Some((Builder::array_expression_empty, "array_expression_empty")),
    // ArrayLiteral_Await -> LBRACK Elision RBRACK
    Some((Builder::array_expression, "array_expression")),
    // ArrayLiteral_Await -> LBRACK ElementList_Await RBRACK
    Some((Builder::array_expression, "array_expression")),
    // ArrayLiteral_Await -> LBRACK ElementList_Await COMMA RBRACK
    Some((Builder::array_expression_comma, "array_expression_comma")),
    // ArrayLiteral_Await -> LBRACK ElementList_Await COMMA Elision RBRACK
    Some((
        Builder::array_expression_comma_elision,
        "array_expression_comma_elision",
    )),
    // ObjectLiteral_Await -> LBRACE RBRACE
    Some((Builder::object_expression_empty, "object_expression_empty")),
    // ObjectLiteral_Await -> LBRACE PropertyDefinitionList_Await RBRACE
    Some((Builder::object_expression, "object_expression")),
    // ObjectLiteral_Await -> LBRACE PropertyDefinitionList_Await COMMA RBRACE
    Some((Builder::object_expression_comma, "object_expression_comma")),
    // FunctionExpression -> FUNCTION _FUNCTION_CONTEXT_ LPAREN FormalParameters RPAREN _FUNCTION_SIGNATURE_ LBRACE FunctionBody RBRACE
    Some((
        Builder::anonymous_function_expression,
        "anonymous_function_expression",
    )),
    // FunctionExpression -> FUNCTION BindingIdentifier _FUNCTION_CONTEXT_ LPAREN FormalParameters RPAREN _FUNCTION_SIGNATURE_ LBRACE FunctionBody RBRACE
    Some((Builder::function_expression, "function_expression")),
    // ClassExpression_Await -> CLASS ClassTail_Await
    Some((
        Builder::anonymous_class_expression,
        "anonymous_class_expression",
    )),
    // ClassExpression_Await -> CLASS BindingIdentifier_Await ClassTail_Await
    Some((Builder::class_expression, "class_expression")),
    // GeneratorExpression -> FUNCTION MUL LPAREN FormalParameters_Yield RPAREN LBRACE GeneratorBody RBRACE
    Some((
        Builder::anonymous_generator_expression,
        "anonymous_generator_expression",
    )),
    // GeneratorExpression -> FUNCTION MUL BindingIdentifier_Yield LPAREN FormalParameters_Yield RPAREN LBRACE GeneratorBody RBRACE
    Some((Builder::generator_expression, "generator_expression")),
    // AsyncFunctionExpression -> ASYNC (!LINE_TERMINATOR_SEQUENCE) FUNCTION LPAREN FormalParameters_Await RPAREN LBRACE AsyncFunctionBody RBRACE
    Some((
        Builder::anonymous_async_function_expression,
        "anonymous_async_function_expression",
    )),
    // AsyncFunctionExpression -> ASYNC (!LINE_TERMINATOR_SEQUENCE) FUNCTION BindingIdentifier_Await LPAREN FormalParameters_Await RPAREN LBRACE AsyncFunctionBody RBRACE
    Some((
        Builder::async_function_expression,
        "async_function_expression",
    )),
    // AsyncGeneratorExpression -> ASYNC (!LINE_TERMINATOR_SEQUENCE) FUNCTION MUL LPAREN FormalParameters_Yield_Await RPAREN LBRACE AsyncGeneratorBody RBRACE
    Some((
        Builder::anonymous_async_generator_expression,
        "anonymous_async_generator_expression",
    )),
    // AsyncGeneratorExpression -> ASYNC (!LINE_TERMINATOR_SEQUENCE) FUNCTION MUL BindingIdentifier_Yield_Await LPAREN FormalParameters_Yield_Await RPAREN LBRACE AsyncGeneratorBody RBRACE
    Some((
        Builder::async_generator_expression,
        "async_generator_expression",
    )),
    // TemplateLiteral_Await -> NO_SUBSTITUTION_TEMPLATE
    Some((
        Builder::template_literal_no_subst,
        "template_literal_no_subst",
    )),
    // TemplateLiteral_Await -> SubstitutionTemplate_Await
    Some((Builder::nop, "nop")),
    // NewTarget -> NEW DOT TARGET
    Some((Builder::new_target, "new_target")),
    // ImportMeta -> IMPORT DOT META
    Some((Builder::import_meta, "import_meta")),
    // TemplateSpans_Await_Tagged -> TEMPLATE_TAIL
    Some((Builder::template_spans_tail, "template_spans_tail")),
    // TemplateSpans_Await_Tagged -> TemplateMiddleList_Await_Tagged TEMPLATE_TAIL
    Some((Builder::template_spans_append, "template_spans_append")),
    // AssignmentExpression_Await -> ConditionalExpression_Await
    Some((Builder::nop, "nop")),
    // AssignmentExpression_Await -> ArrowFunction_Await
    Some((Builder::nop, "nop")),
    // AssignmentExpression_Await -> AsyncArrowFunction_Await
    Some((Builder::nop, "nop")),
    // AssignmentExpression_Await -> LeftHandSideExpression_Await ASSIGN AssignmentExpression_Await
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression_Await -> LeftHandSideExpression_Await AssignmentOperator AssignmentExpression_Await
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression_Await -> LeftHandSideExpression_Await AND_ASSIGN _FALSY_SHORT_CIRCUIT_ASSIGNMENT_ AssignmentExpression_Await
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression_Await -> LeftHandSideExpression_Await OR_ASSIGN _TRUTHY_SHORT_CIRCUIT_ASSIGNMENT_ AssignmentExpression_Await
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression_Await -> LeftHandSideExpression_Await NULLISH_ASSIGN _NULLISH_SHORT_CIRCUIT_ASSIGNMENT_ AssignmentExpression_Await
    Some((Builder::assignment_expression, "assignment_expression")),
    // VariableDeclaration_Await -> BindingIdentifier_Await
    Some((Builder::variable_declarator, "variable_declarator")),
    // VariableDeclaration_Await -> BindingIdentifier_Await Initializer_Await
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // VariableDeclaration_Await -> BindingPattern_Await Initializer_Await
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // BindingList_Await -> LexicalBinding_Await
    Some((Builder::create_list, "create_list")),
    // BindingList_Await -> BindingList_Await COMMA LexicalBinding_Await
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // CaseClause_Await -> CASE Expression_In_Await COLON
    Some((
        Builder::switch_case_no_consequent,
        "switch_case_no_consequent",
    )),
    // CaseClause_Await -> CASE Expression_In_Await COLON StatementList_Await
    Some((Builder::switch_case, "switch_case")),
    // BindingProperty -> SingleNameBinding
    Some((Builder::either_right, "either_right")),
    // BindingProperty -> PropertyName COLON BindingElement
    Some((Builder::property_value, "property_value")),
    // BindingElisionElement -> BindingElement
    Some((Builder::create_array, "create_array")),
    // BindingElisionElement -> Elision BindingElement
    Some((Builder::append_to_array, "append_to_array")),
    // LogicalANDExpression_In -> BitwiseORExpression_In
    Some((Builder::nop, "nop")),
    // LogicalANDExpression_In -> LogicalANDExpression_In AND _FALSY_SHORT_CIRCUIT_ BitwiseORExpression_In
    Some((Builder::logical_expression, "logical_expression")),
    // CoalesceExpressionHead_In -> CoalesceExpression_In
    Some((Builder::nop, "nop")),
    // CoalesceExpressionHead_In -> BitwiseORExpression_In
    Some((Builder::nop, "nop")),
    // BitwiseORExpression_In -> BitwiseXORExpression_In
    Some((Builder::nop, "nop")),
    // BitwiseORExpression_In -> BitwiseORExpression_In BIT_OR BitwiseXORExpression_In
    Some((Builder::binary_expression, "binary_expression")),
    // PrimaryExpression -> THIS
    Some((Builder::this_expression, "this_expression")),
    // PrimaryExpression -> IdentifierReference
    Some((Builder::nop, "nop")),
    // PrimaryExpression -> Literal
    Some((Builder::nop, "nop")),
    // PrimaryExpression -> ArrayLiteral
    Some((Builder::nop, "nop")),
    // PrimaryExpression -> ObjectLiteral
    Some((Builder::nop, "nop")),
    // PrimaryExpression -> FunctionExpression
    Some((Builder::nop, "nop")),
    // PrimaryExpression -> ClassExpression
    Some((Builder::nop, "nop")),
    // PrimaryExpression -> GeneratorExpression
    Some((Builder::nop, "nop")),
    // PrimaryExpression -> AsyncFunctionExpression
    Some((Builder::nop, "nop")),
    // PrimaryExpression -> AsyncGeneratorExpression
    Some((Builder::nop, "nop")),
    // PrimaryExpression -> REGULAR_EXPRESSION_LITERAL
    Some((Builder::regexp_literal, "regexp_literal")),
    // PrimaryExpression -> TemplateLiteral
    Some((Builder::nop, "nop")),
    // PrimaryExpression -> CoverParenthesizedExpressionAndArrowParameterList
    Some((
        Builder::primary_expression_cpeaapl,
        "primary_expression_cpeaapl",
    )),
    // SuperProperty -> SUPER LBRACK Expression_In RBRACK
    Some((Builder::super_property_computed, "super_property_computed")),
    // SuperProperty -> SUPER DOT KeywordOrIdentifierName
    Some((Builder::super_property, "super_property")),
    // ArgumentList -> AssignmentExpression_In
    Some((Builder::argument_list, "argument_list")),
    // ArgumentList -> ELLIPSIS AssignmentExpression_In
    Some((Builder::argument_list_rest, "argument_list_rest")),
    // ArgumentList -> ArgumentList COMMA AssignmentExpression_In
    Some((Builder::argument_list_append, "argument_list_append")),
    // ArgumentList -> ArgumentList COMMA ELLIPSIS AssignmentExpression_In
    Some((
        Builder::argument_list_append_rest,
        "argument_list_append_rest",
    )),
    // SubstitutionTemplate_Tagged -> TEMPLATE_HEAD Expression_In TemplateSpans_Tagged
    Some((Builder::template_literal, "template_literal")),
    // ShortCircuitExpression -> LogicalORExpression
    Some((Builder::nop, "nop")),
    // ShortCircuitExpression -> CoalesceExpression
    Some((Builder::nop, "nop")),
    // ConciseBody -> (?![LBRACE]) ExpressionBody
    Some((Builder::nop, "nop")),
    // ConciseBody -> LBRACE FunctionBody RBRACE
    Some((Builder::function_body_block, "function_body_block")),
    // AsyncConciseBody -> (?![LBRACE]) ExpressionBody_Await
    Some((Builder::nop, "nop")),
    // AsyncConciseBody -> LBRACE AsyncFunctionBody RBRACE
    Some((Builder::function_body_block, "function_body_block")),
    // SingleNameBinding -> BindingIdentifier
    Some((Builder::single_name_binding, "single_name_binding")),
    // SingleNameBinding -> BindingIdentifier Initializer_In
    Some((
        Builder::single_name_binding_init,
        "single_name_binding_init",
    )),
    // Statement_Return -> BlockStatement_Return
    Some((Builder::nop, "nop")),
    // Statement_Return -> VariableStatement
    Some((Builder::nop, "nop")),
    // Statement_Return -> EmptyStatement
    Some((Builder::nop, "nop")),
    // Statement_Return -> ExpressionStatement
    Some((Builder::nop, "nop")),
    // Statement_Return -> IfStatement_Return
    Some((Builder::nop, "nop")),
    // Statement_Return -> BreakableStatement_Return
    Some((Builder::nop, "nop")),
    // Statement_Return -> ContinueStatement
    Some((Builder::nop, "nop")),
    // Statement_Return -> BreakStatement
    Some((Builder::nop, "nop")),
    // Statement_Return -> ReturnStatement
    Some((Builder::nop, "nop")),
    // Statement_Return -> WithStatement_Return
    Some((Builder::nop, "nop")),
    // Statement_Return -> LabelledStatement_Return
    Some((Builder::nop, "nop")),
    // Statement_Return -> ThrowStatement
    Some((Builder::nop, "nop")),
    // Statement_Return -> TryStatement_Return
    Some((Builder::nop, "nop")),
    // Statement_Return -> DebuggerStatement
    Some((Builder::nop, "nop")),
    // ObjectBindingPattern_Yield -> LBRACE RBRACE
    Some((Builder::object_pattern_empty, "object_pattern_empty")),
    // ObjectBindingPattern_Yield -> LBRACE BindingRestProperty_Yield RBRACE
    Some((Builder::object_pattern_rest, "object_pattern_rest")),
    // ObjectBindingPattern_Yield -> LBRACE BindingPropertyList_Yield RBRACE
    Some((Builder::object_pattern, "object_pattern")),
    // ObjectBindingPattern_Yield -> LBRACE BindingPropertyList_Yield COMMA RBRACE
    Some((Builder::object_pattern_comma, "object_pattern_comma")),
    // ObjectBindingPattern_Yield -> LBRACE BindingPropertyList_Yield COMMA BindingRestProperty_Yield RBRACE
    Some((
        Builder::object_pattern_comma_rest,
        "object_pattern_comma_rest",
    )),
    // ArrayBindingPattern_Yield -> LBRACK RBRACK
    Some((Builder::array_pattern_empty, "array_pattern_empty")),
    // ArrayBindingPattern_Yield -> LBRACK Elision RBRACK
    Some((Builder::array_pattern, "array_pattern")),
    // ArrayBindingPattern_Yield -> LBRACK BindingRestElement_Yield RBRACK
    Some((Builder::array_pattern_rest, "array_pattern_rest")),
    // ArrayBindingPattern_Yield -> LBRACK Elision BindingRestElement_Yield RBRACK
    Some((
        Builder::array_pattern_elision_rest,
        "array_pattern_elision_rest",
    )),
    // ArrayBindingPattern_Yield -> LBRACK BindingElementList_Yield RBRACK
    Some((Builder::array_pattern, "array_pattern")),
    // ArrayBindingPattern_Yield -> LBRACK BindingElementList_Yield COMMA RBRACK
    Some((Builder::array_pattern_comma, "array_pattern_comma")),
    // ArrayBindingPattern_Yield -> LBRACK BindingElementList_Yield COMMA Elision RBRACK
    Some((Builder::array_pattern_concat, "array_pattern_concat")),
    // ArrayBindingPattern_Yield -> LBRACK BindingElementList_Yield COMMA BindingRestElement_Yield RBRACK
    Some((
        Builder::array_pattern_comma_rest,
        "array_pattern_comma_rest",
    )),
    // ArrayBindingPattern_Yield -> LBRACK BindingElementList_Yield COMMA Elision BindingRestElement_Yield RBRACK
    Some((
        Builder::array_pattern_concat_rest,
        "array_pattern_concat_rest",
    )),
    // SingleNameBinding_Yield -> BindingIdentifier_Yield
    Some((Builder::single_name_binding, "single_name_binding")),
    // SingleNameBinding_Yield -> BindingIdentifier_Yield Initializer_In_Yield
    Some((
        Builder::single_name_binding_init,
        "single_name_binding_init",
    )),
    // Initializer_In_Yield -> ASSIGN AssignmentExpression_In_Yield
    Some((Builder::initializer, "initializer")),
    // StatementListItem_Yield_Return -> Statement_Yield_Return
    Some((Builder::nop, "nop")),
    // StatementListItem_Yield_Return -> Declaration_Yield
    Some((Builder::nop, "nop")),
    // SingleNameBinding_Await -> BindingIdentifier_Await
    Some((Builder::single_name_binding, "single_name_binding")),
    // SingleNameBinding_Await -> BindingIdentifier_Await Initializer_In_Await
    Some((
        Builder::single_name_binding_init,
        "single_name_binding_init",
    )),
    // StatementListItem_Await_Return -> Statement_Await_Return
    Some((Builder::nop, "nop")),
    // StatementListItem_Await_Return -> Declaration_Await
    Some((Builder::nop, "nop")),
    // ObjectBindingPattern_Yield_Await -> LBRACE RBRACE
    Some((Builder::object_pattern_empty, "object_pattern_empty")),
    // ObjectBindingPattern_Yield_Await -> LBRACE BindingRestProperty_Yield_Await RBRACE
    Some((Builder::object_pattern_rest, "object_pattern_rest")),
    // ObjectBindingPattern_Yield_Await -> LBRACE BindingPropertyList_Yield_Await RBRACE
    Some((Builder::object_pattern, "object_pattern")),
    // ObjectBindingPattern_Yield_Await -> LBRACE BindingPropertyList_Yield_Await COMMA RBRACE
    Some((Builder::object_pattern_comma, "object_pattern_comma")),
    // ObjectBindingPattern_Yield_Await -> LBRACE BindingPropertyList_Yield_Await COMMA BindingRestProperty_Yield_Await RBRACE
    Some((
        Builder::object_pattern_comma_rest,
        "object_pattern_comma_rest",
    )),
    // ArrayBindingPattern_Yield_Await -> LBRACK RBRACK
    Some((Builder::array_pattern_empty, "array_pattern_empty")),
    // ArrayBindingPattern_Yield_Await -> LBRACK Elision RBRACK
    Some((Builder::array_pattern, "array_pattern")),
    // ArrayBindingPattern_Yield_Await -> LBRACK BindingRestElement_Yield_Await RBRACK
    Some((Builder::array_pattern_rest, "array_pattern_rest")),
    // ArrayBindingPattern_Yield_Await -> LBRACK Elision BindingRestElement_Yield_Await RBRACK
    Some((
        Builder::array_pattern_elision_rest,
        "array_pattern_elision_rest",
    )),
    // ArrayBindingPattern_Yield_Await -> LBRACK BindingElementList_Yield_Await RBRACK
    Some((Builder::array_pattern, "array_pattern")),
    // ArrayBindingPattern_Yield_Await -> LBRACK BindingElementList_Yield_Await COMMA RBRACK
    Some((Builder::array_pattern_comma, "array_pattern_comma")),
    // ArrayBindingPattern_Yield_Await -> LBRACK BindingElementList_Yield_Await COMMA Elision RBRACK
    Some((Builder::array_pattern_concat, "array_pattern_concat")),
    // ArrayBindingPattern_Yield_Await -> LBRACK BindingElementList_Yield_Await COMMA BindingRestElement_Yield_Await RBRACK
    Some((
        Builder::array_pattern_comma_rest,
        "array_pattern_comma_rest",
    )),
    // ArrayBindingPattern_Yield_Await -> LBRACK BindingElementList_Yield_Await COMMA Elision BindingRestElement_Yield_Await RBRACK
    Some((
        Builder::array_pattern_concat_rest,
        "array_pattern_concat_rest",
    )),
    // SingleNameBinding_Yield_Await -> BindingIdentifier_Yield_Await
    Some((Builder::single_name_binding, "single_name_binding")),
    // SingleNameBinding_Yield_Await -> BindingIdentifier_Yield_Await Initializer_In_Yield_Await
    Some((
        Builder::single_name_binding_init,
        "single_name_binding_init",
    )),
    // Initializer_In_Yield_Await -> ASSIGN AssignmentExpression_In_Yield_Await
    Some((Builder::initializer, "initializer")),
    // StatementListItem_Yield_Await_Return -> Statement_Yield_Await_Return
    Some((Builder::nop, "nop")),
    // StatementListItem_Yield_Await_Return -> Declaration_Yield_Await
    Some((Builder::nop, "nop")),
    // ClassElementName -> PropertyName
    Some((Builder::nop, "nop")),
    // ClassElementName -> PRIVATE_IDENTIFIER
    Some((
        Builder::class_element_name_private,
        "class_element_name_private",
    )),
    // UniqueFormalParameters -> FormalParameters
    Some((Builder::nop, "nop")),
    // GeneratorMethod -> MUL ClassElementName LPAREN UniqueFormalParameters_Yield RPAREN LBRACE GeneratorBody RBRACE
    Some((
        Builder::method_definition_generator,
        "method_definition_generator",
    )),
    // AsyncMethod -> ASYNC (!LINE_TERMINATOR_SEQUENCE) ClassElementName LPAREN UniqueFormalParameters_Await RPAREN LBRACE AsyncFunctionBody RBRACE
    Some((Builder::method_definition_async, "method_definition_async")),
    // AsyncGeneratorMethod -> ASYNC (!LINE_TERMINATOR_SEQUENCE) MUL ClassElementName LPAREN UniqueFormalParameters_Yield_Await RPAREN LBRACE AsyncGeneratorBody RBRACE
    Some((
        Builder::method_definition_async_generator,
        "method_definition_async_generator",
    )),
    // PropertySetParameterList -> FormalParameter
    Some((Builder::create_list, "create_list")),
    // ClassStaticBlockBody -> ClassStaticBlockStatementList
    Some((Builder::nop, "nop")),
    // BindingProperty_Await -> SingleNameBinding_Await
    Some((Builder::either_right, "either_right")),
    // BindingProperty_Await -> PropertyName_Await COLON BindingElement_Await
    Some((Builder::property_value, "property_value")),
    // BindingElisionElement_Await -> BindingElement_Await
    Some((Builder::create_array, "create_array")),
    // BindingElisionElement_Await -> Elision BindingElement_Await
    Some((Builder::append_to_array, "append_to_array")),
    // ClassElementName_Await -> PropertyName_Await
    Some((Builder::nop, "nop")),
    // ClassElementName_Await -> PRIVATE_IDENTIFIER
    Some((
        Builder::class_element_name_private,
        "class_element_name_private",
    )),
    // GeneratorMethod_Await -> MUL ClassElementName_Await LPAREN UniqueFormalParameters_Yield RPAREN LBRACE GeneratorBody RBRACE
    Some((
        Builder::method_definition_generator,
        "method_definition_generator",
    )),
    // AsyncMethod_Await -> ASYNC (!LINE_TERMINATOR_SEQUENCE) ClassElementName_Await LPAREN UniqueFormalParameters_Await RPAREN LBRACE AsyncFunctionBody RBRACE
    Some((Builder::method_definition_async, "method_definition_async")),
    // AsyncGeneratorMethod_Await -> ASYNC (!LINE_TERMINATOR_SEQUENCE) MUL ClassElementName_Await LPAREN UniqueFormalParameters_Yield_Await RPAREN LBRACE AsyncGeneratorBody RBRACE
    Some((
        Builder::method_definition_async_generator,
        "method_definition_async_generator",
    )),
    // BitwiseANDExpression_In_Await -> EqualityExpression_In_Await
    Some((Builder::nop, "nop")),
    // BitwiseANDExpression_In_Await -> BitwiseANDExpression_In_Await BIT_AND EqualityExpression_In_Await
    Some((Builder::binary_expression, "binary_expression")),
    // NullLiteral -> NULL
    Some((Builder::null_literal, "null_literal")),
    // BooleanLiteral -> TRUE
    Some((Builder::boolean_literal_true, "boolean_literal_true")),
    // BooleanLiteral -> FALSE
    Some((Builder::boolean_literal_false, "boolean_literal_false")),
    // ElementList_Await -> AssignmentExpression_In_Await
    Some((Builder::create_array, "create_array")),
    // ElementList_Await -> Elision AssignmentExpression_In_Await
    Some((Builder::append_to_array, "append_to_array")),
    // ElementList_Await -> SpreadElement_Await
    Some((Builder::create_array, "create_array")),
    // ElementList_Await -> Elision SpreadElement_Await
    Some((Builder::append_to_array, "append_to_array")),
    // ElementList_Await -> ElementList_Await COMMA AssignmentExpression_In_Await
    Some((Builder::append_to_csv_array, "append_to_csv_array")),
    // ElementList_Await -> ElementList_Await COMMA Elision AssignmentExpression_In_Await
    Some((Builder::concat_and_append_array, "concat_and_append_array")),
    // ElementList_Await -> ElementList_Await COMMA SpreadElement_Await
    Some((Builder::append_to_csv_array, "append_to_csv_array")),
    // ElementList_Await -> ElementList_Await COMMA Elision SpreadElement_Await
    Some((Builder::concat_and_append_array, "concat_and_append_array")),
    // PropertyDefinitionList_Await -> PropertyDefinition_Await
    Some((Builder::create_list, "create_list")),
    // PropertyDefinitionList_Await -> PropertyDefinitionList_Await COMMA PropertyDefinition_Await
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // SubstitutionTemplate_Await -> TEMPLATE_HEAD Expression_In_Await TemplateSpans_Await
    Some((Builder::template_literal, "template_literal")),
    // TemplateMiddleList_Await_Tagged -> TEMPLATE_MIDDLE Expression_In_Await
    Some((Builder::template_middle_list, "template_middle_list")),
    // TemplateMiddleList_Await_Tagged -> TemplateMiddleList_Await_Tagged TEMPLATE_MIDDLE Expression_In_Await
    Some((
        Builder::template_middle_list_append,
        "template_middle_list_append",
    )),
    // ConditionalExpression_Await -> ShortCircuitExpression_Await
    Some((Builder::nop, "nop")),
    // ConditionalExpression_Await -> ShortCircuitExpression_Await CONDITIONAL _THEN_BLOCK_ AssignmentExpression_In_Await COLON _ELSE_BLOCK_ AssignmentExpression_Await
    Some((Builder::conditional_expression, "conditional_expression")),
    // ArrowFunction_Await -> ArrowParameters_Await (!LINE_TERMINATOR_SEQUENCE) ARROW ConciseBody
    Some((
        Builder::arrow_function_expression,
        "arrow_function_expression",
    )),
    // AsyncArrowFunction_Await -> ASYNC (!LINE_TERMINATOR_SEQUENCE) AsyncArrowBindingIdentifier (!LINE_TERMINATOR_SEQUENCE) ARROW AsyncConciseBody
    Some((
        Builder::async_arrow_function_expression_single_param,
        "async_arrow_function_expression_single_param",
    )),
    // AsyncArrowFunction_Await -> CoverCallExpressionAndAsyncArrowHead_Await (!LINE_TERMINATOR_SEQUENCE) ARROW AsyncConciseBody
    Some((
        Builder::async_arrow_function_expression,
        "async_arrow_function_expression",
    )),
    // Initializer_Await -> ASSIGN AssignmentExpression_Await
    Some((Builder::initializer, "initializer")),
    // LexicalBinding_Await -> BindingIdentifier_Await
    Some((Builder::variable_declarator, "variable_declarator")),
    // LexicalBinding_Await -> BindingIdentifier_Await Initializer_Await
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // LexicalBinding_Await -> BindingPattern_Await Initializer_Await
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // PropertyName -> LiteralPropertyName
    Some((Builder::nop, "nop")),
    // PropertyName -> ComputedPropertyName
    Some((Builder::nop, "nop")),
    // BitwiseXORExpression_In -> BitwiseANDExpression_In
    Some((Builder::nop, "nop")),
    // BitwiseXORExpression_In -> BitwiseXORExpression_In BIT_XOR BitwiseANDExpression_In
    Some((Builder::binary_expression, "binary_expression")),
    // IdentifierReference -> Identifier
    Some((Builder::nop, "nop")),
    // IdentifierReference -> YIELD
    Some((Builder::identifier, "identifier")),
    // IdentifierReference -> AWAIT
    Some((Builder::identifier, "identifier")),
    // ArrayLiteral -> LBRACK RBRACK
    Some((Builder::array_expression_empty, "array_expression_empty")),
    // ArrayLiteral -> LBRACK Elision RBRACK
    Some((Builder::array_expression, "array_expression")),
    // ArrayLiteral -> LBRACK ElementList RBRACK
    Some((Builder::array_expression, "array_expression")),
    // ArrayLiteral -> LBRACK ElementList COMMA RBRACK
    Some((Builder::array_expression_comma, "array_expression_comma")),
    // ArrayLiteral -> LBRACK ElementList COMMA Elision RBRACK
    Some((
        Builder::array_expression_comma_elision,
        "array_expression_comma_elision",
    )),
    // ObjectLiteral -> LBRACE RBRACE
    Some((Builder::object_expression_empty, "object_expression_empty")),
    // ObjectLiteral -> LBRACE PropertyDefinitionList RBRACE
    Some((Builder::object_expression, "object_expression")),
    // ObjectLiteral -> LBRACE PropertyDefinitionList COMMA RBRACE
    Some((Builder::object_expression_comma, "object_expression_comma")),
    // ClassExpression -> CLASS ClassTail
    Some((
        Builder::anonymous_class_expression,
        "anonymous_class_expression",
    )),
    // ClassExpression -> CLASS BindingIdentifier ClassTail
    Some((Builder::class_expression, "class_expression")),
    // TemplateLiteral -> NO_SUBSTITUTION_TEMPLATE
    Some((
        Builder::template_literal_no_subst,
        "template_literal_no_subst",
    )),
    // TemplateLiteral -> SubstitutionTemplate
    Some((Builder::nop, "nop")),
    // TemplateSpans_Tagged -> TEMPLATE_TAIL
    Some((Builder::template_spans_tail, "template_spans_tail")),
    // TemplateSpans_Tagged -> TemplateMiddleList_Tagged TEMPLATE_TAIL
    Some((Builder::template_spans_append, "template_spans_append")),
    // LogicalORExpression -> LogicalANDExpression
    Some((Builder::nop, "nop")),
    // LogicalORExpression -> LogicalORExpression OR _TRUTHY_SHORT_CIRCUIT_ LogicalANDExpression
    Some((Builder::logical_expression, "logical_expression")),
    // CoalesceExpression -> CoalesceExpressionHead NULLISH _NULLISH_SHORT_CIRCUIT_ BitwiseORExpression
    Some((Builder::logical_expression, "logical_expression")),
    // ExpressionBody -> AssignmentExpression
    Some((Builder::nop, "nop")),
    // ExpressionBody_Await -> AssignmentExpression_Await
    Some((Builder::nop, "nop")),
    // BlockStatement_Return -> Block_Return
    Some((Builder::nop, "nop")),
    // IfStatement_Return -> IF LPAREN Expression_In RPAREN _THEN_BLOCK_ Statement_Return ELSE _ELSE_BLOCK_ Statement_Return
    Some((Builder::if_else_statement, "if_else_statement")),
    // IfStatement_Return -> IF LPAREN Expression_In RPAREN _THEN_BLOCK_ Statement_Return (?![ELSE])
    Some((Builder::if_statement, "if_statement")),
    // BreakableStatement_Return -> IterationStatement_Return
    Some((Builder::nop, "nop")),
    // BreakableStatement_Return -> SwitchStatement_Return
    Some((Builder::nop, "nop")),
    // ReturnStatement -> RETURN SEMICOLON
    Some((
        Builder::return_statement_no_argument,
        "return_statement_no_argument",
    )),
    // ReturnStatement -> RETURN (!LINE_TERMINATOR_SEQUENCE) Expression_In SEMICOLON
    Some((Builder::return_statement, "return_statement")),
    // WithStatement_Return -> WITH LPAREN Expression_In RPAREN Statement_Return
    Some((Builder::with_statement, "with_statement")),
    // LabelledStatement_Return -> LabelIdentifier COLON LabelledItem_Return
    Some((Builder::labeled_statement, "labeled_statement")),
    // TryStatement_Return -> TRY Block_Return Catch_Return
    Some((Builder::try_catch_statement, "try_catch_statement")),
    // TryStatement_Return -> TRY Block_Return Finally_Return
    Some((Builder::try_finally_statement, "try_finally_statement")),
    // TryStatement_Return -> TRY Block_Return Catch_Return Finally_Return
    Some((
        Builder::try_catch_finally_statement,
        "try_catch_finally_statement",
    )),
    // BindingRestProperty_Yield -> ELLIPSIS BindingIdentifier_Yield
    Some((Builder::rest_element, "rest_element")),
    // BindingPropertyList_Yield -> BindingProperty_Yield
    Some((Builder::create_list, "create_list")),
    // BindingPropertyList_Yield -> BindingPropertyList_Yield COMMA BindingProperty_Yield
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // BindingElementList_Yield -> BindingElisionElement_Yield
    Some((Builder::nop, "nop")),
    // BindingElementList_Yield -> BindingElementList_Yield COMMA BindingElisionElement_Yield
    Some((Builder::concat_csv_arrays, "concat_csv_arrays")),
    // AssignmentExpression_In_Yield -> ConditionalExpression_In_Yield
    Some((Builder::nop, "nop")),
    // AssignmentExpression_In_Yield -> YieldExpression_In
    Some((Builder::nop, "nop")),
    // AssignmentExpression_In_Yield -> ArrowFunction_In_Yield
    Some((Builder::nop, "nop")),
    // AssignmentExpression_In_Yield -> AsyncArrowFunction_In_Yield
    Some((Builder::nop, "nop")),
    // AssignmentExpression_In_Yield -> LeftHandSideExpression_Yield ASSIGN AssignmentExpression_In_Yield
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression_In_Yield -> LeftHandSideExpression_Yield AssignmentOperator AssignmentExpression_In_Yield
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression_In_Yield -> LeftHandSideExpression_Yield AND_ASSIGN _FALSY_SHORT_CIRCUIT_ASSIGNMENT_ AssignmentExpression_In_Yield
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression_In_Yield -> LeftHandSideExpression_Yield OR_ASSIGN _TRUTHY_SHORT_CIRCUIT_ASSIGNMENT_ AssignmentExpression_In_Yield
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression_In_Yield -> LeftHandSideExpression_Yield NULLISH_ASSIGN _NULLISH_SHORT_CIRCUIT_ASSIGNMENT_ AssignmentExpression_In_Yield
    Some((Builder::assignment_expression, "assignment_expression")),
    // Statement_Yield_Return -> BlockStatement_Yield_Return
    Some((Builder::nop, "nop")),
    // Statement_Yield_Return -> VariableStatement_Yield
    Some((Builder::nop, "nop")),
    // Statement_Yield_Return -> EmptyStatement
    Some((Builder::nop, "nop")),
    // Statement_Yield_Return -> ExpressionStatement_Yield
    Some((Builder::nop, "nop")),
    // Statement_Yield_Return -> IfStatement_Yield_Return
    Some((Builder::nop, "nop")),
    // Statement_Yield_Return -> BreakableStatement_Yield_Return
    Some((Builder::nop, "nop")),
    // Statement_Yield_Return -> ContinueStatement_Yield
    Some((Builder::nop, "nop")),
    // Statement_Yield_Return -> BreakStatement_Yield
    Some((Builder::nop, "nop")),
    // Statement_Yield_Return -> ReturnStatement_Yield
    Some((Builder::nop, "nop")),
    // Statement_Yield_Return -> WithStatement_Yield_Return
    Some((Builder::nop, "nop")),
    // Statement_Yield_Return -> LabelledStatement_Yield_Return
    Some((Builder::nop, "nop")),
    // Statement_Yield_Return -> ThrowStatement_Yield
    Some((Builder::nop, "nop")),
    // Statement_Yield_Return -> TryStatement_Yield_Return
    Some((Builder::nop, "nop")),
    // Statement_Yield_Return -> DebuggerStatement
    Some((Builder::nop, "nop")),
    // Declaration_Yield -> HoistableDeclaration_Yield
    Some((Builder::nop, "nop")),
    // Declaration_Yield -> ClassDeclaration_Yield
    Some((Builder::nop, "nop")),
    // Declaration_Yield -> LexicalDeclaration_In_Yield
    Some((Builder::nop, "nop")),
    // Statement_Await_Return -> BlockStatement_Await_Return
    Some((Builder::nop, "nop")),
    // Statement_Await_Return -> VariableStatement_Await
    Some((Builder::nop, "nop")),
    // Statement_Await_Return -> EmptyStatement
    Some((Builder::nop, "nop")),
    // Statement_Await_Return -> ExpressionStatement_Await
    Some((Builder::nop, "nop")),
    // Statement_Await_Return -> IfStatement_Await_Return
    Some((Builder::nop, "nop")),
    // Statement_Await_Return -> BreakableStatement_Await_Return
    Some((Builder::nop, "nop")),
    // Statement_Await_Return -> ContinueStatement_Await
    Some((Builder::nop, "nop")),
    // Statement_Await_Return -> BreakStatement_Await
    Some((Builder::nop, "nop")),
    // Statement_Await_Return -> ReturnStatement_Await
    Some((Builder::nop, "nop")),
    // Statement_Await_Return -> WithStatement_Await_Return
    Some((Builder::nop, "nop")),
    // Statement_Await_Return -> LabelledStatement_Await_Return
    Some((Builder::nop, "nop")),
    // Statement_Await_Return -> ThrowStatement_Await
    Some((Builder::nop, "nop")),
    // Statement_Await_Return -> TryStatement_Await_Return
    Some((Builder::nop, "nop")),
    // Statement_Await_Return -> DebuggerStatement
    Some((Builder::nop, "nop")),
    // BindingRestProperty_Yield_Await -> ELLIPSIS BindingIdentifier_Yield_Await
    Some((Builder::rest_element, "rest_element")),
    // BindingPropertyList_Yield_Await -> BindingProperty_Yield_Await
    Some((Builder::create_list, "create_list")),
    // BindingPropertyList_Yield_Await -> BindingPropertyList_Yield_Await COMMA BindingProperty_Yield_Await
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // BindingElementList_Yield_Await -> BindingElisionElement_Yield_Await
    Some((Builder::nop, "nop")),
    // BindingElementList_Yield_Await -> BindingElementList_Yield_Await COMMA BindingElisionElement_Yield_Await
    Some((Builder::concat_csv_arrays, "concat_csv_arrays")),
    // AssignmentExpression_In_Yield_Await -> ConditionalExpression_In_Yield_Await
    Some((Builder::nop, "nop")),
    // AssignmentExpression_In_Yield_Await -> YieldExpression_In_Await
    Some((Builder::nop, "nop")),
    // AssignmentExpression_In_Yield_Await -> ArrowFunction_In_Yield_Await
    Some((Builder::nop, "nop")),
    // AssignmentExpression_In_Yield_Await -> AsyncArrowFunction_In_Yield_Await
    Some((Builder::nop, "nop")),
    // AssignmentExpression_In_Yield_Await -> LeftHandSideExpression_Yield_Await ASSIGN AssignmentExpression_In_Yield_Await
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression_In_Yield_Await -> LeftHandSideExpression_Yield_Await AssignmentOperator AssignmentExpression_In_Yield_Await
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression_In_Yield_Await -> LeftHandSideExpression_Yield_Await AND_ASSIGN _FALSY_SHORT_CIRCUIT_ASSIGNMENT_ AssignmentExpression_In_Yield_Await
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression_In_Yield_Await -> LeftHandSideExpression_Yield_Await OR_ASSIGN _TRUTHY_SHORT_CIRCUIT_ASSIGNMENT_ AssignmentExpression_In_Yield_Await
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression_In_Yield_Await -> LeftHandSideExpression_Yield_Await NULLISH_ASSIGN _NULLISH_SHORT_CIRCUIT_ASSIGNMENT_ AssignmentExpression_In_Yield_Await
    Some((Builder::assignment_expression, "assignment_expression")),
    // Statement_Yield_Await_Return -> BlockStatement_Yield_Await_Return
    Some((Builder::nop, "nop")),
    // Statement_Yield_Await_Return -> VariableStatement_Yield_Await
    Some((Builder::nop, "nop")),
    // Statement_Yield_Await_Return -> EmptyStatement
    Some((Builder::nop, "nop")),
    // Statement_Yield_Await_Return -> ExpressionStatement_Yield_Await
    Some((Builder::nop, "nop")),
    // Statement_Yield_Await_Return -> IfStatement_Yield_Await_Return
    Some((Builder::nop, "nop")),
    // Statement_Yield_Await_Return -> BreakableStatement_Yield_Await_Return
    Some((Builder::nop, "nop")),
    // Statement_Yield_Await_Return -> ContinueStatement_Yield_Await
    Some((Builder::nop, "nop")),
    // Statement_Yield_Await_Return -> BreakStatement_Yield_Await
    Some((Builder::nop, "nop")),
    // Statement_Yield_Await_Return -> ReturnStatement_Yield_Await
    Some((Builder::nop, "nop")),
    // Statement_Yield_Await_Return -> WithStatement_Yield_Await_Return
    Some((Builder::nop, "nop")),
    // Statement_Yield_Await_Return -> LabelledStatement_Yield_Await_Return
    Some((Builder::nop, "nop")),
    // Statement_Yield_Await_Return -> ThrowStatement_Yield_Await
    Some((Builder::nop, "nop")),
    // Statement_Yield_Await_Return -> TryStatement_Yield_Await_Return
    Some((Builder::nop, "nop")),
    // Statement_Yield_Await_Return -> DebuggerStatement
    Some((Builder::nop, "nop")),
    // Declaration_Yield_Await -> HoistableDeclaration_Yield_Await
    Some((Builder::nop, "nop")),
    // Declaration_Yield_Await -> ClassDeclaration_Yield_Await
    Some((Builder::nop, "nop")),
    // Declaration_Yield_Await -> LexicalDeclaration_In_Yield_Await
    Some((Builder::nop, "nop")),
    // UniqueFormalParameters_Yield -> FormalParameters_Yield
    Some((Builder::nop, "nop")),
    // UniqueFormalParameters_Await -> FormalParameters_Await
    Some((Builder::nop, "nop")),
    // UniqueFormalParameters_Yield_Await -> FormalParameters_Yield_Await
    Some((Builder::nop, "nop")),
    // ClassStaticBlockStatementList -> (empty)
    Some((Builder::empty_list, "empty_list")),
    // ClassStaticBlockStatementList -> StatementList_Await
    Some((Builder::nop, "nop")),
    // PropertyName_Await -> LiteralPropertyName
    Some((Builder::nop, "nop")),
    // PropertyName_Await -> ComputedPropertyName_Await
    Some((Builder::nop, "nop")),
    // EqualityExpression_In_Await -> RelationalExpression_In_Await
    Some((Builder::nop, "nop")),
    // EqualityExpression_In_Await -> EqualityExpression_In_Await EQ RelationalExpression_In_Await
    Some((Builder::binary_expression, "binary_expression")),
    // EqualityExpression_In_Await -> EqualityExpression_In_Await NE RelationalExpression_In_Await
    Some((Builder::binary_expression, "binary_expression")),
    // EqualityExpression_In_Await -> EqualityExpression_In_Await EQ_STRICT RelationalExpression_In_Await
    Some((Builder::binary_expression, "binary_expression")),
    // EqualityExpression_In_Await -> EqualityExpression_In_Await NE_STRICT RelationalExpression_In_Await
    Some((Builder::binary_expression, "binary_expression")),
    // SpreadElement_Await -> ELLIPSIS AssignmentExpression_In_Await
    Some((Builder::spread_element, "spread_element")),
    // PropertyDefinition_Await -> IdentifierReference_Await
    Some((Builder::property, "property")),
    // PropertyDefinition_Await -> CoverInitializedName_Await
    Some((
        Builder::property_cover_initialized_name,
        "property_cover_initialized_name",
    )),
    // PropertyDefinition_Await -> PropertyName_Await COLON AssignmentExpression_In_Await
    Some((Builder::property_value, "property_value")),
    // PropertyDefinition_Await -> MethodDefinition_Await
    Some((Builder::property_method, "property_method")),
    // PropertyDefinition_Await -> ELLIPSIS AssignmentExpression_In_Await
    Some((Builder::spread_element, "spread_element")),
    // TemplateSpans_Await -> TEMPLATE_TAIL
    Some((Builder::template_spans_tail, "template_spans_tail")),
    // TemplateSpans_Await -> TemplateMiddleList_Await TEMPLATE_TAIL
    Some((Builder::template_spans_append, "template_spans_append")),
    // ShortCircuitExpression_Await -> LogicalORExpression_Await
    Some((Builder::nop, "nop")),
    // ShortCircuitExpression_Await -> CoalesceExpression_Await
    Some((Builder::nop, "nop")),
    // LiteralPropertyName -> KeywordOrIdentifierName
    Some((Builder::nop, "nop")),
    // LiteralPropertyName -> STRING_LITERAL
    Some((Builder::string_literal, "string_literal")),
    // LiteralPropertyName -> NUMERIC_LITERAL
    Some((Builder::numeric_literal, "numeric_literal")),
    // ComputedPropertyName -> LBRACK AssignmentExpression_In RBRACK
    Some((Builder::computed_property_name, "computed_property_name")),
    // BitwiseANDExpression_In -> EqualityExpression_In
    Some((Builder::nop, "nop")),
    // BitwiseANDExpression_In -> BitwiseANDExpression_In BIT_AND EqualityExpression_In
    Some((Builder::binary_expression, "binary_expression")),
    // ElementList -> AssignmentExpression_In
    Some((Builder::create_array, "create_array")),
    // ElementList -> Elision AssignmentExpression_In
    Some((Builder::append_to_array, "append_to_array")),
    // ElementList -> SpreadElement
    Some((Builder::create_array, "create_array")),
    // ElementList -> Elision SpreadElement
    Some((Builder::append_to_array, "append_to_array")),
    // ElementList -> ElementList COMMA AssignmentExpression_In
    Some((Builder::append_to_csv_array, "append_to_csv_array")),
    // ElementList -> ElementList COMMA Elision AssignmentExpression_In
    Some((Builder::concat_and_append_array, "concat_and_append_array")),
    // ElementList -> ElementList COMMA SpreadElement
    Some((Builder::append_to_csv_array, "append_to_csv_array")),
    // ElementList -> ElementList COMMA Elision SpreadElement
    Some((Builder::concat_and_append_array, "concat_and_append_array")),
    // PropertyDefinitionList -> PropertyDefinition
    Some((Builder::create_list, "create_list")),
    // PropertyDefinitionList -> PropertyDefinitionList COMMA PropertyDefinition
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // SubstitutionTemplate -> TEMPLATE_HEAD Expression_In TemplateSpans
    Some((Builder::template_literal, "template_literal")),
    // TemplateMiddleList_Tagged -> TEMPLATE_MIDDLE Expression_In
    Some((Builder::template_middle_list, "template_middle_list")),
    // TemplateMiddleList_Tagged -> TemplateMiddleList_Tagged TEMPLATE_MIDDLE Expression_In
    Some((
        Builder::template_middle_list_append,
        "template_middle_list_append",
    )),
    // LogicalANDExpression -> BitwiseORExpression
    Some((Builder::nop, "nop")),
    // LogicalANDExpression -> LogicalANDExpression AND _FALSY_SHORT_CIRCUIT_ BitwiseORExpression
    Some((Builder::logical_expression, "logical_expression")),
    // CoalesceExpressionHead -> CoalesceExpression
    Some((Builder::nop, "nop")),
    // CoalesceExpressionHead -> BitwiseORExpression
    Some((Builder::nop, "nop")),
    // BitwiseORExpression -> BitwiseXORExpression
    Some((Builder::nop, "nop")),
    // BitwiseORExpression -> BitwiseORExpression BIT_OR BitwiseXORExpression
    Some((Builder::binary_expression, "binary_expression")),
    // Block_Return -> LBRACE RBRACE
    Some((Builder::block_statement_empty, "block_statement_empty")),
    // Block_Return -> LBRACE _BLOCK_SCOPE_ StatementList_Return RBRACE
    Some((Builder::block_statement, "block_statement")),
    // IterationStatement_Return -> DoWhileStatement_Return
    Some((Builder::nop, "nop")),
    // IterationStatement_Return -> WhileStatement_Return
    Some((Builder::nop, "nop")),
    // IterationStatement_Return -> ForStatement_Return
    Some((Builder::nop, "nop")),
    // IterationStatement_Return -> ForInOfStatement_Return
    Some((Builder::nop, "nop")),
    // SwitchStatement_Return -> SWITCH LPAREN Expression_In RPAREN CaseBlock_Return
    Some((Builder::switch_statement, "switch_statement")),
    // LabelledItem_Return -> Statement_Return
    Some((Builder::nop, "nop")),
    // LabelledItem_Return -> FunctionDeclaration
    Some((Builder::nop, "nop")),
    // Catch_Return -> CATCH LPAREN CatchParameter RPAREN Block_Return
    Some((Builder::catch_clause, "catch_clause")),
    // Catch_Return -> CATCH Block_Return
    Some((Builder::catch_clause_no_param, "catch_clause_no_param")),
    // Finally_Return -> FINALLY Block_Return
    Some((Builder::finally_clause, "finally_clause")),
    // BindingProperty_Yield -> SingleNameBinding_Yield
    Some((Builder::either_right, "either_right")),
    // BindingProperty_Yield -> PropertyName_Yield COLON BindingElement_Yield
    Some((Builder::property_value, "property_value")),
    // BindingElisionElement_Yield -> BindingElement_Yield
    Some((Builder::create_array, "create_array")),
    // BindingElisionElement_Yield -> Elision BindingElement_Yield
    Some((Builder::append_to_array, "append_to_array")),
    // ConditionalExpression_In_Yield -> ShortCircuitExpression_In_Yield
    Some((Builder::nop, "nop")),
    // ConditionalExpression_In_Yield -> ShortCircuitExpression_In_Yield CONDITIONAL _THEN_BLOCK_ AssignmentExpression_In_Yield COLON _ELSE_BLOCK_ AssignmentExpression_In_Yield
    Some((Builder::conditional_expression, "conditional_expression")),
    // YieldExpression_In -> YIELD
    Some((
        Builder::yield_expression_no_argument,
        "yield_expression_no_argument",
    )),
    // YieldExpression_In -> YIELD (!LINE_TERMINATOR_SEQUENCE) AssignmentExpression_In_Yield
    Some((Builder::yield_expression, "yield_expression")),
    // YieldExpression_In -> YIELD (!LINE_TERMINATOR_SEQUENCE) MUL AssignmentExpression_In_Yield
    Some((
        Builder::yield_expression_delegate,
        "yield_expression_delegate",
    )),
    // ArrowFunction_In_Yield -> ArrowParameters_Yield (!LINE_TERMINATOR_SEQUENCE) ARROW ConciseBody_In
    Some((
        Builder::arrow_function_expression,
        "arrow_function_expression",
    )),
    // AsyncArrowFunction_In_Yield -> ASYNC (!LINE_TERMINATOR_SEQUENCE) AsyncArrowBindingIdentifier_Yield (!LINE_TERMINATOR_SEQUENCE) ARROW AsyncConciseBody_In
    Some((
        Builder::async_arrow_function_expression_single_param,
        "async_arrow_function_expression_single_param",
    )),
    // AsyncArrowFunction_In_Yield -> CoverCallExpressionAndAsyncArrowHead_Yield (!LINE_TERMINATOR_SEQUENCE) ARROW AsyncConciseBody_In
    Some((
        Builder::async_arrow_function_expression,
        "async_arrow_function_expression",
    )),
    // LeftHandSideExpression_Yield -> NewExpression_Yield
    Some((Builder::nop, "nop")),
    // LeftHandSideExpression_Yield -> CallExpression_Yield
    Some((Builder::nop, "nop")),
    // LeftHandSideExpression_Yield -> OptionalExpression_Yield
    Some((Builder::nop, "nop")),
    // BlockStatement_Yield_Return -> Block_Yield_Return
    Some((Builder::nop, "nop")),
    // VariableStatement_Yield -> VAR VariableDeclarationList_In_Yield SEMICOLON
    Some((Builder::variable_declaration, "variable_declaration")),
    // ExpressionStatement_Yield -> (?![ASYNC (!LINE_TERMINATOR_SEQUENCE) FUNCTION, CLASS, FUNCTION, LBRACE, LET LBRACK]) Expression_In_Yield SEMICOLON
    Some((Builder::expression_statement, "expression_statement")),
    // IfStatement_Yield_Return -> IF LPAREN Expression_In_Yield RPAREN _THEN_BLOCK_ Statement_Yield_Return ELSE _ELSE_BLOCK_ Statement_Yield_Return
    Some((Builder::if_else_statement, "if_else_statement")),
    // IfStatement_Yield_Return -> IF LPAREN Expression_In_Yield RPAREN _THEN_BLOCK_ Statement_Yield_Return (?![ELSE])
    Some((Builder::if_statement, "if_statement")),
    // BreakableStatement_Yield_Return -> IterationStatement_Yield_Return
    Some((Builder::nop, "nop")),
    // BreakableStatement_Yield_Return -> SwitchStatement_Yield_Return
    Some((Builder::nop, "nop")),
    // ContinueStatement_Yield -> CONTINUE SEMICOLON
    Some((Builder::continue_statement, "continue_statement")),
    // ContinueStatement_Yield -> CONTINUE (!LINE_TERMINATOR_SEQUENCE) LabelIdentifier_Yield SEMICOLON
    Some((
        Builder::labeled_continue_statement,
        "labeled_continue_statement",
    )),
    // BreakStatement_Yield -> BREAK SEMICOLON
    Some((Builder::break_statement, "break_statement")),
    // BreakStatement_Yield -> BREAK (!LINE_TERMINATOR_SEQUENCE) LabelIdentifier_Yield SEMICOLON
    Some((Builder::labeled_break_statement, "labeled_break_statement")),
    // ReturnStatement_Yield -> RETURN SEMICOLON
    Some((
        Builder::return_statement_no_argument,
        "return_statement_no_argument",
    )),
    // ReturnStatement_Yield -> RETURN (!LINE_TERMINATOR_SEQUENCE) Expression_In_Yield SEMICOLON
    Some((Builder::return_statement, "return_statement")),
    // WithStatement_Yield_Return -> WITH LPAREN Expression_In_Yield RPAREN Statement_Yield_Return
    Some((Builder::with_statement, "with_statement")),
    // LabelledStatement_Yield_Return -> LabelIdentifier_Yield COLON LabelledItem_Yield_Return
    Some((Builder::labeled_statement, "labeled_statement")),
    // ThrowStatement_Yield -> THROW (!LINE_TERMINATOR_SEQUENCE) Expression_In_Yield SEMICOLON
    Some((Builder::throw_statement, "throw_statement")),
    // TryStatement_Yield_Return -> TRY Block_Yield_Return Catch_Yield_Return
    Some((Builder::try_catch_statement, "try_catch_statement")),
    // TryStatement_Yield_Return -> TRY Block_Yield_Return Finally_Yield_Return
    Some((Builder::try_finally_statement, "try_finally_statement")),
    // TryStatement_Yield_Return -> TRY Block_Yield_Return Catch_Yield_Return Finally_Yield_Return
    Some((
        Builder::try_catch_finally_statement,
        "try_catch_finally_statement",
    )),
    // HoistableDeclaration_Yield -> FunctionDeclaration_Yield
    Some((Builder::nop, "nop")),
    // HoistableDeclaration_Yield -> GeneratorDeclaration_Yield
    Some((Builder::nop, "nop")),
    // HoistableDeclaration_Yield -> AsyncFunctionDeclaration_Yield
    Some((Builder::nop, "nop")),
    // HoistableDeclaration_Yield -> AsyncGeneratorDeclaration_Yield
    Some((Builder::nop, "nop")),
    // ClassDeclaration_Yield -> CLASS BindingIdentifier_Yield ClassTail_Yield
    Some((Builder::class_declaration, "class_declaration")),
    // LexicalDeclaration_In_Yield -> LET BindingList_In_Yield SEMICOLON
    Some((Builder::variable_declaration, "variable_declaration")),
    // LexicalDeclaration_In_Yield -> CONST BindingList_In_Yield SEMICOLON
    Some((Builder::variable_declaration, "variable_declaration")),
    // BlockStatement_Await_Return -> Block_Await_Return
    Some((Builder::nop, "nop")),
    // IfStatement_Await_Return -> IF LPAREN Expression_In_Await RPAREN _THEN_BLOCK_ Statement_Await_Return ELSE _ELSE_BLOCK_ Statement_Await_Return
    Some((Builder::if_else_statement, "if_else_statement")),
    // IfStatement_Await_Return -> IF LPAREN Expression_In_Await RPAREN _THEN_BLOCK_ Statement_Await_Return (?![ELSE])
    Some((Builder::if_statement, "if_statement")),
    // BreakableStatement_Await_Return -> IterationStatement_Await_Return
    Some((Builder::nop, "nop")),
    // BreakableStatement_Await_Return -> SwitchStatement_Await_Return
    Some((Builder::nop, "nop")),
    // ReturnStatement_Await -> RETURN SEMICOLON
    Some((
        Builder::return_statement_no_argument,
        "return_statement_no_argument",
    )),
    // ReturnStatement_Await -> RETURN (!LINE_TERMINATOR_SEQUENCE) Expression_In_Await SEMICOLON
    Some((Builder::return_statement, "return_statement")),
    // WithStatement_Await_Return -> WITH LPAREN Expression_In_Await RPAREN Statement_Await_Return
    Some((Builder::with_statement, "with_statement")),
    // LabelledStatement_Await_Return -> LabelIdentifier_Await COLON LabelledItem_Await_Return
    Some((Builder::labeled_statement, "labeled_statement")),
    // TryStatement_Await_Return -> TRY Block_Await_Return Catch_Await_Return
    Some((Builder::try_catch_statement, "try_catch_statement")),
    // TryStatement_Await_Return -> TRY Block_Await_Return Finally_Await_Return
    Some((Builder::try_finally_statement, "try_finally_statement")),
    // TryStatement_Await_Return -> TRY Block_Await_Return Catch_Await_Return Finally_Await_Return
    Some((
        Builder::try_catch_finally_statement,
        "try_catch_finally_statement",
    )),
    // BindingProperty_Yield_Await -> SingleNameBinding_Yield_Await
    Some((Builder::either_right, "either_right")),
    // BindingProperty_Yield_Await -> PropertyName_Yield_Await COLON BindingElement_Yield_Await
    Some((Builder::property_value, "property_value")),
    // BindingElisionElement_Yield_Await -> BindingElement_Yield_Await
    Some((Builder::create_array, "create_array")),
    // BindingElisionElement_Yield_Await -> Elision BindingElement_Yield_Await
    Some((Builder::append_to_array, "append_to_array")),
    // ConditionalExpression_In_Yield_Await -> ShortCircuitExpression_In_Yield_Await
    Some((Builder::nop, "nop")),
    // ConditionalExpression_In_Yield_Await -> ShortCircuitExpression_In_Yield_Await CONDITIONAL _THEN_BLOCK_ AssignmentExpression_In_Yield_Await COLON _ELSE_BLOCK_ AssignmentExpression_In_Yield_Await
    Some((Builder::conditional_expression, "conditional_expression")),
    // YieldExpression_In_Await -> YIELD
    Some((
        Builder::yield_expression_no_argument,
        "yield_expression_no_argument",
    )),
    // YieldExpression_In_Await -> YIELD (!LINE_TERMINATOR_SEQUENCE) AssignmentExpression_In_Yield_Await
    Some((Builder::yield_expression, "yield_expression")),
    // YieldExpression_In_Await -> YIELD (!LINE_TERMINATOR_SEQUENCE) MUL AssignmentExpression_In_Yield_Await
    Some((
        Builder::yield_expression_delegate,
        "yield_expression_delegate",
    )),
    // ArrowFunction_In_Yield_Await -> ArrowParameters_Yield_Await (!LINE_TERMINATOR_SEQUENCE) ARROW ConciseBody_In
    Some((
        Builder::arrow_function_expression,
        "arrow_function_expression",
    )),
    // AsyncArrowFunction_In_Yield_Await -> ASYNC (!LINE_TERMINATOR_SEQUENCE) AsyncArrowBindingIdentifier_Yield (!LINE_TERMINATOR_SEQUENCE) ARROW AsyncConciseBody_In
    Some((
        Builder::async_arrow_function_expression_single_param,
        "async_arrow_function_expression_single_param",
    )),
    // AsyncArrowFunction_In_Yield_Await -> CoverCallExpressionAndAsyncArrowHead_Yield_Await (!LINE_TERMINATOR_SEQUENCE) ARROW AsyncConciseBody_In
    Some((
        Builder::async_arrow_function_expression,
        "async_arrow_function_expression",
    )),
    // LeftHandSideExpression_Yield_Await -> NewExpression_Yield_Await
    Some((Builder::nop, "nop")),
    // LeftHandSideExpression_Yield_Await -> CallExpression_Yield_Await
    Some((Builder::nop, "nop")),
    // LeftHandSideExpression_Yield_Await -> OptionalExpression_Yield_Await
    Some((Builder::nop, "nop")),
    // BlockStatement_Yield_Await_Return -> Block_Yield_Await_Return
    Some((Builder::nop, "nop")),
    // VariableStatement_Yield_Await -> VAR VariableDeclarationList_In_Yield_Await SEMICOLON
    Some((Builder::variable_declaration, "variable_declaration")),
    // ExpressionStatement_Yield_Await -> (?![ASYNC (!LINE_TERMINATOR_SEQUENCE) FUNCTION, CLASS, FUNCTION, LBRACE, LET LBRACK]) Expression_In_Yield_Await SEMICOLON
    Some((Builder::expression_statement, "expression_statement")),
    // IfStatement_Yield_Await_Return -> IF LPAREN Expression_In_Yield_Await RPAREN _THEN_BLOCK_ Statement_Yield_Await_Return ELSE _ELSE_BLOCK_ Statement_Yield_Await_Return
    Some((Builder::if_else_statement, "if_else_statement")),
    // IfStatement_Yield_Await_Return -> IF LPAREN Expression_In_Yield_Await RPAREN _THEN_BLOCK_ Statement_Yield_Await_Return (?![ELSE])
    Some((Builder::if_statement, "if_statement")),
    // BreakableStatement_Yield_Await_Return -> IterationStatement_Yield_Await_Return
    Some((Builder::nop, "nop")),
    // BreakableStatement_Yield_Await_Return -> SwitchStatement_Yield_Await_Return
    Some((Builder::nop, "nop")),
    // ContinueStatement_Yield_Await -> CONTINUE SEMICOLON
    Some((Builder::continue_statement, "continue_statement")),
    // ContinueStatement_Yield_Await -> CONTINUE (!LINE_TERMINATOR_SEQUENCE) LabelIdentifier_Yield_Await SEMICOLON
    Some((
        Builder::labeled_continue_statement,
        "labeled_continue_statement",
    )),
    // BreakStatement_Yield_Await -> BREAK SEMICOLON
    Some((Builder::break_statement, "break_statement")),
    // BreakStatement_Yield_Await -> BREAK (!LINE_TERMINATOR_SEQUENCE) LabelIdentifier_Yield_Await SEMICOLON
    Some((Builder::labeled_break_statement, "labeled_break_statement")),
    // ReturnStatement_Yield_Await -> RETURN SEMICOLON
    Some((
        Builder::return_statement_no_argument,
        "return_statement_no_argument",
    )),
    // ReturnStatement_Yield_Await -> RETURN (!LINE_TERMINATOR_SEQUENCE) Expression_In_Yield_Await SEMICOLON
    Some((Builder::return_statement, "return_statement")),
    // WithStatement_Yield_Await_Return -> WITH LPAREN Expression_In_Yield_Await RPAREN Statement_Yield_Await_Return
    Some((Builder::with_statement, "with_statement")),
    // LabelledStatement_Yield_Await_Return -> LabelIdentifier_Yield_Await COLON LabelledItem_Yield_Await_Return
    Some((Builder::labeled_statement, "labeled_statement")),
    // ThrowStatement_Yield_Await -> THROW (!LINE_TERMINATOR_SEQUENCE) Expression_In_Yield_Await SEMICOLON
    Some((Builder::throw_statement, "throw_statement")),
    // TryStatement_Yield_Await_Return -> TRY Block_Yield_Await_Return Catch_Yield_Await_Return
    Some((Builder::try_catch_statement, "try_catch_statement")),
    // TryStatement_Yield_Await_Return -> TRY Block_Yield_Await_Return Finally_Yield_Await_Return
    Some((Builder::try_finally_statement, "try_finally_statement")),
    // TryStatement_Yield_Await_Return -> TRY Block_Yield_Await_Return Catch_Yield_Await_Return Finally_Yield_Await_Return
    Some((
        Builder::try_catch_finally_statement,
        "try_catch_finally_statement",
    )),
    // HoistableDeclaration_Yield_Await -> FunctionDeclaration_Yield_Await
    Some((Builder::nop, "nop")),
    // HoistableDeclaration_Yield_Await -> GeneratorDeclaration_Yield_Await
    Some((Builder::nop, "nop")),
    // HoistableDeclaration_Yield_Await -> AsyncFunctionDeclaration_Yield_Await
    Some((Builder::nop, "nop")),
    // HoistableDeclaration_Yield_Await -> AsyncGeneratorDeclaration_Yield_Await
    Some((Builder::nop, "nop")),
    // ClassDeclaration_Yield_Await -> CLASS BindingIdentifier_Yield_Await ClassTail_Yield_Await
    Some((Builder::class_declaration, "class_declaration")),
    // LexicalDeclaration_In_Yield_Await -> LET BindingList_In_Yield_Await SEMICOLON
    Some((Builder::variable_declaration, "variable_declaration")),
    // LexicalDeclaration_In_Yield_Await -> CONST BindingList_In_Yield_Await SEMICOLON
    Some((Builder::variable_declaration, "variable_declaration")),
    // ComputedPropertyName_Await -> LBRACK AssignmentExpression_In_Await RBRACK
    Some((Builder::computed_property_name, "computed_property_name")),
    // RelationalExpression_In_Await -> ShiftExpression_Await
    Some((Builder::nop, "nop")),
    // RelationalExpression_In_Await -> RelationalExpression_In_Await LT ShiftExpression_Await
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_In_Await -> RelationalExpression_In_Await GT ShiftExpression_Await
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_In_Await -> RelationalExpression_In_Await LTE ShiftExpression_Await
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_In_Await -> RelationalExpression_In_Await GTE ShiftExpression_Await
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_In_Await -> RelationalExpression_In_Await INSTANCEOF ShiftExpression_Await
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_In_Await -> RelationalExpression_In_Await IN ShiftExpression_Await
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_In_Await -> PRIVATE_IDENTIFIER IN ShiftExpression_Await
    Some((
        Builder::binary_expression_private,
        "binary_expression_private",
    )),
    // CoverInitializedName_Await -> IdentifierReference_Await Initializer_In_Await
    Some((Builder::cover_initialized_name, "cover_initialized_name")),
    // TemplateMiddleList_Await -> TEMPLATE_MIDDLE Expression_In_Await
    Some((Builder::template_middle_list, "template_middle_list")),
    // TemplateMiddleList_Await -> TemplateMiddleList_Await TEMPLATE_MIDDLE Expression_In_Await
    Some((
        Builder::template_middle_list_append,
        "template_middle_list_append",
    )),
    // LogicalORExpression_Await -> LogicalANDExpression_Await
    Some((Builder::nop, "nop")),
    // LogicalORExpression_Await -> LogicalORExpression_Await OR _TRUTHY_SHORT_CIRCUIT_ LogicalANDExpression_Await
    Some((Builder::logical_expression, "logical_expression")),
    // CoalesceExpression_Await -> CoalesceExpressionHead_Await NULLISH _NULLISH_SHORT_CIRCUIT_ BitwiseORExpression_Await
    Some((Builder::logical_expression, "logical_expression")),
    // EqualityExpression_In -> RelationalExpression_In
    Some((Builder::nop, "nop")),
    // EqualityExpression_In -> EqualityExpression_In EQ RelationalExpression_In
    Some((Builder::binary_expression, "binary_expression")),
    // EqualityExpression_In -> EqualityExpression_In NE RelationalExpression_In
    Some((Builder::binary_expression, "binary_expression")),
    // EqualityExpression_In -> EqualityExpression_In EQ_STRICT RelationalExpression_In
    Some((Builder::binary_expression, "binary_expression")),
    // EqualityExpression_In -> EqualityExpression_In NE_STRICT RelationalExpression_In
    Some((Builder::binary_expression, "binary_expression")),
    // SpreadElement -> ELLIPSIS AssignmentExpression_In
    Some((Builder::spread_element, "spread_element")),
    // PropertyDefinition -> IdentifierReference
    Some((Builder::property, "property")),
    // PropertyDefinition -> CoverInitializedName
    Some((
        Builder::property_cover_initialized_name,
        "property_cover_initialized_name",
    )),
    // PropertyDefinition -> PropertyName COLON AssignmentExpression_In
    Some((Builder::property_value, "property_value")),
    // PropertyDefinition -> MethodDefinition
    Some((Builder::property_method, "property_method")),
    // PropertyDefinition -> ELLIPSIS AssignmentExpression_In
    Some((Builder::spread_element, "spread_element")),
    // TemplateSpans -> TEMPLATE_TAIL
    Some((Builder::template_spans_tail, "template_spans_tail")),
    // TemplateSpans -> TemplateMiddleList TEMPLATE_TAIL
    Some((Builder::template_spans_append, "template_spans_append")),
    // BitwiseXORExpression -> BitwiseANDExpression
    Some((Builder::nop, "nop")),
    // BitwiseXORExpression -> BitwiseXORExpression BIT_XOR BitwiseANDExpression
    Some((Builder::binary_expression, "binary_expression")),
    // DoWhileStatement_Return -> DO _LOOP_START_ Statement_Return _LOOP_BODY_ WHILE LPAREN Expression_In RPAREN SEMICOLON
    Some((Builder::do_while_statement, "do_while_statement")),
    // WhileStatement_Return -> WHILE _LOOP_START_ LPAREN Expression_In RPAREN _LOOP_TEST_ Statement_Return
    Some((Builder::while_statement, "while_statement")),
    // ForStatement_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) SEMICOLON SEMICOLON RPAREN Statement_Return
    Some((
        Builder::for_statement_no_init_test_update,
        "for_statement_no_init_test_update",
    )),
    // ForStatement_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) Expression SEMICOLON _LOOP_INIT_EXPRESSION_ SEMICOLON RPAREN Statement_Return
    Some((
        Builder::for_statement_no_test_update,
        "for_statement_no_test_update",
    )),
    // ForStatement_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) SEMICOLON Expression_In SEMICOLON _LOOP_TEST_ RPAREN Statement_Return
    Some((
        Builder::for_statement_no_init_update,
        "for_statement_no_init_update",
    )),
    // ForStatement_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) Expression SEMICOLON _LOOP_INIT_EXPRESSION_ Expression_In SEMICOLON _LOOP_TEST_ RPAREN Statement_Return
    Some((Builder::for_statement_no_update, "for_statement_no_update")),
    // ForStatement_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) SEMICOLON SEMICOLON Expression_In RPAREN _LOOP_NEXT_ Statement_Return
    Some((
        Builder::for_statement_no_init_test,
        "for_statement_no_init_test",
    )),
    // ForStatement_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) Expression SEMICOLON _LOOP_INIT_EXPRESSION_ SEMICOLON Expression_In RPAREN _LOOP_NEXT_ Statement_Return
    Some((Builder::for_statement_no_test, "for_statement_no_test")),
    // ForStatement_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) SEMICOLON Expression_In SEMICOLON _LOOP_TEST_ Expression_In RPAREN _LOOP_NEXT_ Statement_Return
    Some((Builder::for_statement_no_init, "for_statement_no_init")),
    // ForStatement_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) Expression SEMICOLON _LOOP_INIT_EXPRESSION_ Expression_In SEMICOLON _LOOP_TEST_ Expression_In RPAREN _LOOP_NEXT_ Statement_Return
    Some((Builder::for_statement, "for_statement")),
    // ForStatement_Return -> FOR _LOOP_START_ LPAREN VAR VariableDeclarationList SEMICOLON _LOOP_INIT_VAR_DECLARATION_ SEMICOLON RPAREN Statement_Return
    Some((
        Builder::for_statement_vars_no_test_update,
        "for_statement_vars_no_test_update",
    )),
    // ForStatement_Return -> FOR _LOOP_START_ LPAREN VAR VariableDeclarationList SEMICOLON _LOOP_INIT_VAR_DECLARATION_ Expression_In SEMICOLON _LOOP_TEST_ RPAREN Statement_Return
    Some((
        Builder::for_statement_vars_no_update,
        "for_statement_vars_no_update",
    )),
    // ForStatement_Return -> FOR _LOOP_START_ LPAREN VAR VariableDeclarationList SEMICOLON _LOOP_INIT_VAR_DECLARATION_ SEMICOLON Expression_In RPAREN _LOOP_NEXT_ Statement_Return
    Some((
        Builder::for_statement_vars_no_test,
        "for_statement_vars_no_test",
    )),
    // ForStatement_Return -> FOR _LOOP_START_ LPAREN VAR VariableDeclarationList SEMICOLON _LOOP_INIT_VAR_DECLARATION_ Expression_In SEMICOLON _LOOP_TEST_ Expression_In RPAREN _LOOP_NEXT_ Statement_Return
    Some((Builder::for_statement_vars, "for_statement_vars")),
    // ForStatement_Return -> FOR _LOOP_START_ LPAREN LexicalDeclaration _LOOP_INIT_LEXICAL_DECLARATION_ SEMICOLON RPAREN Statement_Return
    Some((
        Builder::for_statement_decl_no_test_update,
        "for_statement_decl_no_test_update",
    )),
    // ForStatement_Return -> FOR _LOOP_START_ LPAREN LexicalDeclaration _LOOP_INIT_LEXICAL_DECLARATION_ Expression_In SEMICOLON _LOOP_TEST_ RPAREN Statement_Return
    Some((
        Builder::for_statement_decl_no_update,
        "for_statement_decl_no_update",
    )),
    // ForStatement_Return -> FOR _LOOP_START_ LPAREN LexicalDeclaration _LOOP_INIT_LEXICAL_DECLARATION_ SEMICOLON Expression_In RPAREN _LOOP_NEXT_ Statement_Return
    Some((
        Builder::for_statement_decl_no_test,
        "for_statement_decl_no_test",
    )),
    // ForStatement_Return -> FOR _LOOP_START_ LPAREN LexicalDeclaration _LOOP_INIT_LEXICAL_DECLARATION_ Expression_In SEMICOLON _LOOP_TEST_ Expression_In RPAREN _LOOP_NEXT_ Statement_Return
    Some((Builder::for_statement_decl, "for_statement_decl")),
    // ForInOfStatement_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) LeftHandSideExpression IN Expression_In RPAREN Statement_Return
    Some((Builder::for_in_statement, "for_in_statement")),
    // ForInOfStatement_Return -> FOR _LOOP_START_ LPAREN VAR ForBinding IN Expression_In RPAREN Statement_Return
    Some((Builder::for_in_statement_vars, "for_in_statement_vars")),
    // ForInOfStatement_Return -> FOR _LOOP_START_ LPAREN ForDeclaration IN Expression_In RPAREN Statement_Return
    Some((Builder::for_in_statement, "for_in_statement")),
    // ForInOfStatement_Return -> FOR _LOOP_START_ LPAREN (?![ASYNC OF, LET]) LeftHandSideExpression OF AssignmentExpression_In RPAREN Statement_Return
    Some((Builder::for_of_statement, "for_of_statement")),
    // ForInOfStatement_Return -> FOR _LOOP_START_ LPAREN VAR ForBinding OF AssignmentExpression_In RPAREN Statement_Return
    Some((Builder::for_of_statement_vars, "for_of_statement_vars")),
    // ForInOfStatement_Return -> FOR _LOOP_START_ LPAREN ForDeclaration OF AssignmentExpression_In RPAREN Statement_Return
    Some((Builder::for_of_statement, "for_of_statement")),
    // CaseBlock_Return -> LBRACE RBRACE
    Some((Builder::empty_list_block, "empty_list_block")),
    // CaseBlock_Return -> LBRACE CaseClauses_Return RBRACE
    Some((Builder::list_block, "list_block")),
    // CaseBlock_Return -> LBRACE DefaultClause_Return RBRACE
    Some((Builder::case_block_default, "case_block_default")),
    // CaseBlock_Return -> LBRACE CaseClauses_Return DefaultClause_Return RBRACE
    Some((
        Builder::case_block_cases_default,
        "case_block_cases_default",
    )),
    // CaseBlock_Return -> LBRACE DefaultClause_Return CaseClauses_Return RBRACE
    Some((
        Builder::case_block_default_cases,
        "case_block_default_cases",
    )),
    // CaseBlock_Return -> LBRACE CaseClauses_Return DefaultClause_Return CaseClauses_Return RBRACE
    Some((
        Builder::case_block_cases_default_cases,
        "case_block_cases_default_cases",
    )),
    // PropertyName_Yield -> LiteralPropertyName
    Some((Builder::nop, "nop")),
    // PropertyName_Yield -> ComputedPropertyName_Yield
    Some((Builder::nop, "nop")),
    // ShortCircuitExpression_In_Yield -> LogicalORExpression_In_Yield
    Some((Builder::nop, "nop")),
    // ShortCircuitExpression_In_Yield -> CoalesceExpression_In_Yield
    Some((Builder::nop, "nop")),
    // ArrowParameters_Yield -> BindingIdentifier_Yield
    Some((Builder::create_list, "create_list")),
    // ArrowParameters_Yield -> CoverParenthesizedExpressionAndArrowParameterList_Yield
    Some((Builder::arrow_parameters, "arrow_parameters")),
    // AsyncArrowBindingIdentifier_Yield -> BindingIdentifier_Yield_Await
    Some((Builder::nop, "nop")),
    // CoverCallExpressionAndAsyncArrowHead_Yield -> MemberExpression_Yield Arguments_Yield
    Some((Builder::nop, "nop")),
    // NewExpression_Yield -> MemberExpression_Yield
    Some((Builder::nop, "nop")),
    // NewExpression_Yield -> NEW NewExpression_Yield
    Some((Builder::new_expression, "new_expression")),
    // CallExpression_Yield -> CoverCallExpressionAndAsyncArrowHead_Yield
    Some((Builder::call_expression, "call_expression")),
    // CallExpression_Yield -> SuperCall_Yield
    Some((Builder::nop, "nop")),
    // CallExpression_Yield -> ImportCall_Yield
    Some((Builder::nop, "nop")),
    // CallExpression_Yield -> CallExpression_Yield Arguments_Yield
    Some((Builder::call_expression, "call_expression")),
    // CallExpression_Yield -> CallExpression_Yield LBRACK Expression_In_Yield RBRACK
    Some((Builder::member_expression_call, "member_expression_call")),
    // CallExpression_Yield -> CallExpression_Yield DOT KeywordOrIdentifierName
    Some((Builder::member_expression, "member_expression")),
    // CallExpression_Yield -> CallExpression_Yield TemplateLiteral_Yield_Tagged
    Some((
        Builder::tagged_template_expression,
        "tagged_template_expression",
    )),
    // CallExpression_Yield -> CallExpression_Yield DOT PRIVATE_IDENTIFIER
    Some((
        Builder::member_expression_private,
        "member_expression_private",
    )),
    // OptionalExpression_Yield -> MemberExpression_Yield OptionalChain_Yield
    Some((Builder::optional_expression, "optional_expression")),
    // OptionalExpression_Yield -> CallExpression_Yield OptionalChain_Yield
    Some((Builder::optional_expression, "optional_expression")),
    // OptionalExpression_Yield -> OptionalExpression_Yield OptionalChain_Yield
    Some((Builder::optional_expression, "optional_expression")),
    // Block_Yield_Return -> LBRACE RBRACE
    Some((Builder::block_statement_empty, "block_statement_empty")),
    // Block_Yield_Return -> LBRACE _BLOCK_SCOPE_ StatementList_Yield_Return RBRACE
    Some((Builder::block_statement, "block_statement")),
    // VariableDeclarationList_In_Yield -> VariableDeclaration_In_Yield
    Some((Builder::create_list, "create_list")),
    // VariableDeclarationList_In_Yield -> VariableDeclarationList_In_Yield COMMA VariableDeclaration_In_Yield
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // Expression_In_Yield -> AssignmentExpression_In_Yield
    Some((Builder::nop, "nop")),
    // Expression_In_Yield -> Expression_In_Yield COMMA AssignmentExpression_In_Yield
    Some((Builder::sequence_expression, "sequence_expression")),
    // IterationStatement_Yield_Return -> DoWhileStatement_Yield_Return
    Some((Builder::nop, "nop")),
    // IterationStatement_Yield_Return -> WhileStatement_Yield_Return
    Some((Builder::nop, "nop")),
    // IterationStatement_Yield_Return -> ForStatement_Yield_Return
    Some((Builder::nop, "nop")),
    // IterationStatement_Yield_Return -> ForInOfStatement_Yield_Return
    Some((Builder::nop, "nop")),
    // SwitchStatement_Yield_Return -> SWITCH LPAREN Expression_In_Yield RPAREN CaseBlock_Yield_Return
    Some((Builder::switch_statement, "switch_statement")),
    // LabelIdentifier_Yield -> Identifier
    Some((Builder::nop, "nop")),
    // LabelIdentifier_Yield -> AWAIT
    Some((Builder::identifier, "identifier")),
    // LabelledItem_Yield_Return -> Statement_Yield_Return
    Some((Builder::nop, "nop")),
    // LabelledItem_Yield_Return -> FunctionDeclaration_Yield
    Some((Builder::nop, "nop")),
    // Catch_Yield_Return -> CATCH LPAREN CatchParameter_Yield RPAREN Block_Yield_Return
    Some((Builder::catch_clause, "catch_clause")),
    // Catch_Yield_Return -> CATCH Block_Yield_Return
    Some((Builder::catch_clause_no_param, "catch_clause_no_param")),
    // Finally_Yield_Return -> FINALLY Block_Yield_Return
    Some((Builder::finally_clause, "finally_clause")),
    // FunctionDeclaration_Yield -> FUNCTION BindingIdentifier_Yield _FUNCTION_CONTEXT_ LPAREN FormalParameters RPAREN _FUNCTION_SIGNATURE_ LBRACE FunctionBody RBRACE
    Some((Builder::function_declaration, "function_declaration")),
    // GeneratorDeclaration_Yield -> FUNCTION MUL BindingIdentifier_Yield LPAREN FormalParameters_Yield RPAREN LBRACE GeneratorBody RBRACE
    Some((Builder::generator_declaration, "generator_declaration")),
    // AsyncFunctionDeclaration_Yield -> ASYNC (!LINE_TERMINATOR_SEQUENCE) FUNCTION BindingIdentifier_Yield LPAREN FormalParameters_Await RPAREN LBRACE AsyncFunctionBody RBRACE
    Some((
        Builder::async_function_declaration,
        "async_function_declaration",
    )),
    // AsyncGeneratorDeclaration_Yield -> ASYNC (!LINE_TERMINATOR_SEQUENCE) FUNCTION MUL BindingIdentifier_Yield LPAREN FormalParameters_Yield_Await RPAREN LBRACE AsyncGeneratorBody RBRACE
    Some((
        Builder::async_generator_declaration,
        "async_generator_declaration",
    )),
    // ClassTail_Yield -> LBRACE RBRACE
    Some((Builder::empty_class_tail, "empty_class_tail")),
    // ClassTail_Yield -> ClassHeritage_Yield LBRACE RBRACE
    Some((Builder::class_tail_no_body, "class_tail_no_body")),
    // ClassTail_Yield -> LBRACE ClassBody_Yield RBRACE
    Some((
        Builder::class_tail_no_super_class,
        "class_tail_no_super_class",
    )),
    // ClassTail_Yield -> ClassHeritage_Yield LBRACE ClassBody_Yield RBRACE
    Some((Builder::class_tail, "class_tail")),
    // BindingList_In_Yield -> LexicalBinding_In_Yield
    Some((Builder::create_list, "create_list")),
    // BindingList_In_Yield -> BindingList_In_Yield COMMA LexicalBinding_In_Yield
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // Block_Await_Return -> LBRACE RBRACE
    Some((Builder::block_statement_empty, "block_statement_empty")),
    // Block_Await_Return -> LBRACE _BLOCK_SCOPE_ StatementList_Await_Return RBRACE
    Some((Builder::block_statement, "block_statement")),
    // IterationStatement_Await_Return -> DoWhileStatement_Await_Return
    Some((Builder::nop, "nop")),
    // IterationStatement_Await_Return -> WhileStatement_Await_Return
    Some((Builder::nop, "nop")),
    // IterationStatement_Await_Return -> ForStatement_Await_Return
    Some((Builder::nop, "nop")),
    // IterationStatement_Await_Return -> ForInOfStatement_Await_Return
    Some((Builder::nop, "nop")),
    // SwitchStatement_Await_Return -> SWITCH LPAREN Expression_In_Await RPAREN CaseBlock_Await_Return
    Some((Builder::switch_statement, "switch_statement")),
    // LabelledItem_Await_Return -> Statement_Await_Return
    Some((Builder::nop, "nop")),
    // LabelledItem_Await_Return -> FunctionDeclaration_Await
    Some((Builder::nop, "nop")),
    // Catch_Await_Return -> CATCH LPAREN CatchParameter_Await RPAREN Block_Await_Return
    Some((Builder::catch_clause, "catch_clause")),
    // Catch_Await_Return -> CATCH Block_Await_Return
    Some((Builder::catch_clause_no_param, "catch_clause_no_param")),
    // Finally_Await_Return -> FINALLY Block_Await_Return
    Some((Builder::finally_clause, "finally_clause")),
    // PropertyName_Yield_Await -> LiteralPropertyName
    Some((Builder::nop, "nop")),
    // PropertyName_Yield_Await -> ComputedPropertyName_Yield_Await
    Some((Builder::nop, "nop")),
    // ShortCircuitExpression_In_Yield_Await -> LogicalORExpression_In_Yield_Await
    Some((Builder::nop, "nop")),
    // ShortCircuitExpression_In_Yield_Await -> CoalesceExpression_In_Yield_Await
    Some((Builder::nop, "nop")),
    // ArrowParameters_Yield_Await -> BindingIdentifier_Yield_Await
    Some((Builder::create_list, "create_list")),
    // ArrowParameters_Yield_Await -> CoverParenthesizedExpressionAndArrowParameterList_Yield_Await
    Some((Builder::arrow_parameters, "arrow_parameters")),
    // CoverCallExpressionAndAsyncArrowHead_Yield_Await -> MemberExpression_Yield_Await Arguments_Yield_Await
    Some((Builder::nop, "nop")),
    // NewExpression_Yield_Await -> MemberExpression_Yield_Await
    Some((Builder::nop, "nop")),
    // NewExpression_Yield_Await -> NEW NewExpression_Yield_Await
    Some((Builder::new_expression, "new_expression")),
    // CallExpression_Yield_Await -> CoverCallExpressionAndAsyncArrowHead_Yield_Await
    Some((Builder::call_expression, "call_expression")),
    // CallExpression_Yield_Await -> SuperCall_Yield_Await
    Some((Builder::nop, "nop")),
    // CallExpression_Yield_Await -> ImportCall_Yield_Await
    Some((Builder::nop, "nop")),
    // CallExpression_Yield_Await -> CallExpression_Yield_Await Arguments_Yield_Await
    Some((Builder::call_expression, "call_expression")),
    // CallExpression_Yield_Await -> CallExpression_Yield_Await LBRACK Expression_In_Yield_Await RBRACK
    Some((Builder::member_expression_call, "member_expression_call")),
    // CallExpression_Yield_Await -> CallExpression_Yield_Await DOT KeywordOrIdentifierName
    Some((Builder::member_expression, "member_expression")),
    // CallExpression_Yield_Await -> CallExpression_Yield_Await TemplateLiteral_Yield_Await_Tagged
    Some((
        Builder::tagged_template_expression,
        "tagged_template_expression",
    )),
    // CallExpression_Yield_Await -> CallExpression_Yield_Await DOT PRIVATE_IDENTIFIER
    Some((
        Builder::member_expression_private,
        "member_expression_private",
    )),
    // OptionalExpression_Yield_Await -> MemberExpression_Yield_Await OptionalChain_Yield_Await
    Some((Builder::optional_expression, "optional_expression")),
    // OptionalExpression_Yield_Await -> CallExpression_Yield_Await OptionalChain_Yield_Await
    Some((Builder::optional_expression, "optional_expression")),
    // OptionalExpression_Yield_Await -> OptionalExpression_Yield_Await OptionalChain_Yield_Await
    Some((Builder::optional_expression, "optional_expression")),
    // Block_Yield_Await_Return -> LBRACE RBRACE
    Some((Builder::block_statement_empty, "block_statement_empty")),
    // Block_Yield_Await_Return -> LBRACE _BLOCK_SCOPE_ StatementList_Yield_Await_Return RBRACE
    Some((Builder::block_statement, "block_statement")),
    // VariableDeclarationList_In_Yield_Await -> VariableDeclaration_In_Yield_Await
    Some((Builder::create_list, "create_list")),
    // VariableDeclarationList_In_Yield_Await -> VariableDeclarationList_In_Yield_Await COMMA VariableDeclaration_In_Yield_Await
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // Expression_In_Yield_Await -> AssignmentExpression_In_Yield_Await
    Some((Builder::nop, "nop")),
    // Expression_In_Yield_Await -> Expression_In_Yield_Await COMMA AssignmentExpression_In_Yield_Await
    Some((Builder::sequence_expression, "sequence_expression")),
    // IterationStatement_Yield_Await_Return -> DoWhileStatement_Yield_Await_Return
    Some((Builder::nop, "nop")),
    // IterationStatement_Yield_Await_Return -> WhileStatement_Yield_Await_Return
    Some((Builder::nop, "nop")),
    // IterationStatement_Yield_Await_Return -> ForStatement_Yield_Await_Return
    Some((Builder::nop, "nop")),
    // IterationStatement_Yield_Await_Return -> ForInOfStatement_Yield_Await_Return
    Some((Builder::nop, "nop")),
    // SwitchStatement_Yield_Await_Return -> SWITCH LPAREN Expression_In_Yield_Await RPAREN CaseBlock_Yield_Await_Return
    Some((Builder::switch_statement, "switch_statement")),
    // LabelIdentifier_Yield_Await -> Identifier
    Some((Builder::nop, "nop")),
    // LabelledItem_Yield_Await_Return -> Statement_Yield_Await_Return
    Some((Builder::nop, "nop")),
    // LabelledItem_Yield_Await_Return -> FunctionDeclaration_Yield_Await
    Some((Builder::nop, "nop")),
    // Catch_Yield_Await_Return -> CATCH LPAREN CatchParameter_Yield_Await RPAREN Block_Yield_Await_Return
    Some((Builder::catch_clause, "catch_clause")),
    // Catch_Yield_Await_Return -> CATCH Block_Yield_Await_Return
    Some((Builder::catch_clause_no_param, "catch_clause_no_param")),
    // Finally_Yield_Await_Return -> FINALLY Block_Yield_Await_Return
    Some((Builder::finally_clause, "finally_clause")),
    // FunctionDeclaration_Yield_Await -> FUNCTION BindingIdentifier_Yield_Await _FUNCTION_CONTEXT_ LPAREN FormalParameters RPAREN _FUNCTION_SIGNATURE_ LBRACE FunctionBody RBRACE
    Some((Builder::function_declaration, "function_declaration")),
    // GeneratorDeclaration_Yield_Await -> FUNCTION MUL BindingIdentifier_Yield_Await LPAREN FormalParameters_Yield RPAREN LBRACE GeneratorBody RBRACE
    Some((Builder::generator_declaration, "generator_declaration")),
    // AsyncFunctionDeclaration_Yield_Await -> ASYNC (!LINE_TERMINATOR_SEQUENCE) FUNCTION BindingIdentifier_Yield_Await LPAREN FormalParameters_Await RPAREN LBRACE AsyncFunctionBody RBRACE
    Some((
        Builder::async_function_declaration,
        "async_function_declaration",
    )),
    // AsyncGeneratorDeclaration_Yield_Await -> ASYNC (!LINE_TERMINATOR_SEQUENCE) FUNCTION MUL BindingIdentifier_Yield_Await LPAREN FormalParameters_Yield_Await RPAREN LBRACE AsyncGeneratorBody RBRACE
    Some((
        Builder::async_generator_declaration,
        "async_generator_declaration",
    )),
    // ClassTail_Yield_Await -> LBRACE RBRACE
    Some((Builder::empty_class_tail, "empty_class_tail")),
    // ClassTail_Yield_Await -> ClassHeritage_Yield_Await LBRACE RBRACE
    Some((Builder::class_tail_no_body, "class_tail_no_body")),
    // ClassTail_Yield_Await -> LBRACE ClassBody_Yield_Await RBRACE
    Some((
        Builder::class_tail_no_super_class,
        "class_tail_no_super_class",
    )),
    // ClassTail_Yield_Await -> ClassHeritage_Yield_Await LBRACE ClassBody_Yield_Await RBRACE
    Some((Builder::class_tail, "class_tail")),
    // BindingList_In_Yield_Await -> LexicalBinding_In_Yield_Await
    Some((Builder::create_list, "create_list")),
    // BindingList_In_Yield_Await -> BindingList_In_Yield_Await COMMA LexicalBinding_In_Yield_Await
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // ShiftExpression_Await -> AdditiveExpression_Await
    Some((Builder::nop, "nop")),
    // ShiftExpression_Await -> ShiftExpression_Await SHL AdditiveExpression_Await
    Some((Builder::binary_expression, "binary_expression")),
    // ShiftExpression_Await -> ShiftExpression_Await SAR AdditiveExpression_Await
    Some((Builder::binary_expression, "binary_expression")),
    // ShiftExpression_Await -> ShiftExpression_Await SHR AdditiveExpression_Await
    Some((Builder::binary_expression, "binary_expression")),
    // LogicalANDExpression_Await -> BitwiseORExpression_Await
    Some((Builder::nop, "nop")),
    // LogicalANDExpression_Await -> LogicalANDExpression_Await AND _FALSY_SHORT_CIRCUIT_ BitwiseORExpression_Await
    Some((Builder::logical_expression, "logical_expression")),
    // CoalesceExpressionHead_Await -> CoalesceExpression_Await
    Some((Builder::nop, "nop")),
    // CoalesceExpressionHead_Await -> BitwiseORExpression_Await
    Some((Builder::nop, "nop")),
    // BitwiseORExpression_Await -> BitwiseXORExpression_Await
    Some((Builder::nop, "nop")),
    // BitwiseORExpression_Await -> BitwiseORExpression_Await BIT_OR BitwiseXORExpression_Await
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_In -> ShiftExpression
    Some((Builder::nop, "nop")),
    // RelationalExpression_In -> RelationalExpression_In LT ShiftExpression
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_In -> RelationalExpression_In GT ShiftExpression
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_In -> RelationalExpression_In LTE ShiftExpression
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_In -> RelationalExpression_In GTE ShiftExpression
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_In -> RelationalExpression_In INSTANCEOF ShiftExpression
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_In -> RelationalExpression_In IN ShiftExpression
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_In -> PRIVATE_IDENTIFIER IN ShiftExpression
    Some((
        Builder::binary_expression_private,
        "binary_expression_private",
    )),
    // CoverInitializedName -> IdentifierReference Initializer_In
    Some((Builder::cover_initialized_name, "cover_initialized_name")),
    // TemplateMiddleList -> TEMPLATE_MIDDLE Expression_In
    Some((Builder::template_middle_list, "template_middle_list")),
    // TemplateMiddleList -> TemplateMiddleList TEMPLATE_MIDDLE Expression_In
    Some((
        Builder::template_middle_list_append,
        "template_middle_list_append",
    )),
    // BitwiseANDExpression -> EqualityExpression
    Some((Builder::nop, "nop")),
    // BitwiseANDExpression -> BitwiseANDExpression BIT_AND EqualityExpression
    Some((Builder::binary_expression, "binary_expression")),
    // CaseClauses_Return -> CaseClause_Return
    Some((Builder::create_list, "create_list")),
    // CaseClauses_Return -> CaseClauses_Return CaseClause_Return
    Some((Builder::append_to_list, "append_to_list")),
    // DefaultClause_Return -> DEFAULT COLON
    Some((
        Builder::switch_case_default_no_consequent,
        "switch_case_default_no_consequent",
    )),
    // DefaultClause_Return -> DEFAULT COLON StatementList_Return
    Some((Builder::switch_case_default, "switch_case_default")),
    // ComputedPropertyName_Yield -> LBRACK AssignmentExpression_In_Yield RBRACK
    Some((Builder::computed_property_name, "computed_property_name")),
    // LogicalORExpression_In_Yield -> LogicalANDExpression_In_Yield
    Some((Builder::nop, "nop")),
    // LogicalORExpression_In_Yield -> LogicalORExpression_In_Yield OR _TRUTHY_SHORT_CIRCUIT_ LogicalANDExpression_In_Yield
    Some((Builder::logical_expression, "logical_expression")),
    // CoalesceExpression_In_Yield -> CoalesceExpressionHead_In_Yield NULLISH _NULLISH_SHORT_CIRCUIT_ BitwiseORExpression_In_Yield
    Some((Builder::logical_expression, "logical_expression")),
    // CoverParenthesizedExpressionAndArrowParameterList_Yield -> LPAREN Expression_In_Yield RPAREN
    Some((Builder::cpeaapl_expr, "cpeaapl_expr")),
    // CoverParenthesizedExpressionAndArrowParameterList_Yield -> LPAREN Expression_In_Yield COMMA RPAREN
    Some((Builder::cpeaapl_expr_comma, "cpeaapl_expr_comma")),
    // CoverParenthesizedExpressionAndArrowParameterList_Yield -> LPAREN RPAREN
    Some((Builder::cpeaapl_empty, "cpeaapl_empty")),
    // CoverParenthesizedExpressionAndArrowParameterList_Yield -> LPAREN ELLIPSIS BindingIdentifier_Yield RPAREN
    Some((Builder::cpeaapl_rest, "cpeaapl_rest")),
    // CoverParenthesizedExpressionAndArrowParameterList_Yield -> LPAREN ELLIPSIS BindingPattern_Yield RPAREN
    Some((Builder::cpeaapl_rest, "cpeaapl_rest")),
    // CoverParenthesizedExpressionAndArrowParameterList_Yield -> LPAREN Expression_In_Yield COMMA ELLIPSIS BindingIdentifier_Yield RPAREN
    Some((Builder::cpeaapl_expr_rest, "cpeaapl_expr_rest")),
    // CoverParenthesizedExpressionAndArrowParameterList_Yield -> LPAREN Expression_In_Yield COMMA ELLIPSIS BindingPattern_Yield RPAREN
    Some((Builder::cpeaapl_expr_rest, "cpeaapl_expr_rest")),
    // MemberExpression_Yield -> PrimaryExpression_Yield
    Some((Builder::nop, "nop")),
    // MemberExpression_Yield -> MemberExpression_Yield LBRACK Expression_In_Yield RBRACK
    Some((
        Builder::member_expression_computed,
        "member_expression_computed",
    )),
    // MemberExpression_Yield -> MemberExpression_Yield DOT KeywordOrIdentifierName
    Some((Builder::member_expression, "member_expression")),
    // MemberExpression_Yield -> MemberExpression_Yield TemplateLiteral_Yield_Tagged
    Some((
        Builder::tagged_template_expression,
        "tagged_template_expression",
    )),
    // MemberExpression_Yield -> SuperProperty_Yield
    Some((Builder::nop, "nop")),
    // MemberExpression_Yield -> MetaProperty
    Some((Builder::nop, "nop")),
    // MemberExpression_Yield -> NEW MemberExpression_Yield Arguments_Yield
    Some((
        Builder::new_expression_arguments,
        "new_expression_arguments",
    )),
    // MemberExpression_Yield -> MemberExpression_Yield DOT PRIVATE_IDENTIFIER
    Some((
        Builder::member_expression_private,
        "member_expression_private",
    )),
    // Arguments_Yield -> LPAREN RPAREN
    Some((Builder::arguments_empty, "arguments_empty")),
    // Arguments_Yield -> LPAREN ArgumentList_Yield RPAREN
    Some((Builder::arguments, "arguments")),
    // Arguments_Yield -> LPAREN ArgumentList_Yield COMMA RPAREN
    Some((Builder::arguments_comma, "arguments_comma")),
    // SuperCall_Yield -> SUPER Arguments_Yield
    Some((Builder::call_expression_super, "call_expression_super")),
    // ImportCall_Yield -> IMPORT LPAREN AssignmentExpression_In_Yield RPAREN
    Some((Builder::import_expression, "import_expression")),
    // TemplateLiteral_Yield_Tagged -> NO_SUBSTITUTION_TEMPLATE
    Some((
        Builder::template_literal_no_subst,
        "template_literal_no_subst",
    )),
    // TemplateLiteral_Yield_Tagged -> SubstitutionTemplate_Yield_Tagged
    Some((Builder::nop, "nop")),
    // OptionalChain_Yield -> OPTIONAL_CHAINING Arguments_Yield
    Some((Builder::optional_call, "optional_call")),
    // OptionalChain_Yield -> OPTIONAL_CHAINING LBRACK Expression_In_Yield RBRACK
    Some((
        Builder::optional_computed_property,
        "optional_computed_property",
    )),
    // OptionalChain_Yield -> OPTIONAL_CHAINING KeywordOrIdentifierName
    Some((Builder::optional_member, "optional_member")),
    // OptionalChain_Yield -> OPTIONAL_CHAINING TemplateLiteral_Yield_Tagged
    Some((Builder::optional_member, "optional_member")),
    // OptionalChain_Yield -> OPTIONAL_CHAINING PRIVATE_IDENTIFIER
    Some((
        Builder::optional_private_identifier,
        "optional_private_identifier",
    )),
    // OptionalChain_Yield -> OptionalChain_Yield Arguments_Yield
    Some((
        Builder::optional_chain_append_call,
        "optional_chain_append_call",
    )),
    // OptionalChain_Yield -> OptionalChain_Yield LBRACK Expression_In_Yield RBRACK
    Some((
        Builder::optional_chain_append_computed_property,
        "optional_chain_append_computed_property",
    )),
    // OptionalChain_Yield -> OptionalChain_Yield DOT KeywordOrIdentifierName
    Some((
        Builder::optional_chain_append_property,
        "optional_chain_append_property",
    )),
    // OptionalChain_Yield -> OptionalChain_Yield TemplateLiteral_Yield_Tagged
    Some((
        Builder::optional_chain_append_tagged_template,
        "optional_chain_append_tagged_template",
    )),
    // OptionalChain_Yield -> OptionalChain_Yield DOT PRIVATE_IDENTIFIER
    Some((
        Builder::optional_chain_append_private_identifier,
        "optional_chain_append_private_identifier",
    )),
    // VariableDeclaration_In_Yield -> BindingIdentifier_Yield
    Some((Builder::variable_declarator, "variable_declarator")),
    // VariableDeclaration_In_Yield -> BindingIdentifier_Yield Initializer_In_Yield
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // VariableDeclaration_In_Yield -> BindingPattern_Yield Initializer_In_Yield
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // DoWhileStatement_Yield_Return -> DO _LOOP_START_ Statement_Yield_Return _LOOP_BODY_ WHILE LPAREN Expression_In_Yield RPAREN SEMICOLON
    Some((Builder::do_while_statement, "do_while_statement")),
    // WhileStatement_Yield_Return -> WHILE _LOOP_START_ LPAREN Expression_In_Yield RPAREN _LOOP_TEST_ Statement_Yield_Return
    Some((Builder::while_statement, "while_statement")),
    // ForStatement_Yield_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) SEMICOLON SEMICOLON RPAREN Statement_Yield_Return
    Some((
        Builder::for_statement_no_init_test_update,
        "for_statement_no_init_test_update",
    )),
    // ForStatement_Yield_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) Expression_Yield SEMICOLON _LOOP_INIT_EXPRESSION_ SEMICOLON RPAREN Statement_Yield_Return
    Some((
        Builder::for_statement_no_test_update,
        "for_statement_no_test_update",
    )),
    // ForStatement_Yield_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) SEMICOLON Expression_In_Yield SEMICOLON _LOOP_TEST_ RPAREN Statement_Yield_Return
    Some((
        Builder::for_statement_no_init_update,
        "for_statement_no_init_update",
    )),
    // ForStatement_Yield_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) Expression_Yield SEMICOLON _LOOP_INIT_EXPRESSION_ Expression_In_Yield SEMICOLON _LOOP_TEST_ RPAREN Statement_Yield_Return
    Some((Builder::for_statement_no_update, "for_statement_no_update")),
    // ForStatement_Yield_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) SEMICOLON SEMICOLON Expression_In_Yield RPAREN _LOOP_NEXT_ Statement_Yield_Return
    Some((
        Builder::for_statement_no_init_test,
        "for_statement_no_init_test",
    )),
    // ForStatement_Yield_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) Expression_Yield SEMICOLON _LOOP_INIT_EXPRESSION_ SEMICOLON Expression_In_Yield RPAREN _LOOP_NEXT_ Statement_Yield_Return
    Some((Builder::for_statement_no_test, "for_statement_no_test")),
    // ForStatement_Yield_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) SEMICOLON Expression_In_Yield SEMICOLON _LOOP_TEST_ Expression_In_Yield RPAREN _LOOP_NEXT_ Statement_Yield_Return
    Some((Builder::for_statement_no_init, "for_statement_no_init")),
    // ForStatement_Yield_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) Expression_Yield SEMICOLON _LOOP_INIT_EXPRESSION_ Expression_In_Yield SEMICOLON _LOOP_TEST_ Expression_In_Yield RPAREN _LOOP_NEXT_ Statement_Yield_Return
    Some((Builder::for_statement, "for_statement")),
    // ForStatement_Yield_Return -> FOR _LOOP_START_ LPAREN VAR VariableDeclarationList_Yield SEMICOLON _LOOP_INIT_VAR_DECLARATION_ SEMICOLON RPAREN Statement_Yield_Return
    Some((
        Builder::for_statement_vars_no_test_update,
        "for_statement_vars_no_test_update",
    )),
    // ForStatement_Yield_Return -> FOR _LOOP_START_ LPAREN VAR VariableDeclarationList_Yield SEMICOLON _LOOP_INIT_VAR_DECLARATION_ Expression_In_Yield SEMICOLON _LOOP_TEST_ RPAREN Statement_Yield_Return
    Some((
        Builder::for_statement_vars_no_update,
        "for_statement_vars_no_update",
    )),
    // ForStatement_Yield_Return -> FOR _LOOP_START_ LPAREN VAR VariableDeclarationList_Yield SEMICOLON _LOOP_INIT_VAR_DECLARATION_ SEMICOLON Expression_In_Yield RPAREN _LOOP_NEXT_ Statement_Yield_Return
    Some((
        Builder::for_statement_vars_no_test,
        "for_statement_vars_no_test",
    )),
    // ForStatement_Yield_Return -> FOR _LOOP_START_ LPAREN VAR VariableDeclarationList_Yield SEMICOLON _LOOP_INIT_VAR_DECLARATION_ Expression_In_Yield SEMICOLON _LOOP_TEST_ Expression_In_Yield RPAREN _LOOP_NEXT_ Statement_Yield_Return
    Some((Builder::for_statement_vars, "for_statement_vars")),
    // ForStatement_Yield_Return -> FOR _LOOP_START_ LPAREN LexicalDeclaration_Yield _LOOP_INIT_LEXICAL_DECLARATION_ SEMICOLON RPAREN Statement_Yield_Return
    Some((
        Builder::for_statement_decl_no_test_update,
        "for_statement_decl_no_test_update",
    )),
    // ForStatement_Yield_Return -> FOR _LOOP_START_ LPAREN LexicalDeclaration_Yield _LOOP_INIT_LEXICAL_DECLARATION_ Expression_In_Yield SEMICOLON _LOOP_TEST_ RPAREN Statement_Yield_Return
    Some((
        Builder::for_statement_decl_no_update,
        "for_statement_decl_no_update",
    )),
    // ForStatement_Yield_Return -> FOR _LOOP_START_ LPAREN LexicalDeclaration_Yield _LOOP_INIT_LEXICAL_DECLARATION_ SEMICOLON Expression_In_Yield RPAREN _LOOP_NEXT_ Statement_Yield_Return
    Some((
        Builder::for_statement_decl_no_test,
        "for_statement_decl_no_test",
    )),
    // ForStatement_Yield_Return -> FOR _LOOP_START_ LPAREN LexicalDeclaration_Yield _LOOP_INIT_LEXICAL_DECLARATION_ Expression_In_Yield SEMICOLON _LOOP_TEST_ Expression_In_Yield RPAREN _LOOP_NEXT_ Statement_Yield_Return
    Some((Builder::for_statement_decl, "for_statement_decl")),
    // ForInOfStatement_Yield_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) LeftHandSideExpression_Yield IN Expression_In_Yield RPAREN Statement_Yield_Return
    Some((Builder::for_in_statement, "for_in_statement")),
    // ForInOfStatement_Yield_Return -> FOR _LOOP_START_ LPAREN VAR ForBinding_Yield IN Expression_In_Yield RPAREN Statement_Yield_Return
    Some((Builder::for_in_statement_vars, "for_in_statement_vars")),
    // ForInOfStatement_Yield_Return -> FOR _LOOP_START_ LPAREN ForDeclaration_Yield IN Expression_In_Yield RPAREN Statement_Yield_Return
    Some((Builder::for_in_statement, "for_in_statement")),
    // ForInOfStatement_Yield_Return -> FOR _LOOP_START_ LPAREN (?![ASYNC OF, LET]) LeftHandSideExpression_Yield OF AssignmentExpression_In_Yield RPAREN Statement_Yield_Return
    Some((Builder::for_of_statement, "for_of_statement")),
    // ForInOfStatement_Yield_Return -> FOR _LOOP_START_ LPAREN VAR ForBinding_Yield OF AssignmentExpression_In_Yield RPAREN Statement_Yield_Return
    Some((Builder::for_of_statement_vars, "for_of_statement_vars")),
    // ForInOfStatement_Yield_Return -> FOR _LOOP_START_ LPAREN ForDeclaration_Yield OF AssignmentExpression_In_Yield RPAREN Statement_Yield_Return
    Some((Builder::for_of_statement, "for_of_statement")),
    // CaseBlock_Yield_Return -> LBRACE RBRACE
    Some((Builder::empty_list_block, "empty_list_block")),
    // CaseBlock_Yield_Return -> LBRACE CaseClauses_Yield_Return RBRACE
    Some((Builder::list_block, "list_block")),
    // CaseBlock_Yield_Return -> LBRACE DefaultClause_Yield_Return RBRACE
    Some((Builder::case_block_default, "case_block_default")),
    // CaseBlock_Yield_Return -> LBRACE CaseClauses_Yield_Return DefaultClause_Yield_Return RBRACE
    Some((
        Builder::case_block_cases_default,
        "case_block_cases_default",
    )),
    // CaseBlock_Yield_Return -> LBRACE DefaultClause_Yield_Return CaseClauses_Yield_Return RBRACE
    Some((
        Builder::case_block_default_cases,
        "case_block_default_cases",
    )),
    // CaseBlock_Yield_Return -> LBRACE CaseClauses_Yield_Return DefaultClause_Yield_Return CaseClauses_Yield_Return RBRACE
    Some((
        Builder::case_block_cases_default_cases,
        "case_block_cases_default_cases",
    )),
    // CatchParameter_Yield -> BindingIdentifier_Yield
    Some((Builder::nop, "nop")),
    // CatchParameter_Yield -> BindingPattern_Yield
    Some((Builder::nop, "nop")),
    // ClassHeritage_Yield -> EXTENDS LeftHandSideExpression_Yield
    Some((Builder::class_heritage, "class_heritage")),
    // ClassBody_Yield -> ClassElementList_Yield
    Some((Builder::nop, "nop")),
    // LexicalBinding_In_Yield -> BindingIdentifier_Yield
    Some((Builder::variable_declarator, "variable_declarator")),
    // LexicalBinding_In_Yield -> BindingIdentifier_Yield Initializer_In_Yield
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // LexicalBinding_In_Yield -> BindingPattern_Yield Initializer_In_Yield
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // DoWhileStatement_Await_Return -> DO _LOOP_START_ Statement_Await_Return _LOOP_BODY_ WHILE LPAREN Expression_In_Await RPAREN SEMICOLON
    Some((Builder::do_while_statement, "do_while_statement")),
    // WhileStatement_Await_Return -> WHILE _LOOP_START_ LPAREN Expression_In_Await RPAREN _LOOP_TEST_ Statement_Await_Return
    Some((Builder::while_statement, "while_statement")),
    // ForStatement_Await_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) SEMICOLON SEMICOLON RPAREN Statement_Await_Return
    Some((
        Builder::for_statement_no_init_test_update,
        "for_statement_no_init_test_update",
    )),
    // ForStatement_Await_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) Expression_Await SEMICOLON _LOOP_INIT_EXPRESSION_ SEMICOLON RPAREN Statement_Await_Return
    Some((
        Builder::for_statement_no_test_update,
        "for_statement_no_test_update",
    )),
    // ForStatement_Await_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) SEMICOLON Expression_In_Await SEMICOLON _LOOP_TEST_ RPAREN Statement_Await_Return
    Some((
        Builder::for_statement_no_init_update,
        "for_statement_no_init_update",
    )),
    // ForStatement_Await_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) Expression_Await SEMICOLON _LOOP_INIT_EXPRESSION_ Expression_In_Await SEMICOLON _LOOP_TEST_ RPAREN Statement_Await_Return
    Some((Builder::for_statement_no_update, "for_statement_no_update")),
    // ForStatement_Await_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) SEMICOLON SEMICOLON Expression_In_Await RPAREN _LOOP_NEXT_ Statement_Await_Return
    Some((
        Builder::for_statement_no_init_test,
        "for_statement_no_init_test",
    )),
    // ForStatement_Await_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) Expression_Await SEMICOLON _LOOP_INIT_EXPRESSION_ SEMICOLON Expression_In_Await RPAREN _LOOP_NEXT_ Statement_Await_Return
    Some((Builder::for_statement_no_test, "for_statement_no_test")),
    // ForStatement_Await_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) SEMICOLON Expression_In_Await SEMICOLON _LOOP_TEST_ Expression_In_Await RPAREN _LOOP_NEXT_ Statement_Await_Return
    Some((Builder::for_statement_no_init, "for_statement_no_init")),
    // ForStatement_Await_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) Expression_Await SEMICOLON _LOOP_INIT_EXPRESSION_ Expression_In_Await SEMICOLON _LOOP_TEST_ Expression_In_Await RPAREN _LOOP_NEXT_ Statement_Await_Return
    Some((Builder::for_statement, "for_statement")),
    // ForStatement_Await_Return -> FOR _LOOP_START_ LPAREN VAR VariableDeclarationList_Await SEMICOLON _LOOP_INIT_VAR_DECLARATION_ SEMICOLON RPAREN Statement_Await_Return
    Some((
        Builder::for_statement_vars_no_test_update,
        "for_statement_vars_no_test_update",
    )),
    // ForStatement_Await_Return -> FOR _LOOP_START_ LPAREN VAR VariableDeclarationList_Await SEMICOLON _LOOP_INIT_VAR_DECLARATION_ Expression_In_Await SEMICOLON _LOOP_TEST_ RPAREN Statement_Await_Return
    Some((
        Builder::for_statement_vars_no_update,
        "for_statement_vars_no_update",
    )),
    // ForStatement_Await_Return -> FOR _LOOP_START_ LPAREN VAR VariableDeclarationList_Await SEMICOLON _LOOP_INIT_VAR_DECLARATION_ SEMICOLON Expression_In_Await RPAREN _LOOP_NEXT_ Statement_Await_Return
    Some((
        Builder::for_statement_vars_no_test,
        "for_statement_vars_no_test",
    )),
    // ForStatement_Await_Return -> FOR _LOOP_START_ LPAREN VAR VariableDeclarationList_Await SEMICOLON _LOOP_INIT_VAR_DECLARATION_ Expression_In_Await SEMICOLON _LOOP_TEST_ Expression_In_Await RPAREN _LOOP_NEXT_ Statement_Await_Return
    Some((Builder::for_statement_vars, "for_statement_vars")),
    // ForStatement_Await_Return -> FOR _LOOP_START_ LPAREN LexicalDeclaration_Await _LOOP_INIT_LEXICAL_DECLARATION_ SEMICOLON RPAREN Statement_Await_Return
    Some((
        Builder::for_statement_decl_no_test_update,
        "for_statement_decl_no_test_update",
    )),
    // ForStatement_Await_Return -> FOR _LOOP_START_ LPAREN LexicalDeclaration_Await _LOOP_INIT_LEXICAL_DECLARATION_ Expression_In_Await SEMICOLON _LOOP_TEST_ RPAREN Statement_Await_Return
    Some((
        Builder::for_statement_decl_no_update,
        "for_statement_decl_no_update",
    )),
    // ForStatement_Await_Return -> FOR _LOOP_START_ LPAREN LexicalDeclaration_Await _LOOP_INIT_LEXICAL_DECLARATION_ SEMICOLON Expression_In_Await RPAREN _LOOP_NEXT_ Statement_Await_Return
    Some((
        Builder::for_statement_decl_no_test,
        "for_statement_decl_no_test",
    )),
    // ForStatement_Await_Return -> FOR _LOOP_START_ LPAREN LexicalDeclaration_Await _LOOP_INIT_LEXICAL_DECLARATION_ Expression_In_Await SEMICOLON _LOOP_TEST_ Expression_In_Await RPAREN _LOOP_NEXT_ Statement_Await_Return
    Some((Builder::for_statement_decl, "for_statement_decl")),
    // ForInOfStatement_Await_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) LeftHandSideExpression_Await IN Expression_In_Await RPAREN Statement_Await_Return
    Some((Builder::for_in_statement, "for_in_statement")),
    // ForInOfStatement_Await_Return -> FOR _LOOP_START_ LPAREN VAR ForBinding_Await IN Expression_In_Await RPAREN Statement_Await_Return
    Some((Builder::for_in_statement_vars, "for_in_statement_vars")),
    // ForInOfStatement_Await_Return -> FOR _LOOP_START_ LPAREN ForDeclaration_Await IN Expression_In_Await RPAREN Statement_Await_Return
    Some((Builder::for_in_statement, "for_in_statement")),
    // ForInOfStatement_Await_Return -> FOR _LOOP_START_ LPAREN (?![ASYNC OF, LET]) LeftHandSideExpression_Await OF AssignmentExpression_In_Await RPAREN Statement_Await_Return
    Some((Builder::for_of_statement, "for_of_statement")),
    // ForInOfStatement_Await_Return -> FOR _LOOP_START_ LPAREN VAR ForBinding_Await OF AssignmentExpression_In_Await RPAREN Statement_Await_Return
    Some((Builder::for_of_statement_vars, "for_of_statement_vars")),
    // ForInOfStatement_Await_Return -> FOR _LOOP_START_ LPAREN ForDeclaration_Await OF AssignmentExpression_In_Await RPAREN Statement_Await_Return
    Some((Builder::for_of_statement, "for_of_statement")),
    // ForInOfStatement_Await_Return -> FOR AWAIT _LOOP_START_ LPAREN (?![LET]) LeftHandSideExpression_Await OF AssignmentExpression_In_Await RPAREN Statement_Await_Return
    Some((Builder::for_of_statement_await, "for_of_statement_await")),
    // ForInOfStatement_Await_Return -> FOR AWAIT _LOOP_START_ LPAREN VAR ForBinding_Await OF AssignmentExpression_In_Await RPAREN Statement_Await_Return
    Some((
        Builder::for_of_statement_await_vars,
        "for_of_statement_await_vars",
    )),
    // ForInOfStatement_Await_Return -> FOR AWAIT _LOOP_START_ LPAREN ForDeclaration_Await OF AssignmentExpression_In_Await RPAREN Statement_Await_Return
    Some((Builder::for_of_statement_await, "for_of_statement_await")),
    // CaseBlock_Await_Return -> LBRACE RBRACE
    Some((Builder::empty_list_block, "empty_list_block")),
    // CaseBlock_Await_Return -> LBRACE CaseClauses_Await_Return RBRACE
    Some((Builder::list_block, "list_block")),
    // CaseBlock_Await_Return -> LBRACE DefaultClause_Await_Return RBRACE
    Some((Builder::case_block_default, "case_block_default")),
    // CaseBlock_Await_Return -> LBRACE CaseClauses_Await_Return DefaultClause_Await_Return RBRACE
    Some((
        Builder::case_block_cases_default,
        "case_block_cases_default",
    )),
    // CaseBlock_Await_Return -> LBRACE DefaultClause_Await_Return CaseClauses_Await_Return RBRACE
    Some((
        Builder::case_block_default_cases,
        "case_block_default_cases",
    )),
    // CaseBlock_Await_Return -> LBRACE CaseClauses_Await_Return DefaultClause_Await_Return CaseClauses_Await_Return RBRACE
    Some((
        Builder::case_block_cases_default_cases,
        "case_block_cases_default_cases",
    )),
    // ComputedPropertyName_Yield_Await -> LBRACK AssignmentExpression_In_Yield_Await RBRACK
    Some((Builder::computed_property_name, "computed_property_name")),
    // LogicalORExpression_In_Yield_Await -> LogicalANDExpression_In_Yield_Await
    Some((Builder::nop, "nop")),
    // LogicalORExpression_In_Yield_Await -> LogicalORExpression_In_Yield_Await OR _TRUTHY_SHORT_CIRCUIT_ LogicalANDExpression_In_Yield_Await
    Some((Builder::logical_expression, "logical_expression")),
    // CoalesceExpression_In_Yield_Await -> CoalesceExpressionHead_In_Yield_Await NULLISH _NULLISH_SHORT_CIRCUIT_ BitwiseORExpression_In_Yield_Await
    Some((Builder::logical_expression, "logical_expression")),
    // CoverParenthesizedExpressionAndArrowParameterList_Yield_Await -> LPAREN Expression_In_Yield_Await RPAREN
    Some((Builder::cpeaapl_expr, "cpeaapl_expr")),
    // CoverParenthesizedExpressionAndArrowParameterList_Yield_Await -> LPAREN Expression_In_Yield_Await COMMA RPAREN
    Some((Builder::cpeaapl_expr_comma, "cpeaapl_expr_comma")),
    // CoverParenthesizedExpressionAndArrowParameterList_Yield_Await -> LPAREN RPAREN
    Some((Builder::cpeaapl_empty, "cpeaapl_empty")),
    // CoverParenthesizedExpressionAndArrowParameterList_Yield_Await -> LPAREN ELLIPSIS BindingIdentifier_Yield_Await RPAREN
    Some((Builder::cpeaapl_rest, "cpeaapl_rest")),
    // CoverParenthesizedExpressionAndArrowParameterList_Yield_Await -> LPAREN ELLIPSIS BindingPattern_Yield_Await RPAREN
    Some((Builder::cpeaapl_rest, "cpeaapl_rest")),
    // CoverParenthesizedExpressionAndArrowParameterList_Yield_Await -> LPAREN Expression_In_Yield_Await COMMA ELLIPSIS BindingIdentifier_Yield_Await RPAREN
    Some((Builder::cpeaapl_expr_rest, "cpeaapl_expr_rest")),
    // CoverParenthesizedExpressionAndArrowParameterList_Yield_Await -> LPAREN Expression_In_Yield_Await COMMA ELLIPSIS BindingPattern_Yield_Await RPAREN
    Some((Builder::cpeaapl_expr_rest, "cpeaapl_expr_rest")),
    // MemberExpression_Yield_Await -> PrimaryExpression_Yield_Await
    Some((Builder::nop, "nop")),
    // MemberExpression_Yield_Await -> MemberExpression_Yield_Await LBRACK Expression_In_Yield_Await RBRACK
    Some((
        Builder::member_expression_computed,
        "member_expression_computed",
    )),
    // MemberExpression_Yield_Await -> MemberExpression_Yield_Await DOT KeywordOrIdentifierName
    Some((Builder::member_expression, "member_expression")),
    // MemberExpression_Yield_Await -> MemberExpression_Yield_Await TemplateLiteral_Yield_Await_Tagged
    Some((
        Builder::tagged_template_expression,
        "tagged_template_expression",
    )),
    // MemberExpression_Yield_Await -> SuperProperty_Yield_Await
    Some((Builder::nop, "nop")),
    // MemberExpression_Yield_Await -> MetaProperty
    Some((Builder::nop, "nop")),
    // MemberExpression_Yield_Await -> NEW MemberExpression_Yield_Await Arguments_Yield_Await
    Some((
        Builder::new_expression_arguments,
        "new_expression_arguments",
    )),
    // MemberExpression_Yield_Await -> MemberExpression_Yield_Await DOT PRIVATE_IDENTIFIER
    Some((
        Builder::member_expression_private,
        "member_expression_private",
    )),
    // Arguments_Yield_Await -> LPAREN RPAREN
    Some((Builder::arguments_empty, "arguments_empty")),
    // Arguments_Yield_Await -> LPAREN ArgumentList_Yield_Await RPAREN
    Some((Builder::arguments, "arguments")),
    // Arguments_Yield_Await -> LPAREN ArgumentList_Yield_Await COMMA RPAREN
    Some((Builder::arguments_comma, "arguments_comma")),
    // SuperCall_Yield_Await -> SUPER Arguments_Yield_Await
    Some((Builder::call_expression_super, "call_expression_super")),
    // ImportCall_Yield_Await -> IMPORT LPAREN AssignmentExpression_In_Yield_Await RPAREN
    Some((Builder::import_expression, "import_expression")),
    // TemplateLiteral_Yield_Await_Tagged -> NO_SUBSTITUTION_TEMPLATE
    Some((
        Builder::template_literal_no_subst,
        "template_literal_no_subst",
    )),
    // TemplateLiteral_Yield_Await_Tagged -> SubstitutionTemplate_Yield_Await_Tagged
    Some((Builder::nop, "nop")),
    // OptionalChain_Yield_Await -> OPTIONAL_CHAINING Arguments_Yield_Await
    Some((Builder::optional_call, "optional_call")),
    // OptionalChain_Yield_Await -> OPTIONAL_CHAINING LBRACK Expression_In_Yield_Await RBRACK
    Some((
        Builder::optional_computed_property,
        "optional_computed_property",
    )),
    // OptionalChain_Yield_Await -> OPTIONAL_CHAINING KeywordOrIdentifierName
    Some((Builder::optional_member, "optional_member")),
    // OptionalChain_Yield_Await -> OPTIONAL_CHAINING TemplateLiteral_Yield_Await_Tagged
    Some((Builder::optional_member, "optional_member")),
    // OptionalChain_Yield_Await -> OPTIONAL_CHAINING PRIVATE_IDENTIFIER
    Some((
        Builder::optional_private_identifier,
        "optional_private_identifier",
    )),
    // OptionalChain_Yield_Await -> OptionalChain_Yield_Await Arguments_Yield_Await
    Some((
        Builder::optional_chain_append_call,
        "optional_chain_append_call",
    )),
    // OptionalChain_Yield_Await -> OptionalChain_Yield_Await LBRACK Expression_In_Yield_Await RBRACK
    Some((
        Builder::optional_chain_append_computed_property,
        "optional_chain_append_computed_property",
    )),
    // OptionalChain_Yield_Await -> OptionalChain_Yield_Await DOT KeywordOrIdentifierName
    Some((
        Builder::optional_chain_append_property,
        "optional_chain_append_property",
    )),
    // OptionalChain_Yield_Await -> OptionalChain_Yield_Await TemplateLiteral_Yield_Await_Tagged
    Some((
        Builder::optional_chain_append_tagged_template,
        "optional_chain_append_tagged_template",
    )),
    // OptionalChain_Yield_Await -> OptionalChain_Yield_Await DOT PRIVATE_IDENTIFIER
    Some((
        Builder::optional_chain_append_private_identifier,
        "optional_chain_append_private_identifier",
    )),
    // VariableDeclaration_In_Yield_Await -> BindingIdentifier_Yield_Await
    Some((Builder::variable_declarator, "variable_declarator")),
    // VariableDeclaration_In_Yield_Await -> BindingIdentifier_Yield_Await Initializer_In_Yield_Await
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // VariableDeclaration_In_Yield_Await -> BindingPattern_Yield_Await Initializer_In_Yield_Await
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // DoWhileStatement_Yield_Await_Return -> DO _LOOP_START_ Statement_Yield_Await_Return _LOOP_BODY_ WHILE LPAREN Expression_In_Yield_Await RPAREN SEMICOLON
    Some((Builder::do_while_statement, "do_while_statement")),
    // WhileStatement_Yield_Await_Return -> WHILE _LOOP_START_ LPAREN Expression_In_Yield_Await RPAREN _LOOP_TEST_ Statement_Yield_Await_Return
    Some((Builder::while_statement, "while_statement")),
    // ForStatement_Yield_Await_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) SEMICOLON SEMICOLON RPAREN Statement_Yield_Await_Return
    Some((
        Builder::for_statement_no_init_test_update,
        "for_statement_no_init_test_update",
    )),
    // ForStatement_Yield_Await_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) Expression_Yield_Await SEMICOLON _LOOP_INIT_EXPRESSION_ SEMICOLON RPAREN Statement_Yield_Await_Return
    Some((
        Builder::for_statement_no_test_update,
        "for_statement_no_test_update",
    )),
    // ForStatement_Yield_Await_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) SEMICOLON Expression_In_Yield_Await SEMICOLON _LOOP_TEST_ RPAREN Statement_Yield_Await_Return
    Some((
        Builder::for_statement_no_init_update,
        "for_statement_no_init_update",
    )),
    // ForStatement_Yield_Await_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) Expression_Yield_Await SEMICOLON _LOOP_INIT_EXPRESSION_ Expression_In_Yield_Await SEMICOLON _LOOP_TEST_ RPAREN Statement_Yield_Await_Return
    Some((Builder::for_statement_no_update, "for_statement_no_update")),
    // ForStatement_Yield_Await_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) SEMICOLON SEMICOLON Expression_In_Yield_Await RPAREN _LOOP_NEXT_ Statement_Yield_Await_Return
    Some((
        Builder::for_statement_no_init_test,
        "for_statement_no_init_test",
    )),
    // ForStatement_Yield_Await_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) Expression_Yield_Await SEMICOLON _LOOP_INIT_EXPRESSION_ SEMICOLON Expression_In_Yield_Await RPAREN _LOOP_NEXT_ Statement_Yield_Await_Return
    Some((Builder::for_statement_no_test, "for_statement_no_test")),
    // ForStatement_Yield_Await_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) SEMICOLON Expression_In_Yield_Await SEMICOLON _LOOP_TEST_ Expression_In_Yield_Await RPAREN _LOOP_NEXT_ Statement_Yield_Await_Return
    Some((Builder::for_statement_no_init, "for_statement_no_init")),
    // ForStatement_Yield_Await_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) Expression_Yield_Await SEMICOLON _LOOP_INIT_EXPRESSION_ Expression_In_Yield_Await SEMICOLON _LOOP_TEST_ Expression_In_Yield_Await RPAREN _LOOP_NEXT_ Statement_Yield_Await_Return
    Some((Builder::for_statement, "for_statement")),
    // ForStatement_Yield_Await_Return -> FOR _LOOP_START_ LPAREN VAR VariableDeclarationList_Yield_Await SEMICOLON _LOOP_INIT_VAR_DECLARATION_ SEMICOLON RPAREN Statement_Yield_Await_Return
    Some((
        Builder::for_statement_vars_no_test_update,
        "for_statement_vars_no_test_update",
    )),
    // ForStatement_Yield_Await_Return -> FOR _LOOP_START_ LPAREN VAR VariableDeclarationList_Yield_Await SEMICOLON _LOOP_INIT_VAR_DECLARATION_ Expression_In_Yield_Await SEMICOLON _LOOP_TEST_ RPAREN Statement_Yield_Await_Return
    Some((
        Builder::for_statement_vars_no_update,
        "for_statement_vars_no_update",
    )),
    // ForStatement_Yield_Await_Return -> FOR _LOOP_START_ LPAREN VAR VariableDeclarationList_Yield_Await SEMICOLON _LOOP_INIT_VAR_DECLARATION_ SEMICOLON Expression_In_Yield_Await RPAREN _LOOP_NEXT_ Statement_Yield_Await_Return
    Some((
        Builder::for_statement_vars_no_test,
        "for_statement_vars_no_test",
    )),
    // ForStatement_Yield_Await_Return -> FOR _LOOP_START_ LPAREN VAR VariableDeclarationList_Yield_Await SEMICOLON _LOOP_INIT_VAR_DECLARATION_ Expression_In_Yield_Await SEMICOLON _LOOP_TEST_ Expression_In_Yield_Await RPAREN _LOOP_NEXT_ Statement_Yield_Await_Return
    Some((Builder::for_statement_vars, "for_statement_vars")),
    // ForStatement_Yield_Await_Return -> FOR _LOOP_START_ LPAREN LexicalDeclaration_Yield_Await _LOOP_INIT_LEXICAL_DECLARATION_ SEMICOLON RPAREN Statement_Yield_Await_Return
    Some((
        Builder::for_statement_decl_no_test_update,
        "for_statement_decl_no_test_update",
    )),
    // ForStatement_Yield_Await_Return -> FOR _LOOP_START_ LPAREN LexicalDeclaration_Yield_Await _LOOP_INIT_LEXICAL_DECLARATION_ Expression_In_Yield_Await SEMICOLON _LOOP_TEST_ RPAREN Statement_Yield_Await_Return
    Some((
        Builder::for_statement_decl_no_update,
        "for_statement_decl_no_update",
    )),
    // ForStatement_Yield_Await_Return -> FOR _LOOP_START_ LPAREN LexicalDeclaration_Yield_Await _LOOP_INIT_LEXICAL_DECLARATION_ SEMICOLON Expression_In_Yield_Await RPAREN _LOOP_NEXT_ Statement_Yield_Await_Return
    Some((
        Builder::for_statement_decl_no_test,
        "for_statement_decl_no_test",
    )),
    // ForStatement_Yield_Await_Return -> FOR _LOOP_START_ LPAREN LexicalDeclaration_Yield_Await _LOOP_INIT_LEXICAL_DECLARATION_ Expression_In_Yield_Await SEMICOLON _LOOP_TEST_ Expression_In_Yield_Await RPAREN _LOOP_NEXT_ Statement_Yield_Await_Return
    Some((Builder::for_statement_decl, "for_statement_decl")),
    // ForInOfStatement_Yield_Await_Return -> FOR _LOOP_START_ LPAREN (?![LET LBRACK]) LeftHandSideExpression_Yield_Await IN Expression_In_Yield_Await RPAREN Statement_Yield_Await_Return
    Some((Builder::for_in_statement, "for_in_statement")),
    // ForInOfStatement_Yield_Await_Return -> FOR _LOOP_START_ LPAREN VAR ForBinding_Yield_Await IN Expression_In_Yield_Await RPAREN Statement_Yield_Await_Return
    Some((Builder::for_in_statement_vars, "for_in_statement_vars")),
    // ForInOfStatement_Yield_Await_Return -> FOR _LOOP_START_ LPAREN ForDeclaration_Yield_Await IN Expression_In_Yield_Await RPAREN Statement_Yield_Await_Return
    Some((Builder::for_in_statement, "for_in_statement")),
    // ForInOfStatement_Yield_Await_Return -> FOR _LOOP_START_ LPAREN (?![ASYNC OF, LET]) LeftHandSideExpression_Yield_Await OF AssignmentExpression_In_Yield_Await RPAREN Statement_Yield_Await_Return
    Some((Builder::for_of_statement, "for_of_statement")),
    // ForInOfStatement_Yield_Await_Return -> FOR _LOOP_START_ LPAREN VAR ForBinding_Yield_Await OF AssignmentExpression_In_Yield_Await RPAREN Statement_Yield_Await_Return
    Some((Builder::for_of_statement_vars, "for_of_statement_vars")),
    // ForInOfStatement_Yield_Await_Return -> FOR _LOOP_START_ LPAREN ForDeclaration_Yield_Await OF AssignmentExpression_In_Yield_Await RPAREN Statement_Yield_Await_Return
    Some((Builder::for_of_statement, "for_of_statement")),
    // ForInOfStatement_Yield_Await_Return -> FOR AWAIT _LOOP_START_ LPAREN (?![LET]) LeftHandSideExpression_Yield_Await OF AssignmentExpression_In_Yield_Await RPAREN Statement_Yield_Await_Return
    Some((Builder::for_of_statement_await, "for_of_statement_await")),
    // ForInOfStatement_Yield_Await_Return -> FOR AWAIT _LOOP_START_ LPAREN VAR ForBinding_Yield_Await OF AssignmentExpression_In_Yield_Await RPAREN Statement_Yield_Await_Return
    Some((
        Builder::for_of_statement_await_vars,
        "for_of_statement_await_vars",
    )),
    // ForInOfStatement_Yield_Await_Return -> FOR AWAIT _LOOP_START_ LPAREN ForDeclaration_Yield_Await OF AssignmentExpression_In_Yield_Await RPAREN Statement_Yield_Await_Return
    Some((Builder::for_of_statement_await, "for_of_statement_await")),
    // CaseBlock_Yield_Await_Return -> LBRACE RBRACE
    Some((Builder::empty_list_block, "empty_list_block")),
    // CaseBlock_Yield_Await_Return -> LBRACE CaseClauses_Yield_Await_Return RBRACE
    Some((Builder::list_block, "list_block")),
    // CaseBlock_Yield_Await_Return -> LBRACE DefaultClause_Yield_Await_Return RBRACE
    Some((Builder::case_block_default, "case_block_default")),
    // CaseBlock_Yield_Await_Return -> LBRACE CaseClauses_Yield_Await_Return DefaultClause_Yield_Await_Return RBRACE
    Some((
        Builder::case_block_cases_default,
        "case_block_cases_default",
    )),
    // CaseBlock_Yield_Await_Return -> LBRACE DefaultClause_Yield_Await_Return CaseClauses_Yield_Await_Return RBRACE
    Some((
        Builder::case_block_default_cases,
        "case_block_default_cases",
    )),
    // CaseBlock_Yield_Await_Return -> LBRACE CaseClauses_Yield_Await_Return DefaultClause_Yield_Await_Return CaseClauses_Yield_Await_Return RBRACE
    Some((
        Builder::case_block_cases_default_cases,
        "case_block_cases_default_cases",
    )),
    // CatchParameter_Yield_Await -> BindingIdentifier_Yield_Await
    Some((Builder::nop, "nop")),
    // CatchParameter_Yield_Await -> BindingPattern_Yield_Await
    Some((Builder::nop, "nop")),
    // ClassHeritage_Yield_Await -> EXTENDS LeftHandSideExpression_Yield_Await
    Some((Builder::class_heritage, "class_heritage")),
    // ClassBody_Yield_Await -> ClassElementList_Yield_Await
    Some((Builder::nop, "nop")),
    // LexicalBinding_In_Yield_Await -> BindingIdentifier_Yield_Await
    Some((Builder::variable_declarator, "variable_declarator")),
    // LexicalBinding_In_Yield_Await -> BindingIdentifier_Yield_Await Initializer_In_Yield_Await
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // LexicalBinding_In_Yield_Await -> BindingPattern_Yield_Await Initializer_In_Yield_Await
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // AdditiveExpression_Await -> MultiplicativeExpression_Await
    Some((Builder::nop, "nop")),
    // AdditiveExpression_Await -> AdditiveExpression_Await ADD MultiplicativeExpression_Await
    Some((Builder::binary_expression, "binary_expression")),
    // AdditiveExpression_Await -> AdditiveExpression_Await SUB MultiplicativeExpression_Await
    Some((Builder::binary_expression, "binary_expression")),
    // BitwiseXORExpression_Await -> BitwiseANDExpression_Await
    Some((Builder::nop, "nop")),
    // BitwiseXORExpression_Await -> BitwiseXORExpression_Await BIT_XOR BitwiseANDExpression_Await
    Some((Builder::binary_expression, "binary_expression")),
    // ShiftExpression -> AdditiveExpression
    Some((Builder::nop, "nop")),
    // ShiftExpression -> ShiftExpression SHL AdditiveExpression
    Some((Builder::binary_expression, "binary_expression")),
    // ShiftExpression -> ShiftExpression SAR AdditiveExpression
    Some((Builder::binary_expression, "binary_expression")),
    // ShiftExpression -> ShiftExpression SHR AdditiveExpression
    Some((Builder::binary_expression, "binary_expression")),
    // EqualityExpression -> RelationalExpression
    Some((Builder::nop, "nop")),
    // EqualityExpression -> EqualityExpression EQ RelationalExpression
    Some((Builder::binary_expression, "binary_expression")),
    // EqualityExpression -> EqualityExpression NE RelationalExpression
    Some((Builder::binary_expression, "binary_expression")),
    // EqualityExpression -> EqualityExpression EQ_STRICT RelationalExpression
    Some((Builder::binary_expression, "binary_expression")),
    // EqualityExpression -> EqualityExpression NE_STRICT RelationalExpression
    Some((Builder::binary_expression, "binary_expression")),
    // CaseClause_Return -> CASE Expression_In COLON
    Some((
        Builder::switch_case_no_consequent,
        "switch_case_no_consequent",
    )),
    // CaseClause_Return -> CASE Expression_In COLON StatementList_Return
    Some((Builder::switch_case, "switch_case")),
    // LogicalANDExpression_In_Yield -> BitwiseORExpression_In_Yield
    Some((Builder::nop, "nop")),
    // LogicalANDExpression_In_Yield -> LogicalANDExpression_In_Yield AND _FALSY_SHORT_CIRCUIT_ BitwiseORExpression_In_Yield
    Some((Builder::logical_expression, "logical_expression")),
    // CoalesceExpressionHead_In_Yield -> CoalesceExpression_In_Yield
    Some((Builder::nop, "nop")),
    // CoalesceExpressionHead_In_Yield -> BitwiseORExpression_In_Yield
    Some((Builder::nop, "nop")),
    // BitwiseORExpression_In_Yield -> BitwiseXORExpression_In_Yield
    Some((Builder::nop, "nop")),
    // BitwiseORExpression_In_Yield -> BitwiseORExpression_In_Yield BIT_OR BitwiseXORExpression_In_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // PrimaryExpression_Yield -> THIS
    Some((Builder::this_expression, "this_expression")),
    // PrimaryExpression_Yield -> IdentifierReference_Yield
    Some((Builder::nop, "nop")),
    // PrimaryExpression_Yield -> Literal
    Some((Builder::nop, "nop")),
    // PrimaryExpression_Yield -> ArrayLiteral_Yield
    Some((Builder::nop, "nop")),
    // PrimaryExpression_Yield -> ObjectLiteral_Yield
    Some((Builder::nop, "nop")),
    // PrimaryExpression_Yield -> FunctionExpression
    Some((Builder::nop, "nop")),
    // PrimaryExpression_Yield -> ClassExpression_Yield
    Some((Builder::nop, "nop")),
    // PrimaryExpression_Yield -> GeneratorExpression
    Some((Builder::nop, "nop")),
    // PrimaryExpression_Yield -> AsyncFunctionExpression
    Some((Builder::nop, "nop")),
    // PrimaryExpression_Yield -> AsyncGeneratorExpression
    Some((Builder::nop, "nop")),
    // PrimaryExpression_Yield -> REGULAR_EXPRESSION_LITERAL
    Some((Builder::regexp_literal, "regexp_literal")),
    // PrimaryExpression_Yield -> TemplateLiteral_Yield
    Some((Builder::nop, "nop")),
    // PrimaryExpression_Yield -> CoverParenthesizedExpressionAndArrowParameterList_Yield
    Some((
        Builder::primary_expression_cpeaapl,
        "primary_expression_cpeaapl",
    )),
    // SuperProperty_Yield -> SUPER LBRACK Expression_In_Yield RBRACK
    Some((Builder::super_property_computed, "super_property_computed")),
    // SuperProperty_Yield -> SUPER DOT KeywordOrIdentifierName
    Some((Builder::super_property, "super_property")),
    // ArgumentList_Yield -> AssignmentExpression_In_Yield
    Some((Builder::argument_list, "argument_list")),
    // ArgumentList_Yield -> ELLIPSIS AssignmentExpression_In_Yield
    Some((Builder::argument_list_rest, "argument_list_rest")),
    // ArgumentList_Yield -> ArgumentList_Yield COMMA AssignmentExpression_In_Yield
    Some((Builder::argument_list_append, "argument_list_append")),
    // ArgumentList_Yield -> ArgumentList_Yield COMMA ELLIPSIS AssignmentExpression_In_Yield
    Some((
        Builder::argument_list_append_rest,
        "argument_list_append_rest",
    )),
    // SubstitutionTemplate_Yield_Tagged -> TEMPLATE_HEAD Expression_In_Yield TemplateSpans_Yield_Tagged
    Some((Builder::template_literal, "template_literal")),
    // Expression_Yield -> AssignmentExpression_Yield
    Some((Builder::nop, "nop")),
    // Expression_Yield -> Expression_Yield COMMA AssignmentExpression_Yield
    Some((Builder::sequence_expression, "sequence_expression")),
    // VariableDeclarationList_Yield -> VariableDeclaration_Yield
    Some((Builder::create_list, "create_list")),
    // VariableDeclarationList_Yield -> VariableDeclarationList_Yield COMMA VariableDeclaration_Yield
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // LexicalDeclaration_Yield -> LET BindingList_Yield SEMICOLON
    Some((Builder::variable_declaration, "variable_declaration")),
    // LexicalDeclaration_Yield -> CONST BindingList_Yield SEMICOLON
    Some((Builder::variable_declaration, "variable_declaration")),
    // ForBinding_Yield -> BindingIdentifier_Yield
    Some((Builder::for_binding, "for_binding")),
    // ForBinding_Yield -> BindingPattern_Yield
    Some((Builder::for_binding, "for_binding")),
    // ForDeclaration_Yield -> LET ForBinding_Yield
    Some((Builder::for_declaration, "for_declaration")),
    // ForDeclaration_Yield -> CONST ForBinding_Yield
    Some((Builder::for_declaration, "for_declaration")),
    // CaseClauses_Yield_Return -> CaseClause_Yield_Return
    Some((Builder::create_list, "create_list")),
    // CaseClauses_Yield_Return -> CaseClauses_Yield_Return CaseClause_Yield_Return
    Some((Builder::append_to_list, "append_to_list")),
    // DefaultClause_Yield_Return -> DEFAULT COLON
    Some((
        Builder::switch_case_default_no_consequent,
        "switch_case_default_no_consequent",
    )),
    // DefaultClause_Yield_Return -> DEFAULT COLON StatementList_Yield_Return
    Some((Builder::switch_case_default, "switch_case_default")),
    // ClassElementList_Yield -> ClassElement_Yield
    Some((Builder::class_element_list, "class_element_list")),
    // ClassElementList_Yield -> ClassElementList_Yield ClassElement_Yield
    Some((
        Builder::class_element_list_append,
        "class_element_list_append",
    )),
    // CaseClauses_Await_Return -> CaseClause_Await_Return
    Some((Builder::create_list, "create_list")),
    // CaseClauses_Await_Return -> CaseClauses_Await_Return CaseClause_Await_Return
    Some((Builder::append_to_list, "append_to_list")),
    // DefaultClause_Await_Return -> DEFAULT COLON
    Some((
        Builder::switch_case_default_no_consequent,
        "switch_case_default_no_consequent",
    )),
    // DefaultClause_Await_Return -> DEFAULT COLON StatementList_Await_Return
    Some((Builder::switch_case_default, "switch_case_default")),
    // LogicalANDExpression_In_Yield_Await -> BitwiseORExpression_In_Yield_Await
    Some((Builder::nop, "nop")),
    // LogicalANDExpression_In_Yield_Await -> LogicalANDExpression_In_Yield_Await AND _FALSY_SHORT_CIRCUIT_ BitwiseORExpression_In_Yield_Await
    Some((Builder::logical_expression, "logical_expression")),
    // CoalesceExpressionHead_In_Yield_Await -> CoalesceExpression_In_Yield_Await
    Some((Builder::nop, "nop")),
    // CoalesceExpressionHead_In_Yield_Await -> BitwiseORExpression_In_Yield_Await
    Some((Builder::nop, "nop")),
    // BitwiseORExpression_In_Yield_Await -> BitwiseXORExpression_In_Yield_Await
    Some((Builder::nop, "nop")),
    // BitwiseORExpression_In_Yield_Await -> BitwiseORExpression_In_Yield_Await BIT_OR BitwiseXORExpression_In_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // PrimaryExpression_Yield_Await -> THIS
    Some((Builder::this_expression, "this_expression")),
    // PrimaryExpression_Yield_Await -> IdentifierReference_Yield_Await
    Some((Builder::nop, "nop")),
    // PrimaryExpression_Yield_Await -> Literal
    Some((Builder::nop, "nop")),
    // PrimaryExpression_Yield_Await -> ArrayLiteral_Yield_Await
    Some((Builder::nop, "nop")),
    // PrimaryExpression_Yield_Await -> ObjectLiteral_Yield_Await
    Some((Builder::nop, "nop")),
    // PrimaryExpression_Yield_Await -> FunctionExpression
    Some((Builder::nop, "nop")),
    // PrimaryExpression_Yield_Await -> ClassExpression_Yield_Await
    Some((Builder::nop, "nop")),
    // PrimaryExpression_Yield_Await -> GeneratorExpression
    Some((Builder::nop, "nop")),
    // PrimaryExpression_Yield_Await -> AsyncFunctionExpression
    Some((Builder::nop, "nop")),
    // PrimaryExpression_Yield_Await -> AsyncGeneratorExpression
    Some((Builder::nop, "nop")),
    // PrimaryExpression_Yield_Await -> REGULAR_EXPRESSION_LITERAL
    Some((Builder::regexp_literal, "regexp_literal")),
    // PrimaryExpression_Yield_Await -> TemplateLiteral_Yield_Await
    Some((Builder::nop, "nop")),
    // PrimaryExpression_Yield_Await -> CoverParenthesizedExpressionAndArrowParameterList_Yield_Await
    Some((
        Builder::primary_expression_cpeaapl,
        "primary_expression_cpeaapl",
    )),
    // SuperProperty_Yield_Await -> SUPER LBRACK Expression_In_Yield_Await RBRACK
    Some((Builder::super_property_computed, "super_property_computed")),
    // SuperProperty_Yield_Await -> SUPER DOT KeywordOrIdentifierName
    Some((Builder::super_property, "super_property")),
    // ArgumentList_Yield_Await -> AssignmentExpression_In_Yield_Await
    Some((Builder::argument_list, "argument_list")),
    // ArgumentList_Yield_Await -> ELLIPSIS AssignmentExpression_In_Yield_Await
    Some((Builder::argument_list_rest, "argument_list_rest")),
    // ArgumentList_Yield_Await -> ArgumentList_Yield_Await COMMA AssignmentExpression_In_Yield_Await
    Some((Builder::argument_list_append, "argument_list_append")),
    // ArgumentList_Yield_Await -> ArgumentList_Yield_Await COMMA ELLIPSIS AssignmentExpression_In_Yield_Await
    Some((
        Builder::argument_list_append_rest,
        "argument_list_append_rest",
    )),
    // SubstitutionTemplate_Yield_Await_Tagged -> TEMPLATE_HEAD Expression_In_Yield_Await TemplateSpans_Yield_Await_Tagged
    Some((Builder::template_literal, "template_literal")),
    // Expression_Yield_Await -> AssignmentExpression_Yield_Await
    Some((Builder::nop, "nop")),
    // Expression_Yield_Await -> Expression_Yield_Await COMMA AssignmentExpression_Yield_Await
    Some((Builder::sequence_expression, "sequence_expression")),
    // VariableDeclarationList_Yield_Await -> VariableDeclaration_Yield_Await
    Some((Builder::create_list, "create_list")),
    // VariableDeclarationList_Yield_Await -> VariableDeclarationList_Yield_Await COMMA VariableDeclaration_Yield_Await
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // LexicalDeclaration_Yield_Await -> LET BindingList_Yield_Await SEMICOLON
    Some((Builder::variable_declaration, "variable_declaration")),
    // LexicalDeclaration_Yield_Await -> CONST BindingList_Yield_Await SEMICOLON
    Some((Builder::variable_declaration, "variable_declaration")),
    // ForBinding_Yield_Await -> BindingIdentifier_Yield_Await
    Some((Builder::for_binding, "for_binding")),
    // ForBinding_Yield_Await -> BindingPattern_Yield_Await
    Some((Builder::for_binding, "for_binding")),
    // ForDeclaration_Yield_Await -> LET ForBinding_Yield_Await
    Some((Builder::for_declaration, "for_declaration")),
    // ForDeclaration_Yield_Await -> CONST ForBinding_Yield_Await
    Some((Builder::for_declaration, "for_declaration")),
    // CaseClauses_Yield_Await_Return -> CaseClause_Yield_Await_Return
    Some((Builder::create_list, "create_list")),
    // CaseClauses_Yield_Await_Return -> CaseClauses_Yield_Await_Return CaseClause_Yield_Await_Return
    Some((Builder::append_to_list, "append_to_list")),
    // DefaultClause_Yield_Await_Return -> DEFAULT COLON
    Some((
        Builder::switch_case_default_no_consequent,
        "switch_case_default_no_consequent",
    )),
    // DefaultClause_Yield_Await_Return -> DEFAULT COLON StatementList_Yield_Await_Return
    Some((Builder::switch_case_default, "switch_case_default")),
    // ClassElementList_Yield_Await -> ClassElement_Yield_Await
    Some((Builder::class_element_list, "class_element_list")),
    // ClassElementList_Yield_Await -> ClassElementList_Yield_Await ClassElement_Yield_Await
    Some((
        Builder::class_element_list_append,
        "class_element_list_append",
    )),
    // MultiplicativeExpression_Await -> ExponentiationExpression_Await
    Some((Builder::nop, "nop")),
    // MultiplicativeExpression_Await -> MultiplicativeExpression_Await MUL ExponentiationExpression_Await
    Some((Builder::binary_expression, "binary_expression")),
    // MultiplicativeExpression_Await -> MultiplicativeExpression_Await DIV ExponentiationExpression_Await
    Some((Builder::binary_expression, "binary_expression")),
    // MultiplicativeExpression_Await -> MultiplicativeExpression_Await MOD ExponentiationExpression_Await
    Some((Builder::binary_expression, "binary_expression")),
    // BitwiseANDExpression_Await -> EqualityExpression_Await
    Some((Builder::nop, "nop")),
    // BitwiseANDExpression_Await -> BitwiseANDExpression_Await BIT_AND EqualityExpression_Await
    Some((Builder::binary_expression, "binary_expression")),
    // AdditiveExpression -> MultiplicativeExpression
    Some((Builder::nop, "nop")),
    // AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression
    Some((Builder::binary_expression, "binary_expression")),
    // AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression -> ShiftExpression
    Some((Builder::nop, "nop")),
    // RelationalExpression -> RelationalExpression LT ShiftExpression
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression -> RelationalExpression GT ShiftExpression
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression -> RelationalExpression LTE ShiftExpression
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression -> RelationalExpression GTE ShiftExpression
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression -> RelationalExpression INSTANCEOF ShiftExpression
    Some((Builder::binary_expression, "binary_expression")),
    // BitwiseXORExpression_In_Yield -> BitwiseANDExpression_In_Yield
    Some((Builder::nop, "nop")),
    // BitwiseXORExpression_In_Yield -> BitwiseXORExpression_In_Yield BIT_XOR BitwiseANDExpression_In_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // IdentifierReference_Yield -> Identifier
    Some((Builder::nop, "nop")),
    // IdentifierReference_Yield -> AWAIT
    Some((Builder::identifier, "identifier")),
    // ArrayLiteral_Yield -> LBRACK RBRACK
    Some((Builder::array_expression_empty, "array_expression_empty")),
    // ArrayLiteral_Yield -> LBRACK Elision RBRACK
    Some((Builder::array_expression, "array_expression")),
    // ArrayLiteral_Yield -> LBRACK ElementList_Yield RBRACK
    Some((Builder::array_expression, "array_expression")),
    // ArrayLiteral_Yield -> LBRACK ElementList_Yield COMMA RBRACK
    Some((Builder::array_expression_comma, "array_expression_comma")),
    // ArrayLiteral_Yield -> LBRACK ElementList_Yield COMMA Elision RBRACK
    Some((
        Builder::array_expression_comma_elision,
        "array_expression_comma_elision",
    )),
    // ObjectLiteral_Yield -> LBRACE RBRACE
    Some((Builder::object_expression_empty, "object_expression_empty")),
    // ObjectLiteral_Yield -> LBRACE PropertyDefinitionList_Yield RBRACE
    Some((Builder::object_expression, "object_expression")),
    // ObjectLiteral_Yield -> LBRACE PropertyDefinitionList_Yield COMMA RBRACE
    Some((Builder::object_expression_comma, "object_expression_comma")),
    // ClassExpression_Yield -> CLASS ClassTail_Yield
    Some((
        Builder::anonymous_class_expression,
        "anonymous_class_expression",
    )),
    // ClassExpression_Yield -> CLASS BindingIdentifier_Yield ClassTail_Yield
    Some((Builder::class_expression, "class_expression")),
    // TemplateLiteral_Yield -> NO_SUBSTITUTION_TEMPLATE
    Some((
        Builder::template_literal_no_subst,
        "template_literal_no_subst",
    )),
    // TemplateLiteral_Yield -> SubstitutionTemplate_Yield
    Some((Builder::nop, "nop")),
    // TemplateSpans_Yield_Tagged -> TEMPLATE_TAIL
    Some((Builder::template_spans_tail, "template_spans_tail")),
    // TemplateSpans_Yield_Tagged -> TemplateMiddleList_Yield_Tagged TEMPLATE_TAIL
    Some((Builder::template_spans_append, "template_spans_append")),
    // AssignmentExpression_Yield -> ConditionalExpression_Yield
    Some((Builder::nop, "nop")),
    // AssignmentExpression_Yield -> YieldExpression
    Some((Builder::nop, "nop")),
    // AssignmentExpression_Yield -> ArrowFunction_Yield
    Some((Builder::nop, "nop")),
    // AssignmentExpression_Yield -> AsyncArrowFunction_Yield
    Some((Builder::nop, "nop")),
    // AssignmentExpression_Yield -> LeftHandSideExpression_Yield ASSIGN AssignmentExpression_Yield
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression_Yield -> LeftHandSideExpression_Yield AssignmentOperator AssignmentExpression_Yield
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression_Yield -> LeftHandSideExpression_Yield AND_ASSIGN _FALSY_SHORT_CIRCUIT_ASSIGNMENT_ AssignmentExpression_Yield
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression_Yield -> LeftHandSideExpression_Yield OR_ASSIGN _TRUTHY_SHORT_CIRCUIT_ASSIGNMENT_ AssignmentExpression_Yield
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression_Yield -> LeftHandSideExpression_Yield NULLISH_ASSIGN _NULLISH_SHORT_CIRCUIT_ASSIGNMENT_ AssignmentExpression_Yield
    Some((Builder::assignment_expression, "assignment_expression")),
    // VariableDeclaration_Yield -> BindingIdentifier_Yield
    Some((Builder::variable_declarator, "variable_declarator")),
    // VariableDeclaration_Yield -> BindingIdentifier_Yield Initializer_Yield
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // VariableDeclaration_Yield -> BindingPattern_Yield Initializer_Yield
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // BindingList_Yield -> LexicalBinding_Yield
    Some((Builder::create_list, "create_list")),
    // BindingList_Yield -> BindingList_Yield COMMA LexicalBinding_Yield
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // CaseClause_Yield_Return -> CASE Expression_In_Yield COLON
    Some((
        Builder::switch_case_no_consequent,
        "switch_case_no_consequent",
    )),
    // CaseClause_Yield_Return -> CASE Expression_In_Yield COLON StatementList_Yield_Return
    Some((Builder::switch_case, "switch_case")),
    // ClassElement_Yield -> MethodDefinition_Yield
    Some((Builder::create_nullable, "create_nullable")),
    // ClassElement_Yield -> STATIC MethodDefinition_Yield
    Some((
        Builder::class_element_static_method_definition,
        "class_element_static_method_definition",
    )),
    // ClassElement_Yield -> FieldDefinition_Yield SEMICOLON
    Some((
        Builder::class_element_property_definition,
        "class_element_property_definition",
    )),
    // ClassElement_Yield -> STATIC FieldDefinition_Yield SEMICOLON
    Some((
        Builder::class_element_static_property_definition,
        "class_element_static_property_definition",
    )),
    // ClassElement_Yield -> ClassStaticBlock
    Some((Builder::create_nullable, "create_nullable")),
    // ClassElement_Yield -> SEMICOLON
    Some((Builder::class_element_semicolon, "class_element_semicolon")),
    // CaseClause_Await_Return -> CASE Expression_In_Await COLON
    Some((
        Builder::switch_case_no_consequent,
        "switch_case_no_consequent",
    )),
    // CaseClause_Await_Return -> CASE Expression_In_Await COLON StatementList_Await_Return
    Some((Builder::switch_case, "switch_case")),
    // BitwiseXORExpression_In_Yield_Await -> BitwiseANDExpression_In_Yield_Await
    Some((Builder::nop, "nop")),
    // BitwiseXORExpression_In_Yield_Await -> BitwiseXORExpression_In_Yield_Await BIT_XOR BitwiseANDExpression_In_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // IdentifierReference_Yield_Await -> Identifier
    Some((Builder::nop, "nop")),
    // ArrayLiteral_Yield_Await -> LBRACK RBRACK
    Some((Builder::array_expression_empty, "array_expression_empty")),
    // ArrayLiteral_Yield_Await -> LBRACK Elision RBRACK
    Some((Builder::array_expression, "array_expression")),
    // ArrayLiteral_Yield_Await -> LBRACK ElementList_Yield_Await RBRACK
    Some((Builder::array_expression, "array_expression")),
    // ArrayLiteral_Yield_Await -> LBRACK ElementList_Yield_Await COMMA RBRACK
    Some((Builder::array_expression_comma, "array_expression_comma")),
    // ArrayLiteral_Yield_Await -> LBRACK ElementList_Yield_Await COMMA Elision RBRACK
    Some((
        Builder::array_expression_comma_elision,
        "array_expression_comma_elision",
    )),
    // ObjectLiteral_Yield_Await -> LBRACE RBRACE
    Some((Builder::object_expression_empty, "object_expression_empty")),
    // ObjectLiteral_Yield_Await -> LBRACE PropertyDefinitionList_Yield_Await RBRACE
    Some((Builder::object_expression, "object_expression")),
    // ObjectLiteral_Yield_Await -> LBRACE PropertyDefinitionList_Yield_Await COMMA RBRACE
    Some((Builder::object_expression_comma, "object_expression_comma")),
    // ClassExpression_Yield_Await -> CLASS ClassTail_Yield_Await
    Some((
        Builder::anonymous_class_expression,
        "anonymous_class_expression",
    )),
    // ClassExpression_Yield_Await -> CLASS BindingIdentifier_Yield_Await ClassTail_Yield_Await
    Some((Builder::class_expression, "class_expression")),
    // TemplateLiteral_Yield_Await -> NO_SUBSTITUTION_TEMPLATE
    Some((
        Builder::template_literal_no_subst,
        "template_literal_no_subst",
    )),
    // TemplateLiteral_Yield_Await -> SubstitutionTemplate_Yield_Await
    Some((Builder::nop, "nop")),
    // TemplateSpans_Yield_Await_Tagged -> TEMPLATE_TAIL
    Some((Builder::template_spans_tail, "template_spans_tail")),
    // TemplateSpans_Yield_Await_Tagged -> TemplateMiddleList_Yield_Await_Tagged TEMPLATE_TAIL
    Some((Builder::template_spans_append, "template_spans_append")),
    // AssignmentExpression_Yield_Await -> ConditionalExpression_Yield_Await
    Some((Builder::nop, "nop")),
    // AssignmentExpression_Yield_Await -> YieldExpression_Await
    Some((Builder::nop, "nop")),
    // AssignmentExpression_Yield_Await -> ArrowFunction_Yield_Await
    Some((Builder::nop, "nop")),
    // AssignmentExpression_Yield_Await -> AsyncArrowFunction_Yield_Await
    Some((Builder::nop, "nop")),
    // AssignmentExpression_Yield_Await -> LeftHandSideExpression_Yield_Await ASSIGN AssignmentExpression_Yield_Await
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression_Yield_Await -> LeftHandSideExpression_Yield_Await AssignmentOperator AssignmentExpression_Yield_Await
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression_Yield_Await -> LeftHandSideExpression_Yield_Await AND_ASSIGN _FALSY_SHORT_CIRCUIT_ASSIGNMENT_ AssignmentExpression_Yield_Await
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression_Yield_Await -> LeftHandSideExpression_Yield_Await OR_ASSIGN _TRUTHY_SHORT_CIRCUIT_ASSIGNMENT_ AssignmentExpression_Yield_Await
    Some((Builder::assignment_expression, "assignment_expression")),
    // AssignmentExpression_Yield_Await -> LeftHandSideExpression_Yield_Await NULLISH_ASSIGN _NULLISH_SHORT_CIRCUIT_ASSIGNMENT_ AssignmentExpression_Yield_Await
    Some((Builder::assignment_expression, "assignment_expression")),
    // VariableDeclaration_Yield_Await -> BindingIdentifier_Yield_Await
    Some((Builder::variable_declarator, "variable_declarator")),
    // VariableDeclaration_Yield_Await -> BindingIdentifier_Yield_Await Initializer_Yield_Await
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // VariableDeclaration_Yield_Await -> BindingPattern_Yield_Await Initializer_Yield_Await
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // BindingList_Yield_Await -> LexicalBinding_Yield_Await
    Some((Builder::create_list, "create_list")),
    // BindingList_Yield_Await -> BindingList_Yield_Await COMMA LexicalBinding_Yield_Await
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // CaseClause_Yield_Await_Return -> CASE Expression_In_Yield_Await COLON
    Some((
        Builder::switch_case_no_consequent,
        "switch_case_no_consequent",
    )),
    // CaseClause_Yield_Await_Return -> CASE Expression_In_Yield_Await COLON StatementList_Yield_Await_Return
    Some((Builder::switch_case, "switch_case")),
    // ClassElement_Yield_Await -> MethodDefinition_Yield_Await
    Some((Builder::create_nullable, "create_nullable")),
    // ClassElement_Yield_Await -> STATIC MethodDefinition_Yield_Await
    Some((
        Builder::class_element_static_method_definition,
        "class_element_static_method_definition",
    )),
    // ClassElement_Yield_Await -> FieldDefinition_Yield_Await SEMICOLON
    Some((
        Builder::class_element_property_definition,
        "class_element_property_definition",
    )),
    // ClassElement_Yield_Await -> STATIC FieldDefinition_Yield_Await SEMICOLON
    Some((
        Builder::class_element_static_property_definition,
        "class_element_static_property_definition",
    )),
    // ClassElement_Yield_Await -> ClassStaticBlock
    Some((Builder::create_nullable, "create_nullable")),
    // ClassElement_Yield_Await -> SEMICOLON
    Some((Builder::class_element_semicolon, "class_element_semicolon")),
    // ExponentiationExpression_Await -> UnaryExpression_Await
    Some((Builder::nop, "nop")),
    // ExponentiationExpression_Await -> UpdateExpression_Await EXP ExponentiationExpression_Await
    Some((Builder::binary_expression, "binary_expression")),
    // EqualityExpression_Await -> RelationalExpression_Await
    Some((Builder::nop, "nop")),
    // EqualityExpression_Await -> EqualityExpression_Await EQ RelationalExpression_Await
    Some((Builder::binary_expression, "binary_expression")),
    // EqualityExpression_Await -> EqualityExpression_Await NE RelationalExpression_Await
    Some((Builder::binary_expression, "binary_expression")),
    // EqualityExpression_Await -> EqualityExpression_Await EQ_STRICT RelationalExpression_Await
    Some((Builder::binary_expression, "binary_expression")),
    // EqualityExpression_Await -> EqualityExpression_Await NE_STRICT RelationalExpression_Await
    Some((Builder::binary_expression, "binary_expression")),
    // MultiplicativeExpression -> ExponentiationExpression
    Some((Builder::nop, "nop")),
    // MultiplicativeExpression -> MultiplicativeExpression MUL ExponentiationExpression
    Some((Builder::binary_expression, "binary_expression")),
    // MultiplicativeExpression -> MultiplicativeExpression DIV ExponentiationExpression
    Some((Builder::binary_expression, "binary_expression")),
    // MultiplicativeExpression -> MultiplicativeExpression MOD ExponentiationExpression
    Some((Builder::binary_expression, "binary_expression")),
    // BitwiseANDExpression_In_Yield -> EqualityExpression_In_Yield
    Some((Builder::nop, "nop")),
    // BitwiseANDExpression_In_Yield -> BitwiseANDExpression_In_Yield BIT_AND EqualityExpression_In_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // ElementList_Yield -> AssignmentExpression_In_Yield
    Some((Builder::create_array, "create_array")),
    // ElementList_Yield -> Elision AssignmentExpression_In_Yield
    Some((Builder::append_to_array, "append_to_array")),
    // ElementList_Yield -> SpreadElement_Yield
    Some((Builder::create_array, "create_array")),
    // ElementList_Yield -> Elision SpreadElement_Yield
    Some((Builder::append_to_array, "append_to_array")),
    // ElementList_Yield -> ElementList_Yield COMMA AssignmentExpression_In_Yield
    Some((Builder::append_to_csv_array, "append_to_csv_array")),
    // ElementList_Yield -> ElementList_Yield COMMA Elision AssignmentExpression_In_Yield
    Some((Builder::concat_and_append_array, "concat_and_append_array")),
    // ElementList_Yield -> ElementList_Yield COMMA SpreadElement_Yield
    Some((Builder::append_to_csv_array, "append_to_csv_array")),
    // ElementList_Yield -> ElementList_Yield COMMA Elision SpreadElement_Yield
    Some((Builder::concat_and_append_array, "concat_and_append_array")),
    // PropertyDefinitionList_Yield -> PropertyDefinition_Yield
    Some((Builder::create_list, "create_list")),
    // PropertyDefinitionList_Yield -> PropertyDefinitionList_Yield COMMA PropertyDefinition_Yield
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // SubstitutionTemplate_Yield -> TEMPLATE_HEAD Expression_In_Yield TemplateSpans_Yield
    Some((Builder::template_literal, "template_literal")),
    // TemplateMiddleList_Yield_Tagged -> TEMPLATE_MIDDLE Expression_In_Yield
    Some((Builder::template_middle_list, "template_middle_list")),
    // TemplateMiddleList_Yield_Tagged -> TemplateMiddleList_Yield_Tagged TEMPLATE_MIDDLE Expression_In_Yield
    Some((
        Builder::template_middle_list_append,
        "template_middle_list_append",
    )),
    // ConditionalExpression_Yield -> ShortCircuitExpression_Yield
    Some((Builder::nop, "nop")),
    // ConditionalExpression_Yield -> ShortCircuitExpression_Yield CONDITIONAL _THEN_BLOCK_ AssignmentExpression_In_Yield COLON _ELSE_BLOCK_ AssignmentExpression_Yield
    Some((Builder::conditional_expression, "conditional_expression")),
    // YieldExpression -> YIELD
    Some((
        Builder::yield_expression_no_argument,
        "yield_expression_no_argument",
    )),
    // YieldExpression -> YIELD (!LINE_TERMINATOR_SEQUENCE) AssignmentExpression_Yield
    Some((Builder::yield_expression, "yield_expression")),
    // YieldExpression -> YIELD (!LINE_TERMINATOR_SEQUENCE) MUL AssignmentExpression_Yield
    Some((
        Builder::yield_expression_delegate,
        "yield_expression_delegate",
    )),
    // ArrowFunction_Yield -> ArrowParameters_Yield (!LINE_TERMINATOR_SEQUENCE) ARROW ConciseBody
    Some((
        Builder::arrow_function_expression,
        "arrow_function_expression",
    )),
    // AsyncArrowFunction_Yield -> ASYNC (!LINE_TERMINATOR_SEQUENCE) AsyncArrowBindingIdentifier_Yield (!LINE_TERMINATOR_SEQUENCE) ARROW AsyncConciseBody
    Some((
        Builder::async_arrow_function_expression_single_param,
        "async_arrow_function_expression_single_param",
    )),
    // AsyncArrowFunction_Yield -> CoverCallExpressionAndAsyncArrowHead_Yield (!LINE_TERMINATOR_SEQUENCE) ARROW AsyncConciseBody
    Some((
        Builder::async_arrow_function_expression,
        "async_arrow_function_expression",
    )),
    // Initializer_Yield -> ASSIGN AssignmentExpression_Yield
    Some((Builder::initializer, "initializer")),
    // LexicalBinding_Yield -> BindingIdentifier_Yield
    Some((Builder::variable_declarator, "variable_declarator")),
    // LexicalBinding_Yield -> BindingIdentifier_Yield Initializer_Yield
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // LexicalBinding_Yield -> BindingPattern_Yield Initializer_Yield
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // MethodDefinition_Yield -> ClassElementName_Yield LPAREN UniqueFormalParameters RPAREN LBRACE FunctionBody RBRACE
    Some((Builder::method_definition, "method_definition")),
    // MethodDefinition_Yield -> GeneratorMethod_Yield
    Some((Builder::nop, "nop")),
    // MethodDefinition_Yield -> AsyncMethod_Yield
    Some((Builder::nop, "nop")),
    // MethodDefinition_Yield -> AsyncGeneratorMethod_Yield
    Some((Builder::nop, "nop")),
    // MethodDefinition_Yield -> GET ClassElementName_Yield LPAREN RPAREN LBRACE FunctionBody RBRACE
    Some((Builder::method_definition_get, "method_definition_get")),
    // MethodDefinition_Yield -> SET ClassElementName_Yield LPAREN PropertySetParameterList RPAREN LBRACE FunctionBody RBRACE
    Some((Builder::method_definition_set, "method_definition_set")),
    // FieldDefinition_Yield -> ClassElementName_Yield
    Some((Builder::property_definition, "property_definition")),
    // FieldDefinition_Yield -> ClassElementName_Yield Initializer_In_Yield
    Some((
        Builder::property_definition_value,
        "property_definition_value",
    )),
    // BitwiseANDExpression_In_Yield_Await -> EqualityExpression_In_Yield_Await
    Some((Builder::nop, "nop")),
    // BitwiseANDExpression_In_Yield_Await -> BitwiseANDExpression_In_Yield_Await BIT_AND EqualityExpression_In_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // ElementList_Yield_Await -> AssignmentExpression_In_Yield_Await
    Some((Builder::create_array, "create_array")),
    // ElementList_Yield_Await -> Elision AssignmentExpression_In_Yield_Await
    Some((Builder::append_to_array, "append_to_array")),
    // ElementList_Yield_Await -> SpreadElement_Yield_Await
    Some((Builder::create_array, "create_array")),
    // ElementList_Yield_Await -> Elision SpreadElement_Yield_Await
    Some((Builder::append_to_array, "append_to_array")),
    // ElementList_Yield_Await -> ElementList_Yield_Await COMMA AssignmentExpression_In_Yield_Await
    Some((Builder::append_to_csv_array, "append_to_csv_array")),
    // ElementList_Yield_Await -> ElementList_Yield_Await COMMA Elision AssignmentExpression_In_Yield_Await
    Some((Builder::concat_and_append_array, "concat_and_append_array")),
    // ElementList_Yield_Await -> ElementList_Yield_Await COMMA SpreadElement_Yield_Await
    Some((Builder::append_to_csv_array, "append_to_csv_array")),
    // ElementList_Yield_Await -> ElementList_Yield_Await COMMA Elision SpreadElement_Yield_Await
    Some((Builder::concat_and_append_array, "concat_and_append_array")),
    // PropertyDefinitionList_Yield_Await -> PropertyDefinition_Yield_Await
    Some((Builder::create_list, "create_list")),
    // PropertyDefinitionList_Yield_Await -> PropertyDefinitionList_Yield_Await COMMA PropertyDefinition_Yield_Await
    Some((Builder::append_to_csv_list, "append_to_csv_list")),
    // SubstitutionTemplate_Yield_Await -> TEMPLATE_HEAD Expression_In_Yield_Await TemplateSpans_Yield_Await
    Some((Builder::template_literal, "template_literal")),
    // TemplateMiddleList_Yield_Await_Tagged -> TEMPLATE_MIDDLE Expression_In_Yield_Await
    Some((Builder::template_middle_list, "template_middle_list")),
    // TemplateMiddleList_Yield_Await_Tagged -> TemplateMiddleList_Yield_Await_Tagged TEMPLATE_MIDDLE Expression_In_Yield_Await
    Some((
        Builder::template_middle_list_append,
        "template_middle_list_append",
    )),
    // ConditionalExpression_Yield_Await -> ShortCircuitExpression_Yield_Await
    Some((Builder::nop, "nop")),
    // ConditionalExpression_Yield_Await -> ShortCircuitExpression_Yield_Await CONDITIONAL _THEN_BLOCK_ AssignmentExpression_In_Yield_Await COLON _ELSE_BLOCK_ AssignmentExpression_Yield_Await
    Some((Builder::conditional_expression, "conditional_expression")),
    // YieldExpression_Await -> YIELD
    Some((
        Builder::yield_expression_no_argument,
        "yield_expression_no_argument",
    )),
    // YieldExpression_Await -> YIELD (!LINE_TERMINATOR_SEQUENCE) AssignmentExpression_Yield_Await
    Some((Builder::yield_expression, "yield_expression")),
    // YieldExpression_Await -> YIELD (!LINE_TERMINATOR_SEQUENCE) MUL AssignmentExpression_Yield_Await
    Some((
        Builder::yield_expression_delegate,
        "yield_expression_delegate",
    )),
    // ArrowFunction_Yield_Await -> ArrowParameters_Yield_Await (!LINE_TERMINATOR_SEQUENCE) ARROW ConciseBody
    Some((
        Builder::arrow_function_expression,
        "arrow_function_expression",
    )),
    // AsyncArrowFunction_Yield_Await -> ASYNC (!LINE_TERMINATOR_SEQUENCE) AsyncArrowBindingIdentifier_Yield (!LINE_TERMINATOR_SEQUENCE) ARROW AsyncConciseBody
    Some((
        Builder::async_arrow_function_expression_single_param,
        "async_arrow_function_expression_single_param",
    )),
    // AsyncArrowFunction_Yield_Await -> CoverCallExpressionAndAsyncArrowHead_Yield_Await (!LINE_TERMINATOR_SEQUENCE) ARROW AsyncConciseBody
    Some((
        Builder::async_arrow_function_expression,
        "async_arrow_function_expression",
    )),
    // Initializer_Yield_Await -> ASSIGN AssignmentExpression_Yield_Await
    Some((Builder::initializer, "initializer")),
    // LexicalBinding_Yield_Await -> BindingIdentifier_Yield_Await
    Some((Builder::variable_declarator, "variable_declarator")),
    // LexicalBinding_Yield_Await -> BindingIdentifier_Yield_Await Initializer_Yield_Await
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // LexicalBinding_Yield_Await -> BindingPattern_Yield_Await Initializer_Yield_Await
    Some((
        Builder::variable_declarator_init,
        "variable_declarator_init",
    )),
    // MethodDefinition_Yield_Await -> ClassElementName_Yield_Await LPAREN UniqueFormalParameters RPAREN LBRACE FunctionBody RBRACE
    Some((Builder::method_definition, "method_definition")),
    // MethodDefinition_Yield_Await -> GeneratorMethod_Yield_Await
    Some((Builder::nop, "nop")),
    // MethodDefinition_Yield_Await -> AsyncMethod_Yield_Await
    Some((Builder::nop, "nop")),
    // MethodDefinition_Yield_Await -> AsyncGeneratorMethod_Yield_Await
    Some((Builder::nop, "nop")),
    // MethodDefinition_Yield_Await -> GET ClassElementName_Yield_Await LPAREN RPAREN LBRACE FunctionBody RBRACE
    Some((Builder::method_definition_get, "method_definition_get")),
    // MethodDefinition_Yield_Await -> SET ClassElementName_Yield_Await LPAREN PropertySetParameterList RPAREN LBRACE FunctionBody RBRACE
    Some((Builder::method_definition_set, "method_definition_set")),
    // FieldDefinition_Yield_Await -> ClassElementName_Yield_Await
    Some((Builder::property_definition, "property_definition")),
    // FieldDefinition_Yield_Await -> ClassElementName_Yield_Await Initializer_In_Yield_Await
    Some((
        Builder::property_definition_value,
        "property_definition_value",
    )),
    // UnaryExpression_Await -> UpdateExpression_Await
    Some((Builder::nop, "nop")),
    // UnaryExpression_Await -> DELETE UnaryExpression_Await
    Some((Builder::unary_expression, "unary_expression")),
    // UnaryExpression_Await -> VOID UnaryExpression_Await
    Some((Builder::unary_expression, "unary_expression")),
    // UnaryExpression_Await -> TYPEOF UnaryExpression_Await
    Some((Builder::unary_expression, "unary_expression")),
    // UnaryExpression_Await -> ADD UnaryExpression_Await
    Some((Builder::unary_expression, "unary_expression")),
    // UnaryExpression_Await -> SUB UnaryExpression_Await
    Some((Builder::unary_expression, "unary_expression")),
    // UnaryExpression_Await -> BIT_NOT UnaryExpression_Await
    Some((Builder::unary_expression, "unary_expression")),
    // UnaryExpression_Await -> NOT UnaryExpression_Await
    Some((Builder::unary_expression, "unary_expression")),
    // UnaryExpression_Await -> AwaitExpression
    Some((Builder::nop, "nop")),
    // UpdateExpression_Await -> LeftHandSideExpression_Await
    Some((Builder::nop, "nop")),
    // UpdateExpression_Await -> LeftHandSideExpression_Await (!LINE_TERMINATOR_SEQUENCE) INC
    Some((
        Builder::update_expression_suffix,
        "update_expression_suffix",
    )),
    // UpdateExpression_Await -> LeftHandSideExpression_Await (!LINE_TERMINATOR_SEQUENCE) DEC
    Some((
        Builder::update_expression_suffix,
        "update_expression_suffix",
    )),
    // UpdateExpression_Await -> INC UnaryExpression_Await
    Some((
        Builder::update_expression_prefix,
        "update_expression_prefix",
    )),
    // UpdateExpression_Await -> DEC UnaryExpression_Await
    Some((
        Builder::update_expression_prefix,
        "update_expression_prefix",
    )),
    // RelationalExpression_Await -> ShiftExpression_Await
    Some((Builder::nop, "nop")),
    // RelationalExpression_Await -> RelationalExpression_Await LT ShiftExpression_Await
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_Await -> RelationalExpression_Await GT ShiftExpression_Await
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_Await -> RelationalExpression_Await LTE ShiftExpression_Await
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_Await -> RelationalExpression_Await GTE ShiftExpression_Await
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_Await -> RelationalExpression_Await INSTANCEOF ShiftExpression_Await
    Some((Builder::binary_expression, "binary_expression")),
    // ExponentiationExpression -> UnaryExpression
    Some((Builder::nop, "nop")),
    // ExponentiationExpression -> UpdateExpression EXP ExponentiationExpression
    Some((Builder::binary_expression, "binary_expression")),
    // EqualityExpression_In_Yield -> RelationalExpression_In_Yield
    Some((Builder::nop, "nop")),
    // EqualityExpression_In_Yield -> EqualityExpression_In_Yield EQ RelationalExpression_In_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // EqualityExpression_In_Yield -> EqualityExpression_In_Yield NE RelationalExpression_In_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // EqualityExpression_In_Yield -> EqualityExpression_In_Yield EQ_STRICT RelationalExpression_In_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // EqualityExpression_In_Yield -> EqualityExpression_In_Yield NE_STRICT RelationalExpression_In_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // SpreadElement_Yield -> ELLIPSIS AssignmentExpression_In_Yield
    Some((Builder::spread_element, "spread_element")),
    // PropertyDefinition_Yield -> IdentifierReference_Yield
    Some((Builder::property, "property")),
    // PropertyDefinition_Yield -> CoverInitializedName_Yield
    Some((
        Builder::property_cover_initialized_name,
        "property_cover_initialized_name",
    )),
    // PropertyDefinition_Yield -> PropertyName_Yield COLON AssignmentExpression_In_Yield
    Some((Builder::property_value, "property_value")),
    // PropertyDefinition_Yield -> MethodDefinition_Yield
    Some((Builder::property_method, "property_method")),
    // PropertyDefinition_Yield -> ELLIPSIS AssignmentExpression_In_Yield
    Some((Builder::spread_element, "spread_element")),
    // TemplateSpans_Yield -> TEMPLATE_TAIL
    Some((Builder::template_spans_tail, "template_spans_tail")),
    // TemplateSpans_Yield -> TemplateMiddleList_Yield TEMPLATE_TAIL
    Some((Builder::template_spans_append, "template_spans_append")),
    // ShortCircuitExpression_Yield -> LogicalORExpression_Yield
    Some((Builder::nop, "nop")),
    // ShortCircuitExpression_Yield -> CoalesceExpression_Yield
    Some((Builder::nop, "nop")),
    // ClassElementName_Yield -> PropertyName_Yield
    Some((Builder::nop, "nop")),
    // ClassElementName_Yield -> PRIVATE_IDENTIFIER
    Some((
        Builder::class_element_name_private,
        "class_element_name_private",
    )),
    // GeneratorMethod_Yield -> MUL ClassElementName_Yield LPAREN UniqueFormalParameters_Yield RPAREN LBRACE GeneratorBody RBRACE
    Some((
        Builder::method_definition_generator,
        "method_definition_generator",
    )),
    // AsyncMethod_Yield -> ASYNC (!LINE_TERMINATOR_SEQUENCE) ClassElementName_Yield LPAREN UniqueFormalParameters_Await RPAREN LBRACE AsyncFunctionBody RBRACE
    Some((Builder::method_definition_async, "method_definition_async")),
    // AsyncGeneratorMethod_Yield -> ASYNC (!LINE_TERMINATOR_SEQUENCE) MUL ClassElementName_Yield LPAREN UniqueFormalParameters_Yield_Await RPAREN LBRACE AsyncGeneratorBody RBRACE
    Some((
        Builder::method_definition_async_generator,
        "method_definition_async_generator",
    )),
    // EqualityExpression_In_Yield_Await -> RelationalExpression_In_Yield_Await
    Some((Builder::nop, "nop")),
    // EqualityExpression_In_Yield_Await -> EqualityExpression_In_Yield_Await EQ RelationalExpression_In_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // EqualityExpression_In_Yield_Await -> EqualityExpression_In_Yield_Await NE RelationalExpression_In_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // EqualityExpression_In_Yield_Await -> EqualityExpression_In_Yield_Await EQ_STRICT RelationalExpression_In_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // EqualityExpression_In_Yield_Await -> EqualityExpression_In_Yield_Await NE_STRICT RelationalExpression_In_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // SpreadElement_Yield_Await -> ELLIPSIS AssignmentExpression_In_Yield_Await
    Some((Builder::spread_element, "spread_element")),
    // PropertyDefinition_Yield_Await -> IdentifierReference_Yield_Await
    Some((Builder::property, "property")),
    // PropertyDefinition_Yield_Await -> CoverInitializedName_Yield_Await
    Some((
        Builder::property_cover_initialized_name,
        "property_cover_initialized_name",
    )),
    // PropertyDefinition_Yield_Await -> PropertyName_Yield_Await COLON AssignmentExpression_In_Yield_Await
    Some((Builder::property_value, "property_value")),
    // PropertyDefinition_Yield_Await -> MethodDefinition_Yield_Await
    Some((Builder::property_method, "property_method")),
    // PropertyDefinition_Yield_Await -> ELLIPSIS AssignmentExpression_In_Yield_Await
    Some((Builder::spread_element, "spread_element")),
    // TemplateSpans_Yield_Await -> TEMPLATE_TAIL
    Some((Builder::template_spans_tail, "template_spans_tail")),
    // TemplateSpans_Yield_Await -> TemplateMiddleList_Yield_Await TEMPLATE_TAIL
    Some((Builder::template_spans_append, "template_spans_append")),
    // ShortCircuitExpression_Yield_Await -> LogicalORExpression_Yield_Await
    Some((Builder::nop, "nop")),
    // ShortCircuitExpression_Yield_Await -> CoalesceExpression_Yield_Await
    Some((Builder::nop, "nop")),
    // ClassElementName_Yield_Await -> PropertyName_Yield_Await
    Some((Builder::nop, "nop")),
    // ClassElementName_Yield_Await -> PRIVATE_IDENTIFIER
    Some((
        Builder::class_element_name_private,
        "class_element_name_private",
    )),
    // GeneratorMethod_Yield_Await -> MUL ClassElementName_Yield_Await LPAREN UniqueFormalParameters_Yield RPAREN LBRACE GeneratorBody RBRACE
    Some((
        Builder::method_definition_generator,
        "method_definition_generator",
    )),
    // AsyncMethod_Yield_Await -> ASYNC (!LINE_TERMINATOR_SEQUENCE) ClassElementName_Yield_Await LPAREN UniqueFormalParameters_Await RPAREN LBRACE AsyncFunctionBody RBRACE
    Some((Builder::method_definition_async, "method_definition_async")),
    // AsyncGeneratorMethod_Yield_Await -> ASYNC (!LINE_TERMINATOR_SEQUENCE) MUL ClassElementName_Yield_Await LPAREN UniqueFormalParameters_Yield_Await RPAREN LBRACE AsyncGeneratorBody RBRACE
    Some((
        Builder::method_definition_async_generator,
        "method_definition_async_generator",
    )),
    // AwaitExpression -> AWAIT UnaryExpression_Await
    Some((Builder::await_expression, "await_expression")),
    // UnaryExpression -> UpdateExpression
    Some((Builder::nop, "nop")),
    // UnaryExpression -> DELETE UnaryExpression
    Some((Builder::unary_expression, "unary_expression")),
    // UnaryExpression -> VOID UnaryExpression
    Some((Builder::unary_expression, "unary_expression")),
    // UnaryExpression -> TYPEOF UnaryExpression
    Some((Builder::unary_expression, "unary_expression")),
    // UnaryExpression -> ADD UnaryExpression
    Some((Builder::unary_expression, "unary_expression")),
    // UnaryExpression -> SUB UnaryExpression
    Some((Builder::unary_expression, "unary_expression")),
    // UnaryExpression -> BIT_NOT UnaryExpression
    Some((Builder::unary_expression, "unary_expression")),
    // UnaryExpression -> NOT UnaryExpression
    Some((Builder::unary_expression, "unary_expression")),
    // UpdateExpression -> LeftHandSideExpression
    Some((Builder::nop, "nop")),
    // UpdateExpression -> LeftHandSideExpression (!LINE_TERMINATOR_SEQUENCE) INC
    Some((
        Builder::update_expression_suffix,
        "update_expression_suffix",
    )),
    // UpdateExpression -> LeftHandSideExpression (!LINE_TERMINATOR_SEQUENCE) DEC
    Some((
        Builder::update_expression_suffix,
        "update_expression_suffix",
    )),
    // UpdateExpression -> INC UnaryExpression
    Some((
        Builder::update_expression_prefix,
        "update_expression_prefix",
    )),
    // UpdateExpression -> DEC UnaryExpression
    Some((
        Builder::update_expression_prefix,
        "update_expression_prefix",
    )),
    // RelationalExpression_In_Yield -> ShiftExpression_Yield
    Some((Builder::nop, "nop")),
    // RelationalExpression_In_Yield -> RelationalExpression_In_Yield LT ShiftExpression_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_In_Yield -> RelationalExpression_In_Yield GT ShiftExpression_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_In_Yield -> RelationalExpression_In_Yield LTE ShiftExpression_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_In_Yield -> RelationalExpression_In_Yield GTE ShiftExpression_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_In_Yield -> RelationalExpression_In_Yield INSTANCEOF ShiftExpression_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_In_Yield -> RelationalExpression_In_Yield IN ShiftExpression_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_In_Yield -> PRIVATE_IDENTIFIER IN ShiftExpression_Yield
    Some((
        Builder::binary_expression_private,
        "binary_expression_private",
    )),
    // CoverInitializedName_Yield -> IdentifierReference_Yield Initializer_In_Yield
    Some((Builder::cover_initialized_name, "cover_initialized_name")),
    // TemplateMiddleList_Yield -> TEMPLATE_MIDDLE Expression_In_Yield
    Some((Builder::template_middle_list, "template_middle_list")),
    // TemplateMiddleList_Yield -> TemplateMiddleList_Yield TEMPLATE_MIDDLE Expression_In_Yield
    Some((
        Builder::template_middle_list_append,
        "template_middle_list_append",
    )),
    // LogicalORExpression_Yield -> LogicalANDExpression_Yield
    Some((Builder::nop, "nop")),
    // LogicalORExpression_Yield -> LogicalORExpression_Yield OR _TRUTHY_SHORT_CIRCUIT_ LogicalANDExpression_Yield
    Some((Builder::logical_expression, "logical_expression")),
    // CoalesceExpression_Yield -> CoalesceExpressionHead_Yield NULLISH _NULLISH_SHORT_CIRCUIT_ BitwiseORExpression_Yield
    Some((Builder::logical_expression, "logical_expression")),
    // RelationalExpression_In_Yield_Await -> ShiftExpression_Yield_Await
    Some((Builder::nop, "nop")),
    // RelationalExpression_In_Yield_Await -> RelationalExpression_In_Yield_Await LT ShiftExpression_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_In_Yield_Await -> RelationalExpression_In_Yield_Await GT ShiftExpression_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_In_Yield_Await -> RelationalExpression_In_Yield_Await LTE ShiftExpression_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_In_Yield_Await -> RelationalExpression_In_Yield_Await GTE ShiftExpression_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_In_Yield_Await -> RelationalExpression_In_Yield_Await INSTANCEOF ShiftExpression_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_In_Yield_Await -> RelationalExpression_In_Yield_Await IN ShiftExpression_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_In_Yield_Await -> PRIVATE_IDENTIFIER IN ShiftExpression_Yield_Await
    Some((
        Builder::binary_expression_private,
        "binary_expression_private",
    )),
    // CoverInitializedName_Yield_Await -> IdentifierReference_Yield_Await Initializer_In_Yield_Await
    Some((Builder::cover_initialized_name, "cover_initialized_name")),
    // TemplateMiddleList_Yield_Await -> TEMPLATE_MIDDLE Expression_In_Yield_Await
    Some((Builder::template_middle_list, "template_middle_list")),
    // TemplateMiddleList_Yield_Await -> TemplateMiddleList_Yield_Await TEMPLATE_MIDDLE Expression_In_Yield_Await
    Some((
        Builder::template_middle_list_append,
        "template_middle_list_append",
    )),
    // LogicalORExpression_Yield_Await -> LogicalANDExpression_Yield_Await
    Some((Builder::nop, "nop")),
    // LogicalORExpression_Yield_Await -> LogicalORExpression_Yield_Await OR _TRUTHY_SHORT_CIRCUIT_ LogicalANDExpression_Yield_Await
    Some((Builder::logical_expression, "logical_expression")),
    // CoalesceExpression_Yield_Await -> CoalesceExpressionHead_Yield_Await NULLISH _NULLISH_SHORT_CIRCUIT_ BitwiseORExpression_Yield_Await
    Some((Builder::logical_expression, "logical_expression")),
    // ShiftExpression_Yield -> AdditiveExpression_Yield
    Some((Builder::nop, "nop")),
    // ShiftExpression_Yield -> ShiftExpression_Yield SHL AdditiveExpression_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // ShiftExpression_Yield -> ShiftExpression_Yield SAR AdditiveExpression_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // ShiftExpression_Yield -> ShiftExpression_Yield SHR AdditiveExpression_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // LogicalANDExpression_Yield -> BitwiseORExpression_Yield
    Some((Builder::nop, "nop")),
    // LogicalANDExpression_Yield -> LogicalANDExpression_Yield AND _FALSY_SHORT_CIRCUIT_ BitwiseORExpression_Yield
    Some((Builder::logical_expression, "logical_expression")),
    // CoalesceExpressionHead_Yield -> CoalesceExpression_Yield
    Some((Builder::nop, "nop")),
    // CoalesceExpressionHead_Yield -> BitwiseORExpression_Yield
    Some((Builder::nop, "nop")),
    // BitwiseORExpression_Yield -> BitwiseXORExpression_Yield
    Some((Builder::nop, "nop")),
    // BitwiseORExpression_Yield -> BitwiseORExpression_Yield BIT_OR BitwiseXORExpression_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // ShiftExpression_Yield_Await -> AdditiveExpression_Yield_Await
    Some((Builder::nop, "nop")),
    // ShiftExpression_Yield_Await -> ShiftExpression_Yield_Await SHL AdditiveExpression_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // ShiftExpression_Yield_Await -> ShiftExpression_Yield_Await SAR AdditiveExpression_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // ShiftExpression_Yield_Await -> ShiftExpression_Yield_Await SHR AdditiveExpression_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // LogicalANDExpression_Yield_Await -> BitwiseORExpression_Yield_Await
    Some((Builder::nop, "nop")),
    // LogicalANDExpression_Yield_Await -> LogicalANDExpression_Yield_Await AND _FALSY_SHORT_CIRCUIT_ BitwiseORExpression_Yield_Await
    Some((Builder::logical_expression, "logical_expression")),
    // CoalesceExpressionHead_Yield_Await -> CoalesceExpression_Yield_Await
    Some((Builder::nop, "nop")),
    // CoalesceExpressionHead_Yield_Await -> BitwiseORExpression_Yield_Await
    Some((Builder::nop, "nop")),
    // BitwiseORExpression_Yield_Await -> BitwiseXORExpression_Yield_Await
    Some((Builder::nop, "nop")),
    // BitwiseORExpression_Yield_Await -> BitwiseORExpression_Yield_Await BIT_OR BitwiseXORExpression_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // AdditiveExpression_Yield -> MultiplicativeExpression_Yield
    Some((Builder::nop, "nop")),
    // AdditiveExpression_Yield -> AdditiveExpression_Yield ADD MultiplicativeExpression_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // AdditiveExpression_Yield -> AdditiveExpression_Yield SUB MultiplicativeExpression_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // BitwiseXORExpression_Yield -> BitwiseANDExpression_Yield
    Some((Builder::nop, "nop")),
    // BitwiseXORExpression_Yield -> BitwiseXORExpression_Yield BIT_XOR BitwiseANDExpression_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // AdditiveExpression_Yield_Await -> MultiplicativeExpression_Yield_Await
    Some((Builder::nop, "nop")),
    // AdditiveExpression_Yield_Await -> AdditiveExpression_Yield_Await ADD MultiplicativeExpression_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // AdditiveExpression_Yield_Await -> AdditiveExpression_Yield_Await SUB MultiplicativeExpression_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // BitwiseXORExpression_Yield_Await -> BitwiseANDExpression_Yield_Await
    Some((Builder::nop, "nop")),
    // BitwiseXORExpression_Yield_Await -> BitwiseXORExpression_Yield_Await BIT_XOR BitwiseANDExpression_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // MultiplicativeExpression_Yield -> ExponentiationExpression_Yield
    Some((Builder::nop, "nop")),
    // MultiplicativeExpression_Yield -> MultiplicativeExpression_Yield MUL ExponentiationExpression_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // MultiplicativeExpression_Yield -> MultiplicativeExpression_Yield DIV ExponentiationExpression_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // MultiplicativeExpression_Yield -> MultiplicativeExpression_Yield MOD ExponentiationExpression_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // BitwiseANDExpression_Yield -> EqualityExpression_Yield
    Some((Builder::nop, "nop")),
    // BitwiseANDExpression_Yield -> BitwiseANDExpression_Yield BIT_AND EqualityExpression_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // MultiplicativeExpression_Yield_Await -> ExponentiationExpression_Yield_Await
    Some((Builder::nop, "nop")),
    // MultiplicativeExpression_Yield_Await -> MultiplicativeExpression_Yield_Await MUL ExponentiationExpression_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // MultiplicativeExpression_Yield_Await -> MultiplicativeExpression_Yield_Await DIV ExponentiationExpression_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // MultiplicativeExpression_Yield_Await -> MultiplicativeExpression_Yield_Await MOD ExponentiationExpression_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // BitwiseANDExpression_Yield_Await -> EqualityExpression_Yield_Await
    Some((Builder::nop, "nop")),
    // BitwiseANDExpression_Yield_Await -> BitwiseANDExpression_Yield_Await BIT_AND EqualityExpression_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // ExponentiationExpression_Yield -> UnaryExpression_Yield
    Some((Builder::nop, "nop")),
    // ExponentiationExpression_Yield -> UpdateExpression_Yield EXP ExponentiationExpression_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // EqualityExpression_Yield -> RelationalExpression_Yield
    Some((Builder::nop, "nop")),
    // EqualityExpression_Yield -> EqualityExpression_Yield EQ RelationalExpression_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // EqualityExpression_Yield -> EqualityExpression_Yield NE RelationalExpression_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // EqualityExpression_Yield -> EqualityExpression_Yield EQ_STRICT RelationalExpression_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // EqualityExpression_Yield -> EqualityExpression_Yield NE_STRICT RelationalExpression_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // ExponentiationExpression_Yield_Await -> UnaryExpression_Yield_Await
    Some((Builder::nop, "nop")),
    // ExponentiationExpression_Yield_Await -> UpdateExpression_Yield_Await EXP ExponentiationExpression_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // EqualityExpression_Yield_Await -> RelationalExpression_Yield_Await
    Some((Builder::nop, "nop")),
    // EqualityExpression_Yield_Await -> EqualityExpression_Yield_Await EQ RelationalExpression_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // EqualityExpression_Yield_Await -> EqualityExpression_Yield_Await NE RelationalExpression_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // EqualityExpression_Yield_Await -> EqualityExpression_Yield_Await EQ_STRICT RelationalExpression_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // EqualityExpression_Yield_Await -> EqualityExpression_Yield_Await NE_STRICT RelationalExpression_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // UnaryExpression_Yield -> UpdateExpression_Yield
    Some((Builder::nop, "nop")),
    // UnaryExpression_Yield -> DELETE UnaryExpression_Yield
    Some((Builder::unary_expression, "unary_expression")),
    // UnaryExpression_Yield -> VOID UnaryExpression_Yield
    Some((Builder::unary_expression, "unary_expression")),
    // UnaryExpression_Yield -> TYPEOF UnaryExpression_Yield
    Some((Builder::unary_expression, "unary_expression")),
    // UnaryExpression_Yield -> ADD UnaryExpression_Yield
    Some((Builder::unary_expression, "unary_expression")),
    // UnaryExpression_Yield -> SUB UnaryExpression_Yield
    Some((Builder::unary_expression, "unary_expression")),
    // UnaryExpression_Yield -> BIT_NOT UnaryExpression_Yield
    Some((Builder::unary_expression, "unary_expression")),
    // UnaryExpression_Yield -> NOT UnaryExpression_Yield
    Some((Builder::unary_expression, "unary_expression")),
    // UpdateExpression_Yield -> LeftHandSideExpression_Yield
    Some((Builder::nop, "nop")),
    // UpdateExpression_Yield -> LeftHandSideExpression_Yield (!LINE_TERMINATOR_SEQUENCE) INC
    Some((
        Builder::update_expression_suffix,
        "update_expression_suffix",
    )),
    // UpdateExpression_Yield -> LeftHandSideExpression_Yield (!LINE_TERMINATOR_SEQUENCE) DEC
    Some((
        Builder::update_expression_suffix,
        "update_expression_suffix",
    )),
    // UpdateExpression_Yield -> INC UnaryExpression_Yield
    Some((
        Builder::update_expression_prefix,
        "update_expression_prefix",
    )),
    // UpdateExpression_Yield -> DEC UnaryExpression_Yield
    Some((
        Builder::update_expression_prefix,
        "update_expression_prefix",
    )),
    // RelationalExpression_Yield -> ShiftExpression_Yield
    Some((Builder::nop, "nop")),
    // RelationalExpression_Yield -> RelationalExpression_Yield LT ShiftExpression_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_Yield -> RelationalExpression_Yield GT ShiftExpression_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_Yield -> RelationalExpression_Yield LTE ShiftExpression_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_Yield -> RelationalExpression_Yield GTE ShiftExpression_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_Yield -> RelationalExpression_Yield INSTANCEOF ShiftExpression_Yield
    Some((Builder::binary_expression, "binary_expression")),
    // UnaryExpression_Yield_Await -> UpdateExpression_Yield_Await
    Some((Builder::nop, "nop")),
    // UnaryExpression_Yield_Await -> DELETE UnaryExpression_Yield_Await
    Some((Builder::unary_expression, "unary_expression")),
    // UnaryExpression_Yield_Await -> VOID UnaryExpression_Yield_Await
    Some((Builder::unary_expression, "unary_expression")),
    // UnaryExpression_Yield_Await -> TYPEOF UnaryExpression_Yield_Await
    Some((Builder::unary_expression, "unary_expression")),
    // UnaryExpression_Yield_Await -> ADD UnaryExpression_Yield_Await
    Some((Builder::unary_expression, "unary_expression")),
    // UnaryExpression_Yield_Await -> SUB UnaryExpression_Yield_Await
    Some((Builder::unary_expression, "unary_expression")),
    // UnaryExpression_Yield_Await -> BIT_NOT UnaryExpression_Yield_Await
    Some((Builder::unary_expression, "unary_expression")),
    // UnaryExpression_Yield_Await -> NOT UnaryExpression_Yield_Await
    Some((Builder::unary_expression, "unary_expression")),
    // UnaryExpression_Yield_Await -> AwaitExpression_Yield
    Some((Builder::nop, "nop")),
    // UpdateExpression_Yield_Await -> LeftHandSideExpression_Yield_Await
    Some((Builder::nop, "nop")),
    // UpdateExpression_Yield_Await -> LeftHandSideExpression_Yield_Await (!LINE_TERMINATOR_SEQUENCE) INC
    Some((
        Builder::update_expression_suffix,
        "update_expression_suffix",
    )),
    // UpdateExpression_Yield_Await -> LeftHandSideExpression_Yield_Await (!LINE_TERMINATOR_SEQUENCE) DEC
    Some((
        Builder::update_expression_suffix,
        "update_expression_suffix",
    )),
    // UpdateExpression_Yield_Await -> INC UnaryExpression_Yield_Await
    Some((
        Builder::update_expression_prefix,
        "update_expression_prefix",
    )),
    // UpdateExpression_Yield_Await -> DEC UnaryExpression_Yield_Await
    Some((
        Builder::update_expression_prefix,
        "update_expression_prefix",
    )),
    // RelationalExpression_Yield_Await -> ShiftExpression_Yield_Await
    Some((Builder::nop, "nop")),
    // RelationalExpression_Yield_Await -> RelationalExpression_Yield_Await LT ShiftExpression_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_Yield_Await -> RelationalExpression_Yield_Await GT ShiftExpression_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_Yield_Await -> RelationalExpression_Yield_Await LTE ShiftExpression_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_Yield_Await -> RelationalExpression_Yield_Await GTE ShiftExpression_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // RelationalExpression_Yield_Await -> RelationalExpression_Yield_Await INSTANCEOF ShiftExpression_Yield_Await
    Some((Builder::binary_expression, "binary_expression")),
    // AwaitExpression_Yield -> AWAIT UnaryExpression_Yield_Await
    Some((Builder::await_expression, "await_expression")),
];
