// DO NOT EDIT THIS FILE BY HAND.
//
// This file was automagically generated by:
// {{@command}}

mod any_other;
{{#each .}}
mod {{.}};
{{/each}}

use super::*;

impl<T> TreeBuilder<T>
where
    T: DomTreeBuilder,
{
    pub fn handle_start_tag(&mut self, tag: Tag<'_>) -> Control {
        self.ignore_lf = false;
        let local_name = LocalName::lookup(tag.name);
        match local_name {
            {{#each .}}
            tag!({{pascalCase .}}) => self.handle_start_{{.}}(&tag),
            {{/each}}
            _ => self.handle_start_any_other(&tag),
        }
    }

    pub fn handle_end_tag(&mut self, tag: Tag<'_>) -> Control {
        self.ignore_lf = false;
        let local_name = LocalName::lookup(tag.name);
        match local_name {
            {{#each .}}
            tag!({{pascalCase .}}) => self.handle_end_{{.}}(&tag),
            {{/each}}
            _ => self.handle_end_any_other(&tag),
        }
    }

    fn set_attributes_to_html_element(&mut self, tag: &Tag<'_>) {
        let node = self.html_element.expect("<html> must exist");
        self.inner.set_attributes(node, tag.attrs(), false);
    }

    fn set_attributes_to_body_element(&mut self, tag: &Tag<'_>) {
        let node = self.body_element.expect("<body> must exist");
        self.inner.set_attributes(node, tag.attrs(), false);
    }

    fn clear_stack_back_to_table_context(&mut self) {
        loop {
            match self.context().open_element.local_name {
                tag!(Table, Template, Html) => break,
                _ => self.pop_element(),
            }
        }
    }

    fn clear_stack_back_to_table_body_context(&mut self) {
        loop {
            match self.context().open_element.local_name {
                tag!(Tbody, Tfoot, Thead, Template, Html) => break,
                _ => self.pop_element(),
            }
        }
    }

    fn clear_stack_back_to_table_row_context(&mut self) {
        loop {
            match self.context().open_element.local_name {
                tag!(Template, Tr, Html) => break,
                _ => self.pop_element(),
            }
        }
    }

    fn close_cell(&mut self) {
        self.close_implied_tags();
        if !self.context().is_one_of_html_elements(&tags![Td, Th]) {
            // TODO: Parse error.
        }
        while !self.context().is_one_of_html_elements(&tags![Td, Th]) {
            self.pop_element();
        }
        self.pop_element(); // pop an html td or th element
        self.active_formatting_element_list.clear_up_to_last_marker();
        self.switch_to(mode!(InRow));
    }

    fn is_visible_input(tag: &Tag<'_>) -> bool {
        debug_assert!(tag.name == "input");
        for (name, value) in tag.attrs() {
            if name == "type" {
                if value.eq_ignore_ascii_case("hidden") {
                    return false;
                }
                return true;
            }
        }
        true
    }
}
