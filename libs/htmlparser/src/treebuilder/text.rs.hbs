// DO NOT EDIT THIS FILE BY HAND.
//
// This file was automagically generated by:
// {{@command}}

use super::*;

impl<W> TreeBuilder<W>
where
    W: DocumentWriter,
{
    // TODO: Tokenizing the text in the following groups can improve the
    // performance.
    pub fn handle_text(&mut self, text: Text<'_>) -> Control {
        for c in text.data.chars() {
            match c {
                '\0' => self.handle_null_character(c),
                char_class!(whitespace) => self.handle_whitespace_character(c),
                _ => self.handle_character(c),
            }
        }
        Control::Continue
    }

    #[tracing::instrument(level = "debug", skip_all)]
    fn handle_null_character(&mut self, c: char) {
        loop {
            tracing::debug!(mode = ?self.mode, c = "NULL");
            match self.mode {
                {{#each tokens.nul}}
                mode!({{{ join modes ', '}}}) => {
                    let ctrl = {
                        {{{run}}}
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
                {{/each}}
            }
        }
    }

    #[tracing::instrument(level = "debug", skip_all)]
    fn handle_whitespace_character(&mut self, c: char) {
        if self.ignore_lf && c == '\n' {
            self.ignore_lf = false;
            return;
        }
        loop {
            tracing::debug!(mode = ?self.mode, c = "Whitespace");
            match self.mode {
                {{#each tokens.whitespace}}
                mode!({{{ join modes ', '}}}) => {
                    let ctrl = {
                        {{{run}}}
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
                {{/each}}
            }
        }
    }

    #[tracing::instrument(level = "debug", skip_all)]
    fn handle_character(&mut self, c: char) {
        loop {
            tracing::debug!(mode = ?self.mode, ?c);
            match self.mode {
                {{#each tokens.character}}
                mode!({{{ join modes ', '}}}) => {
                    let ctrl = {
                        {{{run}}}
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
                {{/each}}
            }
        }
    }
}
