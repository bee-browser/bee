// DO NOT EDIT THIS FILE BY HAND.
//
// This file was automagically generated with:
// template: {{@template}}

use std::fmt::Debug;

use phf::phf_map;
use phf::Map;

#[derive(Clone, Copy, Eq, PartialEq)]
pub enum LocalName {
    {{#each .}}
    {{pascalCase @key}},
    {{/each}}
    Unknown,
}

impl LocalName {
    pub fn lookup(s: &str) -> Self {
        LOCAL_NAMES.get(s).cloned().unwrap_or(Self::Unknown)
    }

    pub fn name(self) -> &'static str {
        if self == Self::Unknown {
            return "UNKNOWN";
        }
        DATA[self.as_index()].name
    }

    pub fn is_special(self) -> bool {
        if self == Self::Unknown {
            return false;
        }
        matches!(DATA[self.as_index()].category, Category::Special)
    }

    fn as_index(self) -> usize {
        match self {
          Self::Unknown => panic!(),
          _ => self as usize,
        }
    }
}

impl Debug for LocalName {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Unknown => write!(f, "UNKNOWN"),
            _ => write!(f, "{}", self.name()),
        }
    }
}

// models

struct LocalNameData {
    name: &'static str,
    category: Category,
}

enum Category {
    Special,
    Formatting,
    Ordinary,
}

static LOCAL_NAMES: Map<&'static str, LocalName> = phf_map! {
    {{#each .}}
    "{{lowerCase @key}}" => LocalName::{{pascalCase @key}},
    {{/each}}
};

macro_rules! data {
    ($name:literal, $category:ident) => {
        LocalNameData {
            name: $name,
            category: Category::$category,
        }
    };
    (obsolete: $name:literal, $category:ident) => {
        LocalNameData {
            name: $name,
            category: Category::$category,
        }
    };
}

static DATA: [LocalNameData; {{length .}}] = [
    {{#each .}}
    {{#if obsolete}}
    data![obsolete: "{{@key}}", {{pascalCase category}}],
    {{else}}
    data!["{{@key}}", {{pascalCase category}}],
    {{/if}}
    {{/each}}
];
