[env]
PROJDIR = "${CARGO_MAKE_WORKING_DIRECTORY}"
PATH = "${PROJDIR}/tools/bin:${PROJDIR}/tools/node_modules/.bin:${PATH}"

# These are used in the "lldb.launch.sourceMap" property in //.vscode/settings.json.
BEE_DEV_RUSTC_COMMIT_HASH = { script = ["rustc -vV | grep 'commit-hash' | cut -d ' ' -f 2"] }
BEE_DEV_RUST_TOOLCHAIN_PATH = { script = ["rustup toolchain list -v | grep '(default)' | cut -f 2"] }

[tasks.coverage-grcov]
description = "Runs coverage using grcov."
category = "Test"
run_task = { name = ["build-with-nightly", "test-with-nightly", "grcov"] }
workspace = false

[tasks.coverage-grcov.env]
CARGO_INCREMENTAL = 0
RUSTFLAGS = """
-Zprofile \
-Ccodegen-units=1 \
-Copt-level=0 \
-Clink-dead-code \
-Coverflow-checks=off \
-Zpanic_abort_tests \
-Cpanic=abort \
"""
RUSTDOCFLAGS = "-Cpanic=abort"

[tasks.build-with-nightly]
extend = "build"
description = "Runs the rust compiler (nightly)."
toolchain = "nightly"

[tasks.test-with-nightly]
extend = "test"
description = "Runs all available tests (nightly)."
toolchain = "nightly"

[tasks.grcov]
description = "Runs grcov."
category = "Test"
install_crate = "grcov"
command = "grcov"
args = [
    "${PROJDIR}/target/debug/",
    "--llvm",
    "--branch",
    "--ignore-not-existing",
    "-s", "${PROJDIR}",
    "-t", "html",
    "-o", "${PROJDIR}/target/debug/coverage/",
    "--excl-line", "//<coverage:exclude/>",
    "--excl-start", "//<coverage:exclude>",
    "--excl-stop", "//</coverage:exclude>",
]

# NOTES
# -----
# In this project, commands in //tools/bin are used in build scripts.  For example, bee-codegen is
# used for generating source files.  So, we need to add the path to the PATH enviroment before
# building.
#
# The `env` property in //.vscode/launch.json doesn't work for this purpose as you expected.  See:
# https://github.com/vadimcn/vscode-lldb/blob/v1.6.0/extension/cargo.ts#L204
#
# The `lldb.adapterEnv` property works, but it doesn't support the variable substitusion like
# below:
#
#   "lldb.adapterEnv": {
#     "PATH": "${workspaceFolder}/tools/bin:${env:PATH}"
#   }
#
# We've solved this issue by exporting enviroments before launching VSCode as you can see in the
# `launch-vscode` task below.
[tasks.launch-vscode]
description = "Launch VSCode with project-specific environments."
category = "VSCode"
command = "code"
args = ["${PROJDIR}"]
workspace = false

[tasks.launch-vscode.env]
BEE_DEV_CONTAINER_RUSTC_COMMIT_HASH = { script = ["docker run --rm mcr.microsoft.com/vscode/devcontainers/rust rustc -vV | grep 'commit-hash' | cut -d ' ' -f 2"] }
BEE_DEV_CONTAINER_RUST_TOOLCHAIN_PATH = { script = ["docker run --rm mcr.microsoft.com/vscode/devcontainers/rust rustup toolchain list -v | grep '(default)' | cut -f 2"] }

[tasks.update-github-workflows]
description = "Update YAML files for GitHub workflows."
category = "GitHub"
script = [
'''
WORKFLOWS_DIR="$PROJDIR/.github/workflows"
TEMPLATES_DIR="$WORKFLOWS_DIR/templates"

HEADER=$(cat <<EOF
# DO NOT EDIT THIS FILE BY HAND.
#
# This file was generated by $PROGNAME automagically.
EOF
)

cat <<EOF >$WORKFLOWS_DIR/ci.yml
$HEADER
$(bee-deepmerge --format yaml \
    $TEMPLATES_DIR/ci.workflow.yml \
    $TEMPLATES_DIR/linux-build.job.yml \
    $TEMPLATES_DIR/macos-build.job.yml \
    $TEMPLATES_DIR/windows-build.job.yml \
    $TEMPLATES_DIR/arm-linux-build.job.yml \
    $TEMPLATES_DIR/coverage.job.yml)
EOF

# cat <<EOF >$WORKFLOWS_DIR/release.yml
# $HEADER
# $(bee-deepmerge --format yaml \
#     $TEMPLATES_DIR/release.workflow.yml)
# EOF

cat <<EOF >$WORKFLOWS_DIR/pull-request.yml
$HEADER
$(bee-deepmerge --format yaml \
    $TEMPLATES_DIR/pull-request.workflow.yml \
    $TEMPLATES_DIR/linux-build.job.yml \
    $TEMPLATES_DIR/macos-build.job.yml \
    $TEMPLATES_DIR/windows-build.job.yml \
    $TEMPLATES_DIR/arm-linux-build.job.yml \
    $TEMPLATES_DIR/coverage.job.yml \
    $TEMPLATES_DIR/auto-merge.job.yml)
EOF
'''
]
workspace = false
