// DO NOT EDIT THIS FILE BY HAND.
//
// This file was automagically generated by using {{template}}.

use phf::Map;
use phf::phf_map;

use crate::lexer::Token;

// states

#[derive(Clone, Copy, Debug, Default)]
pub struct State(u16);

const NUM_STATES: usize = {{length input.states}};

impl State {
    #[inline(always)]
    pub fn action<'a>(&self, token: &Token<'a>) -> Action {
        let token = token.kind as u8;
        ACTIONS[self.0 as usize].get(&token).cloned().unwrap_or(Action::Error)
    }

    #[inline(always)]
    pub fn goto(&self, non_terminal: NonTerminal) -> State {
        let non_terminal = non_terminal as u16;
        GOTOS[self.0 as usize].get(&non_terminal).unwrap().clone()
    }
}

// non-terminals

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(u16)]
#[allow(non_camel_case_types)]
pub enum NonTerminal {
    {{#each input.non_terminals}}
    {{this}},
    {{/each}}
}

// parsing tables

#[derive(Clone, Copy, Debug)]
pub enum Action {
    Accept,
    Shift(State),
    Reduce(NonTerminal, u8, &'static str),
    Error,
}

// TODO: compress
const ACTIONS: [Map<u8, Action>; NUM_STATES] = [
    {{#each input.states}}
    phf_map! {
        {{#each actions}}
        {{this.[0]}}u8 => {{this.[1]}},
        {{/each}}
    },
    {{/each}}
];

// TODO: compress
const GOTOS: [Map<u16, State>; NUM_STATES] = [
    {{#each input.states}}
    phf_map! {
        {{#each gotos}}
        {{this.[0]}}u16 => {{this.[1]}},
        {{/each}}
    },
    {{/each}}
];
