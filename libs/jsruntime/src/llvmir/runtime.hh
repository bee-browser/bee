// DO NOT EDIT THIS FILE BY HAND.
//
// This file was automagically generated with:
// template: libs/jsruntime/src/llvmir/runtime.hh.njk

#pragma once

#include <cstdint>

#include "macros.hh"

BEGIN_C_LINKAGE

enum ValueKind : uint64_t {
  Undefined = 0,
  Boolean = 1,
  Number = 2,
  Function = 3,
};

struct Function {
  uint32_t id;
  uint32_t lexical_call_index;
};

union ValueHolder {
  bool boolean;
  double number;
  struct Function function;
  uint64_t opaque;
};

struct Value {
  ValueKind kind;
  ValueHolder holder;
};

static_assert(sizeof(ValueKind) == sizeof(uint64_t));
static_assert(sizeof(ValueHolder) == sizeof(uint64_t));
static_assert(sizeof(Value) == sizeof(uint64_t) * 2);

struct Runtime {
  void (*declare_immutable)(uintptr_t context,
      uint32_t symbol_id,
      uint16_t index,
      const Value* value);
  void (*declare_immutable_undefined)(uintptr_t context, uint32_t symbol_id, uint16_t index);
  void (*declare_immutable_boolean)(uintptr_t context,
      uint32_t symbol_id,
      uint16_t index,
      bool value);
  void (*declare_immutable_number)(uintptr_t context,
      uint32_t symbol_id,
      uint16_t index,
      double value);
  void (
      *declare_mutable)(uintptr_t context, uint32_t symbol_id, uint16_t index, const Value* value);
  void (*declare_mutable_undefined)(uintptr_t context, uint32_t symbol_id, uint16_t index);
  void (
      *declare_mutable_boolean)(uintptr_t context, uint32_t symbol_id, uint16_t index, bool value);
  void (*declare_mutable_number)(uintptr_t context,
      uint32_t symbol_id,
      uint16_t index,
      double value);
  void (
      *declare_function)(uintptr_t context, uint32_t symbol_id, uint16_t index, uint32_t func_id);
  void (*get_local)(uintptr_t context,
      uint32_t symbol_id,
      uint16_t stack,
      uint16_t index,
      Value* value);
  bool (*get_local_boolean)(uintptr_t context, uint32_t symbol_id, uint16_t stack, uint16_t index);
  double (
      *get_local_number)(uintptr_t context, uint32_t symbol_id, uint16_t stack, uint16_t index);
  void (*put_local)(uintptr_t context,
      uint32_t symbol_id,
      uint16_t stack,
      uint16_t index,
      const Value* value);
  void (
      *put_local_undefined)(uintptr_t context, uint32_t symbol_id, uint16_t stack, uint16_t index);
  void (*put_local_boolean)(uintptr_t context,
      uint32_t symbol_id,
      uint16_t stack,
      uint16_t index,
      bool value);
  void (*put_local_number)(uintptr_t context,
      uint32_t symbol_id,
      uint16_t stack,
      uint16_t index,
      double value);
  void (*push_argument)(uintptr_t context, const Value* value);
  void (*push_argument_undefined)(uintptr_t context);
  void (*push_argument_boolean)(uintptr_t context, bool value);
  void (*push_argument_number)(uintptr_t context, double value);
  void (*get_argument)(uintptr_t context, uint32_t symbol_id, uint16_t index, Value* value);
  bool (*get_argument_boolean)(uintptr_t context, uint32_t symbol_id, uint16_t index);
  double (*get_argument_number)(uintptr_t context, uint32_t symbol_id, uint16_t index);
  void (*put_argument)(uintptr_t context, uint32_t symbol_id, uint16_t index, const Value* value);
  void (*put_argument_undefined)(uintptr_t context, uint32_t symbol_id, uint16_t index);
  void (*put_argument_boolean)(uintptr_t context, uint32_t symbol_id, uint16_t index, bool value);
  void (*put_argument_number)(uintptr_t context, uint32_t symbol_id, uint16_t index, double value);
  void (*call)(uintptr_t context, const Value* func, Value* result);
  void (*return_value)(uintptr_t context, const Value* value);
  void (*return_boolean)(uintptr_t context, bool value);
  void (*return_number)(uintptr_t context, double value);
  void (*allocate_bindings)(uintptr_t context, uint16_t n);
  void (*release_bindings)(uintptr_t context, uint16_t n);
  void (*inspect)(uintptr_t context, const Value* value);
  void (*inspect_boolean)(uintptr_t context, bool value);
  void (*inspect_number)(uintptr_t context, double value);
};

END_C_LINKAGE
