// DO NOT EDIT THIS FILE BY HAND.
//
// This file was automagically generated with:
// template: {{ template }}

#include "type_holder.hh"

llvm::StructType* TypeHolder::CreateValueType() {
  if (value_type_ == nullptr) {
    value_type_ = llvm::StructType::create(context_, "Value");
    value_type_->setBody({
        // kind
        builder_.getInt8Ty(),
        // holder
        builder_.getInt64Ty(),
    });
  }
  return value_type_;
}

llvm::StructType* TypeHolder::CreateBindingType() {
  if (binding_type_ == nullptr) {
    binding_type_ = llvm::StructType::create(context_, "Binding");
    binding_type_->setBody({
        // kind
        builder_.getInt8Ty(),
        // flags
        builder_.getInt8Ty(),
        // reserved
        builder_.getInt16Ty(),
        // holder
        builder_.getInt64Ty(),
    });
  }
  return binding_type_;
}

{%- for function in data.functions %}

llvm::Function* TypeHolder::CreateRuntime{{ function.name | pascalCase }}() {
  if (runtime_{{ function.name }}_ == nullptr) {
    auto* prototype = llvm::FunctionType::get({{ function.llvmir_ret }}, {{ function.llvmir_args }}, false);
    runtime_{{ function.name }}_ = llvm::Function::Create(prototype, llvm::Function::ExternalLinkage, "runtime_{{ function.name }}", module_);
  }
  return runtime_{{ function.name }}_;
}
{%- endfor %}
