// deno-fmt-ignore-file
const TESTS = [
{"description":"The constraints are solved for the CSS `bottom` and `right` properties.","css":".abs {\n  position: absolute;\n}\n\n.fixed {\n  position: fixed;\n}\n\n.red {\n  background: red;\n}\n\n.green {\n  background: green;\n}\n\n.blue {\n  background: blue;\n}\n\n.abs {\n  width: 100px;\n  height: 100px;\n  padding: 10px;\n  border: solid 10px red;\n  margin: 10px;\n  top: 10px;\n  left: 10px;\n}","html":"<div class=\"abs blue\"></div>"}
,
{"description":"The constraints are solved for the CSS `top` and `left` properties.","css":".abs {\n  position: absolute;\n}\n\n.fixed {\n  position: fixed;\n}\n\n.red {\n  background: red;\n}\n\n.green {\n  background: green;\n}\n\n.blue {\n  background: blue;\n}\n\n.abs {\n  width: 100px;\n  height: 100px;\n  padding: 10px;\n  border: solid 10px red;\n  margin: 10px;\n  bottom: 10px;\n  right: 10px;\n}","html":"<div class=\"abs blue\"></div>"}
,
{"description":"The block box should have specified width and height.","css":"html, body {\n  width: 100%;\n  height: 100%;\n}\n\n.red {\n  background: red;\n}\n\n.green {\n  background: green;\n}\n\n.blue {\n  background: blue;\n}\n\n.block {\n  width: 100px;\n  height: 100px;\n  padding: 10px;\n  border: solid 20px red;\n  margin: 30px;\n}","html":"<div class=\"blue block\"></div>"}
,
{"description":"The block box is horizontally centered.","css":"html, body {\n  width: 100%;\n  height: 100%;\n}\n\n.red {\n  background: red;\n}\n\n.green {\n  background: green;\n}\n\n.blue {\n  background: blue;\n}\n\n.block {\n  width: 200px;\n  height: 200px;\n  margin: 0 auto;\n}","html":"<div class=\"blue block\"></div>"}
,
{"description":"Over-constrained: The right margin of the block box becomes -200px.","css":"html, body {\n  width: 100%;\n  height: 100%;\n}\n\n.red {\n  background: red;\n}\n\n.green {\n  background: green;\n}\n\n.blue {\n  background: blue;\n}\n\n.block {\n  width: 1200px;\n  height: 100px;\n}","html":"<div class=\"blue block\"></div>"}
,
{"description":"The containing block of a top-level positioned box is the viewpoert.","css":"html, body {\n  width: 100%;\n  height: 100%;\n}\n\n.abs {\n  position: absolute;\n  width: 100px;\n  height: 100px;\n  top: 0px;\n  left: 0px;\n}\n\n.fixed {\n  position: fixed;\n  width: 100px;\n  height: 100px;\n  top: 0px;\n  left: 0px;\n}\n\n.red {\n  background: red;\n}\n\n.green {\n  background: green;\n}\n\n.blue {\n  background: blue;\n}","html":"<div class=\"abs blue\" style=\"width: 80%; height: 80%;\"></div>"}
,
{"description":"The containing block of a fixed positioned box is the viewpoert.","css":"html, body {\n  width: 100%;\n  height: 100%;\n}\n\n.abs {\n  position: absolute;\n  width: 100px;\n  height: 100px;\n  top: 0px;\n  left: 0px;\n}\n\n.fixed {\n  position: fixed;\n  width: 100px;\n  height: 100px;\n  top: 0px;\n  left: 0px;\n}\n\n.red {\n  background: red;\n}\n\n.green {\n  background: green;\n}\n\n.blue {\n  background: blue;\n}","html":"<div class=\"abs\">\n  <div class=\"fixed blue\" style=\"width: 80%; height: 80%;\"></div>\n</div>"}
,
{"description":"The containing block of an absolutely positioned box is the padding box of the nearest ancestor\npositioned box.","css":"html, body {\n  width: 100%;\n  height: 100%;\n}\n\n.abs {\n  position: absolute;\n  width: 100px;\n  height: 100px;\n  top: 0px;\n  left: 0px;\n}\n\n.fixed {\n  position: fixed;\n  width: 100px;\n  height: 100px;\n  top: 0px;\n  left: 0px;\n}\n\n.red {\n  background: red;\n}\n\n.green {\n  background: green;\n}\n\n.blue {\n  background: blue;\n}\n\n.containing-block {\n  padding: 50px;\n  border: solid 10px transparent;\n}","html":"<div class=\"abs containing-block\">\n  <div class=\"abs blue\" style=\"width: 80%; height: 80%;\"></div>\n</div>"}
,
{"description":"in-flow blocks","css":"html, body {\n  width: 100%;\n  height: 100%;\n}\n\n.abs {\n  position: absolute;\n  width: 100px;\n  height: 100px;\n  top: 0px;\n  left: 0px;\n}\n\n.fixed {\n  position: fixed;\n  width: 100px;\n  height: 100px;\n  top: 0px;\n  left: 0px;\n}\n\n.red {\n  background: red;\n}\n\n.green {\n  background: green;\n}\n\n.blue {\n  background: blue;\n}","html":"<div class=\"blue\" style=\"width: 80%; height: 80%;\">\n  <div class=\"green\" style=\"width: 50%; height: 50%;\"></div>\n</div>"}
,
{"description":"The fixed.red box should be painted before the abs.blue box.","css":".abs {\n  position: absolute;\n}\n\n.fixed {\n  position: fixed;\n}\n\n.red {\n  background: red;\n}\n\n.green {\n  background: green;\n}\n\n.blue {\n  background: blue;\n}\n\n.abs {\n  width: 100px;\n  height: 100px;\n}\n\n.fixed {\n  width: 100px;\n  height: 100px;\n}","html":"<div class=\"fixed red\"></div>\n<div class=\"abs blue\"></div>"}
,
{"description":"Dimensions of the fixed.blue box should be resolved using the initial containing block.","css":".abs {\n  position: absolute;\n}\n\n.fixed {\n  position: fixed;\n}\n\n.red {\n  background: red;\n}\n\n.green {\n  background: green;\n}\n\n.blue {\n  background: blue;\n}\n\n.abs {\n  width: 100px;\n  height: 100px;\n}\n\n.fixed {\n  width: 10%;\n  height: 20%;\n}","html":"<div class=\"abs red\">\n  <div class=\"fixed blue\"></div>\n</div>"}
,
{"description":"The flex direction of the flex box is `column-reverse`.\n\nThe painting order of flex items is the same as the case of `column`:\n\n1. `div.red`\n2. `div.green`\n3. `div.blue`\n","css":".red {\n  background-color: red;\n}\n\n.green {\n  background-color: green;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.orange {\n  background-color: orange;\n}\n\n.lime {\n  background-color: lime;\n}\n\n.aqua {\n  background-color: aqua;\n}\n\n.yellow {\n  background-color: yellow;\n}\n\n.flex {\n  display: flex;\n  width: 400px;\n  height: 400px;\n}\n\n.flex > * {\n  width: 100px;\n  height: 100px;\n}\n\n.flex {\n  flex-direction: column-reverse;\n}\n","html":"<div class=\"flex yellow\">\n  <div class=\"red\"></div>\n  <div class=\"green\"></div>\n  <div class=\"blue\"></div>\n</div>\n"}
,
{"description":"The flex direction of the flex box is `column`.\n","css":".red {\n  background-color: red;\n}\n\n.green {\n  background-color: green;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.orange {\n  background-color: orange;\n}\n\n.lime {\n  background-color: lime;\n}\n\n.aqua {\n  background-color: aqua;\n}\n\n.yellow {\n  background-color: yellow;\n}\n\n.flex {\n  display: flex;\n  width: 400px;\n  height: 400px;\n}\n\n.flex > * {\n  width: 100px;\n  height: 100px;\n}\n\n.flex {\n  flex-direction: column;\n}\n","html":"<div class=\"flex yellow\">\n  <div class=\"red\"></div>\n  <div class=\"green\"></div>\n  <div class=\"blue\"></div>\n</div>\n"}
,
{"description":"The flex direction of the flex box is `row-reverse`.\n\nThe painting order of flex items is the same as the case of `row`:\n\n1. `div.red`\n2. `div.green`\n3. `div.blue`\n","css":".red {\n  background-color: red;\n}\n\n.green {\n  background-color: green;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.orange {\n  background-color: orange;\n}\n\n.lime {\n  background-color: lime;\n}\n\n.aqua {\n  background-color: aqua;\n}\n\n.yellow {\n  background-color: yellow;\n}\n\n.flex {\n  display: flex;\n  width: 400px;\n  height: 400px;\n}\n\n.flex > * {\n  width: 100px;\n  height: 100px;\n}\n\n.flex {\n  flex-direction: row-reverse;\n}\n","html":"<div class=\"flex yellow\">\n  <div class=\"red\"></div>\n  <div class=\"green\"></div>\n  <div class=\"blue\"></div>\n</div>\n"}
,
{"description":"The flex direction of the flex box is `row`.\n","css":".red {\n  background-color: red;\n}\n\n.green {\n  background-color: green;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.orange {\n  background-color: orange;\n}\n\n.lime {\n  background-color: lime;\n}\n\n.aqua {\n  background-color: aqua;\n}\n\n.yellow {\n  background-color: yellow;\n}\n\n.flex {\n  display: flex;\n  width: 400px;\n  height: 400px;\n}\n\n.flex > * {\n  width: 100px;\n  height: 100px;\n}\n\n.flex {\n  flex-direction: row;\n}\n","html":"<div class=\"flex yellow\">\n  <div class=\"red\"></div>\n  <div class=\"green\"></div>\n  <div class=\"blue\"></div>\n</div>\n"}
,
{"description":"`overflow: scroll` is applied to the flex box.  The initial scroll position (`0`) is the\nright-most because the flex direction is `row-reverse`.  The left-most scroll position is `-200`.\n","css":".red {\n  background-color: red;\n}\n\n.green {\n  background-color: green;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.orange {\n  background-color: orange;\n}\n\n.lime {\n  background-color: lime;\n}\n\n.aqua {\n  background-color: aqua;\n}\n\n.yellow {\n  background-color: yellow;\n}\n\n.flex {\n  display: flex;\n  width: 400px;\n  height: 400px;\n}\n\n.flex > * {\n  width: 100px;\n  height: 100px;\n}\n\n.flex {\n  flex-direction: row-reverse;\n  overflow: scroll;\n}\n\n.flex > * {\n  min-width: 100px;\n}\n","html":"<div class=\"flex yellow\">\n  <div class=\"red\"></div>\n  <div class=\"green\"></div>\n  <div class=\"blue\"></div>\n  <div class=\"orange\"></div>\n  <div class=\"lime\"></div>\n  <div class=\"aqua\"></div>\n</div>\n"}
,
{"description":"2 flex lines are created.\n\nThe `cross-start` and `cross-end` directions are swapped.\n","css":".red {\n  background-color: red;\n}\n\n.green {\n  background-color: green;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.orange {\n  background-color: orange;\n}\n\n.lime {\n  background-color: lime;\n}\n\n.aqua {\n  background-color: aqua;\n}\n\n.yellow {\n  background-color: yellow;\n}\n\n.flex {\n  display: flex;\n  width: 400px;\n  height: 400px;\n}\n\n.flex > * {\n  width: 100px;\n  height: 100px;\n}\n\n.flex {\n  flex-wrap: wrap-reverse;\n  align-content: flex-start;  /* for simplicity */\n}\n\n.flex > .blue {\n  width: 300px;\n}\n","html":"<div class=\"flex yellow\">\n  <div class=\"red\"></div>\n  <div class=\"green\"></div>\n  <div class=\"blue\"></div>\n</div>\n"}
,
{"description":"2 flex lines are created.\n","css":".red {\n  background-color: red;\n}\n\n.green {\n  background-color: green;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.orange {\n  background-color: orange;\n}\n\n.lime {\n  background-color: lime;\n}\n\n.aqua {\n  background-color: aqua;\n}\n\n.yellow {\n  background-color: yellow;\n}\n\n.flex {\n  display: flex;\n  width: 400px;\n  height: 400px;\n}\n\n.flex > * {\n  width: 100px;\n  height: 100px;\n}\n\n.flex {\n  flex-wrap: wrap;\n  align-content: flex-start;  /* for simplicity */\n}\n\n.flex > .blue {\n  width: 300px;\n}\n","html":"<div class=\"flex yellow\">\n  <div class=\"red\"></div>\n  <div class=\"green\"></div>\n  <div class=\"blue\"></div>\n</div>\n"}
,
{"description":"The green box should be placed on the bottom side of the red box.\nThe blue box should be placed on the right side of the green box.","css":".container {\n  width: 500px;\n  outline: dashed 1px black;\n}\n\n.red-box {\n  float: left;\n  width: 200px;\n  height: 100px;\n  background: red;\n}\n\n.blue-box {\n  display: inline-block;\n  width: 100px;\n  height: 200px;\n  vertical-align: bottom;\n  background: blue;\n}\n\n.green-box {\n  float: left;\n  width: 400px;\n  height: 100px;\n  background: green;\n}","html":"<div class=\"container\">\n  <div class=\"red-box\"></div>\n  <div class=\"green-box\"></div>\n  <div class=\"blue-box\"></div>\n</div>"}
,
{"description":"The blue box should be placed on the right side of the red box.\nThe green box should be placed on the bottom side of the blue box.","css":".container {\n  width: 500px;\n  outline: dashed 1px black;\n}\n\n.red-box {\n  float: left;\n  width: 200px;\n  height: 100px;\n  background: red;\n}\n\n.blue-box {\n  display: inline-block;\n  width: 100px;\n  height: 200px;\n  vertical-align: bottom;\n  background: blue;\n}\n\n.green-box {\n  float: left;\n  width: 400px;\n  height: 100px;\n  background: green;\n}","html":"<div class=\"container\">\n  <div class=\"red-box\"></div>\n  <div class=\"blue-box\"></div>\n  <div class=\"green-box\"></div>\n</div>"}
,
{"description":"Adjacent blocks with no margins.","css":"html, body {\n  width: 100%;\n  height: 100%;\n}\n\n.red {\n  background: red;\n}\n\n.green {\n  background: green;\n}\n\n.blue {\n  background: blue;\n}\n\n.block {\n  width: auto;\n  height: 50px;\n}","html":"<div class=\"green block\"></div>\n<div class=\"blue block\"></div>"}
,
{"description":"The red box should be painted before the blue box.\n\nThe blue box is stacked onto the red box.","css":".abs {\n  position: absolute;\n  width: 100px;\n  height: 100px;\n  top: 0px;\n  left: 0px;\n}\n\n.fixed {\n  position: fixed;\n  width: 100px;\n  height: 100px;\n  top: 0px;\n  left: 0px;\n}\n\n.red {\n  background: red;\n}\n\n.green {\n  background: green;\n}\n\n.blue {\n  background: blue;\n}","html":"<div class=\"abs red\" style=\"z-index: 0\">\n  <div class=\"abs blue\" style=\"z-index: -1\"></div>\n</div>"}
,
{"description":"The red box should be painted before the blue box.\n\nThe blue box doesn't establish a stacking context.  So, the red box is stacked onto the root\nlayer and it's z-index is less than the blue box's one.","css":".abs {\n  position: absolute;\n  width: 100px;\n  height: 100px;\n  top: 0px;\n  left: 0px;\n}\n\n.fixed {\n  position: fixed;\n  width: 100px;\n  height: 100px;\n  top: 0px;\n  left: 0px;\n}\n\n.red {\n  background: red;\n}\n\n.green {\n  background: green;\n}\n\n.blue {\n  background: blue;\n}","html":"<div class=\"abs blue\">\n  <div class=\"abs red\" style=\"z-index: -1\"></div>\n</div>"}
,
{"description":"The red box should be painted before the blue box.\n\nThe containing block of the fixed.blue box is the root layer, but it's stacked onto the\nabs.red box.","css":".abs {\n  position: absolute;\n  width: 100px;\n  height: 100px;\n  top: 0px;\n  left: 0px;\n}\n\n.fixed {\n  position: fixed;\n  width: 100px;\n  height: 100px;\n  top: 0px;\n  left: 0px;\n}\n\n.red {\n  background: red;\n}\n\n.green {\n  background: green;\n}\n\n.blue {\n  background: blue;\n}","html":"<div class=\"abs red\" style=\"z-index: 0\">\n  <div class=\"fixed blue\"></div>\n</div>"}
,
{"description":"The red box should be painted before the blue box.\n\nBoxes with the same stack level in a stacking context are stacked back-to-front according to\ndocument tree order.","css":".abs {\n  position: absolute;\n  width: 100px;\n  height: 100px;\n  top: 0px;\n  left: 0px;\n}\n\n.fixed {\n  position: fixed;\n  width: 100px;\n  height: 100px;\n  top: 0px;\n  left: 0px;\n}\n\n.red {\n  background: red;\n}\n\n.green {\n  background: green;\n}\n\n.blue {\n  background: blue;\n}","html":"<div class=\"abs red\"></div>\n<div class=\"abs blue\"></div>"}
,
{"description":"The red box should be painted before the blue box.\n\nThe blue box has a larger stack level than the red box.","css":".abs {\n  position: absolute;\n  width: 100px;\n  height: 100px;\n  top: 0px;\n  left: 0px;\n}\n\n.fixed {\n  position: fixed;\n  width: 100px;\n  height: 100px;\n  top: 0px;\n  left: 0px;\n}\n\n.red {\n  background: red;\n}\n\n.green {\n  background: green;\n}\n\n.blue {\n  background: blue;\n}","html":"<div class=\"abs blue\" style=\"z-index: 1\"></div>\n<div class=\"abs red\"></div>"}
,
{"description":"The red box should be painted before the blue box.\n\nThe red box does not establish a stacking context and boxes with the same stack level are painted\nin the document tree order.","css":".abs {\n  position: absolute;\n  width: 100px;\n  height: 100px;\n  top: 0px;\n  left: 0px;\n}\n\n.fixed {\n  position: fixed;\n  width: 100px;\n  height: 100px;\n  top: 0px;\n  left: 0px;\n}\n\n.red {\n  background: red;\n}\n\n.green {\n  background: green;\n}\n\n.blue {\n  background: blue;\n}","html":"<div class=\"abs red\">\n  <div class=\"abs blue\"></div>\n</div>"}
,
];
