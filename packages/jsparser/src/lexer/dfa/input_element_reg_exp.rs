// DO NOT EDIT THIS FILE BY HAND.
//
// This file was automagically generated by:
// bee-tools-codegen --no-escape --input-stdin dfa/dfa.rs.hbs

use super::SourceCursor;
use super::Token;
use super::TokenKind;

pub fn recognize<'a>(cursor: &SourceCursor<'a>) -> Token<'a> {
    let mut token = Token::default();

    let mut state = State::default();
    tracing::trace!(opcode = "init", ?state);

    let mut lexeme_end = 0;
    for (i, ch) in cursor.chars() {
        let unicode_set = match UnicodeSet::try_from(ch) {
            Ok(unicode_set) => unicode_set,
            Err(_) => {
                tracing::error!(invalid_char = ?ch, pos = cursor.pos() + i);
                break;
            }
        };
        state = state.next_state(unicode_set);
        tracing::trace!(opcode = "next", ?state, char = ?ch, ?unicode_set, pos = cursor.pos() + i);
        if state.is_invalid() {
            break;
        }
        if !state.lookahead() {
            debug_assert_eq!(lexeme_end, i);
            lexeme_end += ch.len_utf8();
        }
        if let Some(kind) = state.accept() {
            token.kind = kind;
            token.lexeme = cursor.lexeme(lexeme_end);
            tracing::trace!(opcode = "accept", ?token.kind, ?token.lexeme);
        }
    }

    token
}

#[derive(Clone, Copy, Debug)]
struct UnicodeSet(u8);

impl TryFrom<char> for UnicodeSet {
    type Error = ();

    fn try_from(ch: char) -> Result<Self, Self::Error> {
        let c = ch as usize;
        if c < 128 {
            return Ok(UnicodeSet(ASCII_TABLE[c]));
        }
        if c == 160 {
            return Ok(UnicodeSet(7));
        }
        if c == 5760 {
            return Ok(UnicodeSet(7));
        }
        if c >= 8192 && c <= 8202 {
            return Ok(UnicodeSet(7));
        }
        if c == 8207 {
            return Ok(UnicodeSet(7));
        }
        if c == 8287 {
            return Ok(UnicodeSet(7));
        }
        if c == 65279 {
            return Ok(UnicodeSet(7));
        }
        if c >= 8232 && c <= 8233 {
            return Ok(UnicodeSet(9));
        }
        if c >= 8204 && c <= 8205 {
            return Ok(UnicodeSet(69));
        }
        if c >= 128 && c <= 159 {
            return Ok(UnicodeSet(70));
        }
        if c >= 161 && c <= 5759 {
            return Ok(UnicodeSet(70));
        }
        if c >= 5761 && c <= 8191 {
            return Ok(UnicodeSet(70));
        }
        if c == 8203 {
            return Ok(UnicodeSet(70));
        }
        if c == 8206 {
            return Ok(UnicodeSet(70));
        }
        if c >= 8208 && c <= 8231 {
            return Ok(UnicodeSet(70));
        }
        if c >= 8234 && c <= 8286 {
            return Ok(UnicodeSet(70));
        }
        if c >= 8288 && c <= 65278 {
            return Ok(UnicodeSet(70));
        }
        if c >= 65280 && c <= 1114111 {
            return Ok(UnicodeSet(70));
        }
        Err(())
    }
}

const ASCII_TABLE: [u8; 128] = [
    70, 70, 70, 70, 70, 70, 70, 70, 70, 7, 8, 7, 7, 0, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
    70, 70, 70, 70, 70, 70, 70, 7, 58, 4, 3, 23, 54, 55, 5, 42, 43, 53, 51, 48, 52, 46, 1, 67, 64,
    65, 65, 66, 66, 66, 66, 63, 63, 61, 47, 49, 62, 50, 60, 70, 15, 14, 15, 15, 13, 15, 19, 19, 19,
    19, 19, 19, 19, 19, 17, 19, 19, 19, 19, 19, 19, 19, 19, 18, 19, 19, 44, 2, 45, 57, 16, 6, 37,
    10, 27, 40, 26, 35, 34, 20, 39, 19, 21, 32, 28, 33, 38, 24, 19, 11, 30, 31, 12, 36, 29, 22, 25,
    19, 41, 56, 68, 59, 70,
];

#[derive(Clone, Copy, Debug, Default)]
struct State(u16);

impl State {
    #[inline(always)]
    fn is_invalid(&self) -> bool {
        self.0 == 462
    }

    #[inline(always)]
    fn next_state(&self, unicode_set: UnicodeSet) -> State {
        State(TRANSITION_TABLE[self.0 as usize][unicode_set.0 as usize])
    }

    #[inline(always)]
    fn lookahead(&self) -> bool {
        LOOKAHEAD_TABLE[self.0 as usize]
    }

    #[inline(always)]
    fn accept(&self) -> Option<TokenKind> {
        ACCEPT_TABLE[self.0 as usize]
    }
}

const TRANSITION_TABLE: [[u16; 71]; 462] = [
    // State(0):
    //   @start
    // Transitions:
    //   [<CR>] => State(1)
    //   [/] => State(2)
    //   [\] => State(3)
    //   [#] => State(5)
    //   ["] => State(6)
    //   ['] => State(7)
    //   [`] => State(8)
    //   [<HT>, <VT>..<FF>, <SP>, U+00A0, U+1680, U+2000..U+200A, U+200F, U+205F, U+FEFF] => State(157):WhiteSpaceSequence
    //   [<LF>, U+2028..U+2029] => State(158):LineTerminatorSequence
    //   [b] => State(216):IdentifierName
    //   [r] => State(217):IdentifierName
    //   [$, A..Z, _, h, j..k, q, u, x, z] => State(218):IdentifierName
    //   [p] => State(225):IdentifierName
    //   [y] => State(235):IdentifierName
    //   [e] => State(257):IdentifierName
    //   [c] => State(258):IdentifierName
    //   [m] => State(259):IdentifierName
    //   [w] => State(260):IdentifierName
    //   [s] => State(290):IdentifierName
    //   [t] => State(291):IdentifierName
    //   [l] => State(292):IdentifierName
    //   [n] => State(293):IdentifierName
    //   [g] => State(294):IdentifierName
    //   [f] => State(295):IdentifierName
    //   [v] => State(296):IdentifierName
    //   [a] => State(338):IdentifierName
    //   [o] => State(339):IdentifierName
    //   [i] => State(340):IdentifierName
    //   [d] => State(341):IdentifierName
    //   [{] => State(393):LBRACE
    //   [(] => State(394):LPAREN
    //   [)] => State(395):RPAREN
    //   [[] => State(396):LBRACK
    //   []] => State(397):RBRACK
    //   [.] => State(398):DOT
    //   [;] => State(400):SEMI_COLON
    //   [,] => State(401):COMMA
    //   [<] => State(402):LT
    //   [>] => State(403):GT
    //   [+] => State(410):ADD
    //   [-] => State(411):SUB
    //   [*] => State(412):MUL
    //   [%] => State(413):MOD
    //   [&] => State(420):BIT_AND
    //   [|] => State(421):BIT_OR
    //   [^] => State(422):BIT_XOR
    //   [!] => State(423):NOT
    //   [~] => State(424):BIT_NOT
    //   [?] => State(428):CONDITIONAL
    //   [:] => State(429):COLON
    //   [=] => State(430):ASSIGN
    //   [1..9] => State(446):NumericLiteral
    //   [0] => State(447):NumericLiteral
    //   [}] => State(460):RBRACE
    [
        1, 2, 3, 5, 6, 7, 8, 157, 158, 158, 216, 217, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 225, 235, 257, 258, 259, 260, 290, 291, 292, 293, 294, 295, 296, 338, 339,
        340, 341, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 410, 411, 412, 413, 420, 421,
        422, 423, 424, 428, 429, 430, 446, 446, 446, 446, 447, 460, 462, 462,
    ],
    // State(1):
    //   LineTerminatorSequence -> [<CR>] . [<LF>]
    // Transitions:
    //   [<LF>] => State(158):LineTerminatorSequence
    //   [<NUL>..<HT>, <VT>..U+10FFFF] => State(159):LineTerminatorSequence?
    [
        159, 159, 159, 159, 159, 159, 159, 159, 158, 159, 159, 159, 159, 159, 159, 159, 159, 159,
        159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
        159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
        159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
    ],
    // State(2):
    //   MultiLineComment -> [/] . [*] [*] [/]
    //   MultiLineComment -> [/] . [*] MultiLineCommentChars [*] [/]
    //   SingleLineComment -> [/] . [/]
    //   SingleLineComment -> [/] . [/] SingleLineCommentChars
    //   RegularExpressionLiteral -> [/] . RegularExpressionBody [/] RegularExpressionFlags
    //   RegularExpressionBody -> . RegularExpressionFirstChar RegularExpressionChars
    //   RegularExpressionFirstChar -> . [RegularExpressionNonTerminator -* -\ -/ -[]
    //   RegularExpressionFirstChar -> . RegularExpressionBackslashSequence
    //   RegularExpressionBackslashSequence -> . [\] RegularExpressionNonTerminator
    //   RegularExpressionFirstChar -> . RegularExpressionClass
    //   RegularExpressionClass -> . [[] RegularExpressionClassChars []]
    // Transitions:
    //   [<NUL>..<HT>, <VT>..<FF>, <SO>..), +..., 0..Z, ]..U+2027, U+202A..U+10FFFF] => State(9)
    //   [*] => State(10)
    //   [\] => State(14)
    //   [[] => State(15)
    //   [/] => State(160):Comment
    [
        462, 160, 14, 9, 9, 9, 9, 9, 462, 462, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
        9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 15, 9, 9, 9, 9, 9, 9, 9, 9, 10, 9, 9, 9,
        9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
    ],
    // State(3):
    //   IdentifierStart -> [\] . UnicodeEscapeSequence
    //   UnicodeEscapeSequence -> . [u] Hex4Digits
    //   UnicodeEscapeSequence -> . [u] [{] CodePoint [}]
    //   IdentifierPart -> [\] . UnicodeEscapeSequence
    // Transitions:
    //   [u] => State(17)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 17, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(4):
    //   IdentifierStart -> [\] . UnicodeEscapeSequence
    //   UnicodeEscapeSequence -> . [u] Hex4Digits
    //   UnicodeEscapeSequence -> . [u] [{] CodePoint [}]
    //   IdentifierPart -> [\] . UnicodeEscapeSequence
    // Transitions:
    //   [u] => State(18)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 18, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(5):
    //   IdentifierName -> . IdentifierName IdentifierPart
    //   PrivateIdentifier -> [#] . IdentifierName
    //   IdentifierName -> . IdentifierStart
    //   IdentifierStart -> . IdentifierStartChar
    //   IdentifierStartChar -> . UnicodeIDStart
    //   UnicodeIDStart -> . [a..z A..Z $ _]
    //   IdentifierStartChar -> . [$]
    //   IdentifierStartChar -> . [_]
    //   IdentifierStart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(4)
    //   [$, A..Z, _, a..z] => State(391):PrivateIdentifier
    [
        462, 462, 4, 462, 462, 462, 462, 462, 462, 462, 391, 391, 391, 391, 391, 391, 391, 391,
        391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
        391, 391, 391, 391, 391, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(6):
    //   StringLiteral -> ["] . ["]
    //   DoubleStringCharacters -> DoubleStringCharacter . DoubleStringCharacters
    //   StringLiteral -> ["] . DoubleStringCharacters ["]
    //   DoubleStringCharacters -> . DoubleStringCharacter
    //   DoubleStringCharacter -> . [SourceCharacter -" -\ -LineTerminator]
    //   DoubleStringCharacter -> . [<LS>]
    //   DoubleStringCharacter -> . [<PS>]
    //   DoubleStringCharacter -> . [\] EscapeSequence
    //   DoubleStringCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   DoubleStringCharacters -> . DoubleStringCharacter DoubleStringCharacters
    //   StringLiteral -> ["] DoubleStringCharacters . ["]
    // Transitions:
    //   [<NUL>..<HT>, <VT>..<FF>, <SO>..!, #..[, ]..U+10FFFF] => State(6)
    //   [\] => State(11)
    //   ["] => State(457):StringLiteral
    [
        462, 6, 11, 6, 457, 6, 6, 6, 462, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    ],
    // State(7):
    //   StringLiteral -> ['] . [']
    //   SingleStringCharacters -> SingleStringCharacter . SingleStringCharacters
    //   StringLiteral -> ['] . SingleStringCharacters [']
    //   SingleStringCharacters -> . SingleStringCharacter
    //   SingleStringCharacter -> . [SourceCharacter -' -\ -LineTerminator]
    //   SingleStringCharacter -> . [<LS>]
    //   SingleStringCharacter -> . [<PS>]
    //   SingleStringCharacter -> . [\] EscapeSequence
    //   SingleStringCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   SingleStringCharacters -> . SingleStringCharacter SingleStringCharacters
    //   StringLiteral -> ['] SingleStringCharacters . [']
    // Transitions:
    //   [<NUL>..<HT>, <VT>..<FF>, <SO>..&, (..[, ]..U+10FFFF] => State(7)
    //   [\] => State(12)
    //   ['] => State(457):StringLiteral
    [
        462, 7, 12, 7, 7, 457, 7, 7, 462, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    ],
    // State(8):
    //   NoSubstitutionTemplate -> [`] . [`]
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] !?[{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] !?[<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateHead -> [`] . [$] [{]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    // Transitions:
    //   [<NUL>..<FF>, <SO>..#, %..[, ].._, a..U+10FFFF] => State(8)
    //   [\] => State(13)
    //   [<CR>] => State(30)
    //   [$] => State(33)
    //   [`] => State(458):NoSubstitutionTemplate
    [
        30, 8, 13, 8, 8, 8, 458, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 33, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
    ],
    // State(9):
    //   RegularExpressionChars -> . RegularExpressionChars RegularExpressionChar
    //   RegularExpressionBody -> RegularExpressionFirstChar . RegularExpressionChars
    //   RegularExpressionChars -> . (empty)
    //   RegularExpressionChars -> RegularExpressionChars . RegularExpressionChar
    //   RegularExpressionChar -> . [RegularExpressionNonTerminator -\ -/ -[]
    //   RegularExpressionChar -> . RegularExpressionBackslashSequence
    //   RegularExpressionBackslashSequence -> . [\] RegularExpressionNonTerminator
    //   RegularExpressionChar -> . RegularExpressionClass
    //   RegularExpressionClass -> . [[] RegularExpressionClassChars []]
    //   RegularExpressionLiteral -> [/] RegularExpressionBody . [/] RegularExpressionFlags
    // Transitions:
    //   [<NUL>..<HT>, <VT>..<FF>, <SO>..., 0..Z, ]..U+2027, U+202A..U+10FFFF] => State(9)
    //   [\] => State(14)
    //   [[] => State(15)
    //   [/] => State(461):RegularExpressionLiteral
    [
        462, 461, 14, 9, 9, 9, 9, 9, 462, 462, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
        9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 15, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
        9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
    ],
    // State(10):
    //   MultiLineComment -> [/] [*] . [*] [/]
    //   MultiLineCommentChars -> MultiLineNotAsteriskChar . MultiLineCommentChars
    //   PostAsteriskCommentChars -> MultiLineNotForwardSlashOrAsteriskChar . MultiLineCommentChars
    //   MultiLineComment -> [/] [*] . MultiLineCommentChars [*] [/]
    //   MultiLineCommentChars -> . MultiLineNotAsteriskChar
    //   MultiLineNotAsteriskChar -> . [SourceCharacter -*]
    //   MultiLineCommentChars -> . MultiLineNotAsteriskChar MultiLineCommentChars
    //   MultiLineCommentChars -> . [*]
    //   MultiLineCommentChars -> . [*] PostAsteriskCommentChars
    //   MultiLineComment -> [/] [*] MultiLineCommentChars . [*] [/]
    // Transitions:
    //   [<NUL>..), +..U+10FFFF] => State(10)
    //   [*] => State(34)
    [
        10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
        10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
        10, 10, 10, 10, 10, 10, 10, 34, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
        10, 10,
    ],
    // State(11):
    //   DoubleStringCharacter -> [\] . EscapeSequence
    //   EscapeSequence -> . CharacterEscapeSequence
    //   CharacterEscapeSequence -> . SingleEscapeCharacter
    //   SingleEscapeCharacter -> . [' " \ b f n r t v]
    //   CharacterEscapeSequence -> . NonEscapeCharacter
    //   NonEscapeCharacter -> . [SourceCharacter -EscapeCharacter -LineTerminator]
    //   EscapeSequence -> . [0] !?[DecimalDigit]
    //   EscapeSequence -> . LegacyOctalEscapeSequence
    //   LegacyOctalEscapeSequence -> . [0] ?[8 9]
    //   LegacyOctalEscapeSequence -> . NonZeroOctalDigit !?[OctalDigit]
    //   NonZeroOctalDigit -> . [OctalDigit -0]
    //   LegacyOctalEscapeSequence -> . ZeroToThree OctalDigit !?[OctalDigit]
    //   ZeroToThree -> . [0 1 2 3]
    //   LegacyOctalEscapeSequence -> . FourToSeven OctalDigit
    //   FourToSeven -> . [4 5 6 7]
    //   LegacyOctalEscapeSequence -> . ZeroToThree OctalDigit OctalDigit
    //   EscapeSequence -> . NonOctalDecimalEscapeSequence
    //   NonOctalDecimalEscapeSequence -> . [8 9]
    //   EscapeSequence -> . HexEscapeSequence
    //   HexEscapeSequence -> . [x] HexDigit HexDigit
    //   EscapeSequence -> . UnicodeEscapeSequence
    //   UnicodeEscapeSequence -> . [u] Hex4Digits
    //   UnicodeEscapeSequence -> . [u] [{] CodePoint [}]
    //   LineContinuation -> [\] . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] !?[<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    // Transitions:
    //   [<NUL>..<FF>, <SO>../, 8..t, v..w, y..U+10FFFF] => State(6)
    //   [u] => State(19)
    //   [<CR>] => State(31)
    //   [x] => State(36)
    //   [0..3] => State(65)
    //   [4..7] => State(66)
    [
        31, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 19, 6, 6, 6, 6, 6, 6, 6, 6, 6, 36, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 65, 65, 66, 65, 6, 6, 6,
    ],
    // State(12):
    //   SingleStringCharacter -> [\] . EscapeSequence
    //   EscapeSequence -> . CharacterEscapeSequence
    //   CharacterEscapeSequence -> . SingleEscapeCharacter
    //   SingleEscapeCharacter -> . [' " \ b f n r t v]
    //   CharacterEscapeSequence -> . NonEscapeCharacter
    //   NonEscapeCharacter -> . [SourceCharacter -EscapeCharacter -LineTerminator]
    //   EscapeSequence -> . [0] !?[DecimalDigit]
    //   EscapeSequence -> . LegacyOctalEscapeSequence
    //   LegacyOctalEscapeSequence -> . [0] ?[8 9]
    //   LegacyOctalEscapeSequence -> . NonZeroOctalDigit !?[OctalDigit]
    //   NonZeroOctalDigit -> . [OctalDigit -0]
    //   LegacyOctalEscapeSequence -> . ZeroToThree OctalDigit !?[OctalDigit]
    //   ZeroToThree -> . [0 1 2 3]
    //   LegacyOctalEscapeSequence -> . FourToSeven OctalDigit
    //   FourToSeven -> . [4 5 6 7]
    //   LegacyOctalEscapeSequence -> . ZeroToThree OctalDigit OctalDigit
    //   EscapeSequence -> . NonOctalDecimalEscapeSequence
    //   NonOctalDecimalEscapeSequence -> . [8 9]
    //   EscapeSequence -> . HexEscapeSequence
    //   HexEscapeSequence -> . [x] HexDigit HexDigit
    //   EscapeSequence -> . UnicodeEscapeSequence
    //   UnicodeEscapeSequence -> . [u] Hex4Digits
    //   UnicodeEscapeSequence -> . [u] [{] CodePoint [}]
    //   LineContinuation -> [\] . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] !?[<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    // Transitions:
    //   [<NUL>..<FF>, <SO>../, 8..t, v..w, y..U+10FFFF] => State(7)
    //   [u] => State(20)
    //   [<CR>] => State(32)
    //   [x] => State(37)
    //   [0..3] => State(67)
    //   [4..7] => State(68)
    [
        32, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 20, 7, 7, 7, 7, 7, 7, 7, 7, 7, 37, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 67, 67, 68, 67, 7, 7, 7,
    ],
    // State(13):
    //   TemplateCharacter -> [\] . TemplateEscapeSequence
    //   TemplateEscapeSequence -> . CharacterEscapeSequence
    //   CharacterEscapeSequence -> . SingleEscapeCharacter
    //   SingleEscapeCharacter -> . [' " \ b f n r t v]
    //   CharacterEscapeSequence -> . NonEscapeCharacter
    //   NonEscapeCharacter -> . [SourceCharacter -EscapeCharacter -LineTerminator]
    //   TemplateEscapeSequence -> . [0] !?[DecimalDigit]
    //   TemplateEscapeSequence -> . HexEscapeSequence
    //   HexEscapeSequence -> . [x] HexDigit HexDigit
    //   TemplateEscapeSequence -> . UnicodeEscapeSequence
    //   UnicodeEscapeSequence -> . [u] Hex4Digits
    //   UnicodeEscapeSequence -> . [u] [{] CodePoint [}]
    //   TemplateCharacter -> [\] . NotEscapeSequence
    //   NotEscapeSequence -> . [0] DecimalDigit
    //   NotEscapeSequence -> . [DecimalDigit -0]
    //   NotEscapeSequence -> . [x] !?[HexDigit]
    //   NotEscapeSequence -> . [x] HexDigit !?[HexDigit]
    //   NotEscapeSequence -> . [u] !?[HexDigit] !?[{]
    //   NotEscapeSequence -> . [u] HexDigit !?[HexDigit]
    //   NotEscapeSequence -> . [u] HexDigit HexDigit !?[HexDigit]
    //   NotEscapeSequence -> . [u] HexDigit HexDigit HexDigit !?[HexDigit]
    //   NotEscapeSequence -> . [u] [{] !?[HexDigit]
    //   NotEscapeSequence -> . [u] [{] NotCodePoint !?[HexDigit]
    //   NotEscapeSequence -> . [u] [{] CodePoint !?[HexDigit] !?[}]
    //   LineContinuation -> [\] . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] !?[<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    // Transitions:
    //   [<NUL>..<FF>, <SO>../, 1..t, v..w, y..U+10FFFF] => State(8)
    //   [<CR>] => State(30)
    //   [u] => State(69)
    //   [x] => State(70)
    //   [0] => State(86)
    [
        30, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 69, 8, 8, 8, 8, 8, 8, 8, 8, 8, 70, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 86, 8, 8, 8,
    ],
    // State(14):
    //   RegularExpressionBackslashSequence -> [\] . RegularExpressionNonTerminator
    //   RegularExpressionNonTerminator -> . [SourceCharacter -LineTerminator]
    // Transitions:
    //   [<NUL>..<HT>, <VT>..<FF>, <SO>..U+2027, U+202A..U+10FFFF] => State(9)
    [
        462, 9, 9, 9, 9, 9, 9, 9, 462, 462, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
        9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
        9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
    ],
    // State(15):
    //   RegularExpressionClassChars -> . RegularExpressionClassChars RegularExpressionClassChar
    //   RegularExpressionClass -> [[] . RegularExpressionClassChars []]
    //   RegularExpressionClassChars -> . (empty)
    //   RegularExpressionClassChars -> RegularExpressionClassChars . RegularExpressionClassChar
    //   RegularExpressionClassChar -> . [RegularExpressionNonTerminator -] -\]
    //   RegularExpressionClassChar -> . RegularExpressionBackslashSequence
    //   RegularExpressionBackslashSequence -> . [\] RegularExpressionNonTerminator
    //   RegularExpressionClass -> [[] RegularExpressionClassChars . []]
    // Transitions:
    //   []] => State(9)
    //   [<NUL>..<HT>, <VT>..<FF>, <SO>..[, ^..U+2027, U+202A..U+10FFFF] => State(15)
    //   [\] => State(16)
    [
        462, 15, 16, 15, 15, 15, 15, 15, 462, 462, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
        15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
        9, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
        15, 15, 15,
    ],
    // State(16):
    //   RegularExpressionBackslashSequence -> [\] . RegularExpressionNonTerminator
    //   RegularExpressionNonTerminator -> . [SourceCharacter -LineTerminator]
    // Transitions:
    //   [<NUL>..<HT>, <VT>..<FF>, <SO>..U+2027, U+202A..U+10FFFF] => State(15)
    [
        462, 15, 15, 15, 15, 15, 15, 15, 462, 462, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
        15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
        15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
        15, 15, 15,
    ],
    // State(17):
    //   UnicodeEscapeSequence -> [u] . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] . [{] CodePoint [}]
    // Transitions:
    //   [0..9, A..F, a..f] => State(35)
    //   [{] => State(50)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 35, 462, 462, 35, 35, 35, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 35, 35, 462, 462, 462, 462, 462, 462, 462, 35, 462, 35,
        462, 462, 35, 50, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 35, 35, 35, 35, 35, 462, 462, 462,
    ],
    // State(18):
    //   UnicodeEscapeSequence -> [u] . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] . [{] CodePoint [}]
    // Transitions:
    //   [0..9, A..F, a..f] => State(38)
    //   [{] => State(52)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 38, 462, 462, 38, 38, 38, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 38, 38, 462, 462, 462, 462, 462, 462, 462, 38, 462, 38,
        462, 462, 38, 52, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 38, 38, 38, 38, 38, 462, 462, 462,
    ],
    // State(19):
    //   UnicodeEscapeSequence -> [u] . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] . [{] CodePoint [}]
    // Transitions:
    //   [0..9, A..F, a..f] => State(39)
    //   [{] => State(53)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 39, 462, 462, 39, 39, 39, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 39, 39, 462, 462, 462, 462, 462, 462, 462, 39, 462, 39,
        462, 462, 39, 53, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 39, 39, 39, 39, 39, 462, 462, 462,
    ],
    // State(20):
    //   UnicodeEscapeSequence -> [u] . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] . [{] CodePoint [}]
    // Transitions:
    //   [0..9, A..F, a..f] => State(40)
    //   [{] => State(54)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 40, 462, 462, 40, 40, 40, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 40, 40, 462, 462, 462, 462, 462, 462, 462, 40, 462, 40,
        462, 462, 40, 54, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 40, 40, 40, 40, 40, 462, 462, 462,
    ],
    // State(21):
    //   ExponentPart_Sep -> ExponentIndicator . SignedInteger_Sep
    //   DecimalDigits_Sep -> . DecimalDigits_Sep DecimalDigit
    //   DecimalDigits_Sep -> . DecimalDigits_Sep NumericLiteralSeparator DecimalDigit
    //   SignedInteger_Sep -> . DecimalDigits_Sep
    //   DecimalDigits_Sep -> . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   SignedInteger_Sep -> . [+] DecimalDigits_Sep
    //   SignedInteger_Sep -> . [-] DecimalDigits_Sep
    // Transitions:
    //   [+, -] => State(23)
    //   [0..9] => State(453):NumericLiteral
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 23, 23, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 453, 453, 453, 453, 453, 462, 462, 462,
    ],
    // State(22):
    //   DecimalDigits_Sep -> . DecimalDigits_Sep DecimalDigit
    //   DecimalDigits_Sep -> . DecimalDigits_Sep NumericLiteralSeparator DecimalDigit
    //   DecimalIntegerLiteral -> NonZeroDigit NumericLiteralSeparator . DecimalDigits_Sep
    //   DecimalDigits_Sep -> . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   DecimalBigIntegerLiteral -> NonZeroDigit NumericLiteralSeparator . DecimalDigits_Sep BigIntLiteralSuffix
    //   DecimalDigits_Sep -> DecimalDigits_Sep NumericLiteralSeparator . DecimalDigit
    // Transitions:
    //   [0..9] => State(446):NumericLiteral
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 446, 446, 446, 446, 446, 462, 462, 462,
    ],
    // State(23):
    //   DecimalDigits_Sep -> . DecimalDigits_Sep DecimalDigit
    //   DecimalDigits_Sep -> . DecimalDigits_Sep NumericLiteralSeparator DecimalDigit
    //   SignedInteger_Sep -> [+] . DecimalDigits_Sep
    //   DecimalDigits_Sep -> . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   SignedInteger_Sep -> [-] . DecimalDigits_Sep
    //   DecimalDigits_Sep -> DecimalDigits_Sep NumericLiteralSeparator . DecimalDigit
    // Transitions:
    //   [0..9] => State(453):NumericLiteral
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 453, 453, 453, 453, 453, 462, 462, 462,
    ],
    // State(24):
    //   DecimalDigits_Sep -> DecimalDigits_Sep NumericLiteralSeparator . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    // Transitions:
    //   [0..9] => State(452):NumericLiteral
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 452, 452, 452, 452, 452, 462, 462, 462,
    ],
    // State(25):
    //   BinaryDigits_Sep -> . BinaryDigits_Sep BinaryDigit
    //   BinaryDigits_Sep -> . BinaryDigits_Sep NumericLiteralSeparator BinaryDigit
    //   BinaryIntegerLiteral_Sep -> [0] [b] . BinaryDigits_Sep
    //   BinaryDigits_Sep -> . BinaryDigit
    //   BinaryDigit -> . [0 1]
    //   BinaryIntegerLiteral_Sep -> [0] [B] . BinaryDigits_Sep
    //   BinaryDigits_Sep -> BinaryDigits_Sep NumericLiteralSeparator . BinaryDigit
    // Transitions:
    //   [0..1] => State(454):NumericLiteral
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 454, 462, 462, 454, 462, 462, 462,
    ],
    // State(26):
    //   OctalDigits_Sep -> . OctalDigits_Sep OctalDigit
    //   OctalDigits_Sep -> . OctalDigits_Sep NumericLiteralSeparator OctalDigit
    //   OctalIntegerLiteral_Sep -> [0] [o] . OctalDigits_Sep
    //   OctalDigits_Sep -> . OctalDigit
    //   OctalDigit -> . [0 1 2 3 4 5 6 7]
    //   OctalIntegerLiteral_Sep -> [0] [O] . OctalDigits_Sep
    //   OctalDigits_Sep -> OctalDigits_Sep NumericLiteralSeparator . OctalDigit
    // Transitions:
    //   [0..7] => State(455):NumericLiteral
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 455, 455, 455, 455, 462, 462, 462,
    ],
    // State(27):
    //   HexDigits_Sep -> . HexDigits_Sep HexDigit
    //   HexDigits_Sep -> . HexDigits_Sep NumericLiteralSeparator HexDigit
    //   HexIntegerLiteral_Sep -> [0] [x] . HexDigits_Sep
    //   HexDigits_Sep -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   HexIntegerLiteral_Sep -> [0] [X] . HexDigits_Sep
    //   HexDigits_Sep -> HexDigits_Sep NumericLiteralSeparator . HexDigit
    // Transitions:
    //   [0..9, A..F, a..f] => State(456):NumericLiteral
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 456, 462, 462, 456, 456, 456, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 456, 456, 462, 462, 462, 462, 462, 462, 462, 456,
        462, 456, 462, 462, 456, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 456, 456, 456, 456, 456, 462, 462, 462,
    ],
    // State(28):
    // Transitions:
    //   [<NUL>../, :..U+10FFFF] => State(392):OPTIONAL_CHAINING?
    [
        392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
        392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
        392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
        392, 392, 392, 392, 392, 392, 392, 392, 392, 462, 462, 462, 462, 462, 392, 392, 392,
    ],
    // State(29):
    //   ELLIPSIS -> [.] [.] . [.]
    // Transitions:
    //   [.] => State(399):ELLIPSIS
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 399, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(30):
    //   LineTerminatorSequence -> [<CR>] . [<LF>]
    // Transitions:
    //   [<LF>] => State(8)
    //   [<NUL>..<HT>, <VT>..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 8, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
    ],
    // State(31):
    //   LineTerminatorSequence -> [<CR>] . [<LF>]
    // Transitions:
    //   [<LF>] => State(6)
    //   [<NUL>..<HT>, <VT>..U+10FFFF] => State(155)?
    [
        155, 155, 155, 155, 155, 155, 155, 155, 6, 155, 155, 155, 155, 155, 155, 155, 155, 155,
        155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
        155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
        155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
    ],
    // State(32):
    //   LineTerminatorSequence -> [<CR>] . [<LF>]
    // Transitions:
    //   [<LF>] => State(7)
    //   [<NUL>..<HT>, <VT>..U+10FFFF] => State(156)?
    [
        156, 156, 156, 156, 156, 156, 156, 156, 7, 156, 156, 156, 156, 156, 156, 156, 156, 156,
        156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
        156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
        156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
    ],
    // State(33):
    //   TemplateHead -> [`] [$] . [{]
    //   TemplateHead -> [`] TemplateCharacters [$] . [{]
    // Transitions:
    //   [<NUL>..z, |..U+10FFFF] => State(154)?
    //   [{] => State(459):TemplateHead
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 459, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
    ],
    // State(34):
    //   MultiLineComment -> [/] [*] [*] . [/]
    //   PostAsteriskCommentChars -> [*] . PostAsteriskCommentChars
    //   MultiLineCommentChars -> [*] . PostAsteriskCommentChars
    //   PostAsteriskCommentChars -> . MultiLineNotForwardSlashOrAsteriskChar
    //   MultiLineNotForwardSlashOrAsteriskChar -> . [SourceCharacter -/ -*]
    //   PostAsteriskCommentChars -> . MultiLineNotForwardSlashOrAsteriskChar MultiLineCommentChars
    //   PostAsteriskCommentChars -> . [*]
    //   PostAsteriskCommentChars -> . [*] PostAsteriskCommentChars
    //   MultiLineComment -> [/] [*] MultiLineCommentChars . [*] [/]
    //   MultiLineComment -> [/] [*] MultiLineCommentChars [*] . [/]
    // Transitions:
    //   [<NUL>..), +..., 0..U+10FFFF] => State(10)
    //   [*] => State(34)
    //   [/] => State(161):Comment
    [
        10, 161, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
        10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
        10, 10, 10, 10, 10, 10, 10, 10, 34, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
        10, 10, 10,
    ],
    // State(35):
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [0..9, A..F, a..f] => State(51)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 51, 462, 462, 51, 51, 51, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 51, 51, 462, 462, 462, 462, 462, 462, 462, 51, 462, 51,
        462, 462, 51, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 51, 51, 51, 51, 51, 462, 462, 462,
    ],
    // State(36):
    //   HexEscapeSequence -> [x] . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    // Transitions:
    //   [0..9, A..F, a..f] => State(55)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 55, 462, 462, 55, 55, 55, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 55, 55, 462, 462, 462, 462, 462, 462, 462, 55, 462, 55,
        462, 462, 55, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 55, 55, 55, 55, 55, 462, 462, 462,
    ],
    // State(37):
    //   HexEscapeSequence -> [x] . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    // Transitions:
    //   [0..9, A..F, a..f] => State(56)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 56, 462, 462, 56, 56, 56, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 56, 56, 462, 462, 462, 462, 462, 462, 462, 56, 462, 56,
        462, 462, 56, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 56, 56, 56, 56, 56, 462, 462, 462,
    ],
    // State(38):
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [0..9, A..F, a..f] => State(57)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 57, 462, 462, 57, 57, 57, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 57, 57, 462, 462, 462, 462, 462, 462, 462, 57, 462, 57,
        462, 462, 57, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 57, 57, 57, 57, 57, 462, 462, 462,
    ],
    // State(39):
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [0..9, A..F, a..f] => State(36)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 36, 462, 462, 36, 36, 36, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 36, 36, 462, 462, 462, 462, 462, 462, 462, 36, 462, 36,
        462, 462, 36, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 36, 36, 36, 36, 36, 462, 462, 462,
    ],
    // State(40):
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [0..9, A..F, a..f] => State(37)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 37, 462, 462, 37, 37, 37, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 37, 37, 462, 462, 462, 462, 462, 462, 462, 37, 462, 37,
        462, 462, 37, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 37, 37, 37, 37, 37, 462, 462, 462,
    ],
    // State(41):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(44)
    //   [0] => State(45)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 44, 462, 462, 44, 44, 44, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 44, 44, 462, 462, 462, 462, 462, 462, 462, 44, 462, 44,
        462, 462, 44, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 44, 44, 44, 44, 45, 462, 462, 462,
    ],
    // State(42):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [0] => State(42)
    //   [1..9, A..F, a..f] => State(43)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 43, 462, 462, 43, 43, 43, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 43, 43, 462, 462, 462, 462, 462, 462, 462, 43, 462, 43,
        462, 462, 43, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 43, 43, 43, 43, 42, 462, 462, 462,
    ],
    // State(43):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [1..9, A..F, a..f] => State(41)
    //   [0] => State(42)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 41, 462, 462, 41, 41, 41, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 41, 41, 462, 462, 462, 462, 462, 462, 462, 41, 462, 41,
        462, 462, 41, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 41, 41, 41, 41, 42, 462, 462, 462,
    ],
    // State(44):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(46)
    //   [0] => State(47)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 46, 462, 462, 46, 46, 46, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 46, 46, 462, 462, 462, 462, 462, 462, 462, 46, 462, 46,
        462, 462, 46, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 46, 46, 46, 46, 47, 462, 462, 462,
    ],
    // State(45):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(48)
    //   [0] => State(49)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 48, 462, 462, 48, 48, 48, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 48, 48, 462, 462, 462, 462, 462, 462, 462, 48, 462, 48,
        462, 462, 48, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 48, 48, 48, 48, 49, 462, 462, 462,
    ],
    // State(46):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(58)
    //   [0] => State(59)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 58, 462, 462, 58, 58, 58, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 58, 58, 462, 462, 462, 462, 462, 462, 462, 58, 462, 58,
        462, 462, 58, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 58, 58, 58, 58, 59, 462, 462, 462,
    ],
    // State(47):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(60)
    //   [0] => State(61)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 60, 462, 462, 60, 60, 60, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 60, 60, 462, 462, 462, 462, 462, 462, 462, 60, 462, 60,
        462, 462, 60, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 60, 60, 60, 60, 61, 462, 462, 462,
    ],
    // State(48):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(62)
    //   [0] => State(63)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 62, 462, 462, 62, 62, 62, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 62, 62, 462, 462, 462, 462, 462, 462, 462, 62, 462, 62,
        462, 462, 62, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 62, 62, 62, 62, 63, 462, 462, 462,
    ],
    // State(49):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [0] => State(63)
    //   [1..9, A..F, a..f] => State(64)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 64, 462, 462, 64, 64, 64, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 64, 64, 462, 462, 462, 462, 462, 462, 462, 64, 462, 64,
        462, 462, 64, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 64, 64, 64, 64, 63, 462, 462, 462,
    ],
    // State(50):
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    // Transitions:
    //   [2..9, A..F, a..f] => State(87)
    //   [1] => State(88)
    //   [0] => State(89)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 87, 462, 462, 87, 87, 87, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 87, 87, 462, 462, 462, 462, 462, 462, 462, 87, 462, 87,
        462, 462, 87, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 87, 88, 87, 87, 89, 462, 462, 462,
    ],
    // State(51):
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [0..9, A..F, a..f] => State(93)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 93, 462, 462, 93, 93, 93, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 93, 93, 462, 462, 462, 462, 462, 462, 462, 93, 462, 93,
        462, 462, 93, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 93, 93, 93, 93, 93, 462, 462, 462,
    ],
    // State(52):
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    // Transitions:
    //   [2..9, A..F, a..f] => State(94)
    //   [1] => State(95)
    //   [0] => State(96)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 94, 462, 462, 94, 94, 94, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 94, 94, 462, 462, 462, 462, 462, 462, 462, 94, 462, 94,
        462, 462, 94, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 94, 95, 94, 94, 96, 462, 462, 462,
    ],
    // State(53):
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    // Transitions:
    //   [2..9, A..F, a..f] => State(100)
    //   [1] => State(101)
    //   [0] => State(102)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 100, 462, 462, 100, 100, 100, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 100, 100, 462, 462, 462, 462, 462, 462, 462, 100,
        462, 100, 462, 462, 100, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 100, 101, 100, 100, 102, 462, 462, 462,
    ],
    // State(54):
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    // Transitions:
    //   [2..9, A..F, a..f] => State(105)
    //   [1] => State(106)
    //   [0] => State(107)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 105, 462, 462, 105, 105, 105, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 105, 105, 462, 462, 462, 462, 462, 462, 462, 105,
        462, 105, 462, 462, 105, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 105, 106, 105, 105, 107, 462, 462, 462,
    ],
    // State(55):
    //   HexEscapeSequence -> [x] HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [0..9, A..F, a..f] => State(6)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 6, 462, 462, 6, 6, 6, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 6, 6, 462, 462, 462, 462, 462, 462, 462, 6, 462, 6, 462, 462,
        6, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 6, 6, 6, 6, 6, 462, 462, 462,
    ],
    // State(56):
    //   HexEscapeSequence -> [x] HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [0..9, A..F, a..f] => State(7)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 7, 462, 462, 7, 7, 7, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 7, 7, 462, 462, 462, 462, 462, 462, 462, 7, 462, 7, 462, 462,
        7, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 7, 7, 7, 7, 7, 462, 462, 462,
    ],
    // State(57):
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [0..9, A..F, a..f] => State(149)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 149, 462, 462, 149, 149, 149, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 149, 149, 462, 462, 462, 462, 462, 462, 462, 149,
        462, 149, 462, 462, 149, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 149, 149, 149, 149, 149, 462, 462, 462,
    ],
    // State(58):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(72)
    //   [0] => State(73)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 72, 462, 462, 72, 72, 72, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 72, 72, 462, 462, 462, 462, 462, 462, 462, 72, 462, 72,
        462, 462, 72, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 72, 72, 72, 72, 73, 462, 462, 462,
    ],
    // State(59):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(74)
    //   [0] => State(75)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 74, 462, 462, 74, 74, 74, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 74, 74, 462, 462, 462, 462, 462, 462, 462, 74, 462, 74,
        462, 462, 74, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 74, 74, 74, 74, 75, 462, 462, 462,
    ],
    // State(60):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(76)
    //   [0] => State(77)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 76, 462, 462, 76, 76, 76, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 76, 76, 462, 462, 462, 462, 462, 462, 462, 76, 462, 76,
        462, 462, 76, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 76, 76, 76, 76, 77, 462, 462, 462,
    ],
    // State(61):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [0] => State(77)
    //   [1..9, A..F, a..f] => State(78)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 78, 462, 462, 78, 78, 78, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 78, 78, 462, 462, 462, 462, 462, 462, 462, 78, 462, 78,
        462, 462, 78, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 78, 78, 78, 78, 77, 462, 462, 462,
    ],
    // State(62):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(81)
    //   [0] => State(82)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 81, 462, 462, 81, 81, 81, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 81, 81, 462, 462, 462, 462, 462, 462, 462, 81, 462, 81,
        462, 462, 81, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 81, 81, 81, 81, 82, 462, 462, 462,
    ],
    // State(63):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(83)
    //   [0] => State(84)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 83, 462, 462, 83, 83, 83, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 83, 83, 462, 462, 462, 462, 462, 462, 462, 83, 462, 83,
        462, 462, 83, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 83, 83, 83, 83, 84, 462, 462, 462,
    ],
    // State(64):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [0] => State(84)
    //   [1..9, A..F, a..f] => State(85)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 85, 462, 462, 85, 85, 85, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 85, 85, 462, 462, 462, 462, 462, 462, 462, 85, 462, 85,
        462, 462, 85, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 85, 85, 85, 85, 84, 462, 462, 462,
    ],
    // State(65):
    //   LegacyOctalEscapeSequence -> ZeroToThree . OctalDigit !?[OctalDigit]
    //   OctalDigit -> . [0 1 2 3 4 5 6 7]
    //   LegacyOctalEscapeSequence -> ZeroToThree . OctalDigit OctalDigit
    // Transitions:
    //   [0..7] => State(66)
    //   [<NUL>../, 8..U+10FFFF] => State(155)?
    [
        155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
        155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
        155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
        155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 66, 66, 66, 66, 155, 155, 155,
    ],
    // State(66):
    //   LegacyOctalEscapeSequence -> FourToSeven . OctalDigit
    //   OctalDigit -> . [0 1 2 3 4 5 6 7]
    //   LegacyOctalEscapeSequence -> ZeroToThree OctalDigit . OctalDigit
    // Transitions:
    //   [0..7] => State(6)
    //   [<NUL>../, 8..U+10FFFF] => State(155)?
    [
        155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
        155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
        155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
        155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 6, 6, 6, 6, 155, 155, 155,
    ],
    // State(67):
    //   LegacyOctalEscapeSequence -> ZeroToThree . OctalDigit !?[OctalDigit]
    //   OctalDigit -> . [0 1 2 3 4 5 6 7]
    //   LegacyOctalEscapeSequence -> ZeroToThree . OctalDigit OctalDigit
    // Transitions:
    //   [0..7] => State(68)
    //   [<NUL>../, 8..U+10FFFF] => State(156)?
    [
        156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
        156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
        156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
        156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 68, 68, 68, 68, 156, 156, 156,
    ],
    // State(68):
    //   LegacyOctalEscapeSequence -> FourToSeven . OctalDigit
    //   OctalDigit -> . [0 1 2 3 4 5 6 7]
    //   LegacyOctalEscapeSequence -> ZeroToThree OctalDigit . OctalDigit
    // Transitions:
    //   [0..7] => State(7)
    //   [<NUL>../, 8..U+10FFFF] => State(156)?
    [
        156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
        156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
        156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
        156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 7, 7, 7, 7, 156, 156, 156,
    ],
    // State(69):
    //   UnicodeEscapeSequence -> [u] . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] . [{] CodePoint [}]
    //   NotEscapeSequence -> [u] . HexDigit !?[HexDigit]
    //   NotEscapeSequence -> [u] . HexDigit HexDigit !?[HexDigit]
    //   NotEscapeSequence -> [u] . HexDigit HexDigit HexDigit !?[HexDigit]
    //   NotEscapeSequence -> [u] . [{] !?[HexDigit]
    //   NotEscapeSequence -> [u] . [{] NotCodePoint !?[HexDigit]
    //   NotEscapeSequence -> [u] . [{] CodePoint !?[HexDigit] !?[}]
    // Transitions:
    //   [0..9, A..F, a..f] => State(71)
    //   [{] => State(79)
    //   [<NUL>../, :..@, G..`, g..z, |..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 71, 154, 154, 71, 71, 71, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 71, 71, 154, 154, 154, 154, 154, 154, 154, 71, 154, 71,
        154, 154, 71, 79, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 71, 71, 71, 71, 71, 154, 154, 154,
    ],
    // State(70):
    //   HexEscapeSequence -> [x] . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotEscapeSequence -> [x] . HexDigit !?[HexDigit]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotEscapeSequence -> [u] HexDigit HexDigit . HexDigit !?[HexDigit]
    // Transitions:
    //   [0..9, A..F, a..f] => State(80)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 80, 154, 154, 80, 80, 80, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 80, 80, 154, 154, 154, 154, 154, 154, 154, 80, 154, 80,
        154, 154, 80, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 80, 80, 80, 80, 80, 154, 154, 154,
    ],
    // State(71):
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotEscapeSequence -> [u] HexDigit . HexDigit !?[HexDigit]
    //   NotEscapeSequence -> [u] HexDigit . HexDigit HexDigit !?[HexDigit]
    // Transitions:
    //   [0..9, A..F, a..f] => State(70)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 70, 154, 154, 70, 70, 70, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 70, 70, 154, 154, 154, 154, 154, 154, 154, 70, 154, 70,
        154, 154, 70, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 70, 70, 70, 70, 70, 154, 154, 154,
    ],
    // State(72):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(72)
    //   [0] => State(73)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 72, 154, 154, 72, 72, 72, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 72, 72, 154, 154, 154, 154, 154, 154, 154, 72, 154, 72,
        154, 154, 72, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 72, 72, 72, 72, 73, 154, 154, 154,
    ],
    // State(73):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(74)
    //   [0] => State(75)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 74, 154, 154, 74, 74, 74, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 74, 74, 154, 154, 154, 154, 154, 154, 154, 74, 154, 74,
        154, 154, 74, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 74, 74, 74, 74, 75, 154, 154, 154,
    ],
    // State(74):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(76)
    //   [0] => State(77)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 76, 154, 154, 76, 76, 76, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 76, 76, 154, 154, 154, 154, 154, 154, 154, 76, 154, 76,
        154, 154, 76, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 76, 76, 76, 76, 77, 154, 154, 154,
    ],
    // State(75):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [0] => State(77)
    //   [1..9, A..F, a..f] => State(78)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 78, 154, 154, 78, 78, 78, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 78, 78, 154, 154, 154, 154, 154, 154, 154, 78, 154, 78,
        154, 154, 78, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 78, 78, 78, 78, 77, 154, 154, 154,
    ],
    // State(76):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(81)
    //   [0] => State(82)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 81, 154, 154, 81, 81, 81, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 81, 81, 154, 154, 154, 154, 154, 154, 154, 81, 154, 81,
        154, 154, 81, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 81, 81, 81, 81, 82, 154, 154, 154,
    ],
    // State(77):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(83)
    //   [0] => State(84)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 83, 154, 154, 83, 83, 83, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 83, 83, 154, 154, 154, 154, 154, 154, 154, 83, 154, 83,
        154, 154, 83, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 83, 83, 83, 83, 84, 154, 154, 154,
    ],
    // State(78):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [0] => State(84)
    //   [1..9, A..F, a..f] => State(85)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 85, 154, 154, 85, 85, 85, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 85, 85, 154, 154, 154, 154, 154, 154, 154, 85, 154, 85,
        154, 154, 85, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 85, 85, 85, 85, 84, 154, 154, 154,
    ],
    // State(79):
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] . CodePoint !?[HexDigit] !?[}]
    // Transitions:
    //   [2..9, A..F, a..f] => State(112)
    //   [1] => State(113)
    //   [0] => State(114)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 112, 154, 154, 112, 112, 112, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 112, 112, 154, 154, 154, 154, 154, 154, 154, 112,
        154, 112, 154, 154, 112, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 154, 112, 113, 112, 112, 114, 154, 154, 154,
    ],
    // State(80):
    //   HexEscapeSequence -> [x] HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [0..9, A..F, a..f] => State(8)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 8, 154, 154, 8, 8, 8, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 8, 8, 154, 154, 154, 154, 154, 154, 154, 8, 154, 8, 154, 154,
        8, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 8, 8, 8, 8, 8, 154, 154, 154,
    ],
    // State(81):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(46)
    //   [0] => State(47)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 46, 154, 154, 46, 46, 46, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 46, 46, 154, 154, 154, 154, 154, 154, 154, 46, 154, 46,
        154, 154, 46, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 46, 46, 46, 46, 47, 154, 154, 154,
    ],
    // State(82):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(48)
    //   [0] => State(49)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 48, 154, 154, 48, 48, 48, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 48, 48, 154, 154, 154, 154, 154, 154, 154, 48, 154, 48,
        154, 154, 48, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 48, 48, 48, 48, 49, 154, 154, 154,
    ],
    // State(83):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [1..9, A..F, a..f] => State(41)
    //   [0] => State(42)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 41, 154, 154, 41, 41, 41, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 41, 41, 154, 154, 154, 154, 154, 154, 154, 41, 154, 41,
        154, 154, 41, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 41, 41, 41, 41, 42, 154, 154, 154,
    ],
    // State(84):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [0] => State(42)
    //   [1..9, A..F, a..f] => State(43)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 43, 154, 154, 43, 43, 43, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 43, 43, 154, 154, 154, 154, 154, 154, 154, 43, 154, 43,
        154, 154, 43, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 43, 43, 43, 43, 42, 154, 154, 154,
    ],
    // State(85):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(44)
    //   [0] => State(45)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 44, 154, 154, 44, 44, 44, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 44, 44, 154, 154, 154, 154, 154, 154, 154, 44, 154, 44,
        154, 154, 44, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 44, 44, 44, 44, 45, 154, 154, 154,
    ],
    // State(86):
    //   NotEscapeSequence -> [0] . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    // Transitions:
    //   [0..9] => State(8)
    //   [<NUL>../, :..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 154, 8, 8, 8, 8, 8, 154, 154, 154,
    ],
    // State(87):
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   CodePoint -> [1] [0] . Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [0..9, A..F, a..f] => State(90)
    //   [}] => State(218):IdentifierName
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 90, 462, 462, 90, 90, 90, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 90, 90, 462, 462, 462, 462, 462, 462, 462, 90, 462, 90,
        462, 462, 90, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 90, 90, 90, 90, 90, 218, 462, 462,
    ],
    // State(88):
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> [1] . [0] Hex4Digits
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [0] => State(87)
    //   [1..9, A..F, a..f] => State(90)
    //   [}] => State(218):IdentifierName
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 90, 462, 462, 90, 90, 90, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 90, 90, 462, 462, 462, 462, 462, 462, 462, 90, 462, 90,
        462, 462, 90, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 90, 90, 90, 90, 87, 218, 462, 462,
    ],
    // State(89):
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> HexDigit . Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [2..9, A..F, a..f] => State(87)
    //   [1] => State(88)
    //   [0] => State(89)
    //   [}] => State(218):IdentifierName
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 87, 462, 462, 87, 87, 87, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 87, 87, 462, 462, 462, 462, 462, 462, 462, 87, 462, 87,
        462, 462, 87, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 87, 88, 87, 87, 89, 218, 462, 462,
    ],
    // State(90):
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [0..9, A..F, a..f] => State(91)
    //   [}] => State(218):IdentifierName
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 91, 462, 462, 91, 91, 91, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 91, 91, 462, 462, 462, 462, 462, 462, 462, 91, 462, 91,
        462, 462, 91, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 91, 91, 91, 91, 91, 218, 462, 462,
    ],
    // State(91):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions:
    //   [0..9, A..F, a..f] => State(92)
    //   [}] => State(218):IdentifierName
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 92, 462, 462, 92, 92, 92, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 92, 92, 462, 462, 462, 462, 462, 462, 462, 92, 462, 92,
        462, 462, 92, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 92, 92, 92, 92, 92, 218, 462, 462,
    ],
    // State(92):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions:
    //   [0..9, A..F, a..f] => State(150)
    //   [}] => State(218):IdentifierName
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 150, 462, 462, 150, 150, 150, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 150, 150, 462, 462, 462, 462, 462, 462, 462, 150,
        462, 150, 462, 462, 150, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 150, 150, 150, 150, 150, 218, 462, 462,
    ],
    // State(93):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [0..9, A..F, a..f] => State(218):IdentifierName
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 462, 462, 218, 218, 218, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 462, 462, 462, 462, 462, 462, 462, 218,
        462, 218, 462, 462, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 462, 462,
    ],
    // State(94):
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   CodePoint -> [1] [0] . Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [0..9, A..F, a..f] => State(97)
    //   [}] => State(391):PrivateIdentifier
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 97, 462, 462, 97, 97, 97, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 97, 97, 462, 462, 462, 462, 462, 462, 462, 97, 462, 97,
        462, 462, 97, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 97, 97, 97, 97, 97, 391, 462, 462,
    ],
    // State(95):
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> [1] . [0] Hex4Digits
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [0] => State(94)
    //   [1..9, A..F, a..f] => State(97)
    //   [}] => State(391):PrivateIdentifier
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 97, 462, 462, 97, 97, 97, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 97, 97, 462, 462, 462, 462, 462, 462, 462, 97, 462, 97,
        462, 462, 97, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 97, 97, 97, 97, 94, 391, 462, 462,
    ],
    // State(96):
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> HexDigit . Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [2..9, A..F, a..f] => State(94)
    //   [1] => State(95)
    //   [0] => State(96)
    //   [}] => State(391):PrivateIdentifier
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 94, 462, 462, 94, 94, 94, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 94, 94, 462, 462, 462, 462, 462, 462, 462, 94, 462, 94,
        462, 462, 94, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 94, 95, 94, 94, 96, 391, 462, 462,
    ],
    // State(97):
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [0..9, A..F, a..f] => State(98)
    //   [}] => State(391):PrivateIdentifier
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 98, 462, 462, 98, 98, 98, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 98, 98, 462, 462, 462, 462, 462, 462, 462, 98, 462, 98,
        462, 462, 98, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 98, 98, 98, 98, 98, 391, 462, 462,
    ],
    // State(98):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions:
    //   [0..9, A..F, a..f] => State(99)
    //   [}] => State(391):PrivateIdentifier
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 99, 462, 462, 99, 99, 99, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 99, 99, 462, 462, 462, 462, 462, 462, 462, 99, 462, 99,
        462, 462, 99, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 99, 99, 99, 99, 99, 391, 462, 462,
    ],
    // State(99):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions:
    //   [0..9, A..F, a..f] => State(151)
    //   [}] => State(391):PrivateIdentifier
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 151, 462, 462, 151, 151, 151, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 151, 151, 462, 462, 462, 462, 462, 462, 462, 151,
        462, 151, 462, 462, 151, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 151, 151, 151, 151, 151, 391, 462, 462,
    ],
    // State(100):
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   CodePoint -> [1] [0] . Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(6)
    //   [0..9, A..F, a..f] => State(103)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 103, 462, 462, 103, 103, 103, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 103, 103, 462, 462, 462, 462, 462, 462, 462, 103,
        462, 103, 462, 462, 103, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 103, 103, 103, 103, 103, 6, 462, 462,
    ],
    // State(101):
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> [1] . [0] Hex4Digits
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(6)
    //   [0] => State(100)
    //   [1..9, A..F, a..f] => State(103)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 103, 462, 462, 103, 103, 103, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 103, 103, 462, 462, 462, 462, 462, 462, 462, 103,
        462, 103, 462, 462, 103, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 103, 103, 103, 103, 100, 6, 462, 462,
    ],
    // State(102):
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> HexDigit . Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(6)
    //   [2..9, A..F, a..f] => State(100)
    //   [1] => State(101)
    //   [0] => State(102)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 100, 462, 462, 100, 100, 100, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 100, 100, 462, 462, 462, 462, 462, 462, 462, 100,
        462, 100, 462, 462, 100, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 100, 101, 100, 100, 102, 6, 462, 462,
    ],
    // State(103):
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(6)
    //   [0..9, A..F, a..f] => State(104)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 104, 462, 462, 104, 104, 104, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 104, 104, 462, 462, 462, 462, 462, 462, 462, 104,
        462, 104, 462, 462, 104, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 104, 104, 104, 104, 104, 6, 462, 462,
    ],
    // State(104):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions:
    //   [}] => State(6)
    //   [0..9, A..F, a..f] => State(110)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 110, 462, 462, 110, 110, 110, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 110, 110, 462, 462, 462, 462, 462, 462, 462, 110,
        462, 110, 462, 462, 110, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 110, 110, 110, 110, 110, 6, 462, 462,
    ],
    // State(105):
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   CodePoint -> [1] [0] . Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(7)
    //   [0..9, A..F, a..f] => State(108)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 108, 462, 462, 108, 108, 108, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 108, 108, 462, 462, 462, 462, 462, 462, 462, 108,
        462, 108, 462, 462, 108, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 108, 108, 108, 108, 108, 7, 462, 462,
    ],
    // State(106):
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> [1] . [0] Hex4Digits
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(7)
    //   [0] => State(105)
    //   [1..9, A..F, a..f] => State(108)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 108, 462, 462, 108, 108, 108, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 108, 108, 462, 462, 462, 462, 462, 462, 462, 108,
        462, 108, 462, 462, 108, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 108, 108, 108, 108, 105, 7, 462, 462,
    ],
    // State(107):
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> HexDigit . Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(7)
    //   [2..9, A..F, a..f] => State(105)
    //   [1] => State(106)
    //   [0] => State(107)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 105, 462, 462, 105, 105, 105, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 105, 105, 462, 462, 462, 462, 462, 462, 462, 105,
        462, 105, 462, 462, 105, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 105, 106, 105, 105, 107, 7, 462, 462,
    ],
    // State(108):
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(7)
    //   [0..9, A..F, a..f] => State(109)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 109, 462, 462, 109, 109, 109, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 109, 109, 462, 462, 462, 462, 462, 462, 462, 109,
        462, 109, 462, 462, 109, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 109, 109, 109, 109, 109, 7, 462, 462,
    ],
    // State(109):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions:
    //   [}] => State(7)
    //   [0..9, A..F, a..f] => State(111)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 111, 462, 462, 111, 111, 111, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 111, 111, 462, 462, 462, 462, 462, 462, 462, 111,
        462, 111, 462, 462, 111, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 111, 111, 111, 111, 111, 7, 462, 462,
    ],
    // State(110):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions:
    //   [}] => State(6)
    //   [0..9, A..F, a..f] => State(152)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 152, 462, 462, 152, 152, 152, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 152, 152, 462, 462, 462, 462, 462, 462, 462, 152,
        462, 152, 462, 462, 152, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 152, 152, 152, 152, 152, 6, 462, 462,
    ],
    // State(111):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions:
    //   [}] => State(7)
    //   [0..9, A..F, a..f] => State(153)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 153, 462, 462, 153, 153, 153, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 153, 153, 462, 462, 462, 462, 462, 462, 462, 153,
        462, 153, 462, 462, 153, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 153, 153, 153, 153, 153, 7, 462, 462,
    ],
    // State(112):
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(116)
    //   [0] => State(117)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 116, 154, 154, 116, 116, 116, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 116, 116, 154, 154, 154, 154, 154, 154, 154, 116,
        154, 116, 154, 154, 116, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 154, 116, 116, 116, 116, 117, 8, 154, 154,
    ],
    // State(113):
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> [1] . [0] Hex4Digits
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(8)
    //   [0] => State(115)
    //   [1..9, A..F, a..f] => State(116)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 116, 154, 154, 116, 116, 116, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 116, 116, 154, 154, 154, 154, 154, 154, 154, 116,
        154, 116, 154, 154, 116, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 154, 116, 116, 116, 116, 115, 8, 154, 154,
    ],
    // State(114):
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> HexDigit . Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] . CodePoint !?[HexDigit] !?[}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(8)
    //   [2..9, A..F, a..f] => State(112)
    //   [1] => State(113)
    //   [0] => State(114)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 112, 154, 154, 112, 112, 112, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 112, 112, 154, 154, 154, 154, 154, 154, 154, 112,
        154, 112, 154, 154, 112, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 154, 112, 113, 112, 112, 114, 8, 154, 154,
    ],
    // State(115):
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> [1] [0] . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(8)
    //   [0] => State(117)
    //   [1..9, A..F, a..f] => State(118)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 118, 154, 154, 118, 118, 118, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 118, 118, 154, 154, 154, 154, 154, 154, 154, 118,
        154, 118, 154, 154, 118, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 154, 118, 118, 118, 118, 117, 8, 154, 154,
    ],
    // State(116):
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(119)
    //   [0] => State(120)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 119, 154, 154, 119, 119, 119, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 119, 119, 154, 154, 154, 154, 154, 154, 154, 119,
        154, 119, 154, 154, 119, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 154, 119, 119, 119, 119, 120, 8, 154, 154,
    ],
    // State(117):
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(121)
    //   [0] => State(122)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 121, 154, 154, 121, 121, 121, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 121, 121, 154, 154, 154, 154, 154, 154, 154, 121,
        154, 121, 154, 154, 121, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 154, 121, 121, 121, 121, 122, 8, 154, 154,
    ],
    // State(118):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [0] => State(122)
    //   [1..9, A..F, a..f] => State(123)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 123, 154, 154, 123, 123, 123, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 123, 123, 154, 154, 154, 154, 154, 154, 154, 123,
        154, 123, 154, 154, 123, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 154, 123, 123, 123, 123, 122, 8, 154, 154,
    ],
    // State(119):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(124)
    //   [0] => State(125)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 124, 154, 154, 124, 124, 124, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 124, 124, 154, 154, 154, 154, 154, 154, 154, 124,
        154, 124, 154, 154, 124, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 154, 124, 124, 124, 124, 125, 8, 154, 154,
    ],
    // State(120):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(126)
    //   [0] => State(127)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 126, 154, 154, 126, 126, 126, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 126, 126, 154, 154, 154, 154, 154, 154, 154, 126,
        154, 126, 154, 154, 126, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 154, 126, 126, 126, 126, 127, 8, 154, 154,
    ],
    // State(121):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(128)
    //   [0] => State(129)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 128, 154, 154, 128, 128, 128, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 128, 128, 154, 154, 154, 154, 154, 154, 154, 128,
        154, 128, 154, 154, 128, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 154, 128, 128, 128, 128, 129, 8, 154, 154,
    ],
    // State(122):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [0] => State(129)
    //   [1..9, A..F, a..f] => State(130)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 130, 154, 154, 130, 130, 130, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 130, 130, 154, 154, 154, 154, 154, 154, 154, 130,
        154, 130, 154, 154, 130, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 154, 130, 130, 130, 130, 129, 8, 154, 154,
    ],
    // State(123):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(131)
    //   [0] => State(132)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 131, 154, 154, 131, 131, 131, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 131, 131, 154, 154, 154, 154, 154, 154, 154, 131,
        154, 131, 154, 154, 131, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 154, 131, 131, 131, 131, 132, 8, 154, 154,
    ],
    // State(124):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(133)
    //   [0] => State(134)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 133, 154, 154, 133, 133, 133, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 133, 133, 154, 154, 154, 154, 154, 154, 154, 133,
        154, 133, 154, 154, 133, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 154, 133, 133, 133, 133, 134, 8, 154, 154,
    ],
    // State(125):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(135)
    //   [0] => State(136)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 135, 154, 154, 135, 135, 135, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 135, 135, 154, 154, 154, 154, 154, 154, 154, 135,
        154, 135, 154, 154, 135, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 154, 135, 135, 135, 135, 136, 8, 154, 154,
    ],
    // State(126):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(137)
    //   [0] => State(138)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 137, 154, 154, 137, 137, 137, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 137, 137, 154, 154, 154, 154, 154, 154, 154, 137,
        154, 137, 154, 154, 137, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 154, 137, 137, 137, 137, 138, 8, 154, 154,
    ],
    // State(127):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [0] => State(138)
    //   [1..9, A..F, a..f] => State(139)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 139, 154, 154, 139, 139, 139, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 139, 139, 154, 154, 154, 154, 154, 154, 154, 139,
        154, 139, 154, 154, 139, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 154, 139, 139, 139, 139, 138, 8, 154, 154,
    ],
    // State(128):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(140)
    //   [0] => State(141)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 140, 154, 154, 140, 140, 140, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 140, 140, 154, 154, 154, 154, 154, 154, 154, 140,
        154, 140, 154, 154, 140, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 154, 140, 140, 140, 140, 141, 8, 154, 154,
    ],
    // State(129):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(142)
    //   [0] => State(143)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 142, 154, 154, 142, 142, 142, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 142, 142, 154, 154, 154, 154, 154, 154, 154, 142,
        154, 142, 154, 154, 142, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 154, 142, 142, 142, 142, 143, 8, 154, 154,
    ],
    // State(130):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [0] => State(143)
    //   [1..9, A..F, a..f] => State(144)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 144, 154, 154, 144, 144, 144, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 144, 144, 154, 154, 154, 154, 154, 154, 154, 144,
        154, 144, 154, 154, 144, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 154, 144, 144, 144, 144, 143, 8, 154, 154,
    ],
    // State(131):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(145)
    //   [0] => State(146)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 145, 154, 154, 145, 145, 145, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 145, 145, 154, 154, 154, 154, 154, 154, 154, 145,
        154, 145, 154, 154, 145, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 154, 145, 145, 145, 145, 146, 8, 154, 154,
    ],
    // State(132):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(147)
    //   [0] => State(148)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 147, 154, 154, 147, 147, 147, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 147, 147, 154, 154, 154, 154, 154, 154, 154, 147,
        154, 147, 154, 154, 147, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 154, 154, 147, 147, 147, 147, 148, 8, 154, 154,
    ],
    // State(133):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(72)
    //   [0] => State(73)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 72, 154, 154, 72, 72, 72, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 72, 72, 154, 154, 154, 154, 154, 154, 154, 72, 154, 72,
        154, 154, 72, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 72, 72, 72, 72, 73, 8, 154, 154,
    ],
    // State(134):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(74)
    //   [0] => State(75)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 74, 154, 154, 74, 74, 74, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 74, 74, 154, 154, 154, 154, 154, 154, 154, 74, 154, 74,
        154, 154, 74, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 74, 74, 74, 74, 75, 8, 154, 154,
    ],
    // State(135):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(76)
    //   [0] => State(77)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 76, 154, 154, 76, 76, 76, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 76, 76, 154, 154, 154, 154, 154, 154, 154, 76, 154, 76,
        154, 154, 76, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 76, 76, 76, 76, 77, 8, 154, 154,
    ],
    // State(136):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [0] => State(77)
    //   [1..9, A..F, a..f] => State(78)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 78, 154, 154, 78, 78, 78, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 78, 78, 154, 154, 154, 154, 154, 154, 154, 78, 154, 78,
        154, 154, 78, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 78, 78, 78, 78, 77, 8, 154, 154,
    ],
    // State(137):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(81)
    //   [0] => State(82)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 81, 154, 154, 81, 81, 81, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 81, 81, 154, 154, 154, 154, 154, 154, 154, 81, 154, 81,
        154, 154, 81, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 81, 81, 81, 81, 82, 8, 154, 154,
    ],
    // State(138):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(83)
    //   [0] => State(84)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 83, 154, 154, 83, 83, 83, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 83, 83, 154, 154, 154, 154, 154, 154, 154, 83, 154, 83,
        154, 154, 83, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 83, 83, 83, 83, 84, 8, 154, 154,
    ],
    // State(139):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [0] => State(84)
    //   [1..9, A..F, a..f] => State(85)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 85, 154, 154, 85, 85, 85, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 85, 85, 154, 154, 154, 154, 154, 154, 154, 85, 154, 85,
        154, 154, 85, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 85, 85, 85, 85, 84, 8, 154, 154,
    ],
    // State(140):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(46)
    //   [0] => State(47)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 46, 154, 154, 46, 46, 46, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 46, 46, 154, 154, 154, 154, 154, 154, 154, 46, 154, 46,
        154, 154, 46, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 46, 46, 46, 46, 47, 8, 154, 154,
    ],
    // State(141):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(48)
    //   [0] => State(49)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 48, 154, 154, 48, 48, 48, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 48, 48, 154, 154, 154, 154, 154, 154, 154, 48, 154, 48,
        154, 154, 48, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 48, 48, 48, 48, 49, 8, 154, 154,
    ],
    // State(142):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(41)
    //   [0] => State(42)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 41, 154, 154, 41, 41, 41, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 41, 41, 154, 154, 154, 154, 154, 154, 154, 41, 154, 41,
        154, 154, 41, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 41, 41, 41, 41, 42, 8, 154, 154,
    ],
    // State(143):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [}] => State(8)
    //   [0] => State(42)
    //   [1..9, A..F, a..f] => State(43)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 43, 154, 154, 43, 43, 43, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 43, 43, 154, 154, 154, 154, 154, 154, 154, 43, 154, 43,
        154, 154, 43, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 43, 43, 43, 43, 42, 8, 154, 154,
    ],
    // State(144):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(44)
    //   [0] => State(45)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 44, 154, 154, 44, 44, 44, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 44, 44, 154, 154, 154, 154, 154, 154, 154, 44, 154, 44,
        154, 154, 44, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 44, 44, 44, 44, 45, 8, 154, 154,
    ],
    // State(145):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(58)
    //   [0] => State(59)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 58, 154, 154, 58, 58, 58, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 58, 58, 154, 154, 154, 154, 154, 154, 154, 58, 154, 58,
        154, 154, 58, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 58, 58, 58, 58, 59, 8, 154, 154,
    ],
    // State(146):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(60)
    //   [0] => State(61)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 60, 154, 154, 60, 60, 60, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 60, 60, 154, 154, 154, 154, 154, 154, 154, 60, 154, 60,
        154, 154, 60, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 60, 60, 60, 60, 61, 8, 154, 154,
    ],
    // State(147):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(62)
    //   [0] => State(63)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 62, 154, 154, 62, 62, 62, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 62, 62, 154, 154, 154, 154, 154, 154, 154, 62, 154, 62,
        154, 154, 62, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 62, 62, 62, 62, 63, 8, 154, 154,
    ],
    // State(148):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [0] => State(63)
    //   [1..9, A..F, a..f] => State(64)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(154)?
    [
        154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 64, 154, 154, 64, 64, 64, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 64, 64, 154, 154, 154, 154, 154, 154, 154, 64, 154, 64,
        154, 154, 64, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 154, 154, 154, 64, 64, 64, 64, 63, 8, 154, 154,
    ],
    // State(149):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [0..9, A..F, a..f] => State(391):PrivateIdentifier
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 391, 462, 462, 391, 391, 391, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 391, 391, 462, 462, 462, 462, 462, 462, 462, 391,
        462, 391, 462, 462, 391, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 391, 391, 391, 391, 391, 462, 462, 462,
    ],
    // State(150):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions:
    //   [}] => State(218):IdentifierName
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 462, 462,
    ],
    // State(151):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions:
    //   [}] => State(391):PrivateIdentifier
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 391, 462, 462,
    ],
    // State(152):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions:
    //   [}] => State(6)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 6, 462, 462,
    ],
    // State(153):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions:
    //   [}] => State(7)
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 7, 462, 462,
    ],
    // State(154):
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] !?[{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] !?[<LF>]
    //   LineTerminatorSequence -> [<CR>] . !?[<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   TemplateCharacter -> [$] . !?[{]
    //   NotEscapeSequence -> [u] . !?[HexDigit] !?[{]
    //   NotEscapeSequence -> [x] . !?[HexDigit]
    //   TemplateEscapeSequence -> [0] . !?[DecimalDigit]
    //   NotEscapeSequence -> [u] HexDigit . !?[HexDigit]
    //   NotEscapeSequence -> [u] [{] . !?[HexDigit]
    //   NotEscapeSequence -> [x] HexDigit . !?[HexDigit]
    //   NotEscapeSequence -> [u] HexDigit HexDigit . !?[HexDigit]
    //   NotEscapeSequence -> [u] [{] CodePoint . !?[HexDigit] !?[}]
    //   NotEscapeSequence -> [u] HexDigit HexDigit HexDigit . !?[HexDigit]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . !?[HexDigit]
    // Transitions:
    //   [<NUL>..<FF>, <SO>..#, %..[, ].._, a..U+10FFFF] => State(8)
    //   [\] => State(13)
    //   [<CR>] => State(30)
    //   [$] => State(33)
    //   [`] => State(458):NoSubstitutionTemplate
    [
        30, 8, 13, 8, 8, 8, 458, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 33, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
    ],
    // State(155):
    //   DoubleStringCharacters -> DoubleStringCharacter . DoubleStringCharacters
    //   StringLiteral -> ["] . DoubleStringCharacters ["]
    //   DoubleStringCharacters -> . DoubleStringCharacter
    //   DoubleStringCharacter -> . [SourceCharacter -" -\ -LineTerminator]
    //   DoubleStringCharacter -> . [<LS>]
    //   DoubleStringCharacter -> . [<PS>]
    //   DoubleStringCharacter -> . [\] EscapeSequence
    //   DoubleStringCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   LineTerminatorSequence -> [<CR>] . !?[<LF>]
    //   DoubleStringCharacters -> . DoubleStringCharacter DoubleStringCharacters
    //   StringLiteral -> ["] DoubleStringCharacters . ["]
    //   LegacyOctalEscapeSequence -> NonZeroOctalDigit . !?[OctalDigit]
    //   EscapeSequence -> [0] . !?[DecimalDigit]
    //   LegacyOctalEscapeSequence -> [0] . ?[8 9]
    //   LegacyOctalEscapeSequence -> ZeroToThree OctalDigit . !?[OctalDigit]
    // Transitions:
    //   [<NUL>..<HT>, <VT>..<FF>, <SO>..!, #..[, ]..U+10FFFF] => State(6)
    //   [\] => State(11)
    //   ["] => State(457):StringLiteral
    [
        462, 6, 11, 6, 457, 6, 6, 6, 462, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    ],
    // State(156):
    //   SingleStringCharacters -> SingleStringCharacter . SingleStringCharacters
    //   StringLiteral -> ['] . SingleStringCharacters [']
    //   SingleStringCharacters -> . SingleStringCharacter
    //   SingleStringCharacter -> . [SourceCharacter -' -\ -LineTerminator]
    //   SingleStringCharacter -> . [<LS>]
    //   SingleStringCharacter -> . [<PS>]
    //   SingleStringCharacter -> . [\] EscapeSequence
    //   SingleStringCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   LineTerminatorSequence -> [<CR>] . !?[<LF>]
    //   SingleStringCharacters -> . SingleStringCharacter SingleStringCharacters
    //   StringLiteral -> ['] SingleStringCharacters . [']
    //   LegacyOctalEscapeSequence -> NonZeroOctalDigit . !?[OctalDigit]
    //   EscapeSequence -> [0] . !?[DecimalDigit]
    //   LegacyOctalEscapeSequence -> [0] . ?[8 9]
    //   LegacyOctalEscapeSequence -> ZeroToThree OctalDigit . !?[OctalDigit]
    // Transitions:
    //   [<NUL>..<HT>, <VT>..<FF>, <SO>..&, (..[, ]..U+10FFFF] => State(7)
    //   [\] => State(12)
    //   ['] => State(457):StringLiteral
    [
        462, 7, 12, 7, 7, 457, 7, 7, 462, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    ],
    // State(157):
    //   WhiteSpaceSequence -> WhiteSpace . WhiteSpaceSequence
    //   WhiteSpaceSequence -> WhiteSpace .
    //   WhiteSpaceSequence -> . WhiteSpace
    //   WhiteSpace -> . [<TAB> <VT> <FF> <ZWNBSP> <USP>]
    //   WhiteSpaceSequence -> WhiteSpace WhiteSpaceSequence .
    //   WhiteSpaceSequence -> . WhiteSpace WhiteSpaceSequence
    // Transitions:
    //   [<HT>, <VT>..<FF>, <SP>, U+00A0, U+1680, U+2000..U+200A, U+200F, U+205F, U+FEFF] => State(157):WhiteSpaceSequence
    [
        462, 462, 462, 462, 462, 462, 462, 157, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(158):
    //   LineTerminatorSequence -> [<LF>] .
    //   LineTerminatorSequence -> [<LS>] .
    //   LineTerminatorSequence -> [<PS>] .
    //   LineTerminatorSequence -> [<CR>] [<LF>] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(159):
    //   LineTerminatorSequence -> [<CR>] !?[<LF>] .
    //   LineTerminatorSequence -> [<CR>] . !?[<LF>]
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(160):
    //   Comment -> SingleLineComment .
    //   SingleLineCommentChars -> SingleLineCommentChar . SingleLineCommentChars
    //   SingleLineComment -> [/] [/] . SingleLineCommentChars
    //   SingleLineCommentChars -> . SingleLineCommentChar
    //   SingleLineCommentChar -> . [SourceCharacter -LineTerminator]
    //   SingleLineCommentChars -> . SingleLineCommentChar SingleLineCommentChars
    // Transitions:
    //   [<NUL>..<HT>, <VT>..<FF>, <SO>..U+2027, U+202A..U+10FFFF] => State(160):Comment
    [
        462, 160, 160, 160, 160, 160, 160, 160, 462, 462, 160, 160, 160, 160, 160, 160, 160, 160,
        160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
        160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
        160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
    ],
    // State(161):
    //   Comment -> MultiLineComment .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(162):
    //   BREAK -> [b] [r] [e] [a] [k] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(163):
    //   CASE -> [c] [a] [s] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(164):
    //   CATCH -> [c] [a] [t] [c] [h] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(165):
    //   CLASS -> [c] [l] [a] [s] [s] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(166):
    //   CONST -> [c] [o] [n] [s] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(167):
    //   CONTINUE -> [c] [o] [n] [t] [i] [n] [u] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(168):
    //   DEBUGGER -> [d] [e] [b] [u] [g] [g] [e] [r] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(169):
    //   DEFAULT -> [d] [e] [f] [a] [u] [l] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(170):
    //   DELETE -> [d] [e] [l] [e] [t] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(171):
    //   DO -> [d] [o] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(172):
    //   ELSE -> [e] [l] [s] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(173):
    //   ENUM -> [e] [n] [u] [m] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(174):
    //   EXPORT -> [e] [x] [p] [o] [r] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(175):
    //   EXTENDS -> [e] [x] [t] [e] [n] [d] [s] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(176):
    //   FALSE -> [f] [a] [l] [s] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(177):
    //   FINALLY -> [f] [i] [n] [a] [l] [l] [y] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(178):
    //   FOR -> [f] [o] [r] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(179):
    //   FUNCTION -> [f] [u] [n] [c] [t] [i] [o] [n] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(180):
    //   IF -> [i] [f] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(181):
    //   IMPORT -> [i] [m] [p] [o] [r] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(182):
    //   IN -> [i] [n] .
    //   INSTANCEOF -> [i] [n] . [s] [t] [a] [n] [c] [e] [o] [f]
    //   INTERFACE -> [i] [n] . [t] [e] [r] [f] [a] [c] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..r, u..z, U+200C..U+200D] => State(218):IdentifierName
    //   [s] => State(219):IdentifierName
    //   [t] => State(221):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 219, 221, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(183):
    //   INSTANCEOF -> [i] [n] [s] [t] [a] [n] [c] [e] [o] [f] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(184):
    //   NEW -> [n] [e] [w] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(185):
    //   NULL -> [n] [u] [l] [l] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(186):
    //   RETURN -> [r] [e] [t] [u] [r] [n] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(187):
    //   SUPER -> [s] [u] [p] [e] [r] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(188):
    //   SWITCH -> [s] [w] [i] [t] [c] [h] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(189):
    //   THIS -> [t] [h] [i] [s] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(190):
    //   THROW -> [t] [h] [r] [o] [w] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(191):
    //   TRUE -> [t] [r] [u] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(192):
    //   TRY -> [t] [r] [y] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(193):
    //   TYPEOF -> [t] [y] [p] [e] [o] [f] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(194):
    //   VAR -> [v] [a] [r] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(195):
    //   VOID -> [v] [o] [i] [d] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(196):
    //   WHILE -> [w] [h] [i] [l] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(197):
    //   WITH -> [w] [i] [t] [h] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(198):
    //   AWAIT -> [a] [w] [a] [i] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(199):
    //   YIELD -> [y] [i] [e] [l] [d] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(200):
    //   LET -> [l] [e] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(201):
    //   STATIC -> [s] [t] [a] [t] [i] [c] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(202):
    //   IMPLEMENTS -> [i] [m] [p] [l] [e] [m] [e] [n] [t] [s] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(203):
    //   INTERFACE -> [i] [n] [t] [e] [r] [f] [a] [c] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(204):
    //   PACKAGE -> [p] [a] [c] [k] [a] [g] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(205):
    //   PRIVATE -> [p] [r] [i] [v] [a] [t] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(206):
    //   PROTECTED -> [p] [r] [o] [t] [e] [c] [t] [e] [d] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(207):
    //   PUBLIC -> [p] [u] [b] [l] [i] [c] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(208):
    //   AS -> [a] [s] .
    //   ASYNC -> [a] [s] . [y] [n] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..x, z, U+200C..U+200D] => State(218):IdentifierName
    //   [y] => State(307):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 307, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(209):
    //   ASYNC -> [a] [s] [y] [n] [c] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(210):
    //   FROM -> [f] [r] [o] [m] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(211):
    //   GET -> [g] [e] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(212):
    //   META -> [m] [e] [t] [a] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(213):
    //   OF -> [o] [f] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(214):
    //   SET -> [s] [e] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(215):
    //   TARGET -> [t] [a] [r] [g] [e] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(216):
    //   BREAK -> [b] . [r] [e] [a] [k]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(218):IdentifierName
    //   [r] => State(261):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 261, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(217):
    //   RETURN -> [r] . [e] [t] [u] [r] [n]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(218):IdentifierName
    //   [e] => State(236):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 236, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(218):
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    //   IdentifierName -> IdentifierName IdentifierPart .
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(219):
    //   INSTANCEOF -> [i] [n] [s] . [t] [a] [n] [c] [e] [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(218):IdentifierName
    //   [t] => State(223):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 223, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(220):
    //   FUNCTION -> [f] [u] . [n] [c] [t] [i] [o] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(218):IdentifierName
    //   [n] => State(230):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 230, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(221):
    //   INTERFACE -> [i] [n] [t] . [e] [r] [f] [a] [c] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(218):IdentifierName
    //   [e] => State(231):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 231, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(222):
    //   PROTECTED -> [p] [r] [o] . [t] [e] [c] [t] [e] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(218):IdentifierName
    //   [t] => State(232):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 232, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(223):
    //   INSTANCEOF -> [i] [n] [s] [t] . [a] [n] [c] [e] [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(218):IdentifierName
    //   [a] => State(233):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 233, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(224):
    //   IMPLEMENTS -> [i] [m] [p] [l] . [e] [m] [e] [n] [t] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(218):IdentifierName
    //   [e] => State(234):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 234, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(225):
    //   PACKAGE -> [p] . [a] [c] [k] [a] [g] [e]
    //   PRIVATE -> [p] . [r] [i] [v] [a] [t] [e]
    //   PROTECTED -> [p] . [r] [o] [t] [e] [c] [t] [e] [d]
    //   PUBLIC -> [p] . [u] [b] [l] [i] [c]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, b..q, s..t, v..z, U+200C..U+200D] => State(218):IdentifierName
    //   [r] => State(227):IdentifierName
    //   [a] => State(228):IdentifierName
    //   [u] => State(244):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 227, 244, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 228, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(226):
    //   FINALLY -> [f] [i] . [n] [a] [l] [l] [y]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(218):IdentifierName
    //   [n] => State(247):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 247, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(227):
    //   PRIVATE -> [p] [r] . [i] [v] [a] [t] [e]
    //   PROTECTED -> [p] [r] . [o] [t] [e] [c] [t] [e] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..h, j..n, p..z, U+200C..U+200D] => State(218):IdentifierName
    //   [o] => State(222):IdentifierName
    //   [i] => State(248):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 222, 248, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(228):
    //   PACKAGE -> [p] [a] . [c] [k] [a] [g] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(218):IdentifierName
    //   [c] => State(249):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 249, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(229):
    //   DEBUGGER -> [d] [e] [b] . [u] [g] [g] [e] [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..t, v..z, U+200C..U+200D] => State(218):IdentifierName
    //   [u] => State(251):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 251, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(230):
    //   FUNCTION -> [f] [u] [n] . [c] [t] [i] [o] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(218):IdentifierName
    //   [c] => State(252):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 252, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(231):
    //   INTERFACE -> [i] [n] [t] [e] . [r] [f] [a] [c] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(218):IdentifierName
    //   [r] => State(253):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 253, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(232):
    //   PROTECTED -> [p] [r] [o] [t] . [e] [c] [t] [e] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(218):IdentifierName
    //   [e] => State(254):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 254, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(233):
    //   INSTANCEOF -> [i] [n] [s] [t] [a] . [n] [c] [e] [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(218):IdentifierName
    //   [n] => State(255):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 255, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(234):
    //   IMPLEMENTS -> [i] [m] [p] [l] [e] . [m] [e] [n] [t] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..l, n..z, U+200C..U+200D] => State(218):IdentifierName
    //   [m] => State(256):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 256, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(235):
    //   YIELD -> [y] . [i] [e] [l] [d]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(218):IdentifierName
    //   [i] => State(267):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 267, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(236):
    //   RETURN -> [r] [e] . [t] [u] [r] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(218):IdentifierName
    //   [t] => State(269):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 269, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(237):
    //   EXPORT -> [e] [x] . [p] [o] [r] [t]
    //   EXTENDS -> [e] [x] . [t] [e] [n] [d] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..o, q..s, u..z, U+200C..U+200D] => State(218):IdentifierName
    //   [t] => State(245):IdentifierName
    //   [p] => State(270):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 270, 218, 218, 218, 218, 218, 218, 245, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(238):
    //   STATIC -> [s] [t] . [a] [t] [i] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(218):IdentifierName
    //   [a] => State(271):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 271, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(239):
    //   SWITCH -> [s] [w] . [i] [t] [c] [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(218):IdentifierName
    //   [i] => State(272):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 272, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(240):
    //   TARGET -> [t] [a] . [r] [g] [e] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(218):IdentifierName
    //   [r] => State(273):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 273, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(241):
    //   TYPEOF -> [t] [y] . [p] [e] [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..o, q..z, U+200C..U+200D] => State(218):IdentifierName
    //   [p] => State(274):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 274, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(242):
    //   IMPORT -> [i] [m] . [p] [o] [r] [t]
    //   IMPLEMENTS -> [i] [m] . [p] [l] [e] [m] [e] [n] [t] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..o, q..z, U+200C..U+200D] => State(218):IdentifierName
    //   [p] => State(275):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 275, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(243):
    //   DEBUGGER -> [d] [e] . [b] [u] [g] [g] [e] [r]
    //   DEFAULT -> [d] [e] . [f] [a] [u] [l] [t]
    //   DELETE -> [d] [e] . [l] [e] [t] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a, c..e, g..k, m..z, U+200C..U+200D] => State(218):IdentifierName
    //   [b] => State(229):IdentifierName
    //   [f] => State(246):IdentifierName
    //   [l] => State(276):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 229, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 276, 218, 218, 246,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(244):
    //   PUBLIC -> [p] [u] . [b] [l] [i] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a, c..z, U+200C..U+200D] => State(218):IdentifierName
    //   [b] => State(277):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 277, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(245):
    //   EXTENDS -> [e] [x] [t] . [e] [n] [d] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(218):IdentifierName
    //   [e] => State(278):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 278, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(246):
    //   DEFAULT -> [d] [e] [f] . [a] [u] [l] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(218):IdentifierName
    //   [a] => State(279):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 279, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(247):
    //   FINALLY -> [f] [i] [n] . [a] [l] [l] [y]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(218):IdentifierName
    //   [a] => State(280):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 280, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(248):
    //   PRIVATE -> [p] [r] [i] . [v] [a] [t] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..u, w..z, U+200C..U+200D] => State(218):IdentifierName
    //   [v] => State(281):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        281, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(249):
    //   PACKAGE -> [p] [a] [c] . [k] [a] [g] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..j, l..z, U+200C..U+200D] => State(218):IdentifierName
    //   [k] => State(282):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 282, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(250):
    //   CONTINUE -> [c] [o] [n] [t] . [i] [n] [u] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(218):IdentifierName
    //   [i] => State(283):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 283, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(251):
    //   DEBUGGER -> [d] [e] [b] [u] . [g] [g] [e] [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..f, h..z, U+200C..U+200D] => State(218):IdentifierName
    //   [g] => State(284):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 284, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(252):
    //   FUNCTION -> [f] [u] [n] [c] . [t] [i] [o] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(218):IdentifierName
    //   [t] => State(285):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 285, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(253):
    //   INTERFACE -> [i] [n] [t] [e] [r] . [f] [a] [c] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..e, g..z, U+200C..U+200D] => State(218):IdentifierName
    //   [f] => State(286):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 286,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(254):
    //   PROTECTED -> [p] [r] [o] [t] [e] . [c] [t] [e] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(218):IdentifierName
    //   [c] => State(287):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 287, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(255):
    //   INSTANCEOF -> [i] [n] [s] [t] [a] [n] . [c] [e] [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(218):IdentifierName
    //   [c] => State(288):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 288, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(256):
    //   IMPLEMENTS -> [i] [m] [p] [l] [e] [m] . [e] [n] [t] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(218):IdentifierName
    //   [e] => State(289):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 289, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(257):
    //   ELSE -> [e] . [l] [s] [e]
    //   ENUM -> [e] . [n] [u] [m]
    //   EXPORT -> [e] . [x] [p] [o] [r] [t]
    //   EXTENDS -> [e] . [x] [t] [e] [n] [d] [s]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..k, m, o..w, y..z, U+200C..U+200D] => State(218):IdentifierName
    //   [x] => State(237):IdentifierName
    //   [l] => State(297):IdentifierName
    //   [n] => State(298):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 237, 218, 218, 218, 218, 218, 218, 218, 218, 218, 297, 298, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(258):
    //   CASE -> [c] . [a] [s] [e]
    //   CATCH -> [c] . [a] [t] [c] [h]
    //   CLASS -> [c] . [l] [a] [s] [s]
    //   CONST -> [c] . [o] [n] [s] [t]
    //   CONTINUE -> [c] . [o] [n] [t] [i] [n] [u] [e]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, b..k, m..n, p..z, U+200C..U+200D] => State(218):IdentifierName
    //   [l] => State(263):IdentifierName
    //   [o] => State(264):IdentifierName
    //   [a] => State(299):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 263, 218, 218, 218,
        218, 299, 264, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(259):
    //   META -> [m] . [e] [t] [a]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(218):IdentifierName
    //   [e] => State(303):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 303, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(260):
    //   WHILE -> [w] . [h] [i] [l] [e]
    //   WITH -> [w] . [i] [t] [h]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..g, j..z, U+200C..U+200D] => State(218):IdentifierName
    //   [h] => State(268):IdentifierName
    //   [i] => State(304):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 268, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 304, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(261):
    //   BREAK -> [b] [r] . [e] [a] [k]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(218):IdentifierName
    //   [e] => State(306):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 306, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(262):
    //   AWAIT -> [a] [w] . [a] [i] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(218):IdentifierName
    //   [a] => State(308):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 308, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(263):
    //   CLASS -> [c] [l] . [a] [s] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(218):IdentifierName
    //   [a] => State(310):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 310, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(264):
    //   CONST -> [c] [o] . [n] [s] [t]
    //   CONTINUE -> [c] [o] . [n] [t] [i] [n] [u] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(218):IdentifierName
    //   [n] => State(311):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 311, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(265):
    //   SUPER -> [s] [u] . [p] [e] [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..o, q..z, U+200C..U+200D] => State(218):IdentifierName
    //   [p] => State(312):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 312, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(266):
    //   FALSE -> [f] [a] . [l] [s] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(218):IdentifierName
    //   [l] => State(314):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 314, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(267):
    //   YIELD -> [y] [i] . [e] [l] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(218):IdentifierName
    //   [e] => State(315):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 315, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(268):
    //   WHILE -> [w] [h] . [i] [l] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(218):IdentifierName
    //   [i] => State(316):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 316, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(269):
    //   RETURN -> [r] [e] [t] . [u] [r] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..t, v..z, U+200C..U+200D] => State(218):IdentifierName
    //   [u] => State(317):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 317, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(270):
    //   EXPORT -> [e] [x] [p] . [o] [r] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..n, p..z, U+200C..U+200D] => State(218):IdentifierName
    //   [o] => State(318):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 318, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(271):
    //   STATIC -> [s] [t] [a] . [t] [i] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(218):IdentifierName
    //   [t] => State(319):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 319, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(272):
    //   SWITCH -> [s] [w] [i] . [t] [c] [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(218):IdentifierName
    //   [t] => State(320):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 320, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(273):
    //   TARGET -> [t] [a] [r] . [g] [e] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..f, h..z, U+200C..U+200D] => State(218):IdentifierName
    //   [g] => State(321):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 321, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(274):
    //   TYPEOF -> [t] [y] [p] . [e] [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(218):IdentifierName
    //   [e] => State(322):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 322, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(275):
    //   IMPORT -> [i] [m] [p] . [o] [r] [t]
    //   IMPLEMENTS -> [i] [m] [p] . [l] [e] [m] [e] [n] [t] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..k, m..n, p..z, U+200C..U+200D] => State(218):IdentifierName
    //   [l] => State(224):IdentifierName
    //   [o] => State(323):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 224, 218, 218, 218,
        218, 218, 323, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(276):
    //   DELETE -> [d] [e] [l] . [e] [t] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(218):IdentifierName
    //   [e] => State(324):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 324, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(277):
    //   PUBLIC -> [p] [u] [b] . [l] [i] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(218):IdentifierName
    //   [l] => State(325):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 325, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(278):
    //   EXTENDS -> [e] [x] [t] [e] . [n] [d] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(218):IdentifierName
    //   [n] => State(326):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 326, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(279):
    //   DEFAULT -> [d] [e] [f] [a] . [u] [l] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..t, v..z, U+200C..U+200D] => State(218):IdentifierName
    //   [u] => State(327):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 327, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(280):
    //   FINALLY -> [f] [i] [n] [a] . [l] [l] [y]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(218):IdentifierName
    //   [l] => State(328):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 328, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(281):
    //   PRIVATE -> [p] [r] [i] [v] . [a] [t] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(218):IdentifierName
    //   [a] => State(329):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 329, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(282):
    //   PACKAGE -> [p] [a] [c] [k] . [a] [g] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(218):IdentifierName
    //   [a] => State(330):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 330, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(283):
    //   CONTINUE -> [c] [o] [n] [t] [i] . [n] [u] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(218):IdentifierName
    //   [n] => State(331):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 331, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(284):
    //   DEBUGGER -> [d] [e] [b] [u] [g] . [g] [e] [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..f, h..z, U+200C..U+200D] => State(218):IdentifierName
    //   [g] => State(332):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 332, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(285):
    //   FUNCTION -> [f] [u] [n] [c] [t] . [i] [o] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(218):IdentifierName
    //   [i] => State(333):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 333, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(286):
    //   INTERFACE -> [i] [n] [t] [e] [r] [f] . [a] [c] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(218):IdentifierName
    //   [a] => State(334):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 334, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(287):
    //   PROTECTED -> [p] [r] [o] [t] [e] [c] . [t] [e] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(218):IdentifierName
    //   [t] => State(335):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 335, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(288):
    //   INSTANCEOF -> [i] [n] [s] [t] [a] [n] [c] . [e] [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(218):IdentifierName
    //   [e] => State(336):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 336, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(289):
    //   IMPLEMENTS -> [i] [m] [p] [l] [e] [m] [e] . [n] [t] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(218):IdentifierName
    //   [n] => State(337):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 337, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(290):
    //   SUPER -> [s] . [u] [p] [e] [r]
    //   SWITCH -> [s] . [w] [i] [t] [c] [h]
    //   STATIC -> [s] . [t] [a] [t] [i] [c]
    //   SET -> [s] . [e] [t]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..s, v, x..z, U+200C..U+200D] => State(218):IdentifierName
    //   [t] => State(238):IdentifierName
    //   [w] => State(239):IdentifierName
    //   [u] => State(265):IdentifierName
    //   [e] => State(342):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 265, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 342, 218, 218, 239, 218, 238, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(291):
    //   THIS -> [t] . [h] [i] [s]
    //   THROW -> [t] . [h] [r] [o] [w]
    //   TRUE -> [t] . [r] [u] [e]
    //   TRY -> [t] . [r] [y]
    //   TYPEOF -> [t] . [y] [p] [e] [o] [f]
    //   TARGET -> [t] . [a] [r] [g] [e] [t]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, b..g, i..q, s..x, z, U+200C..U+200D] => State(218):IdentifierName
    //   [a] => State(240):IdentifierName
    //   [y] => State(241):IdentifierName
    //   [h] => State(300):IdentifierName
    //   [r] => State(343):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 343, 218, 218, 218, 218, 218, 218,
        218, 218, 300, 218, 218, 218, 218, 241, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 240, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(292):
    //   LET -> [l] . [e] [t]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(218):IdentifierName
    //   [e] => State(344):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 344, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(293):
    //   NEW -> [n] . [e] [w]
    //   NULL -> [n] . [u] [l] [l]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..t, v..z, U+200C..U+200D] => State(218):IdentifierName
    //   [u] => State(301):IdentifierName
    //   [e] => State(345):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 301, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 345, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(294):
    //   GET -> [g] . [e] [t]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(218):IdentifierName
    //   [e] => State(346):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 346, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(295):
    //   FALSE -> [f] . [a] [l] [s] [e]
    //   FINALLY -> [f] . [i] [n] [a] [l] [l] [y]
    //   FOR -> [f] . [o] [r]
    //   FUNCTION -> [f] . [u] [n] [c] [t] [i] [o] [n]
    //   FROM -> [f] . [r] [o] [m]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, b..h, j..n, p..q, s..t, v..z, U+200C..U+200D] => State(218):IdentifierName
    //   [u] => State(220):IdentifierName
    //   [i] => State(226):IdentifierName
    //   [a] => State(266):IdentifierName
    //   [r] => State(302):IdentifierName
    //   [o] => State(347):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 302, 220, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 266, 347, 226, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(296):
    //   VAR -> [v] . [a] [r]
    //   VOID -> [v] . [o] [i] [d]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, b..n, p..z, U+200C..U+200D] => State(218):IdentifierName
    //   [o] => State(305):IdentifierName
    //   [a] => State(348):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 348, 305, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(297):
    //   ELSE -> [e] [l] . [s] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..r, t..z, U+200C..U+200D] => State(218):IdentifierName
    //   [s] => State(349):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 349, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(298):
    //   ENUM -> [e] [n] . [u] [m]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..t, v..z, U+200C..U+200D] => State(218):IdentifierName
    //   [u] => State(350):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 350, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(299):
    //   CASE -> [c] [a] . [s] [e]
    //   CATCH -> [c] [a] . [t] [c] [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..r, u..z, U+200C..U+200D] => State(218):IdentifierName
    //   [t] => State(309):IdentifierName
    //   [s] => State(351):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 351, 309, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(300):
    //   THIS -> [t] [h] . [i] [s]
    //   THROW -> [t] [h] . [r] [o] [w]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..h, j..q, s..z, U+200C..U+200D] => State(218):IdentifierName
    //   [r] => State(313):IdentifierName
    //   [i] => State(353):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 313, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 353, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(301):
    //   NULL -> [n] [u] . [l] [l]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(218):IdentifierName
    //   [l] => State(354):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 354, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(302):
    //   FROM -> [f] [r] . [o] [m]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..n, p..z, U+200C..U+200D] => State(218):IdentifierName
    //   [o] => State(355):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 355, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(303):
    //   META -> [m] [e] . [t] [a]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(218):IdentifierName
    //   [t] => State(356):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 356, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(304):
    //   WITH -> [w] [i] . [t] [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(218):IdentifierName
    //   [t] => State(357):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 357, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(305):
    //   VOID -> [v] [o] . [i] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(218):IdentifierName
    //   [i] => State(358):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 358, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(306):
    //   BREAK -> [b] [r] [e] . [a] [k]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(218):IdentifierName
    //   [a] => State(359):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 359, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(307):
    //   ASYNC -> [a] [s] [y] . [n] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(218):IdentifierName
    //   [n] => State(360):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 360, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(308):
    //   AWAIT -> [a] [w] [a] . [i] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(218):IdentifierName
    //   [i] => State(361):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 361, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(309):
    //   CATCH -> [c] [a] [t] . [c] [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(218):IdentifierName
    //   [c] => State(362):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 362, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(310):
    //   CLASS -> [c] [l] [a] . [s] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..r, t..z, U+200C..U+200D] => State(218):IdentifierName
    //   [s] => State(363):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 363, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(311):
    //   CONST -> [c] [o] [n] . [s] [t]
    //   CONTINUE -> [c] [o] [n] . [t] [i] [n] [u] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..r, u..z, U+200C..U+200D] => State(218):IdentifierName
    //   [t] => State(250):IdentifierName
    //   [s] => State(364):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 364, 250, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(312):
    //   SUPER -> [s] [u] [p] . [e] [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(218):IdentifierName
    //   [e] => State(365):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 365, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(313):
    //   THROW -> [t] [h] [r] . [o] [w]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..n, p..z, U+200C..U+200D] => State(218):IdentifierName
    //   [o] => State(366):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 366, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(314):
    //   FALSE -> [f] [a] [l] . [s] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..r, t..z, U+200C..U+200D] => State(218):IdentifierName
    //   [s] => State(367):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 367, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(315):
    //   YIELD -> [y] [i] [e] . [l] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(218):IdentifierName
    //   [l] => State(368):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 368, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(316):
    //   WHILE -> [w] [h] [i] . [l] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(218):IdentifierName
    //   [l] => State(369):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 369, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(317):
    //   RETURN -> [r] [e] [t] [u] . [r] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(218):IdentifierName
    //   [r] => State(370):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 370, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(318):
    //   EXPORT -> [e] [x] [p] [o] . [r] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(218):IdentifierName
    //   [r] => State(371):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 371, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(319):
    //   STATIC -> [s] [t] [a] [t] . [i] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(218):IdentifierName
    //   [i] => State(372):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 372, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(320):
    //   SWITCH -> [s] [w] [i] [t] . [c] [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(218):IdentifierName
    //   [c] => State(373):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 373, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(321):
    //   TARGET -> [t] [a] [r] [g] . [e] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(218):IdentifierName
    //   [e] => State(374):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 374, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(322):
    //   TYPEOF -> [t] [y] [p] [e] . [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..n, p..z, U+200C..U+200D] => State(218):IdentifierName
    //   [o] => State(375):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 375, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(323):
    //   IMPORT -> [i] [m] [p] [o] . [r] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(218):IdentifierName
    //   [r] => State(376):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 376, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(324):
    //   DELETE -> [d] [e] [l] [e] . [t] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(218):IdentifierName
    //   [t] => State(377):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 377, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(325):
    //   PUBLIC -> [p] [u] [b] [l] . [i] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(218):IdentifierName
    //   [i] => State(378):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 378, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(326):
    //   EXTENDS -> [e] [x] [t] [e] [n] . [d] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..c, e..z, U+200C..U+200D] => State(218):IdentifierName
    //   [d] => State(379):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 379, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(327):
    //   DEFAULT -> [d] [e] [f] [a] [u] . [l] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(218):IdentifierName
    //   [l] => State(380):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 380, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(328):
    //   FINALLY -> [f] [i] [n] [a] [l] . [l] [y]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(218):IdentifierName
    //   [l] => State(381):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 381, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(329):
    //   PRIVATE -> [p] [r] [i] [v] [a] . [t] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(218):IdentifierName
    //   [t] => State(382):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 382, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(330):
    //   PACKAGE -> [p] [a] [c] [k] [a] . [g] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..f, h..z, U+200C..U+200D] => State(218):IdentifierName
    //   [g] => State(383):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 383, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(331):
    //   CONTINUE -> [c] [o] [n] [t] [i] [n] . [u] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..t, v..z, U+200C..U+200D] => State(218):IdentifierName
    //   [u] => State(384):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 384, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(332):
    //   DEBUGGER -> [d] [e] [b] [u] [g] [g] . [e] [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(218):IdentifierName
    //   [e] => State(385):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 385, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(333):
    //   FUNCTION -> [f] [u] [n] [c] [t] [i] . [o] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..n, p..z, U+200C..U+200D] => State(218):IdentifierName
    //   [o] => State(386):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 386, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(334):
    //   INTERFACE -> [i] [n] [t] [e] [r] [f] [a] . [c] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(218):IdentifierName
    //   [c] => State(387):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 387, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(335):
    //   PROTECTED -> [p] [r] [o] [t] [e] [c] [t] . [e] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(218):IdentifierName
    //   [e] => State(388):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 388, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(336):
    //   INSTANCEOF -> [i] [n] [s] [t] [a] [n] [c] [e] . [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..n, p..z, U+200C..U+200D] => State(218):IdentifierName
    //   [o] => State(389):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 389, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(337):
    //   IMPLEMENTS -> [i] [m] [p] [l] [e] [m] [e] [n] . [t] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(218):IdentifierName
    //   [t] => State(390):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 390, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(338):
    //   AWAIT -> [a] . [w] [a] [i] [t]
    //   AS -> [a] . [s]
    //   ASYNC -> [a] . [s] [y] [n] [c]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [s] => State(208):AS
    //   [$, 0..9, A..Z, _, a..r, t..v, x..z, U+200C..U+200D] => State(218):IdentifierName
    //   [w] => State(262):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 262, 208, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(339):
    //   OF -> [o] . [f]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [f] => State(213):OF
    //   [$, 0..9, A..Z, _, a..e, g..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 213,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(340):
    //   IF -> [i] . [f]
    //   IMPORT -> [i] . [m] [p] [o] [r] [t]
    //   IN -> [i] . [n]
    //   INSTANCEOF -> [i] . [n] [s] [t] [a] [n] [c] [e] [o] [f]
    //   IMPLEMENTS -> [i] . [m] [p] [l] [e] [m] [e] [n] [t] [s]
    //   INTERFACE -> [i] . [n] [t] [e] [r] [f] [a] [c] [e]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [f] => State(180):IF
    //   [n] => State(182):IN
    //   [$, 0..9, A..Z, _, a..e, g..l, o..z, U+200C..U+200D] => State(218):IdentifierName
    //   [m] => State(242):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 242, 218, 218, 218, 218, 182, 218, 180,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(341):
    //   DEBUGGER -> [d] . [e] [b] [u] [g] [g] [e] [r]
    //   DEFAULT -> [d] . [e] [f] [a] [u] [l] [t]
    //   DELETE -> [d] . [e] [l] [e] [t] [e]
    //   DO -> [d] . [o]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [o] => State(171):DO
    //   [$, 0..9, A..Z, _, a..d, f..n, p..z, U+200C..U+200D] => State(218):IdentifierName
    //   [e] => State(243):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 243, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 171, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(342):
    //   SET -> [s] [e] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [t] => State(214):SET
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 214, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(343):
    //   TRUE -> [t] [r] . [u] [e]
    //   TRY -> [t] [r] . [y]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [y] => State(192):TRY
    //   [$, 0..9, A..Z, _, a..t, v..x, z, U+200C..U+200D] => State(218):IdentifierName
    //   [u] => State(352):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 352, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 192, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(344):
    //   LET -> [l] [e] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [t] => State(200):LET
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 200, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(345):
    //   NEW -> [n] [e] . [w]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [w] => State(184):NEW
    //   [$, 0..9, A..Z, _, a..v, x..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 184, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(346):
    //   GET -> [g] [e] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [t] => State(211):GET
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 211, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(347):
    //   FOR -> [f] [o] . [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [r] => State(178):FOR
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 178, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(348):
    //   VAR -> [v] [a] . [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [r] => State(194):VAR
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 194, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(349):
    //   ELSE -> [e] [l] [s] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [e] => State(172):ELSE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 172, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(350):
    //   ENUM -> [e] [n] [u] . [m]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [m] => State(173):ENUM
    //   [$, 0..9, A..Z, _, a..l, n..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 173, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(351):
    //   CASE -> [c] [a] [s] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [e] => State(163):CASE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 163, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(352):
    //   TRUE -> [t] [r] [u] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [e] => State(191):TRUE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 191, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(353):
    //   THIS -> [t] [h] [i] . [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [s] => State(189):THIS
    //   [$, 0..9, A..Z, _, a..r, t..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 189, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(354):
    //   NULL -> [n] [u] [l] . [l]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [l] => State(185):NULL
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 185, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(355):
    //   FROM -> [f] [r] [o] . [m]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [m] => State(210):FROM
    //   [$, 0..9, A..Z, _, a..l, n..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 210, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(356):
    //   META -> [m] [e] [t] . [a]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [a] => State(212):META
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 212, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(357):
    //   WITH -> [w] [i] [t] . [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [h] => State(197):WITH
    //   [$, 0..9, A..Z, _, a..g, i..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 197, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(358):
    //   VOID -> [v] [o] [i] . [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [d] => State(195):VOID
    //   [$, 0..9, A..Z, _, a..c, e..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 195, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(359):
    //   BREAK -> [b] [r] [e] [a] . [k]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [k] => State(162):BREAK
    //   [$, 0..9, A..Z, _, a..j, l..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 162, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(360):
    //   ASYNC -> [a] [s] [y] [n] . [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [c] => State(209):ASYNC
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 209, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(361):
    //   AWAIT -> [a] [w] [a] [i] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [t] => State(198):AWAIT
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 198, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(362):
    //   CATCH -> [c] [a] [t] [c] . [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [h] => State(164):CATCH
    //   [$, 0..9, A..Z, _, a..g, i..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 164, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(363):
    //   CLASS -> [c] [l] [a] [s] . [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [s] => State(165):CLASS
    //   [$, 0..9, A..Z, _, a..r, t..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 165, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(364):
    //   CONST -> [c] [o] [n] [s] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [t] => State(166):CONST
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 166, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(365):
    //   SUPER -> [s] [u] [p] [e] . [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [r] => State(187):SUPER
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 187, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(366):
    //   THROW -> [t] [h] [r] [o] . [w]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [w] => State(190):THROW
    //   [$, 0..9, A..Z, _, a..v, x..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 190, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(367):
    //   FALSE -> [f] [a] [l] [s] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [e] => State(176):FALSE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 176, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(368):
    //   YIELD -> [y] [i] [e] [l] . [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [d] => State(199):YIELD
    //   [$, 0..9, A..Z, _, a..c, e..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 199, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(369):
    //   WHILE -> [w] [h] [i] [l] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [e] => State(196):WHILE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 196, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(370):
    //   RETURN -> [r] [e] [t] [u] [r] . [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [n] => State(186):RETURN
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 186, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(371):
    //   EXPORT -> [e] [x] [p] [o] [r] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [t] => State(174):EXPORT
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 174, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(372):
    //   STATIC -> [s] [t] [a] [t] [i] . [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [c] => State(201):STATIC
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 201, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(373):
    //   SWITCH -> [s] [w] [i] [t] [c] . [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [h] => State(188):SWITCH
    //   [$, 0..9, A..Z, _, a..g, i..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 188, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(374):
    //   TARGET -> [t] [a] [r] [g] [e] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [t] => State(215):TARGET
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 215, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(375):
    //   TYPEOF -> [t] [y] [p] [e] [o] . [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [f] => State(193):TYPEOF
    //   [$, 0..9, A..Z, _, a..e, g..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 193,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(376):
    //   IMPORT -> [i] [m] [p] [o] [r] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [t] => State(181):IMPORT
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 181, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(377):
    //   DELETE -> [d] [e] [l] [e] [t] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [e] => State(170):DELETE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 170, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(378):
    //   PUBLIC -> [p] [u] [b] [l] [i] . [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [c] => State(207):PUBLIC
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 207, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(379):
    //   EXTENDS -> [e] [x] [t] [e] [n] [d] . [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [s] => State(175):EXTENDS
    //   [$, 0..9, A..Z, _, a..r, t..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 175, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(380):
    //   DEFAULT -> [d] [e] [f] [a] [u] [l] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [t] => State(169):DEFAULT
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 169, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(381):
    //   FINALLY -> [f] [i] [n] [a] [l] [l] . [y]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [y] => State(177):FINALLY
    //   [$, 0..9, A..Z, _, a..x, z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 177, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(382):
    //   PRIVATE -> [p] [r] [i] [v] [a] [t] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [e] => State(205):PRIVATE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 205, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(383):
    //   PACKAGE -> [p] [a] [c] [k] [a] [g] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [e] => State(204):PACKAGE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 204, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(384):
    //   CONTINUE -> [c] [o] [n] [t] [i] [n] [u] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [e] => State(167):CONTINUE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 167, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(385):
    //   DEBUGGER -> [d] [e] [b] [u] [g] [g] [e] . [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [r] => State(168):DEBUGGER
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 168, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(386):
    //   FUNCTION -> [f] [u] [n] [c] [t] [i] [o] . [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [n] => State(179):FUNCTION
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 179, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(387):
    //   INTERFACE -> [i] [n] [t] [e] [r] [f] [a] [c] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [e] => State(203):INTERFACE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 203, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(388):
    //   PROTECTED -> [p] [r] [o] [t] [e] [c] [t] [e] . [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [d] => State(206):PROTECTED
    //   [$, 0..9, A..Z, _, a..c, e..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 206, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(389):
    //   INSTANCEOF -> [i] [n] [s] [t] [a] [n] [c] [e] [o] . [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [f] => State(183):INSTANCEOF
    //   [$, 0..9, A..Z, _, a..e, g..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 183,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(390):
    //   IMPLEMENTS -> [i] [m] [p] [l] [e] [m] [e] [n] [t] . [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [s] => State(202):IMPLEMENTS
    //   [$, 0..9, A..Z, _, a..r, t..z, U+200C..U+200D] => State(218):IdentifierName
    [
        462, 462, 3, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 202, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 218, 218, 218, 218, 218, 462, 218, 462,
    ],
    // State(391):
    //   PrivateIdentifier -> [#] IdentifierName .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(4)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(391):PrivateIdentifier
    [
        462, 462, 4, 462, 462, 462, 462, 462, 462, 462, 391, 391, 391, 391, 391, 391, 391, 391,
        391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
        391, 391, 391, 391, 391, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 391, 391, 391, 391, 391, 462, 391, 462,
    ],
    // State(392):
    //   OPTIONAL_CHAINING -> [?] [.] !?[DecimalDigit] .
    //   OPTIONAL_CHAINING -> [?] [.] . !?[DecimalDigit]
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(393):
    //   LBRACE -> [{] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(394):
    //   LPAREN -> [(] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(395):
    //   RPAREN -> [)] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(396):
    //   LBRACK -> [[] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(397):
    //   RBRACK -> []] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(398):
    //   DOT -> [.] .
    //   ELLIPSIS -> [.] . [.] [.]
    //   DecimalDigits_Sep -> . DecimalDigits_Sep DecimalDigit
    //   DecimalDigits_Sep -> . DecimalDigits_Sep NumericLiteralSeparator DecimalDigit
    //   DecimalLiteral -> [.] . DecimalDigits_Sep
    //   DecimalDigits_Sep -> . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   DecimalLiteral -> [.] . DecimalDigits_Sep ExponentPart_Sep
    // Transitions:
    //   [.] => State(29)
    //   [0..9] => State(452):NumericLiteral
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 29, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 452, 452, 452, 452, 452, 462, 462, 462,
    ],
    // State(399):
    //   ELLIPSIS -> [.] [.] [.] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(400):
    //   SEMI_COLON -> [;] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(401):
    //   COMMA -> [,] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(402):
    //   LT -> [<] .
    //   LTE -> [<] . [=]
    //   SHL -> [<] . [<]
    //   SHL_ASSIGN -> [<] . [<] [=]
    // Transitions:
    //   [=] => State(404):LTE
    //   [<] => State(417):SHL
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 417, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 404, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(403):
    //   GT -> [>] .
    //   GTE -> [>] . [=]
    //   SAR -> [>] . [>]
    //   SHR -> [>] . [>] [>]
    //   SAR_ASSIGN -> [>] . [>] [=]
    //   SHR_ASSIGN -> [>] . [>] [>] [=]
    // Transitions:
    //   [=] => State(405):GTE
    //   [>] => State(418):SAR
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 418, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 405, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(404):
    //   LTE -> [<] [=] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(405):
    //   GTE -> [>] [=] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(406):
    //   EQ -> [=] [=] .
    //   EQ_STRICT -> [=] [=] . [=]
    // Transitions:
    //   [=] => State(408):EQ_STRICT
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 408, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(407):
    //   NE -> [!] [=] .
    //   NE_STRICT -> [!] [=] . [=]
    // Transitions:
    //   [=] => State(409):NE_STRICT
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 409, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(408):
    //   EQ_STRICT -> [=] [=] [=] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(409):
    //   NE_STRICT -> [!] [=] [=] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(410):
    //   ADD -> [+] .
    //   INC -> [+] . [+]
    //   ADD_ASSIGN -> [+] . [=]
    // Transitions:
    //   [+] => State(415):INC
    //   [=] => State(431):ADD_ASSIGN
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 415, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 431, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(411):
    //   SUB -> [-] .
    //   DEC -> [-] . [-]
    //   SUB_ASSIGN -> [-] . [=]
    // Transitions:
    //   [-] => State(416):DEC
    //   [=] => State(432):SUB_ASSIGN
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 416, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 432, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(412):
    //   MUL -> [*] .
    //   EXP -> [*] . [*]
    //   MUL_ASSIGN -> [*] . [=]
    //   EXP_ASSIGN -> [*] . [*] [=]
    // Transitions:
    //   [*] => State(414):EXP
    //   [=] => State(433):MUL_ASSIGN
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 414,
        462, 462, 462, 462, 462, 462, 462, 462, 433, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(413):
    //   MOD -> [%] .
    //   MOD_ASSIGN -> [%] . [=]
    // Transitions:
    //   [=] => State(434):MOD_ASSIGN
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 434, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(414):
    //   EXP -> [*] [*] .
    //   EXP_ASSIGN -> [*] [*] . [=]
    // Transitions:
    //   [=] => State(435):EXP_ASSIGN
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 435, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(415):
    //   INC -> [+] [+] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(416):
    //   DEC -> [-] [-] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(417):
    //   SHL -> [<] [<] .
    //   SHL_ASSIGN -> [<] [<] . [=]
    // Transitions:
    //   [=] => State(436):SHL_ASSIGN
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 436, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(418):
    //   SAR -> [>] [>] .
    //   SHR -> [>] [>] . [>]
    //   SAR_ASSIGN -> [>] [>] . [=]
    //   SHR_ASSIGN -> [>] [>] . [>] [=]
    // Transitions:
    //   [>] => State(419):SHR
    //   [=] => State(437):SAR_ASSIGN
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 419, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 437, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(419):
    //   SHR -> [>] [>] [>] .
    //   SHR_ASSIGN -> [>] [>] [>] . [=]
    // Transitions:
    //   [=] => State(438):SHR_ASSIGN
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 438, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(420):
    //   BIT_AND -> [&] .
    //   AND -> [&] . [&]
    //   BIT_AND_ASSIGN -> [&] . [=]
    //   AND_ASSIGN -> [&] . [&] [=]
    // Transitions:
    //   [&] => State(425):AND
    //   [=] => State(439):BIT_AND_ASSIGN
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 425, 462, 462, 462, 462, 462, 462, 439, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(421):
    //   BIT_OR -> [|] .
    //   OR -> [|] . [|]
    //   BIT_OR_ASSIGN -> [|] . [=]
    //   OR_ASSIGN -> [|] . [|] [=]
    // Transitions:
    //   [|] => State(426):OR
    //   [=] => State(440):BIT_OR_ASSIGN
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 426, 462, 462, 462, 462, 462, 440, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(422):
    //   BIT_XOR -> [^] .
    //   BIT_XOR_ASSIGN -> [^] . [=]
    // Transitions:
    //   [=] => State(441):BIT_XOR_ASSIGN
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 441, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(423):
    //   NE -> [!] . [=]
    //   NE_STRICT -> [!] . [=] [=]
    //   NOT -> [!] .
    // Transitions:
    //   [=] => State(407):NE
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 407, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(424):
    //   BIT_NOT -> [~] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(425):
    //   AND -> [&] [&] .
    //   AND_ASSIGN -> [&] [&] . [=]
    // Transitions:
    //   [=] => State(442):AND_ASSIGN
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 442, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(426):
    //   OR -> [|] [|] .
    //   OR_ASSIGN -> [|] [|] . [=]
    // Transitions:
    //   [=] => State(443):OR_ASSIGN
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 443, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(427):
    //   NULLISH -> [?] [?] .
    //   NULLISH_ASSIGN -> [?] [?] . [=]
    // Transitions:
    //   [=] => State(444):NULLISH_ASSIGN
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 444, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(428):
    //   OPTIONAL_CHAINING -> [?] . [.] !?[DecimalDigit]
    //   NULLISH -> [?] . [?]
    //   CONDITIONAL -> [?] .
    //   NULLISH_ASSIGN -> [?] . [?] [=]
    // Transitions:
    //   [.] => State(28)
    //   [?] => State(427):NULLISH
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 28, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 427, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(429):
    //   COLON -> [:] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(430):
    //   EQ -> [=] . [=]
    //   EQ_STRICT -> [=] . [=] [=]
    //   ASSIGN -> [=] .
    //   ARROW -> [=] . [>]
    // Transitions:
    //   [=] => State(406):EQ
    //   [>] => State(445):ARROW
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 445, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 406, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(431):
    //   ADD_ASSIGN -> [+] [=] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(432):
    //   SUB_ASSIGN -> [-] [=] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(433):
    //   MUL_ASSIGN -> [*] [=] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(434):
    //   MOD_ASSIGN -> [%] [=] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(435):
    //   EXP_ASSIGN -> [*] [*] [=] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(436):
    //   SHL_ASSIGN -> [<] [<] [=] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(437):
    //   SAR_ASSIGN -> [>] [>] [=] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(438):
    //   SHR_ASSIGN -> [>] [>] [>] [=] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(439):
    //   BIT_AND_ASSIGN -> [&] [=] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(440):
    //   BIT_OR_ASSIGN -> [|] [=] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(441):
    //   BIT_XOR_ASSIGN -> [^] [=] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(442):
    //   AND_ASSIGN -> [&] [&] [=] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(443):
    //   OR_ASSIGN -> [|] [|] [=] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(444):
    //   NULLISH_ASSIGN -> [?] [?] [=] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(445):
    //   ARROW -> [=] [>] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(446):
    //   NumericLiteral -> DecimalLiteral .
    //   DecimalDigits_Sep -> . DecimalDigits_Sep DecimalDigit
    //   DecimalDigits_Sep -> . DecimalDigits_Sep NumericLiteralSeparator DecimalDigit
    //   DecimalIntegerLiteral -> NonZeroDigit . DecimalDigits_Sep
    //   DecimalDigits_Sep -> . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   DecimalIntegerLiteral -> NonZeroDigit . NumericLiteralSeparator DecimalDigits_Sep
    //   NumericLiteralSeparator -> . [_]
    //   DecimalLiteral -> DecimalIntegerLiteral . [.]
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] DecimalDigits_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] ExponentPart_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] DecimalDigits_Sep ExponentPart_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral . ExponentPart_Sep
    //   ExponentPart_Sep -> . ExponentIndicator SignedInteger_Sep
    //   ExponentIndicator -> . [e E]
    //   DecimalBigIntegerLiteral -> NonZeroDigit . BigIntLiteralSuffix
    //   BigIntLiteralSuffix -> . [n]
    //   DecimalBigIntegerLiteral -> NonZeroDigit . DecimalDigits_Sep BigIntLiteralSuffix
    //   DecimalBigIntegerLiteral -> NonZeroDigit . NumericLiteralSeparator DecimalDigits_Sep BigIntLiteralSuffix
    //   DecimalDigits_Sep -> DecimalDigits_Sep . DecimalDigit
    //   DecimalDigits_Sep -> DecimalDigits_Sep . NumericLiteralSeparator DecimalDigit
    //   DecimalBigIntegerLiteral -> NonZeroDigit DecimalDigits_Sep . BigIntLiteralSuffix
    //   DecimalBigIntegerLiteral -> NonZeroDigit NumericLiteralSeparator DecimalDigits_Sep . BigIntLiteralSuffix
    // Transitions:
    //   [E, e] => State(21)
    //   [_] => State(22)
    //   [0..9] => State(446):NumericLiteral
    //   [n] => State(448):NumericLiteral
    //   [.] => State(449):NumericLiteral
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 21, 462, 462, 22, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 21, 462, 462, 462, 462, 462, 462, 448, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 449, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 446, 446, 446, 446, 446, 462, 462, 462,
    ],
    // State(447):
    //   NumericLiteral -> DecimalLiteral .
    //   NonOctalDecimalIntegerLiteral -> [0] . NonOctalDigit
    //   NonOctalDigit -> . [8 9]
    //   LegacyOctalLikeDecimalIntegerLiteral -> [0] . OctalDigit
    //   OctalDigit -> . [0 1 2 3 4 5 6 7]
    //   DecimalLiteral -> DecimalIntegerLiteral . [.]
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] DecimalDigits_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] ExponentPart_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] DecimalDigits_Sep ExponentPart_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral . ExponentPart_Sep
    //   ExponentPart_Sep -> . ExponentIndicator SignedInteger_Sep
    //   ExponentIndicator -> . [e E]
    //   DecimalBigIntegerLiteral -> [0] . BigIntLiteralSuffix
    //   BigIntLiteralSuffix -> . [n]
    //   BinaryIntegerLiteral_Sep -> [0] . [b] BinaryDigits_Sep
    //   BinaryIntegerLiteral_Sep -> [0] . [B] BinaryDigits_Sep
    //   OctalIntegerLiteral_Sep -> [0] . [o] OctalDigits_Sep
    //   OctalIntegerLiteral_Sep -> [0] . [O] OctalDigits_Sep
    //   HexIntegerLiteral_Sep -> [0] . [x] HexDigits_Sep
    //   HexIntegerLiteral_Sep -> [0] . [X] HexDigits_Sep
    //   LegacyOctalIntegerLiteral -> [0] . OctalDigit
    // Transitions:
    //   [E, e] => State(21)
    //   [B, b] => State(25)
    //   [O, o] => State(26)
    //   [X, x] => State(27)
    //   [n] => State(448):NumericLiteral
    //   [.] => State(449):NumericLiteral
    //   [0..7] => State(450):NumericLiteral
    //   [8..9] => State(451):NumericLiteral
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 25, 462, 462, 21, 25, 462, 462, 26, 27,
        462, 462, 462, 27, 462, 462, 462, 21, 462, 462, 462, 462, 462, 462, 448, 462, 462, 462,
        462, 26, 462, 462, 462, 462, 462, 462, 462, 449, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 451, 450, 450, 450, 450, 462, 462, 462,
    ],
    // State(448):
    //   NumericLiteral -> DecimalBigIntegerLiteral .
    //   NumericLiteral -> NonDecimalIntegerLiteral_Sep BigIntLiteralSuffix .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(449):
    //   NumericLiteral -> DecimalLiteral .
    //   DecimalDigits_Sep -> . DecimalDigits_Sep DecimalDigit
    //   DecimalDigits_Sep -> . DecimalDigits_Sep NumericLiteralSeparator DecimalDigit
    //   DecimalLiteral -> DecimalIntegerLiteral [.] . DecimalDigits_Sep
    //   DecimalDigits_Sep -> . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   DecimalLiteral -> DecimalIntegerLiteral [.] . ExponentPart_Sep
    //   ExponentPart_Sep -> . ExponentIndicator SignedInteger_Sep
    //   ExponentIndicator -> . [e E]
    //   DecimalLiteral -> DecimalIntegerLiteral [.] . DecimalDigits_Sep ExponentPart_Sep
    // Transitions:
    //   [E, e] => State(21)
    //   [0..9] => State(452):NumericLiteral
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 21, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 21, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 452, 452, 452, 452, 452, 462, 462, 462,
    ],
    // State(450):
    //   LegacyOctalLikeDecimalIntegerLiteral -> LegacyOctalLikeDecimalIntegerLiteral . OctalDigit
    //   OctalDigit -> . [0 1 2 3 4 5 6 7]
    //   NonOctalDecimalIntegerLiteral -> LegacyOctalLikeDecimalIntegerLiteral . NonOctalDigit
    //   NonOctalDigit -> . [8 9]
    //   NumericLiteral -> LegacyOctalIntegerLiteral .
    //   LegacyOctalIntegerLiteral -> LegacyOctalIntegerLiteral . OctalDigit
    // Transitions:
    //   [0..7] => State(450):NumericLiteral
    //   [8..9] => State(451):NumericLiteral
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 451, 450, 450, 450, 450, 462, 462, 462,
    ],
    // State(451):
    //   NumericLiteral -> DecimalLiteral .
    //   NonOctalDecimalIntegerLiteral -> NonOctalDecimalIntegerLiteral . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   DecimalLiteral -> DecimalIntegerLiteral . [.]
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] DecimalDigits_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] ExponentPart_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] DecimalDigits_Sep ExponentPart_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral . ExponentPart_Sep
    //   ExponentPart_Sep -> . ExponentIndicator SignedInteger_Sep
    //   ExponentIndicator -> . [e E]
    // Transitions:
    //   [E, e] => State(21)
    //   [.] => State(449):NumericLiteral
    //   [0..9] => State(451):NumericLiteral
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 21, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 21, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 449, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 451, 451, 451, 451, 451, 462, 462, 462,
    ],
    // State(452):
    //   NumericLiteral -> DecimalLiteral .
    //   DecimalDigits_Sep -> DecimalDigits_Sep . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   DecimalDigits_Sep -> DecimalDigits_Sep . NumericLiteralSeparator DecimalDigit
    //   NumericLiteralSeparator -> . [_]
    //   DecimalLiteral -> [.] DecimalDigits_Sep . ExponentPart_Sep
    //   ExponentPart_Sep -> . ExponentIndicator SignedInteger_Sep
    //   ExponentIndicator -> . [e E]
    //   DecimalLiteral -> DecimalIntegerLiteral [.] DecimalDigits_Sep . ExponentPart_Sep
    // Transitions:
    //   [E, e] => State(21)
    //   [_] => State(24)
    //   [0..9] => State(452):NumericLiteral
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 21, 462, 462, 24, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 21, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 452, 452, 452, 452, 452, 462, 462, 462,
    ],
    // State(453):
    //   NumericLiteral -> DecimalLiteral .
    //   DecimalDigits_Sep -> DecimalDigits_Sep . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   DecimalDigits_Sep -> DecimalDigits_Sep . NumericLiteralSeparator DecimalDigit
    //   NumericLiteralSeparator -> . [_]
    // Transitions:
    //   [_] => State(23)
    //   [0..9] => State(453):NumericLiteral
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 23, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 453, 453, 453, 453, 453, 462, 462, 462,
    ],
    // State(454):
    //   NumericLiteral -> NonDecimalIntegerLiteral_Sep .
    //   BinaryDigits_Sep -> BinaryDigits_Sep . BinaryDigit
    //   BinaryDigit -> . [0 1]
    //   BinaryDigits_Sep -> BinaryDigits_Sep . NumericLiteralSeparator BinaryDigit
    //   NumericLiteralSeparator -> . [_]
    //   NumericLiteral -> NonDecimalIntegerLiteral_Sep . BigIntLiteralSuffix
    //   BigIntLiteralSuffix -> . [n]
    // Transitions:
    //   [_] => State(25)
    //   [n] => State(448):NumericLiteral
    //   [0..1] => State(454):NumericLiteral
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 25, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 448, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 454, 462, 462, 454, 462, 462, 462,
    ],
    // State(455):
    //   NumericLiteral -> NonDecimalIntegerLiteral_Sep .
    //   OctalDigits_Sep -> OctalDigits_Sep . OctalDigit
    //   OctalDigit -> . [0 1 2 3 4 5 6 7]
    //   OctalDigits_Sep -> OctalDigits_Sep . NumericLiteralSeparator OctalDigit
    //   NumericLiteralSeparator -> . [_]
    //   NumericLiteral -> NonDecimalIntegerLiteral_Sep . BigIntLiteralSuffix
    //   BigIntLiteralSuffix -> . [n]
    // Transitions:
    //   [_] => State(26)
    //   [n] => State(448):NumericLiteral
    //   [0..7] => State(455):NumericLiteral
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 26, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 448, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 455, 455, 455, 455, 462, 462, 462,
    ],
    // State(456):
    //   NumericLiteral -> NonDecimalIntegerLiteral_Sep .
    //   HexDigits_Sep -> HexDigits_Sep . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   HexDigits_Sep -> HexDigits_Sep . NumericLiteralSeparator HexDigit
    //   NumericLiteralSeparator -> . [_]
    //   NumericLiteral -> NonDecimalIntegerLiteral_Sep . BigIntLiteralSuffix
    //   BigIntLiteralSuffix -> . [n]
    // Transitions:
    //   [_] => State(27)
    //   [n] => State(448):NumericLiteral
    //   [0..9, A..F, a..f] => State(456):NumericLiteral
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 456, 462, 462, 456, 456, 456, 27, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 456, 456, 462, 462, 462, 462, 462, 448, 462, 456,
        462, 456, 462, 462, 456, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 456, 456, 456, 456, 456, 462, 462, 462,
    ],
    // State(457):
    //   StringLiteral -> ["] ["] .
    //   StringLiteral -> ['] ['] .
    //   StringLiteral -> ["] DoubleStringCharacters ["] .
    //   StringLiteral -> ['] SingleStringCharacters ['] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(458):
    //   NoSubstitutionTemplate -> [`] [`] .
    //   NoSubstitutionTemplate -> [`] TemplateCharacters [`] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(459):
    //   TemplateHead -> [`] [$] [{] .
    //   TemplateHead -> [`] TemplateCharacters [$] [{] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(460):
    //   RBRACE -> [}] .
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
    ],
    // State(461):
    //   RegularExpressionLiteral -> [/] RegularExpressionBody [/] RegularExpressionFlags .
    //   RegularExpressionFlags -> . RegularExpressionFlags IdentifierPartChar
    //   RegularExpressionLiteral -> [/] RegularExpressionBody [/] . RegularExpressionFlags
    //   RegularExpressionFlags -> . (empty)
    //   RegularExpressionFlags -> RegularExpressionFlags . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    // Transitions:
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(461):RegularExpressionLiteral
    [
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 461, 461, 461, 461, 461, 461, 461, 461,
        461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461,
        461, 461, 461, 461, 461, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 461, 461, 461, 461, 461, 462, 461, 462,
    ],
];

const ACCEPT_TABLE: [Option<TokenKind>; 462] = [
    // State(0)
    None,
    // State(1)
    None,
    // State(2)
    None,
    // State(3)
    None,
    // State(4)
    None,
    // State(5)
    None,
    // State(6)
    None,
    // State(7)
    None,
    // State(8)
    None,
    // State(9)
    None,
    // State(10)
    None,
    // State(11)
    None,
    // State(12)
    None,
    // State(13)
    None,
    // State(14)
    None,
    // State(15)
    None,
    // State(16)
    None,
    // State(17)
    None,
    // State(18)
    None,
    // State(19)
    None,
    // State(20)
    None,
    // State(21)
    None,
    // State(22)
    None,
    // State(23)
    None,
    // State(24)
    None,
    // State(25)
    None,
    // State(26)
    None,
    // State(27)
    None,
    // State(28)
    None,
    // State(29)
    None,
    // State(30)
    None,
    // State(31)
    None,
    // State(32)
    None,
    // State(33)
    None,
    // State(34)
    None,
    // State(35)
    None,
    // State(36)
    None,
    // State(37)
    None,
    // State(38)
    None,
    // State(39)
    None,
    // State(40)
    None,
    // State(41)
    None,
    // State(42)
    None,
    // State(43)
    None,
    // State(44)
    None,
    // State(45)
    None,
    // State(46)
    None,
    // State(47)
    None,
    // State(48)
    None,
    // State(49)
    None,
    // State(50)
    None,
    // State(51)
    None,
    // State(52)
    None,
    // State(53)
    None,
    // State(54)
    None,
    // State(55)
    None,
    // State(56)
    None,
    // State(57)
    None,
    // State(58)
    None,
    // State(59)
    None,
    // State(60)
    None,
    // State(61)
    None,
    // State(62)
    None,
    // State(63)
    None,
    // State(64)
    None,
    // State(65)
    None,
    // State(66)
    None,
    // State(67)
    None,
    // State(68)
    None,
    // State(69)
    None,
    // State(70)
    None,
    // State(71)
    None,
    // State(72)
    None,
    // State(73)
    None,
    // State(74)
    None,
    // State(75)
    None,
    // State(76)
    None,
    // State(77)
    None,
    // State(78)
    None,
    // State(79)
    None,
    // State(80)
    None,
    // State(81)
    None,
    // State(82)
    None,
    // State(83)
    None,
    // State(84)
    None,
    // State(85)
    None,
    // State(86)
    None,
    // State(87)
    None,
    // State(88)
    None,
    // State(89)
    None,
    // State(90)
    None,
    // State(91)
    None,
    // State(92)
    None,
    // State(93)
    None,
    // State(94)
    None,
    // State(95)
    None,
    // State(96)
    None,
    // State(97)
    None,
    // State(98)
    None,
    // State(99)
    None,
    // State(100)
    None,
    // State(101)
    None,
    // State(102)
    None,
    // State(103)
    None,
    // State(104)
    None,
    // State(105)
    None,
    // State(106)
    None,
    // State(107)
    None,
    // State(108)
    None,
    // State(109)
    None,
    // State(110)
    None,
    // State(111)
    None,
    // State(112)
    None,
    // State(113)
    None,
    // State(114)
    None,
    // State(115)
    None,
    // State(116)
    None,
    // State(117)
    None,
    // State(118)
    None,
    // State(119)
    None,
    // State(120)
    None,
    // State(121)
    None,
    // State(122)
    None,
    // State(123)
    None,
    // State(124)
    None,
    // State(125)
    None,
    // State(126)
    None,
    // State(127)
    None,
    // State(128)
    None,
    // State(129)
    None,
    // State(130)
    None,
    // State(131)
    None,
    // State(132)
    None,
    // State(133)
    None,
    // State(134)
    None,
    // State(135)
    None,
    // State(136)
    None,
    // State(137)
    None,
    // State(138)
    None,
    // State(139)
    None,
    // State(140)
    None,
    // State(141)
    None,
    // State(142)
    None,
    // State(143)
    None,
    // State(144)
    None,
    // State(145)
    None,
    // State(146)
    None,
    // State(147)
    None,
    // State(148)
    None,
    // State(149)
    None,
    // State(150)
    None,
    // State(151)
    None,
    // State(152)
    None,
    // State(153)
    None,
    // State(154)
    None,
    // State(155)
    None,
    // State(156)
    None,
    // State(157)
    Some(TokenKind::WhiteSpaceSequence),
    // State(158)
    Some(TokenKind::LineTerminatorSequence),
    // State(159)
    Some(TokenKind::LineTerminatorSequence),
    // State(160)
    Some(TokenKind::Comment),
    // State(161)
    Some(TokenKind::Comment),
    // State(162)
    Some(TokenKind::Break),
    // State(163)
    Some(TokenKind::Case),
    // State(164)
    Some(TokenKind::Catch),
    // State(165)
    Some(TokenKind::Class),
    // State(166)
    Some(TokenKind::Const),
    // State(167)
    Some(TokenKind::Continue),
    // State(168)
    Some(TokenKind::Debugger),
    // State(169)
    Some(TokenKind::Default),
    // State(170)
    Some(TokenKind::Delete),
    // State(171)
    Some(TokenKind::Do),
    // State(172)
    Some(TokenKind::Else),
    // State(173)
    Some(TokenKind::Enum),
    // State(174)
    Some(TokenKind::Export),
    // State(175)
    Some(TokenKind::Extends),
    // State(176)
    Some(TokenKind::False),
    // State(177)
    Some(TokenKind::Finally),
    // State(178)
    Some(TokenKind::For),
    // State(179)
    Some(TokenKind::Function),
    // State(180)
    Some(TokenKind::If),
    // State(181)
    Some(TokenKind::Import),
    // State(182)
    Some(TokenKind::In),
    // State(183)
    Some(TokenKind::Instanceof),
    // State(184)
    Some(TokenKind::New),
    // State(185)
    Some(TokenKind::Null),
    // State(186)
    Some(TokenKind::Return),
    // State(187)
    Some(TokenKind::Super),
    // State(188)
    Some(TokenKind::Switch),
    // State(189)
    Some(TokenKind::This),
    // State(190)
    Some(TokenKind::Throw),
    // State(191)
    Some(TokenKind::True),
    // State(192)
    Some(TokenKind::Try),
    // State(193)
    Some(TokenKind::Typeof),
    // State(194)
    Some(TokenKind::Var),
    // State(195)
    Some(TokenKind::Void),
    // State(196)
    Some(TokenKind::While),
    // State(197)
    Some(TokenKind::With),
    // State(198)
    Some(TokenKind::Await),
    // State(199)
    Some(TokenKind::Yield),
    // State(200)
    Some(TokenKind::Let),
    // State(201)
    Some(TokenKind::Static),
    // State(202)
    Some(TokenKind::Implements),
    // State(203)
    Some(TokenKind::Interface),
    // State(204)
    Some(TokenKind::Package),
    // State(205)
    Some(TokenKind::Private),
    // State(206)
    Some(TokenKind::Protected),
    // State(207)
    Some(TokenKind::Public),
    // State(208)
    Some(TokenKind::As),
    // State(209)
    Some(TokenKind::Async),
    // State(210)
    Some(TokenKind::From),
    // State(211)
    Some(TokenKind::Get),
    // State(212)
    Some(TokenKind::Meta),
    // State(213)
    Some(TokenKind::Of),
    // State(214)
    Some(TokenKind::Set),
    // State(215)
    Some(TokenKind::Target),
    // State(216)
    Some(TokenKind::IdentifierName),
    // State(217)
    Some(TokenKind::IdentifierName),
    // State(218)
    Some(TokenKind::IdentifierName),
    // State(219)
    Some(TokenKind::IdentifierName),
    // State(220)
    Some(TokenKind::IdentifierName),
    // State(221)
    Some(TokenKind::IdentifierName),
    // State(222)
    Some(TokenKind::IdentifierName),
    // State(223)
    Some(TokenKind::IdentifierName),
    // State(224)
    Some(TokenKind::IdentifierName),
    // State(225)
    Some(TokenKind::IdentifierName),
    // State(226)
    Some(TokenKind::IdentifierName),
    // State(227)
    Some(TokenKind::IdentifierName),
    // State(228)
    Some(TokenKind::IdentifierName),
    // State(229)
    Some(TokenKind::IdentifierName),
    // State(230)
    Some(TokenKind::IdentifierName),
    // State(231)
    Some(TokenKind::IdentifierName),
    // State(232)
    Some(TokenKind::IdentifierName),
    // State(233)
    Some(TokenKind::IdentifierName),
    // State(234)
    Some(TokenKind::IdentifierName),
    // State(235)
    Some(TokenKind::IdentifierName),
    // State(236)
    Some(TokenKind::IdentifierName),
    // State(237)
    Some(TokenKind::IdentifierName),
    // State(238)
    Some(TokenKind::IdentifierName),
    // State(239)
    Some(TokenKind::IdentifierName),
    // State(240)
    Some(TokenKind::IdentifierName),
    // State(241)
    Some(TokenKind::IdentifierName),
    // State(242)
    Some(TokenKind::IdentifierName),
    // State(243)
    Some(TokenKind::IdentifierName),
    // State(244)
    Some(TokenKind::IdentifierName),
    // State(245)
    Some(TokenKind::IdentifierName),
    // State(246)
    Some(TokenKind::IdentifierName),
    // State(247)
    Some(TokenKind::IdentifierName),
    // State(248)
    Some(TokenKind::IdentifierName),
    // State(249)
    Some(TokenKind::IdentifierName),
    // State(250)
    Some(TokenKind::IdentifierName),
    // State(251)
    Some(TokenKind::IdentifierName),
    // State(252)
    Some(TokenKind::IdentifierName),
    // State(253)
    Some(TokenKind::IdentifierName),
    // State(254)
    Some(TokenKind::IdentifierName),
    // State(255)
    Some(TokenKind::IdentifierName),
    // State(256)
    Some(TokenKind::IdentifierName),
    // State(257)
    Some(TokenKind::IdentifierName),
    // State(258)
    Some(TokenKind::IdentifierName),
    // State(259)
    Some(TokenKind::IdentifierName),
    // State(260)
    Some(TokenKind::IdentifierName),
    // State(261)
    Some(TokenKind::IdentifierName),
    // State(262)
    Some(TokenKind::IdentifierName),
    // State(263)
    Some(TokenKind::IdentifierName),
    // State(264)
    Some(TokenKind::IdentifierName),
    // State(265)
    Some(TokenKind::IdentifierName),
    // State(266)
    Some(TokenKind::IdentifierName),
    // State(267)
    Some(TokenKind::IdentifierName),
    // State(268)
    Some(TokenKind::IdentifierName),
    // State(269)
    Some(TokenKind::IdentifierName),
    // State(270)
    Some(TokenKind::IdentifierName),
    // State(271)
    Some(TokenKind::IdentifierName),
    // State(272)
    Some(TokenKind::IdentifierName),
    // State(273)
    Some(TokenKind::IdentifierName),
    // State(274)
    Some(TokenKind::IdentifierName),
    // State(275)
    Some(TokenKind::IdentifierName),
    // State(276)
    Some(TokenKind::IdentifierName),
    // State(277)
    Some(TokenKind::IdentifierName),
    // State(278)
    Some(TokenKind::IdentifierName),
    // State(279)
    Some(TokenKind::IdentifierName),
    // State(280)
    Some(TokenKind::IdentifierName),
    // State(281)
    Some(TokenKind::IdentifierName),
    // State(282)
    Some(TokenKind::IdentifierName),
    // State(283)
    Some(TokenKind::IdentifierName),
    // State(284)
    Some(TokenKind::IdentifierName),
    // State(285)
    Some(TokenKind::IdentifierName),
    // State(286)
    Some(TokenKind::IdentifierName),
    // State(287)
    Some(TokenKind::IdentifierName),
    // State(288)
    Some(TokenKind::IdentifierName),
    // State(289)
    Some(TokenKind::IdentifierName),
    // State(290)
    Some(TokenKind::IdentifierName),
    // State(291)
    Some(TokenKind::IdentifierName),
    // State(292)
    Some(TokenKind::IdentifierName),
    // State(293)
    Some(TokenKind::IdentifierName),
    // State(294)
    Some(TokenKind::IdentifierName),
    // State(295)
    Some(TokenKind::IdentifierName),
    // State(296)
    Some(TokenKind::IdentifierName),
    // State(297)
    Some(TokenKind::IdentifierName),
    // State(298)
    Some(TokenKind::IdentifierName),
    // State(299)
    Some(TokenKind::IdentifierName),
    // State(300)
    Some(TokenKind::IdentifierName),
    // State(301)
    Some(TokenKind::IdentifierName),
    // State(302)
    Some(TokenKind::IdentifierName),
    // State(303)
    Some(TokenKind::IdentifierName),
    // State(304)
    Some(TokenKind::IdentifierName),
    // State(305)
    Some(TokenKind::IdentifierName),
    // State(306)
    Some(TokenKind::IdentifierName),
    // State(307)
    Some(TokenKind::IdentifierName),
    // State(308)
    Some(TokenKind::IdentifierName),
    // State(309)
    Some(TokenKind::IdentifierName),
    // State(310)
    Some(TokenKind::IdentifierName),
    // State(311)
    Some(TokenKind::IdentifierName),
    // State(312)
    Some(TokenKind::IdentifierName),
    // State(313)
    Some(TokenKind::IdentifierName),
    // State(314)
    Some(TokenKind::IdentifierName),
    // State(315)
    Some(TokenKind::IdentifierName),
    // State(316)
    Some(TokenKind::IdentifierName),
    // State(317)
    Some(TokenKind::IdentifierName),
    // State(318)
    Some(TokenKind::IdentifierName),
    // State(319)
    Some(TokenKind::IdentifierName),
    // State(320)
    Some(TokenKind::IdentifierName),
    // State(321)
    Some(TokenKind::IdentifierName),
    // State(322)
    Some(TokenKind::IdentifierName),
    // State(323)
    Some(TokenKind::IdentifierName),
    // State(324)
    Some(TokenKind::IdentifierName),
    // State(325)
    Some(TokenKind::IdentifierName),
    // State(326)
    Some(TokenKind::IdentifierName),
    // State(327)
    Some(TokenKind::IdentifierName),
    // State(328)
    Some(TokenKind::IdentifierName),
    // State(329)
    Some(TokenKind::IdentifierName),
    // State(330)
    Some(TokenKind::IdentifierName),
    // State(331)
    Some(TokenKind::IdentifierName),
    // State(332)
    Some(TokenKind::IdentifierName),
    // State(333)
    Some(TokenKind::IdentifierName),
    // State(334)
    Some(TokenKind::IdentifierName),
    // State(335)
    Some(TokenKind::IdentifierName),
    // State(336)
    Some(TokenKind::IdentifierName),
    // State(337)
    Some(TokenKind::IdentifierName),
    // State(338)
    Some(TokenKind::IdentifierName),
    // State(339)
    Some(TokenKind::IdentifierName),
    // State(340)
    Some(TokenKind::IdentifierName),
    // State(341)
    Some(TokenKind::IdentifierName),
    // State(342)
    Some(TokenKind::IdentifierName),
    // State(343)
    Some(TokenKind::IdentifierName),
    // State(344)
    Some(TokenKind::IdentifierName),
    // State(345)
    Some(TokenKind::IdentifierName),
    // State(346)
    Some(TokenKind::IdentifierName),
    // State(347)
    Some(TokenKind::IdentifierName),
    // State(348)
    Some(TokenKind::IdentifierName),
    // State(349)
    Some(TokenKind::IdentifierName),
    // State(350)
    Some(TokenKind::IdentifierName),
    // State(351)
    Some(TokenKind::IdentifierName),
    // State(352)
    Some(TokenKind::IdentifierName),
    // State(353)
    Some(TokenKind::IdentifierName),
    // State(354)
    Some(TokenKind::IdentifierName),
    // State(355)
    Some(TokenKind::IdentifierName),
    // State(356)
    Some(TokenKind::IdentifierName),
    // State(357)
    Some(TokenKind::IdentifierName),
    // State(358)
    Some(TokenKind::IdentifierName),
    // State(359)
    Some(TokenKind::IdentifierName),
    // State(360)
    Some(TokenKind::IdentifierName),
    // State(361)
    Some(TokenKind::IdentifierName),
    // State(362)
    Some(TokenKind::IdentifierName),
    // State(363)
    Some(TokenKind::IdentifierName),
    // State(364)
    Some(TokenKind::IdentifierName),
    // State(365)
    Some(TokenKind::IdentifierName),
    // State(366)
    Some(TokenKind::IdentifierName),
    // State(367)
    Some(TokenKind::IdentifierName),
    // State(368)
    Some(TokenKind::IdentifierName),
    // State(369)
    Some(TokenKind::IdentifierName),
    // State(370)
    Some(TokenKind::IdentifierName),
    // State(371)
    Some(TokenKind::IdentifierName),
    // State(372)
    Some(TokenKind::IdentifierName),
    // State(373)
    Some(TokenKind::IdentifierName),
    // State(374)
    Some(TokenKind::IdentifierName),
    // State(375)
    Some(TokenKind::IdentifierName),
    // State(376)
    Some(TokenKind::IdentifierName),
    // State(377)
    Some(TokenKind::IdentifierName),
    // State(378)
    Some(TokenKind::IdentifierName),
    // State(379)
    Some(TokenKind::IdentifierName),
    // State(380)
    Some(TokenKind::IdentifierName),
    // State(381)
    Some(TokenKind::IdentifierName),
    // State(382)
    Some(TokenKind::IdentifierName),
    // State(383)
    Some(TokenKind::IdentifierName),
    // State(384)
    Some(TokenKind::IdentifierName),
    // State(385)
    Some(TokenKind::IdentifierName),
    // State(386)
    Some(TokenKind::IdentifierName),
    // State(387)
    Some(TokenKind::IdentifierName),
    // State(388)
    Some(TokenKind::IdentifierName),
    // State(389)
    Some(TokenKind::IdentifierName),
    // State(390)
    Some(TokenKind::IdentifierName),
    // State(391)
    Some(TokenKind::PrivateIdentifier),
    // State(392)
    Some(TokenKind::OptionalChaining),
    // State(393)
    Some(TokenKind::Lbrace),
    // State(394)
    Some(TokenKind::Lparen),
    // State(395)
    Some(TokenKind::Rparen),
    // State(396)
    Some(TokenKind::Lbrack),
    // State(397)
    Some(TokenKind::Rbrack),
    // State(398)
    Some(TokenKind::Dot),
    // State(399)
    Some(TokenKind::Ellipsis),
    // State(400)
    Some(TokenKind::SemiColon),
    // State(401)
    Some(TokenKind::Comma),
    // State(402)
    Some(TokenKind::Lt),
    // State(403)
    Some(TokenKind::Gt),
    // State(404)
    Some(TokenKind::Lte),
    // State(405)
    Some(TokenKind::Gte),
    // State(406)
    Some(TokenKind::Eq),
    // State(407)
    Some(TokenKind::Ne),
    // State(408)
    Some(TokenKind::EqStrict),
    // State(409)
    Some(TokenKind::NeStrict),
    // State(410)
    Some(TokenKind::Add),
    // State(411)
    Some(TokenKind::Sub),
    // State(412)
    Some(TokenKind::Mul),
    // State(413)
    Some(TokenKind::Mod),
    // State(414)
    Some(TokenKind::Exp),
    // State(415)
    Some(TokenKind::Inc),
    // State(416)
    Some(TokenKind::Dec),
    // State(417)
    Some(TokenKind::Shl),
    // State(418)
    Some(TokenKind::Sar),
    // State(419)
    Some(TokenKind::Shr),
    // State(420)
    Some(TokenKind::BitAnd),
    // State(421)
    Some(TokenKind::BitOr),
    // State(422)
    Some(TokenKind::BitXor),
    // State(423)
    Some(TokenKind::Not),
    // State(424)
    Some(TokenKind::BitNot),
    // State(425)
    Some(TokenKind::And),
    // State(426)
    Some(TokenKind::Or),
    // State(427)
    Some(TokenKind::Nullish),
    // State(428)
    Some(TokenKind::Conditional),
    // State(429)
    Some(TokenKind::Colon),
    // State(430)
    Some(TokenKind::Assign),
    // State(431)
    Some(TokenKind::AddAssign),
    // State(432)
    Some(TokenKind::SubAssign),
    // State(433)
    Some(TokenKind::MulAssign),
    // State(434)
    Some(TokenKind::ModAssign),
    // State(435)
    Some(TokenKind::ExpAssign),
    // State(436)
    Some(TokenKind::ShlAssign),
    // State(437)
    Some(TokenKind::SarAssign),
    // State(438)
    Some(TokenKind::ShrAssign),
    // State(439)
    Some(TokenKind::BitAndAssign),
    // State(440)
    Some(TokenKind::BitOrAssign),
    // State(441)
    Some(TokenKind::BitXorAssign),
    // State(442)
    Some(TokenKind::AndAssign),
    // State(443)
    Some(TokenKind::OrAssign),
    // State(444)
    Some(TokenKind::NullishAssign),
    // State(445)
    Some(TokenKind::Arrow),
    // State(446)
    Some(TokenKind::NumericLiteral),
    // State(447)
    Some(TokenKind::NumericLiteral),
    // State(448)
    Some(TokenKind::NumericLiteral),
    // State(449)
    Some(TokenKind::NumericLiteral),
    // State(450)
    Some(TokenKind::NumericLiteral),
    // State(451)
    Some(TokenKind::NumericLiteral),
    // State(452)
    Some(TokenKind::NumericLiteral),
    // State(453)
    Some(TokenKind::NumericLiteral),
    // State(454)
    Some(TokenKind::NumericLiteral),
    // State(455)
    Some(TokenKind::NumericLiteral),
    // State(456)
    Some(TokenKind::NumericLiteral),
    // State(457)
    Some(TokenKind::StringLiteral),
    // State(458)
    Some(TokenKind::NoSubstitutionTemplate),
    // State(459)
    Some(TokenKind::TemplateHead),
    // State(460)
    Some(TokenKind::Rbrace),
    // State(461)
    Some(TokenKind::RegularExpressionLiteral),
];

const LOOKAHEAD_TABLE: [bool; 462] = [
    // State(0)
    false, // State(1)
    false, // State(2)
    false, // State(3)
    false, // State(4)
    false, // State(5)
    false, // State(6)
    false, // State(7)
    false, // State(8)
    false, // State(9)
    false, // State(10)
    false, // State(11)
    false, // State(12)
    false, // State(13)
    false, // State(14)
    false, // State(15)
    false, // State(16)
    false, // State(17)
    false, // State(18)
    false, // State(19)
    false, // State(20)
    false, // State(21)
    false, // State(22)
    false, // State(23)
    false, // State(24)
    false, // State(25)
    false, // State(26)
    false, // State(27)
    false, // State(28)
    false, // State(29)
    false, // State(30)
    false, // State(31)
    false, // State(32)
    false, // State(33)
    false, // State(34)
    false, // State(35)
    false, // State(36)
    false, // State(37)
    false, // State(38)
    false, // State(39)
    false, // State(40)
    false, // State(41)
    false, // State(42)
    false, // State(43)
    false, // State(44)
    false, // State(45)
    false, // State(46)
    false, // State(47)
    false, // State(48)
    false, // State(49)
    false, // State(50)
    false, // State(51)
    false, // State(52)
    false, // State(53)
    false, // State(54)
    false, // State(55)
    false, // State(56)
    false, // State(57)
    false, // State(58)
    false, // State(59)
    false, // State(60)
    false, // State(61)
    false, // State(62)
    false, // State(63)
    false, // State(64)
    false, // State(65)
    false, // State(66)
    false, // State(67)
    false, // State(68)
    false, // State(69)
    false, // State(70)
    false, // State(71)
    false, // State(72)
    false, // State(73)
    false, // State(74)
    false, // State(75)
    false, // State(76)
    false, // State(77)
    false, // State(78)
    false, // State(79)
    false, // State(80)
    false, // State(81)
    false, // State(82)
    false, // State(83)
    false, // State(84)
    false, // State(85)
    false, // State(86)
    false, // State(87)
    false, // State(88)
    false, // State(89)
    false, // State(90)
    false, // State(91)
    false, // State(92)
    false, // State(93)
    false, // State(94)
    false, // State(95)
    false, // State(96)
    false, // State(97)
    false, // State(98)
    false, // State(99)
    false, // State(100)
    false, // State(101)
    false, // State(102)
    false, // State(103)
    false, // State(104)
    false, // State(105)
    false, // State(106)
    false, // State(107)
    false, // State(108)
    false, // State(109)
    false, // State(110)
    false, // State(111)
    false, // State(112)
    false, // State(113)
    false, // State(114)
    false, // State(115)
    false, // State(116)
    false, // State(117)
    false, // State(118)
    false, // State(119)
    false, // State(120)
    false, // State(121)
    false, // State(122)
    false, // State(123)
    false, // State(124)
    false, // State(125)
    false, // State(126)
    false, // State(127)
    false, // State(128)
    false, // State(129)
    false, // State(130)
    false, // State(131)
    false, // State(132)
    false, // State(133)
    false, // State(134)
    false, // State(135)
    false, // State(136)
    false, // State(137)
    false, // State(138)
    false, // State(139)
    false, // State(140)
    false, // State(141)
    false, // State(142)
    false, // State(143)
    false, // State(144)
    false, // State(145)
    false, // State(146)
    false, // State(147)
    false, // State(148)
    false, // State(149)
    false, // State(150)
    false, // State(151)
    false, // State(152)
    false, // State(153)
    false, // State(154)
    true, // State(155)
    true, // State(156)
    true, // State(157)
    false, // State(158)
    false, // State(159)
    true, // State(160)
    false, // State(161)
    false, // State(162)
    false, // State(163)
    false, // State(164)
    false, // State(165)
    false, // State(166)
    false, // State(167)
    false, // State(168)
    false, // State(169)
    false, // State(170)
    false, // State(171)
    false, // State(172)
    false, // State(173)
    false, // State(174)
    false, // State(175)
    false, // State(176)
    false, // State(177)
    false, // State(178)
    false, // State(179)
    false, // State(180)
    false, // State(181)
    false, // State(182)
    false, // State(183)
    false, // State(184)
    false, // State(185)
    false, // State(186)
    false, // State(187)
    false, // State(188)
    false, // State(189)
    false, // State(190)
    false, // State(191)
    false, // State(192)
    false, // State(193)
    false, // State(194)
    false, // State(195)
    false, // State(196)
    false, // State(197)
    false, // State(198)
    false, // State(199)
    false, // State(200)
    false, // State(201)
    false, // State(202)
    false, // State(203)
    false, // State(204)
    false, // State(205)
    false, // State(206)
    false, // State(207)
    false, // State(208)
    false, // State(209)
    false, // State(210)
    false, // State(211)
    false, // State(212)
    false, // State(213)
    false, // State(214)
    false, // State(215)
    false, // State(216)
    false, // State(217)
    false, // State(218)
    false, // State(219)
    false, // State(220)
    false, // State(221)
    false, // State(222)
    false, // State(223)
    false, // State(224)
    false, // State(225)
    false, // State(226)
    false, // State(227)
    false, // State(228)
    false, // State(229)
    false, // State(230)
    false, // State(231)
    false, // State(232)
    false, // State(233)
    false, // State(234)
    false, // State(235)
    false, // State(236)
    false, // State(237)
    false, // State(238)
    false, // State(239)
    false, // State(240)
    false, // State(241)
    false, // State(242)
    false, // State(243)
    false, // State(244)
    false, // State(245)
    false, // State(246)
    false, // State(247)
    false, // State(248)
    false, // State(249)
    false, // State(250)
    false, // State(251)
    false, // State(252)
    false, // State(253)
    false, // State(254)
    false, // State(255)
    false, // State(256)
    false, // State(257)
    false, // State(258)
    false, // State(259)
    false, // State(260)
    false, // State(261)
    false, // State(262)
    false, // State(263)
    false, // State(264)
    false, // State(265)
    false, // State(266)
    false, // State(267)
    false, // State(268)
    false, // State(269)
    false, // State(270)
    false, // State(271)
    false, // State(272)
    false, // State(273)
    false, // State(274)
    false, // State(275)
    false, // State(276)
    false, // State(277)
    false, // State(278)
    false, // State(279)
    false, // State(280)
    false, // State(281)
    false, // State(282)
    false, // State(283)
    false, // State(284)
    false, // State(285)
    false, // State(286)
    false, // State(287)
    false, // State(288)
    false, // State(289)
    false, // State(290)
    false, // State(291)
    false, // State(292)
    false, // State(293)
    false, // State(294)
    false, // State(295)
    false, // State(296)
    false, // State(297)
    false, // State(298)
    false, // State(299)
    false, // State(300)
    false, // State(301)
    false, // State(302)
    false, // State(303)
    false, // State(304)
    false, // State(305)
    false, // State(306)
    false, // State(307)
    false, // State(308)
    false, // State(309)
    false, // State(310)
    false, // State(311)
    false, // State(312)
    false, // State(313)
    false, // State(314)
    false, // State(315)
    false, // State(316)
    false, // State(317)
    false, // State(318)
    false, // State(319)
    false, // State(320)
    false, // State(321)
    false, // State(322)
    false, // State(323)
    false, // State(324)
    false, // State(325)
    false, // State(326)
    false, // State(327)
    false, // State(328)
    false, // State(329)
    false, // State(330)
    false, // State(331)
    false, // State(332)
    false, // State(333)
    false, // State(334)
    false, // State(335)
    false, // State(336)
    false, // State(337)
    false, // State(338)
    false, // State(339)
    false, // State(340)
    false, // State(341)
    false, // State(342)
    false, // State(343)
    false, // State(344)
    false, // State(345)
    false, // State(346)
    false, // State(347)
    false, // State(348)
    false, // State(349)
    false, // State(350)
    false, // State(351)
    false, // State(352)
    false, // State(353)
    false, // State(354)
    false, // State(355)
    false, // State(356)
    false, // State(357)
    false, // State(358)
    false, // State(359)
    false, // State(360)
    false, // State(361)
    false, // State(362)
    false, // State(363)
    false, // State(364)
    false, // State(365)
    false, // State(366)
    false, // State(367)
    false, // State(368)
    false, // State(369)
    false, // State(370)
    false, // State(371)
    false, // State(372)
    false, // State(373)
    false, // State(374)
    false, // State(375)
    false, // State(376)
    false, // State(377)
    false, // State(378)
    false, // State(379)
    false, // State(380)
    false, // State(381)
    false, // State(382)
    false, // State(383)
    false, // State(384)
    false, // State(385)
    false, // State(386)
    false, // State(387)
    false, // State(388)
    false, // State(389)
    false, // State(390)
    false, // State(391)
    false, // State(392)
    true, // State(393)
    false, // State(394)
    false, // State(395)
    false, // State(396)
    false, // State(397)
    false, // State(398)
    false, // State(399)
    false, // State(400)
    false, // State(401)
    false, // State(402)
    false, // State(403)
    false, // State(404)
    false, // State(405)
    false, // State(406)
    false, // State(407)
    false, // State(408)
    false, // State(409)
    false, // State(410)
    false, // State(411)
    false, // State(412)
    false, // State(413)
    false, // State(414)
    false, // State(415)
    false, // State(416)
    false, // State(417)
    false, // State(418)
    false, // State(419)
    false, // State(420)
    false, // State(421)
    false, // State(422)
    false, // State(423)
    false, // State(424)
    false, // State(425)
    false, // State(426)
    false, // State(427)
    false, // State(428)
    false, // State(429)
    false, // State(430)
    false, // State(431)
    false, // State(432)
    false, // State(433)
    false, // State(434)
    false, // State(435)
    false, // State(436)
    false, // State(437)
    false, // State(438)
    false, // State(439)
    false, // State(440)
    false, // State(441)
    false, // State(442)
    false, // State(443)
    false, // State(444)
    false, // State(445)
    false, // State(446)
    false, // State(447)
    false, // State(448)
    false, // State(449)
    false, // State(450)
    false, // State(451)
    false, // State(452)
    false, // State(453)
    false, // State(454)
    false, // State(455)
    false, // State(456)
    false, // State(457)
    false, // State(458)
    false, // State(459)
    false, // State(460)
    false, // State(461)
    false,
];
