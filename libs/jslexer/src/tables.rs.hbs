// DO NOT EDIT THIS FILE BY HAND.
//
// This file was automagically generated by:
// {{@command}}

#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TokenKind {
    {{#each tokens}}
    {{pascalCase name}},
    {{/each}}
    Eof,
}

#[derive(Clone, Debug, PartialEq)]
pub struct Token<'a> {
    pub kind: TokenKind,
    pub lexeme: &'a str,
}

impl<'a> Default for Token<'a> {
    fn default() -> Self {
        Token {
            kind: TokenKind::Eof,
            lexeme: "",
        }
    }
}

#[derive(Clone, Copy, Debug)]
pub struct CharClass(u8);

impl TryFrom<char> for CharClass {
    type Error = ();

    fn try_from(ch: char) -> Result<Self, Self::Error> {
        let c = ch as usize;
        if c < 128 {
            return Ok(CharClass(ASCII_TABLE[c]));
        }
        {{#each ccNonAsciiList}}
        {{#if codePoint}}
        if c == {{codePoint}} {
            return Ok(CharClass({{charClass}}));
        }
        {{else}}
        if c >= {{firstCodePoint}} && c <= {{lastCodePoint}} {
            return Ok(CharClass({{charClass}}));
        }
        {{/if}}
        {{/each}}
        Err(())
    }
}

const ASCII_TABLE: [u8; 128] = {{json ccAsciiTable}};

#[derive(Clone, Copy, Debug, Default)]
pub struct State(u16);

impl State {
    #[inline(always)]
    pub fn is_invalid(&self) -> bool {
        self.0 == {{length states}}
    }

    #[inline(always)]
    pub fn next_state(&self, cc: CharClass) -> State {
        State(TRANSITION_TABLE[self.0 as usize][cc.0 as usize])
    }

    #[inline(always)]
    pub fn lookahead(&self) -> bool {
        LOOKAHEAD_TABLE[self.0 as usize]
    }

    #[inline(always)]
    pub fn accept(&self) -> Option<TokenKind> {
        ACCEPT_TABLE[self.0 as usize]
    }
}

const TRANSITION_TABLE: [[u16; {{length charClasses}}]; {{length states}}] = [
    {{#each states}}
    {{json transitions}},
    {{/each}}
];

const ACCEPT_TABLE: [Option<TokenKind>; {{length states}}] = [
    {{#each states}}
    {{#if accept}}
    Some(TokenKind::{{pascalCase accept}}),
    {{else}}
    None,
    {{/if}}
    {{/each}}
];

const LOOKAHEAD_TABLE: [bool; {{length states}}] = [
    {{#each states}}
    {{#if lookahead}}
    true,
    {{else}}
    false,
    {{/if}}
    {{/each}}
];
