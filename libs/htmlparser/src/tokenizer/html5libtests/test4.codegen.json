{
  "tests": [
    {
      "description": "< in attribute name",
      "input": [
        60,
        122,
        47,
        48,
        32,
        32,
        60,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "z",
            "attrs": {
              "0": "",
              "<": ""
            },
            "self_closing": false
          }
        }
      ],
      "errors": [
        {
          "code": "UnexpectedSolidusInTag",
          "location": {
            "line": 1,
            "column": 4
          }
        },
        {
          "code": "UnexpectedCharacterInAttributeName",
          "location": {
            "line": 1,
            "column": 7
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "< in unquoted attribute value",
      "input": [
        60,
        122,
        32,
        120,
        61,
        60,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "z",
            "attrs": {
              "x": "<"
            },
            "self_closing": false
          }
        }
      ],
      "errors": [
        {
          "code": "UnexpectedCharacterInUnquotedAttributeValue",
          "location": {
            "line": 1,
            "column": 6
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "= in unquoted attribute value",
      "input": [
        60,
        122,
        32,
        122,
        61,
        122,
        61,
        122,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "z",
            "attrs": {
              "z": "z=z"
            },
            "self_closing": false
          }
        }
      ],
      "errors": [
        {
          "code": "UnexpectedCharacterInUnquotedAttributeValue",
          "location": {
            "line": 1,
            "column": 7
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "= attribute",
      "input": [
        60,
        122,
        32,
        61,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "z",
            "attrs": {
              "=": ""
            },
            "self_closing": false
          }
        }
      ],
      "errors": [
        {
          "code": "UnexpectedEqualsSignBeforeAttributeName",
          "location": {
            "line": 1,
            "column": 4
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "== attribute",
      "input": [
        60,
        122,
        32,
        61,
        61,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "z",
            "attrs": {
              "=": ""
            },
            "self_closing": false
          }
        }
      ],
      "errors": [
        {
          "code": "UnexpectedEqualsSignBeforeAttributeName",
          "location": {
            "line": 1,
            "column": 4
          }
        },
        {
          "code": "MissingAttributeValue",
          "location": {
            "line": 1,
            "column": 6
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "=== attribute",
      "input": [
        60,
        122,
        32,
        61,
        61,
        61,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "z",
            "attrs": {
              "=": "="
            },
            "self_closing": false
          }
        }
      ],
      "errors": [
        {
          "code": "UnexpectedEqualsSignBeforeAttributeName",
          "location": {
            "line": 1,
            "column": 4
          }
        },
        {
          "code": "UnexpectedCharacterInUnquotedAttributeValue",
          "location": {
            "line": 1,
            "column": 6
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "==== attribute",
      "input": [
        60,
        122,
        32,
        61,
        61,
        61,
        61,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "z",
            "attrs": {
              "=": "=="
            },
            "self_closing": false
          }
        }
      ],
      "errors": [
        {
          "code": "UnexpectedEqualsSignBeforeAttributeName",
          "location": {
            "line": 1,
            "column": 4
          }
        },
        {
          "code": "UnexpectedCharacterInUnquotedAttributeValue",
          "location": {
            "line": 1,
            "column": 6
          }
        },
        {
          "code": "UnexpectedCharacterInUnquotedAttributeValue",
          "location": {
            "line": 1,
            "column": 7
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "\" after ampersand in double-quoted attribute value",
      "input": [
        60,
        122,
        32,
        122,
        61,
        34,
        38,
        34,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "z",
            "attrs": {
              "z": "&"
            },
            "self_closing": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "' after ampersand in double-quoted attribute value",
      "input": [
        60,
        122,
        32,
        122,
        61,
        34,
        38,
        39,
        34,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "z",
            "attrs": {
              "z": "&'"
            },
            "self_closing": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "' after ampersand in single-quoted attribute value",
      "input": [
        60,
        122,
        32,
        122,
        61,
        39,
        38,
        39,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "z",
            "attrs": {
              "z": "&"
            },
            "self_closing": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "\" after ampersand in single-quoted attribute value",
      "input": [
        60,
        122,
        32,
        122,
        61,
        39,
        38,
        34,
        39,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "z",
            "attrs": {
              "z": "&\""
            },
            "self_closing": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Text after bogus character reference",
      "input": [
        60,
        122,
        32,
        122,
        61,
        39,
        38,
        120,
        108,
        105,
        110,
        107,
        95,
        120,
        109,
        108,
        110,
        115,
        59,
        39,
        62,
        98,
        97,
        114,
        60,
        122,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "z",
            "attrs": {
              "z": "&xlink_xmlns;"
            },
            "self_closing": false
          }
        },
        {
          "Character": {
            "data": "bar"
          }
        },
        {
          "StartTag": {
            "name": "z",
            "attrs": {},
            "self_closing": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Text after hex character reference",
      "input": [
        60,
        122,
        32,
        122,
        61,
        39,
        38,
        35,
        120,
        48,
        48,
        50,
        48,
        59,
        32,
        102,
        111,
        111,
        39,
        62,
        98,
        97,
        114,
        60,
        122,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "z",
            "attrs": {
              "z": "  foo"
            },
            "self_closing": false
          }
        },
        {
          "Character": {
            "data": "bar"
          }
        },
        {
          "StartTag": {
            "name": "z",
            "attrs": {},
            "self_closing": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Attribute name starting with \"",
      "input": [
        60,
        102,
        111,
        111,
        32,
        34,
        61,
        39,
        98,
        97,
        114,
        39,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "foo",
            "attrs": {
              "\"": "bar"
            },
            "self_closing": false
          }
        }
      ],
      "errors": [
        {
          "code": "UnexpectedCharacterInAttributeName",
          "location": {
            "line": 1,
            "column": 6
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Attribute name starting with '",
      "input": [
        60,
        102,
        111,
        111,
        32,
        39,
        61,
        39,
        98,
        97,
        114,
        39,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "foo",
            "attrs": {
              "'": "bar"
            },
            "self_closing": false
          }
        }
      ],
      "errors": [
        {
          "code": "UnexpectedCharacterInAttributeName",
          "location": {
            "line": 1,
            "column": 6
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Attribute name containing \"",
      "input": [
        60,
        102,
        111,
        111,
        32,
        97,
        34,
        98,
        61,
        39,
        98,
        97,
        114,
        39,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "foo",
            "attrs": {
              "a\"b": "bar"
            },
            "self_closing": false
          }
        }
      ],
      "errors": [
        {
          "code": "UnexpectedCharacterInAttributeName",
          "location": {
            "line": 1,
            "column": 7
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Attribute name containing '",
      "input": [
        60,
        102,
        111,
        111,
        32,
        97,
        39,
        98,
        61,
        39,
        98,
        97,
        114,
        39,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "foo",
            "attrs": {
              "a'b": "bar"
            },
            "self_closing": false
          }
        }
      ],
      "errors": [
        {
          "code": "UnexpectedCharacterInAttributeName",
          "location": {
            "line": 1,
            "column": 7
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Unquoted attribute value containing '",
      "input": [
        60,
        102,
        111,
        111,
        32,
        97,
        61,
        98,
        39,
        99,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "foo",
            "attrs": {
              "a": "b'c"
            },
            "self_closing": false
          }
        }
      ],
      "errors": [
        {
          "code": "UnexpectedCharacterInUnquotedAttributeValue",
          "location": {
            "line": 1,
            "column": 9
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Unquoted attribute value containing \"",
      "input": [
        60,
        102,
        111,
        111,
        32,
        97,
        61,
        98,
        34,
        99,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "foo",
            "attrs": {
              "a": "b\"c"
            },
            "self_closing": false
          }
        }
      ],
      "errors": [
        {
          "code": "UnexpectedCharacterInUnquotedAttributeValue",
          "location": {
            "line": 1,
            "column": 9
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Double-quoted attribute value not followed by whitespace",
      "input": [
        60,
        102,
        111,
        111,
        32,
        97,
        61,
        34,
        98,
        34,
        99,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "foo",
            "attrs": {
              "a": "b",
              "c": ""
            },
            "self_closing": false
          }
        }
      ],
      "errors": [
        {
          "code": "MissingWhitespaceBetweenAttributes",
          "location": {
            "line": 1,
            "column": 11
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Single-quoted attribute value not followed by whitespace",
      "input": [
        60,
        102,
        111,
        111,
        32,
        97,
        61,
        39,
        98,
        39,
        99,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "foo",
            "attrs": {
              "a": "b",
              "c": ""
            },
            "self_closing": false
          }
        }
      ],
      "errors": [
        {
          "code": "MissingWhitespaceBetweenAttributes",
          "location": {
            "line": 1,
            "column": 11
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Quoted attribute followed by permitted /",
      "input": [
        60,
        98,
        114,
        32,
        97,
        61,
        39,
        98,
        39,
        47,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "br",
            "attrs": {
              "a": "b"
            },
            "self_closing": true
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Quoted attribute followed by non-permitted /",
      "input": [
        60,
        98,
        97,
        114,
        32,
        97,
        61,
        39,
        98,
        39,
        47,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "bar",
            "attrs": {
              "a": "b"
            },
            "self_closing": true
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "CR EOF after doctype name",
      "input": [
        60,
        33,
        100,
        111,
        99,
        116,
        121,
        112,
        101,
        32,
        104,
        116,
        109,
        108,
        32,
        13
      ],
      "output": [
        {
          "Doctype": {
            "name": "html",
            "public_id": null,
            "system_id": null,
            "force_quirks": true
          }
        }
      ],
      "errors": [
        {
          "code": "EofInDoctype",
          "location": {
            "line": 2,
            "column": 1
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "CR EOF in tag name",
      "input": [
        60,
        122,
        13
      ],
      "output": [],
      "errors": [
        {
          "code": "EofInTag",
          "location": {
            "line": 2,
            "column": 1
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Slash EOF in tag name",
      "input": [
        60,
        122,
        47
      ],
      "output": [],
      "errors": [
        {
          "code": "EofInTag",
          "location": {
            "line": 1,
            "column": 4
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Zero hex numeric entity",
      "input": [
        38,
        35,
        120,
        48
      ],
      "output": [
        {
          "Character": {
            "data": "�"
          }
        }
      ],
      "errors": [
        {
          "code": "MissingSemicolonAfterCharacterReference",
          "location": {
            "line": 1,
            "column": 5
          }
        },
        {
          "code": "NullCharacterReference",
          "location": {
            "line": 1,
            "column": 5
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Zero decimal numeric entity",
      "input": [
        38,
        35,
        48
      ],
      "output": [
        {
          "Character": {
            "data": "�"
          }
        }
      ],
      "errors": [
        {
          "code": "MissingSemicolonAfterCharacterReference",
          "location": {
            "line": 1,
            "column": 4
          }
        },
        {
          "code": "NullCharacterReference",
          "location": {
            "line": 1,
            "column": 4
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Zero-prefixed hex numeric entity",
      "input": [
        38,
        35,
        120,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        52,
        49,
        59
      ],
      "output": [
        {
          "Character": {
            "data": "A"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Zero-prefixed decimal numeric entity",
      "input": [
        38,
        35,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        54,
        53,
        59
      ],
      "output": [
        {
          "Character": {
            "data": "A"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Empty hex numeric entities",
      "input": [
        38,
        35,
        120,
        32,
        38,
        35,
        88,
        32
      ],
      "output": [
        {
          "Character": {
            "data": "&#x &#X "
          }
        }
      ],
      "errors": [
        {
          "code": "AbsenceOfDigitsInNumericCharacterReference",
          "location": {
            "line": 1,
            "column": 4
          }
        },
        {
          "code": "AbsenceOfDigitsInNumericCharacterReference",
          "location": {
            "line": 1,
            "column": 8
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Invalid digit in hex numeric entity",
      "input": [
        38,
        35,
        120,
        90
      ],
      "output": [
        {
          "Character": {
            "data": "&#xZ"
          }
        }
      ],
      "errors": [
        {
          "code": "AbsenceOfDigitsInNumericCharacterReference",
          "location": {
            "line": 1,
            "column": 4
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Empty decimal numeric entities",
      "input": [
        38,
        35,
        32,
        38,
        35,
        59,
        32
      ],
      "output": [
        {
          "Character": {
            "data": "&# &#; "
          }
        }
      ],
      "errors": [
        {
          "code": "AbsenceOfDigitsInNumericCharacterReference",
          "location": {
            "line": 1,
            "column": 3
          }
        },
        {
          "code": "AbsenceOfDigitsInNumericCharacterReference",
          "location": {
            "line": 1,
            "column": 6
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Invalid digit in decimal numeric entity",
      "input": [
        38,
        35,
        65
      ],
      "output": [
        {
          "Character": {
            "data": "&#A"
          }
        }
      ],
      "errors": [
        {
          "code": "AbsenceOfDigitsInNumericCharacterReference",
          "location": {
            "line": 1,
            "column": 3
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Non-BMP numeric entity",
      "input": [
        38,
        35,
        120,
        49,
        48,
        48,
        48,
        48,
        59
      ],
      "output": [
        {
          "Character": {
            "data": "𐀀"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Maximum non-BMP numeric entity",
      "input": [
        38,
        35,
        88,
        49,
        48,
        70,
        70,
        70,
        70,
        59
      ],
      "output": [
        {
          "Character": {
            "data": "􏿿"
          }
        }
      ],
      "errors": [
        {
          "code": "NoncharacterCharacterReference",
          "location": {
            "line": 1,
            "column": 11
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Above maximum numeric entity",
      "input": [
        38,
        35,
        120,
        49,
        49,
        48,
        48,
        48,
        48,
        59
      ],
      "output": [
        {
          "Character": {
            "data": "�"
          }
        }
      ],
      "errors": [
        {
          "code": "CharacterReferenceOutsideUnicodeRange",
          "location": {
            "line": 1,
            "column": 11
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "32-bit hex numeric entity",
      "input": [
        38,
        35,
        120,
        56,
        48,
        48,
        48,
        48,
        48,
        52,
        49,
        59
      ],
      "output": [
        {
          "Character": {
            "data": "�"
          }
        }
      ],
      "errors": [
        {
          "code": "CharacterReferenceOutsideUnicodeRange",
          "location": {
            "line": 1,
            "column": 13
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "33-bit hex numeric entity",
      "input": [
        38,
        35,
        120,
        49,
        48,
        48,
        48,
        48,
        48,
        48,
        52,
        49,
        59
      ],
      "output": [
        {
          "Character": {
            "data": "�"
          }
        }
      ],
      "errors": [
        {
          "code": "CharacterReferenceOutsideUnicodeRange",
          "location": {
            "line": 1,
            "column": 14
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "33-bit decimal numeric entity",
      "input": [
        38,
        35,
        52,
        50,
        57,
        52,
        57,
        54,
        55,
        51,
        54,
        49,
        59
      ],
      "output": [
        {
          "Character": {
            "data": "�"
          }
        }
      ],
      "errors": [
        {
          "code": "CharacterReferenceOutsideUnicodeRange",
          "location": {
            "line": 1,
            "column": 14
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "65-bit hex numeric entity",
      "input": [
        38,
        35,
        120,
        49,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        52,
        49,
        59
      ],
      "output": [
        {
          "Character": {
            "data": "�"
          }
        }
      ],
      "errors": [
        {
          "code": "CharacterReferenceOutsideUnicodeRange",
          "location": {
            "line": 1,
            "column": 22
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "65-bit decimal numeric entity",
      "input": [
        38,
        35,
        49,
        56,
        52,
        52,
        54,
        55,
        52,
        52,
        48,
        55,
        51,
        55,
        48,
        57,
        53,
        53,
        49,
        54,
        56,
        49,
        59
      ],
      "output": [
        {
          "Character": {
            "data": "�"
          }
        }
      ],
      "errors": [
        {
          "code": "CharacterReferenceOutsideUnicodeRange",
          "location": {
            "line": 1,
            "column": 24
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Surrogate code point edge cases",
      "input": [
        38,
        35,
        120,
        68,
        55,
        70,
        70,
        59,
        38,
        35,
        120,
        68,
        56,
        48,
        48,
        59,
        38,
        35,
        120,
        68,
        56,
        48,
        49,
        59,
        38,
        35,
        120,
        68,
        70,
        70,
        69,
        59,
        38,
        35,
        120,
        68,
        70,
        70,
        70,
        59,
        38,
        35,
        120,
        69,
        48,
        48,
        48,
        59
      ],
      "output": [
        {
          "Character": {
            "data": "퟿����"
          }
        }
      ],
      "errors": [
        {
          "code": "SurrogateCharacterReference",
          "location": {
            "line": 1,
            "column": 17
          }
        },
        {
          "code": "SurrogateCharacterReference",
          "location": {
            "line": 1,
            "column": 25
          }
        },
        {
          "code": "SurrogateCharacterReference",
          "location": {
            "line": 1,
            "column": 33
          }
        },
        {
          "code": "SurrogateCharacterReference",
          "location": {
            "line": 1,
            "column": 41
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Uppercase start tag name",
      "input": [
        60,
        88,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "x",
            "attrs": {},
            "self_closing": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Uppercase end tag name",
      "input": [
        60,
        47,
        88,
        62
      ],
      "output": [
        {
          "EndTag": {
            "name": "x"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Uppercase attribute name",
      "input": [
        60,
        120,
        32,
        88,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "x",
            "attrs": {
              "x": ""
            },
            "self_closing": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Tag/attribute name case edge values",
      "input": [
        60,
        120,
        64,
        65,
        90,
        91,
        96,
        97,
        122,
        123,
        32,
        64,
        65,
        90,
        91,
        96,
        97,
        122,
        123,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "x@az[`az{",
            "attrs": {
              "@az[`az{": ""
            },
            "self_closing": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Duplicate different-case attributes",
      "input": [
        60,
        120,
        32,
        120,
        61,
        49,
        32,
        120,
        61,
        50,
        32,
        88,
        61,
        51,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "x",
            "attrs": {
              "x": "1"
            },
            "self_closing": false
          }
        }
      ],
      "errors": [
        {
          "code": "DuplicateAttribute",
          "location": {
            "line": 1,
            "column": 9
          }
        },
        {
          "code": "DuplicateAttribute",
          "location": {
            "line": 1,
            "column": 13
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Uppercase close tag attributes",
      "input": [
        60,
        47,
        120,
        32,
        88,
        62
      ],
      "output": [
        {
          "EndTag": {
            "name": "x"
          }
        }
      ],
      "errors": [
        {
          "code": "EndTagWithAttributes",
          "location": {
            "line": 1,
            "column": 6
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Duplicate close tag attributes",
      "input": [
        60,
        47,
        120,
        32,
        120,
        32,
        120,
        62
      ],
      "output": [
        {
          "EndTag": {
            "name": "x"
          }
        }
      ],
      "errors": [
        {
          "code": "DuplicateAttribute",
          "location": {
            "line": 1,
            "column": 8
          }
        },
        {
          "code": "EndTagWithAttributes",
          "location": {
            "line": 1,
            "column": 8
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Permitted slash",
      "input": [
        60,
        98,
        114,
        47,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "br",
            "attrs": {},
            "self_closing": true
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Non-permitted slash",
      "input": [
        60,
        120,
        114,
        47,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "xr",
            "attrs": {},
            "self_closing": true
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Permitted slash but in close tag",
      "input": [
        60,
        47,
        98,
        114,
        47,
        62
      ],
      "output": [
        {
          "EndTag": {
            "name": "br"
          }
        }
      ],
      "errors": [
        {
          "code": "EndTagWithTrailingSolidus",
          "location": {
            "line": 1,
            "column": 6
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Doctype public case-sensitivity (1)",
      "input": [
        60,
        33,
        68,
        111,
        67,
        116,
        89,
        112,
        69,
        32,
        72,
        116,
        77,
        108,
        32,
        80,
        117,
        66,
        108,
        73,
        99,
        32,
        34,
        65,
        98,
        67,
        34,
        32,
        34,
        88,
        121,
        90,
        34,
        62
      ],
      "output": [
        {
          "Doctype": {
            "name": "html",
            "public_id": "AbC",
            "system_id": "XyZ",
            "force_quirks": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Doctype public case-sensitivity (2)",
      "input": [
        60,
        33,
        100,
        79,
        99,
        84,
        121,
        80,
        101,
        32,
        104,
        84,
        109,
        76,
        32,
        112,
        85,
        98,
        76,
        105,
        67,
        32,
        34,
        97,
        66,
        99,
        34,
        32,
        34,
        120,
        89,
        122,
        34,
        62
      ],
      "output": [
        {
          "Doctype": {
            "name": "html",
            "public_id": "aBc",
            "system_id": "xYz",
            "force_quirks": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Doctype system case-sensitivity (1)",
      "input": [
        60,
        33,
        68,
        111,
        67,
        116,
        89,
        112,
        69,
        32,
        72,
        116,
        77,
        108,
        32,
        83,
        121,
        83,
        116,
        69,
        109,
        32,
        34,
        88,
        121,
        90,
        34,
        62
      ],
      "output": [
        {
          "Doctype": {
            "name": "html",
            "public_id": null,
            "system_id": "XyZ",
            "force_quirks": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Doctype system case-sensitivity (2)",
      "input": [
        60,
        33,
        100,
        79,
        99,
        84,
        121,
        80,
        101,
        32,
        104,
        84,
        109,
        76,
        32,
        115,
        89,
        115,
        84,
        101,
        77,
        32,
        34,
        120,
        89,
        122,
        34,
        62
      ],
      "output": [
        {
          "Doctype": {
            "name": "html",
            "public_id": null,
            "system_id": "xYz",
            "force_quirks": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "U+0000 in lookahead region after non-matching character",
      "input": [
        60,
        33,
        100,
        111,
        99,
        62,
        0
      ],
      "output": [
        {
          "Comment": {
            "data": "doc"
          }
        },
        {
          "Character": {
            "data": "\u0000"
          }
        }
      ],
      "errors": [
        {
          "code": "IncorrectlyOpenedComment",
          "location": {
            "line": 1,
            "column": 3
          }
        },
        {
          "code": "UnexpectedNullCharacter",
          "location": {
            "line": 1,
            "column": 7
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "U+0000 in lookahead region",
      "input": [
        60,
        33,
        100,
        111,
        99,
        0
      ],
      "output": [
        {
          "Comment": {
            "data": "doc�"
          }
        }
      ],
      "errors": [
        {
          "code": "IncorrectlyOpenedComment",
          "location": {
            "line": 1,
            "column": 3
          }
        },
        {
          "code": "UnexpectedNullCharacter",
          "location": {
            "line": 1,
            "column": 6
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "U+0080 in lookahead region",
      "input": [
        60,
        33,
        100,
        111,
        99,
        128
      ],
      "output": [
        {
          "Comment": {
            "data": "doc"
          }
        }
      ],
      "errors": [
        {
          "code": "IncorrectlyOpenedComment",
          "location": {
            "line": 1,
            "column": 3
          }
        },
        {
          "code": "ControlCharacterInInputStream",
          "location": {
            "line": 1,
            "column": 6
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "U+FDD1 in lookahead region",
      "input": [
        60,
        33,
        100,
        111,
        99,
        64977
      ],
      "output": [
        {
          "Comment": {
            "data": "doc﷑"
          }
        }
      ],
      "errors": [
        {
          "code": "IncorrectlyOpenedComment",
          "location": {
            "line": 1,
            "column": 3
          }
        },
        {
          "code": "NoncharacterInInputStream",
          "location": {
            "line": 1,
            "column": 6
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "U+1FFFF in lookahead region",
      "input": [
        60,
        33,
        100,
        111,
        99,
        55359,
        57343
      ],
      "output": [
        {
          "Comment": {
            "data": "doc🿿"
          }
        }
      ],
      "errors": [
        {
          "code": "IncorrectlyOpenedComment",
          "location": {
            "line": 1,
            "column": 3
          }
        },
        {
          "code": "NoncharacterInInputStream",
          "location": {
            "line": 1,
            "column": 6
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "CR followed by non-LF",
      "input": [
        13,
        63
      ],
      "output": [
        {
          "Character": {
            "data": "\n?"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "CR at EOF",
      "input": [
        13
      ],
      "output": [
        {
          "Character": {
            "data": "\n"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "LF at EOF",
      "input": [
        10
      ],
      "output": [
        {
          "Character": {
            "data": "\n"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "CR LF",
      "input": [
        13,
        10
      ],
      "output": [
        {
          "Character": {
            "data": "\n"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "CR CR",
      "input": [
        13,
        13
      ],
      "output": [
        {
          "Character": {
            "data": "\n\n"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "LF LF",
      "input": [
        10,
        10
      ],
      "output": [
        {
          "Character": {
            "data": "\n\n"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "LF CR",
      "input": [
        10,
        13
      ],
      "output": [
        {
          "Character": {
            "data": "\n\n"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "text CR CR CR text",
      "input": [
        116,
        101,
        120,
        116,
        13,
        13,
        13,
        116,
        101,
        120,
        116
      ],
      "output": [
        {
          "Character": {
            "data": "text\n\n\ntext"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Doctype publik",
      "input": [
        60,
        33,
        68,
        79,
        67,
        84,
        89,
        80,
        69,
        32,
        104,
        116,
        109,
        108,
        32,
        80,
        85,
        66,
        76,
        73,
        75,
        32,
        34,
        65,
        98,
        67,
        34,
        32,
        34,
        88,
        121,
        90,
        34,
        62
      ],
      "output": [
        {
          "Doctype": {
            "name": "html",
            "public_id": null,
            "system_id": null,
            "force_quirks": true
          }
        }
      ],
      "errors": [
        {
          "code": "InvalidCharacterSequenceAfterDoctypeName",
          "location": {
            "line": 1,
            "column": 16
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Doctype publi",
      "input": [
        60,
        33,
        68,
        79,
        67,
        84,
        89,
        80,
        69,
        32,
        104,
        116,
        109,
        108,
        32,
        80,
        85,
        66,
        76,
        73
      ],
      "output": [
        {
          "Doctype": {
            "name": "html",
            "public_id": null,
            "system_id": null,
            "force_quirks": true
          }
        }
      ],
      "errors": [
        {
          "code": "InvalidCharacterSequenceAfterDoctypeName",
          "location": {
            "line": 1,
            "column": 16
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Doctype sistem",
      "input": [
        60,
        33,
        68,
        79,
        67,
        84,
        89,
        80,
        69,
        32,
        104,
        116,
        109,
        108,
        32,
        83,
        73,
        83,
        84,
        69,
        77,
        32,
        34,
        65,
        98,
        67,
        34,
        62
      ],
      "output": [
        {
          "Doctype": {
            "name": "html",
            "public_id": null,
            "system_id": null,
            "force_quirks": true
          }
        }
      ],
      "errors": [
        {
          "code": "InvalidCharacterSequenceAfterDoctypeName",
          "location": {
            "line": 1,
            "column": 16
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Doctype sys",
      "input": [
        60,
        33,
        68,
        79,
        67,
        84,
        89,
        80,
        69,
        32,
        104,
        116,
        109,
        108,
        32,
        83,
        89,
        83
      ],
      "output": [
        {
          "Doctype": {
            "name": "html",
            "public_id": null,
            "system_id": null,
            "force_quirks": true
          }
        }
      ],
      "errors": [
        {
          "code": "InvalidCharacterSequenceAfterDoctypeName",
          "location": {
            "line": 1,
            "column": 16
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Doctype html x>text",
      "input": [
        60,
        33,
        68,
        79,
        67,
        84,
        89,
        80,
        69,
        32,
        104,
        116,
        109,
        108,
        32,
        120,
        62,
        116,
        101,
        120,
        116
      ],
      "output": [
        {
          "Doctype": {
            "name": "html",
            "public_id": null,
            "system_id": null,
            "force_quirks": true
          }
        },
        {
          "Character": {
            "data": "text"
          }
        }
      ],
      "errors": [
        {
          "code": "InvalidCharacterSequenceAfterDoctypeName",
          "location": {
            "line": 1,
            "column": 16
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Grave accent in unquoted attribute",
      "input": [
        60,
        97,
        32,
        97,
        61,
        97,
        97,
        96,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "a",
            "attrs": {
              "a": "aa`"
            },
            "self_closing": false
          }
        }
      ],
      "errors": [
        {
          "code": "UnexpectedCharacterInUnquotedAttributeValue",
          "location": {
            "line": 1,
            "column": 8
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "EOF in tag name state ",
      "input": [
        60,
        97
      ],
      "output": [],
      "errors": [
        {
          "code": "EofInTag",
          "location": {
            "line": 1,
            "column": 3
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "EOF in before attribute name state",
      "input": [
        60,
        97,
        32
      ],
      "output": [],
      "errors": [
        {
          "code": "EofInTag",
          "location": {
            "line": 1,
            "column": 4
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "EOF in attribute name state",
      "input": [
        60,
        97,
        32,
        97
      ],
      "output": [],
      "errors": [
        {
          "code": "EofInTag",
          "location": {
            "line": 1,
            "column": 5
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "EOF in after attribute name state",
      "input": [
        60,
        97,
        32,
        97,
        32
      ],
      "output": [],
      "errors": [
        {
          "code": "EofInTag",
          "location": {
            "line": 1,
            "column": 6
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "EOF in before attribute value state",
      "input": [
        60,
        97,
        32,
        97,
        32,
        61
      ],
      "output": [],
      "errors": [
        {
          "code": "EofInTag",
          "location": {
            "line": 1,
            "column": 7
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "EOF in attribute value (double quoted) state",
      "input": [
        60,
        97,
        32,
        97,
        32,
        61,
        34,
        97
      ],
      "output": [],
      "errors": [
        {
          "code": "EofInTag",
          "location": {
            "line": 1,
            "column": 9
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "EOF in attribute value (single quoted) state",
      "input": [
        60,
        97,
        32,
        97,
        32,
        61,
        39,
        97
      ],
      "output": [],
      "errors": [
        {
          "code": "EofInTag",
          "location": {
            "line": 1,
            "column": 9
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "EOF in attribute value (unquoted) state",
      "input": [
        60,
        97,
        32,
        97,
        32,
        61,
        97
      ],
      "output": [],
      "errors": [
        {
          "code": "EofInTag",
          "location": {
            "line": 1,
            "column": 8
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "EOF in after attribute value state",
      "input": [
        60,
        97,
        32,
        97,
        32,
        61,
        39,
        97,
        39
      ],
      "output": [],
      "errors": [
        {
          "code": "EofInTag",
          "location": {
            "line": 1,
            "column": 10
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    }
  ],
  "name": "test4"
}
