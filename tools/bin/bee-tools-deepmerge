#!/usr/bin/env -S deno run -A --unstable

'use strict';

import { deepmerge, path, yaml } from '../deps.js';
import { parseCommand } from '../lib/cli.js';

const PROGNAME = path.basename(Deno.mainModule);

const DOC = `
Merge structured data stored in files like JSON and YAML.

Usage:
  ${PROGNAME} [options] <files>...
  ${PROGNAME} -h | --help

Options:
  -f, --format=<format>  [default: json]
    json or yaml.

Arguments:
  <files>
    Files to be merged.
`.trim();

const { options, args } = await parseCommand({
  doc: DOC,
  conv: async (name, value) => {
    switch (name) {
    case '--format':
      if (!['json', 'yaml'].includes(value)) {
        throw new Error('json or yaml');
      }
      return value;
    default:
      return value;
    }
  },
});

Deno.exit(await run(args.files, options));

async function run(files, options) {
  let parse, stringify;
  switch (options.format) {
  case 'json':
    parse = JSON.parse;
    stringify = JSON.stringify;
    break;
  case 'yaml':
    parse = yaml.parse;
    stringify = (o) => yaml.stringify(o, { lineWidth: -1 });
    break;
  }
  console.log(stringify(deepmerge(
    ...await Promise.all(files.map(async (file) => parse(await Deno.readTextFile(file)))))));
}

// Local Variables:
// mode: js
// End:
