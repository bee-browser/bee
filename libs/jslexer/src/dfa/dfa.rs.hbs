// DO NOT EDIT THIS FILE BY HAND.
//
// This file was automagically generated by:
// {{@command}}

use crate::tokens::TokenKind;
use crate::cursor::SourceCursor;

pub fn recognize<'a>(cursor: &mut SourceCursor<'a>) -> TokenKind {
    let mut token = TokenKind::Eof;
    let mut state = State::default();

    while let Some(ch) = cursor.get() {
        tracing::debug!(?state, ?ch);
        let cc = match CharClass::try_from(ch) {
            Ok(cc) => cc,
            Err(_) => break,
        };
        state = state.next_state(cc);
        tracing::debug!(?cc, next_state = ?state, next_state.invalid = state.is_invalid());
        if state.is_invalid() {
            break;
        }
        if state.lookahead() {
            cursor.lookahead();
        } else {
            cursor.consume();
        }
        if let Some(kind) = state.accept() {
            token = kind;
            tracing::debug!(candidate = ?token);
        }
    }
    token
}

#[derive(Clone, Copy, Debug)]
struct CharClass(u8);

impl TryFrom<char> for CharClass {
    type Error = ();

    fn try_from(ch: char) -> Result<Self, Self::Error> {
        let c = ch as usize;
        if c < 128 {
            return Ok(CharClass(ASCII_TABLE[c]));
        }
        {{#each ccNonAsciiList}}
        {{#if codePoint}}
        if c == {{codePoint}} {
            return Ok(CharClass({{charClass}}));
        }
        {{else}}
        if c >= {{firstCodePoint}} && c <= {{lastCodePoint}} {
            return Ok(CharClass({{charClass}}));
        }
        {{/if}}
        {{/each}}
        Err(())
    }
}

const ASCII_TABLE: [u8; 128] = {{json ccAsciiTable}};

#[derive(Clone, Copy, Debug, Default)]
struct State(u16);

impl State {
    #[inline(always)]
    fn is_invalid(&self) -> bool {
        self.0 == {{length states}}
    }

    #[inline(always)]
    fn next_state(&self, cc: CharClass) -> State {
        State(TRANSITION_TABLE[self.0 as usize][cc.0 as usize])
    }

    #[inline(always)]
    fn lookahead(&self) -> bool {
        LOOKAHEAD_TABLE[self.0 as usize]
    }

    #[inline(always)]
    fn accept(&self) -> Option<TokenKind> {
        ACCEPT_TABLE[self.0 as usize]
    }
}

const TRANSITION_TABLE: [[u16; {{length charClasses}}]; {{length states}}] = [
    {{#each states}}
    {{json transitions}},
    {{/each}}
];

const ACCEPT_TABLE: [Option<TokenKind>; {{length states}}] = [
    {{#each states}}
    {{#if accept}}
    Some(TokenKind::{{pascalCase accept}}),
    {{else}}
    None,
    {{/if}}
    {{/each}}
];

const LOOKAHEAD_TABLE: [bool; {{length states}}] = [
    {{#each states}}
    {{#if lookahead}}
    true,
    {{else}}
    false,
    {{/if}}
    {{/each}}
];
