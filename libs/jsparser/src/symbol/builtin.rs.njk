// DO NOT EDIT THIS FILE BY HAND.
//
// This file was automagically generated with:
// template: {{ template }}

use super::Symbol;
use super::SymbolName;
use super::SymbolRegistry;

impl Symbol {
    {%- for symbol in data %}
    pub const {{ symbol.rustName }}: Self = Self({{ loop.index }});
    {%- endfor %}

    pub fn is_hidden(&self) -> bool {
        self.0 <= {{ data | selectattr('hidden') | length }}
    }
}

impl SymbolRegistry {
    pub(super) fn register_builtin_symbols(&mut self) {
        {%- for symbol in data %}
        self.register_builtin_symbol(Symbol::{{ symbol.rustName }}, names::{{ symbol.rustName }}, "{{ symbol.name }}");
        {%- endfor %}
    }

    fn register_builtin_symbol(&mut self, symbol: Symbol, name: &'static [u16], label: &str) {
        let actual = self.intern(SymbolName::Static(name));
        debug_assert_eq!(actual, symbol, "{label}");
    }
}

pub mod names {
    {%- for symbol in data %}
    pub const {{ symbol.rustName }}: &[u16] = &[{{ symbol.codeUnits | join(", ") }}];
    {%- endfor %}
}
