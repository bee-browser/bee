// DO NOT EDIT THIS FILE BY HAND.
//
// This file was automagically generated by:
// bee-tools-codegen --no-escape --input-stdin dfa/dfa.rs.hbs

use super::SourceCursor;
use super::Token;
use super::TokenKind;

pub fn recognize<'a>(cursor: &SourceCursor<'a>) -> Token<'a> {
    let mut token = Token::default();

    let mut state = State::default();
    tracing::trace!(opcode = "init", ?state);

    let mut lexeme_end = 0;
    for (i, ch) in cursor.chars() {
        let unicode_set = match UnicodeSet::try_from(ch) {
            Ok(unicode_set) => unicode_set,
            Err(_) => {
                tracing::error!(invalid_char = ?ch, pos = cursor.pos() + i);
                break;
            }
        };
        state = state.next_state(unicode_set);
        tracing::trace!(opcode = "next", ?state, char = ?ch, ?unicode_set, pos = cursor.pos() + i);
        if state.is_invalid() {
            break;
        }
        if !state.lookahead() {
            debug_assert_eq!(lexeme_end, i);
            lexeme_end += ch.len_utf8();
        }
        if let Some(kind) = state.accept() {
            token.kind = kind;
            token.lexeme = cursor.lexeme(lexeme_end);
            tracing::trace!(opcode = "accept", ?token.kind, ?token.lexeme);
        }
    }

    token
}

#[derive(Clone, Copy, Debug)]
struct UnicodeSet(u8);

impl TryFrom<char> for UnicodeSet {
    type Error = ();

    fn try_from(ch: char) -> Result<Self, Self::Error> {
        let c = ch as usize;
        if c < 128 {
            return Ok(UnicodeSet(ASCII_TABLE[c]));
        }
        if c == 160 {
            return Ok(UnicodeSet(7));
        }
        if c == 5760 {
            return Ok(UnicodeSet(7));
        }
        if c >= 8192 && c <= 8202 {
            return Ok(UnicodeSet(7));
        }
        if c == 8207 {
            return Ok(UnicodeSet(7));
        }
        if c == 8287 {
            return Ok(UnicodeSet(7));
        }
        if c == 65279 {
            return Ok(UnicodeSet(7));
        }
        if c >= 8232 && c <= 8233 {
            return Ok(UnicodeSet(9));
        }
        if c >= 8204 && c <= 8205 {
            return Ok(UnicodeSet(69));
        }
        if c >= 128 && c <= 159 {
            return Ok(UnicodeSet(70));
        }
        if c >= 161 && c <= 5759 {
            return Ok(UnicodeSet(70));
        }
        if c >= 5761 && c <= 8191 {
            return Ok(UnicodeSet(70));
        }
        if c == 8203 {
            return Ok(UnicodeSet(70));
        }
        if c == 8206 {
            return Ok(UnicodeSet(70));
        }
        if c >= 8208 && c <= 8231 {
            return Ok(UnicodeSet(70));
        }
        if c >= 8234 && c <= 8286 {
            return Ok(UnicodeSet(70));
        }
        if c >= 8288 && c <= 65278 {
            return Ok(UnicodeSet(70));
        }
        if c >= 65280 && c <= 1114111 {
            return Ok(UnicodeSet(70));
        }
        Err(())
    }
}

const ASCII_TABLE: [u8; 128] = [
    70, 70, 70, 70, 70, 70, 70, 70, 70, 7, 8, 7, 7, 0, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
    70, 70, 70, 70, 70, 70, 70, 7, 58, 4, 3, 23, 54, 55, 5, 42, 43, 53, 51, 48, 52, 46, 68, 67, 64,
    65, 65, 66, 66, 66, 66, 63, 63, 61, 47, 49, 62, 50, 60, 70, 15, 14, 15, 15, 13, 15, 19, 19, 19,
    19, 19, 19, 19, 19, 17, 19, 19, 19, 19, 19, 19, 19, 19, 18, 19, 19, 44, 1, 45, 57, 16, 6, 37,
    10, 27, 40, 26, 35, 34, 20, 39, 19, 21, 32, 28, 33, 38, 24, 19, 11, 30, 31, 12, 36, 29, 22, 25,
    19, 41, 56, 2, 59, 70,
];

#[derive(Clone, Copy, Debug, Default)]
struct State(u16);

impl State {
    #[inline(always)]
    fn is_invalid(&self) -> bool {
        self.0 == 535
    }

    #[inline(always)]
    fn next_state(&self, unicode_set: UnicodeSet) -> State {
        State(TRANSITION_TABLE[self.0 as usize][unicode_set.0 as usize])
    }

    #[inline(always)]
    fn lookahead(&self) -> bool {
        LOOKAHEAD_TABLE[self.0 as usize]
    }

    #[inline(always)]
    fn accept(&self) -> Option<TokenKind> {
        ACCEPT_TABLE[self.0 as usize]
    }
}

const TRANSITION_TABLE: [[u16; 71]; 535] = [
    // State(0):
    //   @start
    // Transitions:
    //   [<CR>] => State(1)
    //   [\] => State(2)
    //   [}] => State(4)
    //   [#] => State(5)
    //   ["] => State(6)
    //   ['] => State(7)
    //   [`] => State(8)
    //   [<HT>, <VT>..<FF>, <SP>, U+00A0, U+1680, U+2000..U+200A, U+200F, U+205F, U+FEFF] => State(228):WhiteSpaceSequence
    //   [<LF>, U+2028..U+2029] => State(229):LineTerminatorSequence
    //   [b] => State(287):IdentifierName
    //   [r] => State(288):IdentifierName
    //   [$, A..Z, _, h, j..k, q, u, x, z] => State(289):IdentifierName
    //   [p] => State(296):IdentifierName
    //   [y] => State(306):IdentifierName
    //   [e] => State(328):IdentifierName
    //   [c] => State(329):IdentifierName
    //   [m] => State(330):IdentifierName
    //   [w] => State(331):IdentifierName
    //   [s] => State(361):IdentifierName
    //   [t] => State(362):IdentifierName
    //   [l] => State(363):IdentifierName
    //   [n] => State(364):IdentifierName
    //   [g] => State(365):IdentifierName
    //   [f] => State(366):IdentifierName
    //   [v] => State(367):IdentifierName
    //   [a] => State(409):IdentifierName
    //   [o] => State(410):IdentifierName
    //   [i] => State(411):IdentifierName
    //   [d] => State(412):IdentifierName
    //   [{] => State(464):LBRACE
    //   [(] => State(465):LPAREN
    //   [)] => State(466):RPAREN
    //   [[] => State(467):LBRACK
    //   []] => State(468):RBRACK
    //   [.] => State(469):DOT
    //   [;] => State(471):SEMI_COLON
    //   [,] => State(472):COMMA
    //   [<] => State(473):LT
    //   [>] => State(474):GT
    //   [+] => State(481):ADD
    //   [-] => State(482):SUB
    //   [*] => State(483):MUL
    //   [%] => State(484):MOD
    //   [&] => State(491):BIT_AND
    //   [|] => State(492):BIT_OR
    //   [^] => State(493):BIT_XOR
    //   [!] => State(494):NOT
    //   [~] => State(495):BIT_NOT
    //   [?] => State(499):CONDITIONAL
    //   [:] => State(500):COLON
    //   [=] => State(501):ASSIGN
    //   [1..9] => State(517):NumericLiteral
    //   [0] => State(518):NumericLiteral
    //   [/] => State(531):DIV
    [
        1, 2, 4, 5, 6, 7, 8, 228, 229, 229, 287, 288, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 296, 306, 328, 329, 330, 331, 361, 362, 363, 364, 365, 366, 367, 409, 410,
        411, 412, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 481, 482, 483, 484, 491, 492,
        493, 494, 495, 499, 500, 501, 517, 517, 517, 517, 518, 531, 535, 535,
    ],
    // State(1):
    //   LineTerminatorSequence -> [<CR>] . [<LF>]
    // Transitions:
    //   [<LF>] => State(229):LineTerminatorSequence
    //   [<NUL>..<HT>, <VT>..U+10FFFF] => State(230):LineTerminatorSequence?
    [
        230, 230, 230, 230, 230, 230, 230, 230, 229, 230, 230, 230, 230, 230, 230, 230, 230, 230,
        230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
        230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
        230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
    ],
    // State(2):
    //   IdentifierStart -> [\] . UnicodeEscapeSequence
    //   UnicodeEscapeSequence -> . [u] Hex4Digits
    //   UnicodeEscapeSequence -> . [u] [{] CodePoint [}]
    //   IdentifierPart -> [\] . UnicodeEscapeSequence
    // Transitions:
    //   [u] => State(14)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 14, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(3):
    //   IdentifierStart -> [\] . UnicodeEscapeSequence
    //   UnicodeEscapeSequence -> . [u] Hex4Digits
    //   UnicodeEscapeSequence -> . [u] [{] CodePoint [}]
    //   IdentifierPart -> [\] . UnicodeEscapeSequence
    // Transitions:
    //   [u] => State(15)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 15, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(4):
    //   TemplateMiddle -> [}] . [$] [{]
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   TemplateMiddle -> [}] . TemplateCharacters [$] [{]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] !?[{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] !?[<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateTail -> [}] . [`]
    //   TemplateTail -> [}] . TemplateCharacters [`]
    //   TemplateMiddle -> [}] TemplateCharacters . [$] [{]
    //   TemplateTail -> [}] TemplateCharacters . [`]
    // Transitions:
    //   [<NUL>..<FF>, <SO>..#, %..[, ].._, a..U+10FFFF] => State(4)
    //   [\] => State(10)
    //   [<CR>] => State(25)
    //   [$] => State(29)
    //   [`] => State(534):TemplateTail
    [
        25, 10, 4, 4, 4, 4, 534, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    ],
    // State(5):
    //   IdentifierName -> . IdentifierName IdentifierPart
    //   PrivateIdentifier -> [#] . IdentifierName
    //   IdentifierName -> . IdentifierStart
    //   IdentifierStart -> . IdentifierStartChar
    //   IdentifierStartChar -> . UnicodeIDStart
    //   UnicodeIDStart -> . [a..z A..Z $ _]
    //   IdentifierStartChar -> . [$]
    //   IdentifierStartChar -> . [_]
    //   IdentifierStart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, A..Z, _, a..z] => State(462):PrivateIdentifier
    [
        535, 3, 535, 535, 535, 535, 535, 535, 535, 535, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(6):
    //   StringLiteral -> ["] . ["]
    //   DoubleStringCharacters -> DoubleStringCharacter . DoubleStringCharacters
    //   StringLiteral -> ["] . DoubleStringCharacters ["]
    //   DoubleStringCharacters -> . DoubleStringCharacter
    //   DoubleStringCharacter -> . [SourceCharacter -" -\ -LineTerminator]
    //   DoubleStringCharacter -> . [<LS>]
    //   DoubleStringCharacter -> . [<PS>]
    //   DoubleStringCharacter -> . [\] EscapeSequence
    //   DoubleStringCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   DoubleStringCharacters -> . DoubleStringCharacter DoubleStringCharacters
    //   StringLiteral -> ["] DoubleStringCharacters . ["]
    // Transitions:
    //   [<NUL>..<HT>, <VT>..<FF>, <SO>..!, #..[, ]..U+10FFFF] => State(6)
    //   [\] => State(11)
    //   ["] => State(528):StringLiteral
    [
        535, 11, 6, 6, 528, 6, 6, 6, 535, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    ],
    // State(7):
    //   StringLiteral -> ['] . [']
    //   SingleStringCharacters -> SingleStringCharacter . SingleStringCharacters
    //   StringLiteral -> ['] . SingleStringCharacters [']
    //   SingleStringCharacters -> . SingleStringCharacter
    //   SingleStringCharacter -> . [SourceCharacter -' -\ -LineTerminator]
    //   SingleStringCharacter -> . [<LS>]
    //   SingleStringCharacter -> . [<PS>]
    //   SingleStringCharacter -> . [\] EscapeSequence
    //   SingleStringCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   SingleStringCharacters -> . SingleStringCharacter SingleStringCharacters
    //   StringLiteral -> ['] SingleStringCharacters . [']
    // Transitions:
    //   [<NUL>..<HT>, <VT>..<FF>, <SO>..&, (..[, ]..U+10FFFF] => State(7)
    //   [\] => State(12)
    //   ['] => State(528):StringLiteral
    [
        535, 12, 7, 7, 7, 528, 7, 7, 535, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    ],
    // State(8):
    //   NoSubstitutionTemplate -> [`] . [`]
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] !?[{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] !?[<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateHead -> [`] . [$] [{]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    // Transitions:
    //   [<NUL>..<FF>, <SO>..#, %..[, ].._, a..U+10FFFF] => State(8)
    //   [\] => State(13)
    //   [<CR>] => State(26)
    //   [$] => State(32)
    //   [`] => State(529):NoSubstitutionTemplate
    [
        26, 13, 8, 8, 8, 8, 529, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 32, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
    ],
    // State(9):
    //   MultiLineComment -> [/] [*] . [*] [/]
    //   MultiLineCommentChars -> MultiLineNotAsteriskChar . MultiLineCommentChars
    //   PostAsteriskCommentChars -> MultiLineNotForwardSlashOrAsteriskChar . MultiLineCommentChars
    //   MultiLineComment -> [/] [*] . MultiLineCommentChars [*] [/]
    //   MultiLineCommentChars -> . MultiLineNotAsteriskChar
    //   MultiLineNotAsteriskChar -> . [SourceCharacter -*]
    //   MultiLineCommentChars -> . MultiLineNotAsteriskChar MultiLineCommentChars
    //   MultiLineCommentChars -> . [*]
    //   MultiLineCommentChars -> . [*] PostAsteriskCommentChars
    //   MultiLineComment -> [/] [*] MultiLineCommentChars . [*] [/]
    // Transitions:
    //   [<NUL>..), +..U+10FFFF] => State(9)
    //   [*] => State(33)
    [
        9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
        9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 33, 9, 9, 9, 9, 9, 9,
        9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
    ],
    // State(10):
    //   TemplateCharacter -> [\] . TemplateEscapeSequence
    //   TemplateEscapeSequence -> . CharacterEscapeSequence
    //   CharacterEscapeSequence -> . SingleEscapeCharacter
    //   SingleEscapeCharacter -> . [' " \ b f n r t v]
    //   CharacterEscapeSequence -> . NonEscapeCharacter
    //   NonEscapeCharacter -> . [SourceCharacter -EscapeCharacter -LineTerminator]
    //   TemplateEscapeSequence -> . [0] !?[DecimalDigit]
    //   TemplateEscapeSequence -> . HexEscapeSequence
    //   HexEscapeSequence -> . [x] HexDigit HexDigit
    //   TemplateEscapeSequence -> . UnicodeEscapeSequence
    //   UnicodeEscapeSequence -> . [u] Hex4Digits
    //   UnicodeEscapeSequence -> . [u] [{] CodePoint [}]
    //   TemplateCharacter -> [\] . NotEscapeSequence
    //   NotEscapeSequence -> . [0] DecimalDigit
    //   NotEscapeSequence -> . [DecimalDigit -0]
    //   NotEscapeSequence -> . [x] !?[HexDigit]
    //   NotEscapeSequence -> . [x] HexDigit !?[HexDigit]
    //   NotEscapeSequence -> . [u] !?[HexDigit] !?[{]
    //   NotEscapeSequence -> . [u] HexDigit !?[HexDigit]
    //   NotEscapeSequence -> . [u] HexDigit HexDigit !?[HexDigit]
    //   NotEscapeSequence -> . [u] HexDigit HexDigit HexDigit !?[HexDigit]
    //   NotEscapeSequence -> . [u] [{] !?[HexDigit]
    //   NotEscapeSequence -> . [u] [{] NotCodePoint !?[HexDigit]
    //   NotEscapeSequence -> . [u] [{] CodePoint !?[HexDigit] !?[}]
    //   LineContinuation -> [\] . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] !?[<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    // Transitions:
    //   [<NUL>..<FF>, <SO>../, 1..t, v..w, y..U+10FFFF] => State(4)
    //   [<CR>] => State(25)
    //   [u] => State(80)
    //   [x] => State(82)
    //   [0] => State(114)
    [
        25, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 80, 4, 4, 4, 4, 4, 4, 4, 4, 4, 82, 4, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 114, 4, 4, 4,
    ],
    // State(11):
    //   DoubleStringCharacter -> [\] . EscapeSequence
    //   EscapeSequence -> . CharacterEscapeSequence
    //   CharacterEscapeSequence -> . SingleEscapeCharacter
    //   SingleEscapeCharacter -> . [' " \ b f n r t v]
    //   CharacterEscapeSequence -> . NonEscapeCharacter
    //   NonEscapeCharacter -> . [SourceCharacter -EscapeCharacter -LineTerminator]
    //   EscapeSequence -> . [0] !?[DecimalDigit]
    //   EscapeSequence -> . LegacyOctalEscapeSequence
    //   LegacyOctalEscapeSequence -> . [0] ?[8 9]
    //   LegacyOctalEscapeSequence -> . NonZeroOctalDigit !?[OctalDigit]
    //   NonZeroOctalDigit -> . [OctalDigit -0]
    //   LegacyOctalEscapeSequence -> . ZeroToThree OctalDigit !?[OctalDigit]
    //   ZeroToThree -> . [0 1 2 3]
    //   LegacyOctalEscapeSequence -> . FourToSeven OctalDigit
    //   FourToSeven -> . [4 5 6 7]
    //   LegacyOctalEscapeSequence -> . ZeroToThree OctalDigit OctalDigit
    //   EscapeSequence -> . NonOctalDecimalEscapeSequence
    //   NonOctalDecimalEscapeSequence -> . [8 9]
    //   EscapeSequence -> . HexEscapeSequence
    //   HexEscapeSequence -> . [x] HexDigit HexDigit
    //   EscapeSequence -> . UnicodeEscapeSequence
    //   UnicodeEscapeSequence -> . [u] Hex4Digits
    //   UnicodeEscapeSequence -> . [u] [{] CodePoint [}]
    //   LineContinuation -> [\] . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] !?[<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    // Transitions:
    //   [<NUL>..<FF>, <SO>../, 8..t, v..w, y..U+10FFFF] => State(6)
    //   [u] => State(16)
    //   [<CR>] => State(27)
    //   [x] => State(35)
    //   [0..3] => State(116)
    //   [4..7] => State(117)
    [
        27, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 16, 6, 6, 6, 6, 6, 6, 6, 6, 6, 35, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 116, 116, 117, 116, 6, 6, 6,
    ],
    // State(12):
    //   SingleStringCharacter -> [\] . EscapeSequence
    //   EscapeSequence -> . CharacterEscapeSequence
    //   CharacterEscapeSequence -> . SingleEscapeCharacter
    //   SingleEscapeCharacter -> . [' " \ b f n r t v]
    //   CharacterEscapeSequence -> . NonEscapeCharacter
    //   NonEscapeCharacter -> . [SourceCharacter -EscapeCharacter -LineTerminator]
    //   EscapeSequence -> . [0] !?[DecimalDigit]
    //   EscapeSequence -> . LegacyOctalEscapeSequence
    //   LegacyOctalEscapeSequence -> . [0] ?[8 9]
    //   LegacyOctalEscapeSequence -> . NonZeroOctalDigit !?[OctalDigit]
    //   NonZeroOctalDigit -> . [OctalDigit -0]
    //   LegacyOctalEscapeSequence -> . ZeroToThree OctalDigit !?[OctalDigit]
    //   ZeroToThree -> . [0 1 2 3]
    //   LegacyOctalEscapeSequence -> . FourToSeven OctalDigit
    //   FourToSeven -> . [4 5 6 7]
    //   LegacyOctalEscapeSequence -> . ZeroToThree OctalDigit OctalDigit
    //   EscapeSequence -> . NonOctalDecimalEscapeSequence
    //   NonOctalDecimalEscapeSequence -> . [8 9]
    //   EscapeSequence -> . HexEscapeSequence
    //   HexEscapeSequence -> . [x] HexDigit HexDigit
    //   EscapeSequence -> . UnicodeEscapeSequence
    //   UnicodeEscapeSequence -> . [u] Hex4Digits
    //   UnicodeEscapeSequence -> . [u] [{] CodePoint [}]
    //   LineContinuation -> [\] . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] !?[<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    // Transitions:
    //   [<NUL>..<FF>, <SO>../, 8..t, v..w, y..U+10FFFF] => State(7)
    //   [u] => State(17)
    //   [<CR>] => State(28)
    //   [x] => State(36)
    //   [0..3] => State(118)
    //   [4..7] => State(119)
    [
        28, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 17, 7, 7, 7, 7, 7, 7, 7, 7, 7, 36, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 118, 118, 119, 118, 7, 7, 7,
    ],
    // State(13):
    //   TemplateCharacter -> [\] . TemplateEscapeSequence
    //   TemplateEscapeSequence -> . CharacterEscapeSequence
    //   CharacterEscapeSequence -> . SingleEscapeCharacter
    //   SingleEscapeCharacter -> . [' " \ b f n r t v]
    //   CharacterEscapeSequence -> . NonEscapeCharacter
    //   NonEscapeCharacter -> . [SourceCharacter -EscapeCharacter -LineTerminator]
    //   TemplateEscapeSequence -> . [0] !?[DecimalDigit]
    //   TemplateEscapeSequence -> . HexEscapeSequence
    //   HexEscapeSequence -> . [x] HexDigit HexDigit
    //   TemplateEscapeSequence -> . UnicodeEscapeSequence
    //   UnicodeEscapeSequence -> . [u] Hex4Digits
    //   UnicodeEscapeSequence -> . [u] [{] CodePoint [}]
    //   TemplateCharacter -> [\] . NotEscapeSequence
    //   NotEscapeSequence -> . [0] DecimalDigit
    //   NotEscapeSequence -> . [DecimalDigit -0]
    //   NotEscapeSequence -> . [x] !?[HexDigit]
    //   NotEscapeSequence -> . [x] HexDigit !?[HexDigit]
    //   NotEscapeSequence -> . [u] !?[HexDigit] !?[{]
    //   NotEscapeSequence -> . [u] HexDigit !?[HexDigit]
    //   NotEscapeSequence -> . [u] HexDigit HexDigit !?[HexDigit]
    //   NotEscapeSequence -> . [u] HexDigit HexDigit HexDigit !?[HexDigit]
    //   NotEscapeSequence -> . [u] [{] !?[HexDigit]
    //   NotEscapeSequence -> . [u] [{] NotCodePoint !?[HexDigit]
    //   NotEscapeSequence -> . [u] [{] CodePoint !?[HexDigit] !?[}]
    //   LineContinuation -> [\] . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] !?[<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    // Transitions:
    //   [<NUL>..<FF>, <SO>../, 1..t, v..w, y..U+10FFFF] => State(8)
    //   [<CR>] => State(26)
    //   [u] => State(81)
    //   [x] => State(91)
    //   [0] => State(115)
    [
        26, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 81, 8, 8, 8, 8, 8, 8, 8, 8, 8, 91, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 115, 8, 8, 8,
    ],
    // State(14):
    //   UnicodeEscapeSequence -> [u] . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] . [{] CodePoint [}]
    // Transitions:
    //   [0..9, A..F, a..f] => State(34)
    //   [{] => State(58)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 34, 535, 535, 34, 34, 34, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 34, 34, 535, 535, 535, 535, 535, 535, 535, 34, 535, 34,
        535, 535, 34, 58, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 34, 34, 34, 34, 34, 535, 535, 535,
    ],
    // State(15):
    //   UnicodeEscapeSequence -> [u] . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] . [{] CodePoint [}]
    // Transitions:
    //   [0..9, A..F, a..f] => State(37)
    //   [{] => State(60)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 37, 535, 535, 37, 37, 37, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 37, 37, 535, 535, 535, 535, 535, 535, 535, 37, 535, 37,
        535, 535, 37, 60, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 37, 37, 37, 37, 37, 535, 535, 535,
    ],
    // State(16):
    //   UnicodeEscapeSequence -> [u] . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] . [{] CodePoint [}]
    // Transitions:
    //   [0..9, A..F, a..f] => State(38)
    //   [{] => State(61)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 38, 535, 535, 38, 38, 38, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 38, 38, 535, 535, 535, 535, 535, 535, 535, 38, 535, 38,
        535, 535, 38, 61, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 38, 38, 38, 38, 38, 535, 535, 535,
    ],
    // State(17):
    //   UnicodeEscapeSequence -> [u] . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] . [{] CodePoint [}]
    // Transitions:
    //   [0..9, A..F, a..f] => State(39)
    //   [{] => State(62)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 39, 535, 535, 39, 39, 39, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 39, 39, 535, 535, 535, 535, 535, 535, 535, 39, 535, 39,
        535, 535, 39, 62, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 39, 39, 39, 39, 39, 535, 535, 535,
    ],
    // State(18):
    //   ExponentPart_Sep -> ExponentIndicator . SignedInteger_Sep
    //   DecimalDigits_Sep -> . DecimalDigits_Sep DecimalDigit
    //   DecimalDigits_Sep -> . DecimalDigits_Sep NumericLiteralSeparator DecimalDigit
    //   SignedInteger_Sep -> . DecimalDigits_Sep
    //   DecimalDigits_Sep -> . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   SignedInteger_Sep -> . [+] DecimalDigits_Sep
    //   SignedInteger_Sep -> . [-] DecimalDigits_Sep
    // Transitions:
    //   [+, -] => State(20)
    //   [0..9] => State(524):NumericLiteral
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 20, 20, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 524, 524, 524, 524, 524, 535, 535, 535,
    ],
    // State(19):
    //   DecimalDigits_Sep -> . DecimalDigits_Sep DecimalDigit
    //   DecimalDigits_Sep -> . DecimalDigits_Sep NumericLiteralSeparator DecimalDigit
    //   DecimalIntegerLiteral -> NonZeroDigit NumericLiteralSeparator . DecimalDigits_Sep
    //   DecimalDigits_Sep -> . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   DecimalBigIntegerLiteral -> NonZeroDigit NumericLiteralSeparator . DecimalDigits_Sep BigIntLiteralSuffix
    //   DecimalDigits_Sep -> DecimalDigits_Sep NumericLiteralSeparator . DecimalDigit
    // Transitions:
    //   [0..9] => State(517):NumericLiteral
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 517, 517, 517, 517, 517, 535, 535, 535,
    ],
    // State(20):
    //   DecimalDigits_Sep -> . DecimalDigits_Sep DecimalDigit
    //   DecimalDigits_Sep -> . DecimalDigits_Sep NumericLiteralSeparator DecimalDigit
    //   SignedInteger_Sep -> [+] . DecimalDigits_Sep
    //   DecimalDigits_Sep -> . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   SignedInteger_Sep -> [-] . DecimalDigits_Sep
    //   DecimalDigits_Sep -> DecimalDigits_Sep NumericLiteralSeparator . DecimalDigit
    // Transitions:
    //   [0..9] => State(524):NumericLiteral
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 524, 524, 524, 524, 524, 535, 535, 535,
    ],
    // State(21):
    //   DecimalDigits_Sep -> DecimalDigits_Sep NumericLiteralSeparator . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    // Transitions:
    //   [0..9] => State(523):NumericLiteral
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 523, 523, 523, 523, 523, 535, 535, 535,
    ],
    // State(22):
    //   BinaryDigits_Sep -> . BinaryDigits_Sep BinaryDigit
    //   BinaryDigits_Sep -> . BinaryDigits_Sep NumericLiteralSeparator BinaryDigit
    //   BinaryIntegerLiteral_Sep -> [0] [b] . BinaryDigits_Sep
    //   BinaryDigits_Sep -> . BinaryDigit
    //   BinaryDigit -> . [0 1]
    //   BinaryIntegerLiteral_Sep -> [0] [B] . BinaryDigits_Sep
    //   BinaryDigits_Sep -> BinaryDigits_Sep NumericLiteralSeparator . BinaryDigit
    // Transitions:
    //   [0..1] => State(525):NumericLiteral
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 525, 535, 535, 525, 535, 535, 535,
    ],
    // State(23):
    //   OctalDigits_Sep -> . OctalDigits_Sep OctalDigit
    //   OctalDigits_Sep -> . OctalDigits_Sep NumericLiteralSeparator OctalDigit
    //   OctalIntegerLiteral_Sep -> [0] [o] . OctalDigits_Sep
    //   OctalDigits_Sep -> . OctalDigit
    //   OctalDigit -> . [0 1 2 3 4 5 6 7]
    //   OctalIntegerLiteral_Sep -> [0] [O] . OctalDigits_Sep
    //   OctalDigits_Sep -> OctalDigits_Sep NumericLiteralSeparator . OctalDigit
    // Transitions:
    //   [0..7] => State(526):NumericLiteral
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 526, 526, 526, 526, 535, 535, 535,
    ],
    // State(24):
    //   HexDigits_Sep -> . HexDigits_Sep HexDigit
    //   HexDigits_Sep -> . HexDigits_Sep NumericLiteralSeparator HexDigit
    //   HexIntegerLiteral_Sep -> [0] [x] . HexDigits_Sep
    //   HexDigits_Sep -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   HexIntegerLiteral_Sep -> [0] [X] . HexDigits_Sep
    //   HexDigits_Sep -> HexDigits_Sep NumericLiteralSeparator . HexDigit
    // Transitions:
    //   [0..9, A..F, a..f] => State(527):NumericLiteral
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 527, 535, 535, 527, 527, 527, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 527, 527, 535, 535, 535, 535, 535, 535, 535, 527,
        535, 527, 535, 535, 527, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 527, 527, 527, 527, 527, 535, 535, 535,
    ],
    // State(25):
    //   LineTerminatorSequence -> [<CR>] . [<LF>]
    // Transitions:
    //   [<LF>] => State(4)
    //   [<NUL>..<HT>, <VT>..U+10FFFF] => State(224)?
    [
        224, 224, 224, 224, 224, 224, 224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
    ],
    // State(26):
    //   LineTerminatorSequence -> [<CR>] . [<LF>]
    // Transitions:
    //   [<LF>] => State(8)
    //   [<NUL>..<HT>, <VT>..U+10FFFF] => State(225)?
    [
        225, 225, 225, 225, 225, 225, 225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
    ],
    // State(27):
    //   LineTerminatorSequence -> [<CR>] . [<LF>]
    // Transitions:
    //   [<LF>] => State(6)
    //   [<NUL>..<HT>, <VT>..U+10FFFF] => State(226)?
    [
        226, 226, 226, 226, 226, 226, 226, 226, 6, 226, 226, 226, 226, 226, 226, 226, 226, 226,
        226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
        226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
        226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
    ],
    // State(28):
    //   LineTerminatorSequence -> [<CR>] . [<LF>]
    // Transitions:
    //   [<LF>] => State(7)
    //   [<NUL>..<HT>, <VT>..U+10FFFF] => State(227)?
    [
        227, 227, 227, 227, 227, 227, 227, 227, 7, 227, 227, 227, 227, 227, 227, 227, 227, 227,
        227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
        227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
        227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
    ],
    // State(29):
    //   TemplateMiddle -> [}] [$] . [{]
    //   TemplateMiddle -> [}] TemplateCharacters [$] . [{]
    // Transitions:
    //   [<NUL>..z, |..U+10FFFF] => State(224)?
    //   [{] => State(533):TemplateMiddle
    [
        224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 533, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
    ],
    // State(30):
    // Transitions:
    //   [<NUL>../, :..U+10FFFF] => State(463):OPTIONAL_CHAINING?
    [
        463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463,
        463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463,
        463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463,
        463, 463, 463, 463, 463, 463, 463, 463, 463, 535, 535, 535, 535, 535, 463, 463, 463,
    ],
    // State(31):
    //   ELLIPSIS -> [.] [.] . [.]
    // Transitions:
    //   [.] => State(470):ELLIPSIS
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 470, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(32):
    //   TemplateHead -> [`] [$] . [{]
    //   TemplateHead -> [`] TemplateCharacters [$] . [{]
    // Transitions:
    //   [<NUL>..z, |..U+10FFFF] => State(225)?
    //   [{] => State(530):TemplateHead
    [
        225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 530, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
    ],
    // State(33):
    //   MultiLineComment -> [/] [*] [*] . [/]
    //   PostAsteriskCommentChars -> [*] . PostAsteriskCommentChars
    //   MultiLineCommentChars -> [*] . PostAsteriskCommentChars
    //   PostAsteriskCommentChars -> . MultiLineNotForwardSlashOrAsteriskChar
    //   MultiLineNotForwardSlashOrAsteriskChar -> . [SourceCharacter -/ -*]
    //   PostAsteriskCommentChars -> . MultiLineNotForwardSlashOrAsteriskChar MultiLineCommentChars
    //   PostAsteriskCommentChars -> . [*]
    //   PostAsteriskCommentChars -> . [*] PostAsteriskCommentChars
    //   MultiLineComment -> [/] [*] MultiLineCommentChars . [*] [/]
    //   MultiLineComment -> [/] [*] MultiLineCommentChars [*] . [/]
    // Transitions:
    //   [<NUL>..), +..., 0..U+10FFFF] => State(9)
    //   [*] => State(33)
    //   [/] => State(232):Comment
    [
        9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
        9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 33, 9, 9, 9, 9, 9, 9,
        9, 9, 9, 9, 9, 9, 9, 9, 232, 9, 9,
    ],
    // State(34):
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [0..9, A..F, a..f] => State(59)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 59, 535, 535, 59, 59, 59, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 59, 59, 535, 535, 535, 535, 535, 535, 535, 59, 535, 59,
        535, 535, 59, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 59, 59, 59, 59, 59, 535, 535, 535,
    ],
    // State(35):
    //   HexEscapeSequence -> [x] . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    // Transitions:
    //   [0..9, A..F, a..f] => State(63)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 63, 535, 535, 63, 63, 63, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 63, 63, 535, 535, 535, 535, 535, 535, 535, 63, 535, 63,
        535, 535, 63, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 63, 63, 63, 63, 63, 535, 535, 535,
    ],
    // State(36):
    //   HexEscapeSequence -> [x] . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    // Transitions:
    //   [0..9, A..F, a..f] => State(64)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 64, 535, 535, 64, 64, 64, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 64, 64, 535, 535, 535, 535, 535, 535, 535, 64, 535, 64,
        535, 535, 64, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 64, 64, 64, 64, 64, 535, 535, 535,
    ],
    // State(37):
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [0..9, A..F, a..f] => State(65)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 65, 535, 535, 65, 65, 65, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 65, 65, 535, 535, 535, 535, 535, 535, 535, 65, 535, 65,
        535, 535, 65, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 65, 65, 65, 65, 65, 535, 535, 535,
    ],
    // State(38):
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [0..9, A..F, a..f] => State(35)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 35, 535, 535, 35, 35, 35, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 35, 35, 535, 535, 535, 535, 535, 535, 535, 35, 535, 35,
        535, 535, 35, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 35, 35, 35, 35, 35, 535, 535, 535,
    ],
    // State(39):
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [0..9, A..F, a..f] => State(36)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 36, 535, 535, 36, 36, 36, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 36, 36, 535, 535, 535, 535, 535, 535, 535, 36, 535, 36,
        535, 535, 36, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 36, 36, 36, 36, 36, 535, 535, 535,
    ],
    // State(40):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(46)
    //   [0] => State(47)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 46, 535, 535, 46, 46, 46, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 46, 46, 535, 535, 535, 535, 535, 535, 535, 46, 535, 46,
        535, 535, 46, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 46, 46, 46, 46, 47, 535, 535, 535,
    ],
    // State(41):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(48)
    //   [0] => State(49)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 48, 535, 535, 48, 48, 48, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 48, 48, 535, 535, 535, 535, 535, 535, 535, 48, 535, 48,
        535, 535, 48, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 48, 48, 48, 48, 49, 535, 535, 535,
    ],
    // State(42):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [0] => State(42)
    //   [1..9, A..F, a..f] => State(44)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 44, 535, 535, 44, 44, 44, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 44, 44, 535, 535, 535, 535, 535, 535, 535, 44, 535, 44,
        535, 535, 44, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 44, 44, 44, 44, 42, 535, 535, 535,
    ],
    // State(43):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [0] => State(43)
    //   [1..9, A..F, a..f] => State(45)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 45, 535, 535, 45, 45, 45, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 45, 45, 535, 535, 535, 535, 535, 535, 535, 45, 535, 45,
        535, 535, 45, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 45, 45, 45, 45, 43, 535, 535, 535,
    ],
    // State(44):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [1..9, A..F, a..f] => State(40)
    //   [0] => State(42)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 40, 535, 535, 40, 40, 40, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 40, 40, 535, 535, 535, 535, 535, 535, 535, 40, 535, 40,
        535, 535, 40, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 40, 40, 40, 40, 42, 535, 535, 535,
    ],
    // State(45):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [1..9, A..F, a..f] => State(41)
    //   [0] => State(43)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 41, 535, 535, 41, 41, 41, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 41, 41, 535, 535, 535, 535, 535, 535, 535, 41, 535, 41,
        535, 535, 41, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 41, 41, 41, 41, 43, 535, 535, 535,
    ],
    // State(46):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(50)
    //   [0] => State(51)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 50, 535, 535, 50, 50, 50, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 50, 50, 535, 535, 535, 535, 535, 535, 535, 50, 535, 50,
        535, 535, 50, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 50, 50, 50, 50, 51, 535, 535, 535,
    ],
    // State(47):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(52)
    //   [0] => State(53)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 52, 535, 535, 52, 52, 52, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 52, 52, 535, 535, 535, 535, 535, 535, 535, 52, 535, 52,
        535, 535, 52, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 52, 52, 52, 52, 53, 535, 535, 535,
    ],
    // State(48):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(54)
    //   [0] => State(55)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 54, 535, 535, 54, 54, 54, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 54, 54, 535, 535, 535, 535, 535, 535, 535, 54, 535, 54,
        535, 535, 54, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 54, 54, 54, 54, 55, 535, 535, 535,
    ],
    // State(49):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(56)
    //   [0] => State(57)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 56, 535, 535, 56, 56, 56, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 56, 56, 535, 535, 535, 535, 535, 535, 535, 56, 535, 56,
        535, 535, 56, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 56, 56, 56, 56, 57, 535, 535, 535,
    ],
    // State(50):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(66)
    //   [0] => State(67)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 66, 535, 535, 66, 66, 66, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 66, 66, 535, 535, 535, 535, 535, 535, 535, 66, 535, 66,
        535, 535, 66, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 66, 66, 66, 66, 67, 535, 535, 535,
    ],
    // State(51):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(68)
    //   [0] => State(69)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 68, 535, 535, 68, 68, 68, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 68, 68, 535, 535, 535, 535, 535, 535, 535, 68, 535, 68,
        535, 535, 68, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 68, 68, 68, 68, 69, 535, 535, 535,
    ],
    // State(52):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(70)
    //   [0] => State(71)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 70, 535, 535, 70, 70, 70, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 70, 70, 535, 535, 535, 535, 535, 535, 535, 70, 535, 70,
        535, 535, 70, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 70, 70, 70, 70, 71, 535, 535, 535,
    ],
    // State(53):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [0] => State(71)
    //   [1..9, A..F, a..f] => State(72)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 72, 535, 535, 72, 72, 72, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 72, 72, 535, 535, 535, 535, 535, 535, 535, 72, 535, 72,
        535, 535, 72, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 72, 72, 72, 72, 71, 535, 535, 535,
    ],
    // State(54):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(73)
    //   [0] => State(74)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 73, 535, 535, 73, 73, 73, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 73, 73, 535, 535, 535, 535, 535, 535, 535, 73, 535, 73,
        535, 535, 73, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 73, 73, 73, 73, 74, 535, 535, 535,
    ],
    // State(55):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(75)
    //   [0] => State(76)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 75, 535, 535, 75, 75, 75, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 75, 75, 535, 535, 535, 535, 535, 535, 535, 75, 535, 75,
        535, 535, 75, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 75, 75, 75, 75, 76, 535, 535, 535,
    ],
    // State(56):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(77)
    //   [0] => State(78)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 77, 535, 535, 77, 77, 77, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 77, 77, 535, 535, 535, 535, 535, 535, 535, 77, 535, 77,
        535, 535, 77, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 77, 77, 77, 77, 78, 535, 535, 535,
    ],
    // State(57):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [0] => State(78)
    //   [1..9, A..F, a..f] => State(79)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 79, 535, 535, 79, 79, 79, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 79, 79, 535, 535, 535, 535, 535, 535, 535, 79, 535, 79,
        535, 535, 79, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 79, 79, 79, 79, 78, 535, 535, 535,
    ],
    // State(58):
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    // Transitions:
    //   [2..9, A..F, a..f] => State(120)
    //   [1] => State(121)
    //   [0] => State(122)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 120, 535, 535, 120, 120, 120, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 120, 120, 535, 535, 535, 535, 535, 535, 535, 120,
        535, 120, 535, 535, 120, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 120, 121, 120, 120, 122, 535, 535, 535,
    ],
    // State(59):
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [0..9, A..F, a..f] => State(126)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 126, 535, 535, 126, 126, 126, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 126, 126, 535, 535, 535, 535, 535, 535, 535, 126,
        535, 126, 535, 535, 126, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 126, 126, 126, 126, 126, 535, 535, 535,
    ],
    // State(60):
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    // Transitions:
    //   [2..9, A..F, a..f] => State(201)
    //   [1] => State(202)
    //   [0] => State(203)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 201, 535, 535, 201, 201, 201, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 201, 201, 535, 535, 535, 535, 535, 535, 535, 201,
        535, 201, 535, 535, 201, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 201, 202, 201, 201, 203, 535, 535, 535,
    ],
    // State(61):
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    // Transitions:
    //   [2..9, A..F, a..f] => State(207)
    //   [1] => State(208)
    //   [0] => State(209)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 207, 535, 535, 207, 207, 207, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 207, 207, 535, 535, 535, 535, 535, 535, 535, 207,
        535, 207, 535, 535, 207, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 207, 208, 207, 207, 209, 535, 535, 535,
    ],
    // State(62):
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    // Transitions:
    //   [2..9, A..F, a..f] => State(212)
    //   [1] => State(213)
    //   [0] => State(214)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 212, 535, 535, 212, 212, 212, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 212, 212, 535, 535, 535, 535, 535, 535, 535, 212,
        535, 212, 535, 535, 212, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 212, 213, 212, 212, 214, 535, 535, 535,
    ],
    // State(63):
    //   HexEscapeSequence -> [x] HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [0..9, A..F, a..f] => State(6)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 6, 535, 535, 6, 6, 6, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 6, 6, 535, 535, 535, 535, 535, 535, 535, 6, 535, 6, 535, 535,
        6, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 6, 6, 6, 6, 6, 535, 535, 535,
    ],
    // State(64):
    //   HexEscapeSequence -> [x] HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [0..9, A..F, a..f] => State(7)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 7, 535, 535, 7, 7, 7, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 7, 7, 535, 535, 535, 535, 535, 535, 535, 7, 535, 7, 535, 535,
        7, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 7, 7, 7, 7, 7, 535, 535, 535,
    ],
    // State(65):
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [0..9, A..F, a..f] => State(219)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 219, 535, 535, 219, 219, 219, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 219, 219, 535, 535, 535, 535, 535, 535, 535, 219,
        535, 219, 535, 535, 219, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 219, 219, 219, 219, 219, 535, 535, 535,
    ],
    // State(66):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(84)
    //   [0] => State(85)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 84, 535, 535, 84, 84, 84, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 84, 84, 535, 535, 535, 535, 535, 535, 535, 84, 535, 84,
        535, 535, 84, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 84, 84, 84, 84, 85, 535, 535, 535,
    ],
    // State(67):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(86)
    //   [0] => State(87)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 86, 535, 535, 86, 86, 86, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 86, 86, 535, 535, 535, 535, 535, 535, 535, 86, 535, 86,
        535, 535, 86, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 86, 86, 86, 86, 87, 535, 535, 535,
    ],
    // State(68):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(88)
    //   [0] => State(89)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 88, 535, 535, 88, 88, 88, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 88, 88, 535, 535, 535, 535, 535, 535, 535, 88, 535, 88,
        535, 535, 88, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 88, 88, 88, 88, 89, 535, 535, 535,
    ],
    // State(69):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [0] => State(89)
    //   [1..9, A..F, a..f] => State(90)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 90, 535, 535, 90, 90, 90, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 90, 90, 535, 535, 535, 535, 535, 535, 535, 90, 535, 90,
        535, 535, 90, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 90, 90, 90, 90, 89, 535, 535, 535,
    ],
    // State(70):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(104)
    //   [0] => State(105)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 104, 535, 535, 104, 104, 104, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 104, 104, 535, 535, 535, 535, 535, 535, 535, 104,
        535, 104, 535, 535, 104, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 104, 104, 104, 104, 105, 535, 535, 535,
    ],
    // State(71):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(106)
    //   [0] => State(107)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 106, 535, 535, 106, 106, 106, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 106, 106, 535, 535, 535, 535, 535, 535, 535, 106,
        535, 106, 535, 535, 106, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 106, 106, 106, 106, 107, 535, 535, 535,
    ],
    // State(72):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [0] => State(107)
    //   [1..9, A..F, a..f] => State(108)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 108, 535, 535, 108, 108, 108, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 108, 108, 535, 535, 535, 535, 535, 535, 535, 108,
        535, 108, 535, 535, 108, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 108, 108, 108, 108, 107, 535, 535, 535,
    ],
    // State(73):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(93)
    //   [0] => State(94)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 93, 535, 535, 93, 93, 93, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 93, 93, 535, 535, 535, 535, 535, 535, 535, 93, 535, 93,
        535, 535, 93, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 93, 93, 93, 93, 94, 535, 535, 535,
    ],
    // State(74):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(95)
    //   [0] => State(96)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 95, 535, 535, 95, 95, 95, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 95, 95, 535, 535, 535, 535, 535, 535, 535, 95, 535, 95,
        535, 535, 95, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 95, 95, 95, 95, 96, 535, 535, 535,
    ],
    // State(75):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(97)
    //   [0] => State(98)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 97, 535, 535, 97, 97, 97, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 97, 97, 535, 535, 535, 535, 535, 535, 535, 97, 535, 97,
        535, 535, 97, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 97, 97, 97, 97, 98, 535, 535, 535,
    ],
    // State(76):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [0] => State(98)
    //   [1..9, A..F, a..f] => State(99)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 99, 535, 535, 99, 99, 99, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 99, 99, 535, 535, 535, 535, 535, 535, 535, 99, 535, 99,
        535, 535, 99, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 99, 99, 99, 99, 98, 535, 535, 535,
    ],
    // State(77):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(109)
    //   [0] => State(110)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 109, 535, 535, 109, 109, 109, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 109, 109, 535, 535, 535, 535, 535, 535, 535, 109,
        535, 109, 535, 535, 109, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 109, 109, 109, 109, 110, 535, 535, 535,
    ],
    // State(78):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(111)
    //   [0] => State(112)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 111, 535, 535, 111, 111, 111, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 111, 111, 535, 535, 535, 535, 535, 535, 535, 111,
        535, 111, 535, 535, 111, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 111, 111, 111, 111, 112, 535, 535, 535,
    ],
    // State(79):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [0] => State(112)
    //   [1..9, A..F, a..f] => State(113)
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 113, 535, 535, 113, 113, 113, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 113, 113, 535, 535, 535, 535, 535, 535, 535, 113,
        535, 113, 535, 535, 113, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 113, 113, 113, 113, 112, 535, 535, 535,
    ],
    // State(80):
    //   UnicodeEscapeSequence -> [u] . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] . [{] CodePoint [}]
    //   NotEscapeSequence -> [u] . HexDigit !?[HexDigit]
    //   NotEscapeSequence -> [u] . HexDigit HexDigit !?[HexDigit]
    //   NotEscapeSequence -> [u] . HexDigit HexDigit HexDigit !?[HexDigit]
    //   NotEscapeSequence -> [u] . [{] !?[HexDigit]
    //   NotEscapeSequence -> [u] . [{] NotCodePoint !?[HexDigit]
    //   NotEscapeSequence -> [u] . [{] CodePoint !?[HexDigit] !?[}]
    // Transitions:
    //   [0..9, A..F, a..f] => State(83)
    //   [{] => State(100)
    //   [<NUL>../, :..@, G..`, g..z, |..U+10FFFF] => State(224)?
    [
        224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 83, 224, 224, 83, 83, 83, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 83, 83, 224, 224, 224, 224, 224, 224, 224, 83, 224, 83,
        224, 224, 83, 100, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 83, 83, 83, 83, 83, 224, 224, 224,
    ],
    // State(81):
    //   UnicodeEscapeSequence -> [u] . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] . [{] CodePoint [}]
    //   NotEscapeSequence -> [u] . HexDigit !?[HexDigit]
    //   NotEscapeSequence -> [u] . HexDigit HexDigit !?[HexDigit]
    //   NotEscapeSequence -> [u] . HexDigit HexDigit HexDigit !?[HexDigit]
    //   NotEscapeSequence -> [u] . [{] !?[HexDigit]
    //   NotEscapeSequence -> [u] . [{] NotCodePoint !?[HexDigit]
    //   NotEscapeSequence -> [u] . [{] CodePoint !?[HexDigit] !?[}]
    // Transitions:
    //   [0..9, A..F, a..f] => State(92)
    //   [{] => State(102)
    //   [<NUL>../, :..@, G..`, g..z, |..U+10FFFF] => State(225)?
    [
        225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 92, 225, 225, 92, 92, 92, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 92, 92, 225, 225, 225, 225, 225, 225, 225, 92, 225, 92,
        225, 225, 92, 102, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 92, 92, 92, 92, 92, 225, 225, 225,
    ],
    // State(82):
    //   HexEscapeSequence -> [x] . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotEscapeSequence -> [x] . HexDigit !?[HexDigit]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotEscapeSequence -> [u] HexDigit HexDigit . HexDigit !?[HexDigit]
    // Transitions:
    //   [0..9, A..F, a..f] => State(101)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(224)?
    [
        224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 101, 224, 224, 101, 101, 101, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 101, 101, 224, 224, 224, 224, 224, 224, 224, 101,
        224, 101, 224, 224, 101, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 101, 101, 101, 101, 101, 224, 224, 224,
    ],
    // State(83):
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotEscapeSequence -> [u] HexDigit . HexDigit !?[HexDigit]
    //   NotEscapeSequence -> [u] HexDigit . HexDigit HexDigit !?[HexDigit]
    // Transitions:
    //   [0..9, A..F, a..f] => State(82)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(224)?
    [
        224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 82, 224, 224, 82, 82, 82, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 82, 82, 224, 224, 224, 224, 224, 224, 224, 82, 224, 82,
        224, 224, 82, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 82, 82, 82, 82, 82, 224, 224, 224,
    ],
    // State(84):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(84)
    //   [0] => State(85)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(224)?
    [
        224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 84, 224, 224, 84, 84, 84, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 84, 84, 224, 224, 224, 224, 224, 224, 224, 84, 224, 84,
        224, 224, 84, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 84, 84, 84, 84, 85, 224, 224, 224,
    ],
    // State(85):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(86)
    //   [0] => State(87)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(224)?
    [
        224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 86, 224, 224, 86, 86, 86, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 86, 86, 224, 224, 224, 224, 224, 224, 224, 86, 224, 86,
        224, 224, 86, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 86, 86, 86, 86, 87, 224, 224, 224,
    ],
    // State(86):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(88)
    //   [0] => State(89)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(224)?
    [
        224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 88, 224, 224, 88, 88, 88, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 88, 88, 224, 224, 224, 224, 224, 224, 224, 88, 224, 88,
        224, 224, 88, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 88, 88, 88, 88, 89, 224, 224, 224,
    ],
    // State(87):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [0] => State(89)
    //   [1..9, A..F, a..f] => State(90)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(224)?
    [
        224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 90, 224, 224, 90, 90, 90, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 90, 90, 224, 224, 224, 224, 224, 224, 224, 90, 224, 90,
        224, 224, 90, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 90, 90, 90, 90, 89, 224, 224, 224,
    ],
    // State(88):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(104)
    //   [0] => State(105)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(224)?
    [
        224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 104, 224, 224, 104, 104, 104, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 104, 104, 224, 224, 224, 224, 224, 224, 224, 104,
        224, 104, 224, 224, 104, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 104, 104, 104, 104, 105, 224, 224, 224,
    ],
    // State(89):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(106)
    //   [0] => State(107)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(224)?
    [
        224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 106, 224, 224, 106, 106, 106, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 106, 106, 224, 224, 224, 224, 224, 224, 224, 106,
        224, 106, 224, 224, 106, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 106, 106, 106, 106, 107, 224, 224, 224,
    ],
    // State(90):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [0] => State(107)
    //   [1..9, A..F, a..f] => State(108)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(224)?
    [
        224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 108, 224, 224, 108, 108, 108, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 108, 108, 224, 224, 224, 224, 224, 224, 224, 108,
        224, 108, 224, 224, 108, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 108, 108, 108, 108, 107, 224, 224, 224,
    ],
    // State(91):
    //   HexEscapeSequence -> [x] . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotEscapeSequence -> [x] . HexDigit !?[HexDigit]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotEscapeSequence -> [u] HexDigit HexDigit . HexDigit !?[HexDigit]
    // Transitions:
    //   [0..9, A..F, a..f] => State(103)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(225)?
    [
        225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 103, 225, 225, 103, 103, 103, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 103, 103, 225, 225, 225, 225, 225, 225, 225, 103,
        225, 103, 225, 225, 103, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 103, 103, 103, 103, 103, 225, 225, 225,
    ],
    // State(92):
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotEscapeSequence -> [u] HexDigit . HexDigit !?[HexDigit]
    //   NotEscapeSequence -> [u] HexDigit . HexDigit HexDigit !?[HexDigit]
    // Transitions:
    //   [0..9, A..F, a..f] => State(91)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(225)?
    [
        225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 91, 225, 225, 91, 91, 91, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 91, 91, 225, 225, 225, 225, 225, 225, 225, 91, 225, 91,
        225, 225, 91, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 91, 91, 91, 91, 91, 225, 225, 225,
    ],
    // State(93):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(93)
    //   [0] => State(94)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(225)?
    [
        225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 93, 225, 225, 93, 93, 93, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 93, 93, 225, 225, 225, 225, 225, 225, 225, 93, 225, 93,
        225, 225, 93, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 93, 93, 93, 93, 94, 225, 225, 225,
    ],
    // State(94):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(95)
    //   [0] => State(96)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(225)?
    [
        225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 95, 225, 225, 95, 95, 95, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 95, 95, 225, 225, 225, 225, 225, 225, 225, 95, 225, 95,
        225, 225, 95, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 95, 95, 95, 95, 96, 225, 225, 225,
    ],
    // State(95):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(97)
    //   [0] => State(98)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(225)?
    [
        225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 97, 225, 225, 97, 97, 97, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 97, 97, 225, 225, 225, 225, 225, 225, 225, 97, 225, 97,
        225, 225, 97, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 97, 97, 97, 97, 98, 225, 225, 225,
    ],
    // State(96):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [0] => State(98)
    //   [1..9, A..F, a..f] => State(99)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(225)?
    [
        225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 99, 225, 225, 99, 99, 99, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 99, 99, 225, 225, 225, 225, 225, 225, 225, 99, 225, 99,
        225, 225, 99, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 99, 99, 99, 99, 98, 225, 225, 225,
    ],
    // State(97):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(109)
    //   [0] => State(110)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(225)?
    [
        225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 109, 225, 225, 109, 109, 109, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 109, 109, 225, 225, 225, 225, 225, 225, 225, 109,
        225, 109, 225, 225, 109, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 109, 109, 109, 109, 110, 225, 225, 225,
    ],
    // State(98):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(111)
    //   [0] => State(112)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(225)?
    [
        225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 111, 225, 225, 111, 111, 111, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 111, 111, 225, 225, 225, 225, 225, 225, 225, 111,
        225, 111, 225, 225, 111, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 111, 111, 111, 111, 112, 225, 225, 225,
    ],
    // State(99):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [0] => State(112)
    //   [1..9, A..F, a..f] => State(113)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(225)?
    [
        225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 113, 225, 225, 113, 113, 113, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 113, 113, 225, 225, 225, 225, 225, 225, 225, 113,
        225, 113, 225, 225, 113, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 113, 113, 113, 113, 112, 225, 225, 225,
    ],
    // State(100):
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] . CodePoint !?[HexDigit] !?[}]
    // Transitions:
    //   [2..9, A..F, a..f] => State(127)
    //   [1] => State(128)
    //   [0] => State(129)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(224)?
    [
        224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 127, 224, 224, 127, 127, 127, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 127, 127, 224, 224, 224, 224, 224, 224, 224, 127,
        224, 127, 224, 224, 127, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 127, 128, 127, 127, 129, 224, 224, 224,
    ],
    // State(101):
    //   HexEscapeSequence -> [x] HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [0..9, A..F, a..f] => State(4)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(224)?
    [
        224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 4, 224, 224, 4, 4, 4, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 4, 4, 224, 224, 224, 224, 224, 224, 224, 4, 224, 4, 224, 224,
        4, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 4, 4, 4, 4, 4, 224, 224, 224,
    ],
    // State(102):
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] . CodePoint !?[HexDigit] !?[}]
    // Transitions:
    //   [2..9, A..F, a..f] => State(148)
    //   [1] => State(149)
    //   [0] => State(150)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(225)?
    [
        225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 148, 225, 225, 148, 148, 148, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 148, 148, 225, 225, 225, 225, 225, 225, 225, 148,
        225, 148, 225, 225, 148, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 148, 149, 148, 148, 150, 225, 225, 225,
    ],
    // State(103):
    //   HexEscapeSequence -> [x] HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [0..9, A..F, a..f] => State(8)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(225)?
    [
        225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 8, 225, 225, 8, 8, 8, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 8, 8, 225, 225, 225, 225, 225, 225, 225, 8, 225, 8, 225, 225,
        8, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 8, 8, 8, 8, 8, 225, 225, 225,
    ],
    // State(104):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(50)
    //   [0] => State(51)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(224)?
    [
        224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 50, 224, 224, 50, 50, 50, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 50, 50, 224, 224, 224, 224, 224, 224, 224, 50, 224, 50,
        224, 224, 50, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 50, 50, 50, 50, 51, 224, 224, 224,
    ],
    // State(105):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(52)
    //   [0] => State(53)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(224)?
    [
        224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 52, 224, 224, 52, 52, 52, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 52, 52, 224, 224, 224, 224, 224, 224, 224, 52, 224, 52,
        224, 224, 52, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 52, 52, 52, 52, 53, 224, 224, 224,
    ],
    // State(106):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [1..9, A..F, a..f] => State(40)
    //   [0] => State(42)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(224)?
    [
        224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 40, 224, 224, 40, 40, 40, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 40, 40, 224, 224, 224, 224, 224, 224, 224, 40, 224, 40,
        224, 224, 40, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 40, 40, 40, 40, 42, 224, 224, 224,
    ],
    // State(107):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [0] => State(42)
    //   [1..9, A..F, a..f] => State(44)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(224)?
    [
        224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 44, 224, 224, 44, 44, 44, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 44, 44, 224, 224, 224, 224, 224, 224, 224, 44, 224, 44,
        224, 224, 44, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 44, 44, 44, 44, 42, 224, 224, 224,
    ],
    // State(108):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(46)
    //   [0] => State(47)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(224)?
    [
        224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 46, 224, 224, 46, 46, 46, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 46, 46, 224, 224, 224, 224, 224, 224, 224, 46, 224, 46,
        224, 224, 46, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 46, 46, 46, 46, 47, 224, 224, 224,
    ],
    // State(109):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(54)
    //   [0] => State(55)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(225)?
    [
        225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 54, 225, 225, 54, 54, 54, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 54, 54, 225, 225, 225, 225, 225, 225, 225, 54, 225, 54,
        225, 225, 54, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 54, 54, 54, 54, 55, 225, 225, 225,
    ],
    // State(110):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(56)
    //   [0] => State(57)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(225)?
    [
        225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 56, 225, 225, 56, 56, 56, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 56, 56, 225, 225, 225, 225, 225, 225, 225, 56, 225, 56,
        225, 225, 56, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 56, 56, 56, 56, 57, 225, 225, 225,
    ],
    // State(111):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [1..9, A..F, a..f] => State(41)
    //   [0] => State(43)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(225)?
    [
        225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 41, 225, 225, 41, 41, 41, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 41, 41, 225, 225, 225, 225, 225, 225, 225, 41, 225, 41,
        225, 225, 41, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 41, 41, 41, 41, 43, 225, 225, 225,
    ],
    // State(112):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [0] => State(43)
    //   [1..9, A..F, a..f] => State(45)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(225)?
    [
        225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 45, 225, 225, 45, 45, 45, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 45, 45, 225, 225, 225, 225, 225, 225, 225, 45, 225, 45,
        225, 225, 45, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 45, 45, 45, 45, 43, 225, 225, 225,
    ],
    // State(113):
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [1..9, A..F, a..f] => State(48)
    //   [0] => State(49)
    //   [<NUL>../, :..@, G..`, g..U+10FFFF] => State(225)?
    [
        225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 48, 225, 225, 48, 48, 48, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 48, 48, 225, 225, 225, 225, 225, 225, 225, 48, 225, 48,
        225, 225, 48, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 48, 48, 48, 48, 49, 225, 225, 225,
    ],
    // State(114):
    //   NotEscapeSequence -> [0] . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    // Transitions:
    //   [0..9] => State(4)
    //   [<NUL>../, :..U+10FFFF] => State(224)?
    [
        224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 4, 4, 4, 4, 4, 224, 224, 224,
    ],
    // State(115):
    //   NotEscapeSequence -> [0] . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    // Transitions:
    //   [0..9] => State(8)
    //   [<NUL>../, :..U+10FFFF] => State(225)?
    [
        225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 8, 8, 8, 8, 8, 225, 225, 225,
    ],
    // State(116):
    //   LegacyOctalEscapeSequence -> ZeroToThree . OctalDigit !?[OctalDigit]
    //   OctalDigit -> . [0 1 2 3 4 5 6 7]
    //   LegacyOctalEscapeSequence -> ZeroToThree . OctalDigit OctalDigit
    // Transitions:
    //   [0..7] => State(117)
    //   [<NUL>../, 8..U+10FFFF] => State(226)?
    [
        226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
        226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
        226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
        226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 117, 117, 117, 117, 226, 226, 226,
    ],
    // State(117):
    //   LegacyOctalEscapeSequence -> FourToSeven . OctalDigit
    //   OctalDigit -> . [0 1 2 3 4 5 6 7]
    //   LegacyOctalEscapeSequence -> ZeroToThree OctalDigit . OctalDigit
    // Transitions:
    //   [0..7] => State(6)
    //   [<NUL>../, 8..U+10FFFF] => State(226)?
    [
        226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
        226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
        226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
        226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 6, 6, 6, 6, 226, 226, 226,
    ],
    // State(118):
    //   LegacyOctalEscapeSequence -> ZeroToThree . OctalDigit !?[OctalDigit]
    //   OctalDigit -> . [0 1 2 3 4 5 6 7]
    //   LegacyOctalEscapeSequence -> ZeroToThree . OctalDigit OctalDigit
    // Transitions:
    //   [0..7] => State(119)
    //   [<NUL>../, 8..U+10FFFF] => State(227)?
    [
        227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
        227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
        227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
        227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 119, 119, 119, 119, 227, 227, 227,
    ],
    // State(119):
    //   LegacyOctalEscapeSequence -> FourToSeven . OctalDigit
    //   OctalDigit -> . [0 1 2 3 4 5 6 7]
    //   LegacyOctalEscapeSequence -> ZeroToThree OctalDigit . OctalDigit
    // Transitions:
    //   [0..7] => State(7)
    //   [<NUL>../, 8..U+10FFFF] => State(227)?
    [
        227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
        227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
        227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
        227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 7, 7, 7, 7, 227, 227, 227,
    ],
    // State(120):
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   CodePoint -> [1] [0] . Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [0..9, A..F, a..f] => State(123)
    //   [}] => State(289):IdentifierName
    [
        535, 535, 289, 535, 535, 535, 535, 535, 535, 535, 123, 535, 535, 123, 123, 123, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 123, 123, 535, 535, 535, 535, 535, 535, 535, 123,
        535, 123, 535, 535, 123, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 123, 123, 123, 123, 123, 535, 535, 535,
    ],
    // State(121):
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> [1] . [0] Hex4Digits
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [0] => State(120)
    //   [1..9, A..F, a..f] => State(123)
    //   [}] => State(289):IdentifierName
    [
        535, 535, 289, 535, 535, 535, 535, 535, 535, 535, 123, 535, 535, 123, 123, 123, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 123, 123, 535, 535, 535, 535, 535, 535, 535, 123,
        535, 123, 535, 535, 123, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 123, 123, 123, 123, 120, 535, 535, 535,
    ],
    // State(122):
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> HexDigit . Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [2..9, A..F, a..f] => State(120)
    //   [1] => State(121)
    //   [0] => State(122)
    //   [}] => State(289):IdentifierName
    [
        535, 535, 289, 535, 535, 535, 535, 535, 535, 535, 120, 535, 535, 120, 120, 120, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 120, 120, 535, 535, 535, 535, 535, 535, 535, 120,
        535, 120, 535, 535, 120, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 120, 121, 120, 120, 122, 535, 535, 535,
    ],
    // State(123):
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [0..9, A..F, a..f] => State(124)
    //   [}] => State(289):IdentifierName
    [
        535, 535, 289, 535, 535, 535, 535, 535, 535, 535, 124, 535, 535, 124, 124, 124, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 124, 124, 535, 535, 535, 535, 535, 535, 535, 124,
        535, 124, 535, 535, 124, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 124, 124, 124, 124, 124, 535, 535, 535,
    ],
    // State(124):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions:
    //   [0..9, A..F, a..f] => State(125)
    //   [}] => State(289):IdentifierName
    [
        535, 535, 289, 535, 535, 535, 535, 535, 535, 535, 125, 535, 535, 125, 125, 125, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 125, 125, 535, 535, 535, 535, 535, 535, 535, 125,
        535, 125, 535, 535, 125, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 125, 125, 125, 125, 125, 535, 535, 535,
    ],
    // State(125):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions:
    //   [0..9, A..F, a..f] => State(220)
    //   [}] => State(289):IdentifierName
    [
        535, 535, 289, 535, 535, 535, 535, 535, 535, 535, 220, 535, 535, 220, 220, 220, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 220, 220, 535, 535, 535, 535, 535, 535, 535, 220,
        535, 220, 535, 535, 220, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 220, 220, 220, 220, 220, 535, 535, 535,
    ],
    // State(126):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [0..9, A..F, a..f] => State(289):IdentifierName
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 535, 535, 289, 289, 289, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 535, 535, 535, 535, 535, 535, 535, 289,
        535, 289, 535, 535, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 535, 535,
    ],
    // State(127):
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(4)
    //   [1..9, A..F, a..f] => State(131)
    //   [0] => State(132)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 131, 224, 224, 131, 131, 131, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 131, 131, 224, 224, 224, 224, 224, 224, 224, 131,
        224, 131, 224, 224, 131, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 131, 131, 131, 131, 132, 224, 224, 224,
    ],
    // State(128):
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> [1] . [0] Hex4Digits
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(4)
    //   [0] => State(130)
    //   [1..9, A..F, a..f] => State(131)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 131, 224, 224, 131, 131, 131, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 131, 131, 224, 224, 224, 224, 224, 224, 224, 131,
        224, 131, 224, 224, 131, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 131, 131, 131, 131, 130, 224, 224, 224,
    ],
    // State(129):
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> HexDigit . Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] . CodePoint !?[HexDigit] !?[}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(4)
    //   [2..9, A..F, a..f] => State(127)
    //   [1] => State(128)
    //   [0] => State(129)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 127, 224, 224, 127, 127, 127, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 127, 127, 224, 224, 224, 224, 224, 224, 224, 127,
        224, 127, 224, 224, 127, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 127, 128, 127, 127, 129, 224, 224, 224,
    ],
    // State(130):
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> [1] [0] . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(4)
    //   [0] => State(132)
    //   [1..9, A..F, a..f] => State(133)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 133, 224, 224, 133, 133, 133, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 133, 133, 224, 224, 224, 224, 224, 224, 224, 133,
        224, 133, 224, 224, 133, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 133, 133, 133, 133, 132, 224, 224, 224,
    ],
    // State(131):
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(4)
    //   [1..9, A..F, a..f] => State(134)
    //   [0] => State(135)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 134, 224, 224, 134, 134, 134, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 134, 134, 224, 224, 224, 224, 224, 224, 224, 134,
        224, 134, 224, 224, 134, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 134, 134, 134, 134, 135, 224, 224, 224,
    ],
    // State(132):
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(4)
    //   [1..9, A..F, a..f] => State(136)
    //   [0] => State(137)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 136, 224, 224, 136, 136, 136, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 136, 136, 224, 224, 224, 224, 224, 224, 224, 136,
        224, 136, 224, 224, 136, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 136, 136, 136, 136, 137, 224, 224, 224,
    ],
    // State(133):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(4)
    //   [0] => State(137)
    //   [1..9, A..F, a..f] => State(138)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 138, 224, 224, 138, 138, 138, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 138, 138, 224, 224, 224, 224, 224, 224, 224, 138,
        224, 138, 224, 224, 138, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 138, 138, 138, 138, 137, 224, 224, 224,
    ],
    // State(134):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(4)
    //   [1..9, A..F, a..f] => State(139)
    //   [0] => State(140)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 139, 224, 224, 139, 139, 139, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 139, 139, 224, 224, 224, 224, 224, 224, 224, 139,
        224, 139, 224, 224, 139, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 139, 139, 139, 139, 140, 224, 224, 224,
    ],
    // State(135):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(4)
    //   [1..9, A..F, a..f] => State(141)
    //   [0] => State(142)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 141, 224, 224, 141, 141, 141, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 141, 141, 224, 224, 224, 224, 224, 224, 224, 141,
        224, 141, 224, 224, 141, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 141, 141, 141, 141, 142, 224, 224, 224,
    ],
    // State(136):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(4)
    //   [1..9, A..F, a..f] => State(143)
    //   [0] => State(144)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 143, 224, 224, 143, 143, 143, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 143, 143, 224, 224, 224, 224, 224, 224, 224, 143,
        224, 143, 224, 224, 143, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 143, 143, 143, 143, 144, 224, 224, 224,
    ],
    // State(137):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(4)
    //   [0] => State(144)
    //   [1..9, A..F, a..f] => State(145)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 145, 224, 224, 145, 145, 145, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 145, 145, 224, 224, 224, 224, 224, 224, 224, 145,
        224, 145, 224, 224, 145, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 145, 145, 145, 145, 144, 224, 224, 224,
    ],
    // State(138):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(4)
    //   [1..9, A..F, a..f] => State(146)
    //   [0] => State(147)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 146, 224, 224, 146, 146, 146, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 146, 146, 224, 224, 224, 224, 224, 224, 224, 146,
        224, 146, 224, 224, 146, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 146, 146, 146, 146, 147, 224, 224, 224,
    ],
    // State(139):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(4)
    //   [1..9, A..F, a..f] => State(169)
    //   [0] => State(170)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 169, 224, 224, 169, 169, 169, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 169, 169, 224, 224, 224, 224, 224, 224, 224, 169,
        224, 169, 224, 224, 169, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 169, 169, 169, 169, 170, 224, 224, 224,
    ],
    // State(140):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(4)
    //   [1..9, A..F, a..f] => State(171)
    //   [0] => State(172)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 171, 224, 224, 171, 171, 171, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 171, 171, 224, 224, 224, 224, 224, 224, 224, 171,
        224, 171, 224, 224, 171, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 171, 171, 171, 171, 172, 224, 224, 224,
    ],
    // State(141):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(4)
    //   [1..9, A..F, a..f] => State(173)
    //   [0] => State(174)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 173, 224, 224, 173, 173, 173, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 173, 173, 224, 224, 224, 224, 224, 224, 224, 173,
        224, 173, 224, 224, 173, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 173, 173, 173, 173, 174, 224, 224, 224,
    ],
    // State(142):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(4)
    //   [0] => State(174)
    //   [1..9, A..F, a..f] => State(175)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 175, 224, 224, 175, 175, 175, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 175, 175, 224, 224, 224, 224, 224, 224, 224, 175,
        224, 175, 224, 224, 175, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 175, 175, 175, 175, 174, 224, 224, 224,
    ],
    // State(143):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(4)
    //   [1..9, A..F, a..f] => State(176)
    //   [0] => State(177)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 176, 224, 224, 176, 176, 176, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 176, 176, 224, 224, 224, 224, 224, 224, 224, 176,
        224, 176, 224, 224, 176, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 176, 176, 176, 176, 177, 224, 224, 224,
    ],
    // State(144):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(4)
    //   [1..9, A..F, a..f] => State(178)
    //   [0] => State(179)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 178, 224, 224, 178, 178, 178, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 178, 178, 224, 224, 224, 224, 224, 224, 224, 178,
        224, 178, 224, 224, 178, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 178, 178, 178, 178, 179, 224, 224, 224,
    ],
    // State(145):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(4)
    //   [0] => State(179)
    //   [1..9, A..F, a..f] => State(180)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 180, 224, 224, 180, 180, 180, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 180, 180, 224, 224, 224, 224, 224, 224, 224, 180,
        224, 180, 224, 224, 180, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 180, 180, 180, 180, 179, 224, 224, 224,
    ],
    // State(146):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(4)
    //   [1..9, A..F, a..f] => State(181)
    //   [0] => State(182)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 181, 224, 224, 181, 181, 181, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 181, 181, 224, 224, 224, 224, 224, 224, 224, 181,
        224, 181, 224, 224, 181, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 181, 181, 181, 181, 182, 224, 224, 224,
    ],
    // State(147):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(4)
    //   [1..9, A..F, a..f] => State(183)
    //   [0] => State(184)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 183, 224, 224, 183, 183, 183, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 183, 183, 224, 224, 224, 224, 224, 224, 224, 183,
        224, 183, 224, 224, 183, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 183, 183, 183, 183, 184, 224, 224, 224,
    ],
    // State(148):
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(152)
    //   [0] => State(153)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 152, 225, 225, 152, 152, 152, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 152, 152, 225, 225, 225, 225, 225, 225, 225, 152,
        225, 152, 225, 225, 152, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 152, 152, 152, 152, 153, 225, 225, 225,
    ],
    // State(149):
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> [1] . [0] Hex4Digits
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(8)
    //   [0] => State(151)
    //   [1..9, A..F, a..f] => State(152)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 152, 225, 225, 152, 152, 152, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 152, 152, 225, 225, 225, 225, 225, 225, 225, 152,
        225, 152, 225, 225, 152, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 152, 152, 152, 152, 151, 225, 225, 225,
    ],
    // State(150):
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> HexDigit . Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   NotEscapeSequence -> [u] [{] . CodePoint !?[HexDigit] !?[}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(8)
    //   [2..9, A..F, a..f] => State(148)
    //   [1] => State(149)
    //   [0] => State(150)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 148, 225, 225, 148, 148, 148, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 148, 148, 225, 225, 225, 225, 225, 225, 225, 148,
        225, 148, 225, 225, 148, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 148, 149, 148, 148, 150, 225, 225, 225,
    ],
    // State(151):
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> [1] [0] . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(8)
    //   [0] => State(153)
    //   [1..9, A..F, a..f] => State(154)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 154, 225, 225, 154, 154, 154, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 154, 154, 225, 225, 225, 225, 225, 225, 225, 154,
        225, 154, 225, 225, 154, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 154, 154, 154, 154, 153, 225, 225, 225,
    ],
    // State(152):
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(155)
    //   [0] => State(156)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 155, 225, 225, 155, 155, 155, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 155, 155, 225, 225, 225, 225, 225, 225, 225, 155,
        225, 155, 225, 225, 155, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 155, 155, 155, 155, 156, 225, 225, 225,
    ],
    // State(153):
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(157)
    //   [0] => State(158)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 157, 225, 225, 157, 157, 157, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 157, 157, 225, 225, 225, 225, 225, 225, 225, 157,
        225, 157, 225, 225, 157, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 157, 157, 157, 157, 158, 225, 225, 225,
    ],
    // State(154):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [0] => State(158)
    //   [1..9, A..F, a..f] => State(159)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 159, 225, 225, 159, 159, 159, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 159, 159, 225, 225, 225, 225, 225, 225, 225, 159,
        225, 159, 225, 225, 159, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 159, 159, 159, 159, 158, 225, 225, 225,
    ],
    // State(155):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(160)
    //   [0] => State(161)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 160, 225, 225, 160, 160, 160, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 160, 160, 225, 225, 225, 225, 225, 225, 225, 160,
        225, 160, 225, 225, 160, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 160, 160, 160, 160, 161, 225, 225, 225,
    ],
    // State(156):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(162)
    //   [0] => State(163)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 162, 225, 225, 162, 162, 162, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 162, 162, 225, 225, 225, 225, 225, 225, 225, 162,
        225, 162, 225, 225, 162, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 162, 162, 162, 162, 163, 225, 225, 225,
    ],
    // State(157):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(164)
    //   [0] => State(165)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 164, 225, 225, 164, 164, 164, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 164, 164, 225, 225, 225, 225, 225, 225, 225, 164,
        225, 164, 225, 225, 164, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 164, 164, 164, 164, 165, 225, 225, 225,
    ],
    // State(158):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [0] => State(165)
    //   [1..9, A..F, a..f] => State(166)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 166, 225, 225, 166, 166, 166, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 166, 166, 225, 225, 225, 225, 225, 225, 225, 166,
        225, 166, 225, 225, 166, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 166, 166, 166, 166, 165, 225, 225, 225,
    ],
    // State(159):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(167)
    //   [0] => State(168)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 167, 225, 225, 167, 167, 167, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 167, 167, 225, 225, 225, 225, 225, 225, 225, 167,
        225, 167, 225, 225, 167, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 167, 167, 167, 167, 168, 225, 225, 225,
    ],
    // State(160):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(185)
    //   [0] => State(186)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 185, 225, 225, 185, 185, 185, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 185, 185, 225, 225, 225, 225, 225, 225, 225, 185,
        225, 185, 225, 225, 185, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 185, 185, 185, 185, 186, 225, 225, 225,
    ],
    // State(161):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(187)
    //   [0] => State(188)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 187, 225, 225, 187, 187, 187, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 187, 187, 225, 225, 225, 225, 225, 225, 225, 187,
        225, 187, 225, 225, 187, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 187, 187, 187, 187, 188, 225, 225, 225,
    ],
    // State(162):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(189)
    //   [0] => State(190)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 189, 225, 225, 189, 189, 189, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 189, 189, 225, 225, 225, 225, 225, 225, 225, 189,
        225, 189, 225, 225, 189, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 189, 189, 189, 189, 190, 225, 225, 225,
    ],
    // State(163):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [0] => State(190)
    //   [1..9, A..F, a..f] => State(191)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 191, 225, 225, 191, 191, 191, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 191, 191, 225, 225, 225, 225, 225, 225, 225, 191,
        225, 191, 225, 225, 191, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 191, 191, 191, 191, 190, 225, 225, 225,
    ],
    // State(164):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(192)
    //   [0] => State(193)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 192, 225, 225, 192, 192, 192, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 192, 192, 225, 225, 225, 225, 225, 225, 225, 192,
        225, 192, 225, 225, 192, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 192, 192, 192, 192, 193, 225, 225, 225,
    ],
    // State(165):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(194)
    //   [0] => State(195)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 194, 225, 225, 194, 194, 194, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 194, 194, 225, 225, 225, 225, 225, 225, 225, 194,
        225, 194, 225, 225, 194, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 194, 194, 194, 194, 195, 225, 225, 225,
    ],
    // State(166):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [0] => State(195)
    //   [1..9, A..F, a..f] => State(196)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 196, 225, 225, 196, 196, 196, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 196, 196, 225, 225, 225, 225, 225, 225, 225, 196,
        225, 196, 225, 225, 196, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 196, 196, 196, 196, 195, 225, 225, 225,
    ],
    // State(167):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(197)
    //   [0] => State(198)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 197, 225, 225, 197, 197, 197, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 197, 197, 225, 225, 225, 225, 225, 225, 225, 197,
        225, 197, 225, 225, 197, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 197, 197, 197, 197, 198, 225, 225, 225,
    ],
    // State(168):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(199)
    //   [0] => State(200)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 199, 225, 225, 199, 199, 199, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 199, 199, 225, 225, 225, 225, 225, 225, 225, 199,
        225, 199, 225, 225, 199, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 199, 199, 199, 199, 200, 225, 225, 225,
    ],
    // State(169):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(4)
    //   [1..9, A..F, a..f] => State(84)
    //   [0] => State(85)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 84, 224, 224, 84, 84, 84, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 84, 84, 224, 224, 224, 224, 224, 224, 224, 84, 224, 84,
        224, 224, 84, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 84, 84, 84, 84, 85, 224, 224, 224,
    ],
    // State(170):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(4)
    //   [1..9, A..F, a..f] => State(86)
    //   [0] => State(87)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 86, 224, 224, 86, 86, 86, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 86, 86, 224, 224, 224, 224, 224, 224, 224, 86, 224, 86,
        224, 224, 86, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 86, 86, 86, 86, 87, 224, 224, 224,
    ],
    // State(171):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(4)
    //   [1..9, A..F, a..f] => State(88)
    //   [0] => State(89)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 88, 224, 224, 88, 88, 88, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 88, 88, 224, 224, 224, 224, 224, 224, 224, 88, 224, 88,
        224, 224, 88, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 88, 88, 88, 88, 89, 224, 224, 224,
    ],
    // State(172):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(4)
    //   [0] => State(89)
    //   [1..9, A..F, a..f] => State(90)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 90, 224, 224, 90, 90, 90, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 90, 90, 224, 224, 224, 224, 224, 224, 224, 90, 224, 90,
        224, 224, 90, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 90, 90, 90, 90, 89, 224, 224, 224,
    ],
    // State(173):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(4)
    //   [1..9, A..F, a..f] => State(104)
    //   [0] => State(105)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 104, 224, 224, 104, 104, 104, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 104, 104, 224, 224, 224, 224, 224, 224, 224, 104,
        224, 104, 224, 224, 104, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 104, 104, 104, 104, 105, 224, 224, 224,
    ],
    // State(174):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(4)
    //   [1..9, A..F, a..f] => State(106)
    //   [0] => State(107)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 106, 224, 224, 106, 106, 106, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 106, 106, 224, 224, 224, 224, 224, 224, 224, 106,
        224, 106, 224, 224, 106, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 106, 106, 106, 106, 107, 224, 224, 224,
    ],
    // State(175):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(4)
    //   [0] => State(107)
    //   [1..9, A..F, a..f] => State(108)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 108, 224, 224, 108, 108, 108, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 108, 108, 224, 224, 224, 224, 224, 224, 224, 108,
        224, 108, 224, 224, 108, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 224, 224, 108, 108, 108, 108, 107, 224, 224, 224,
    ],
    // State(176):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(4)
    //   [1..9, A..F, a..f] => State(50)
    //   [0] => State(51)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 50, 224, 224, 50, 50, 50, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 50, 50, 224, 224, 224, 224, 224, 224, 224, 50, 224, 50,
        224, 224, 50, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 50, 50, 50, 50, 51, 224, 224, 224,
    ],
    // State(177):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(4)
    //   [1..9, A..F, a..f] => State(52)
    //   [0] => State(53)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 52, 224, 224, 52, 52, 52, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 52, 52, 224, 224, 224, 224, 224, 224, 224, 52, 224, 52,
        224, 224, 52, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 52, 52, 52, 52, 53, 224, 224, 224,
    ],
    // State(178):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [}] => State(4)
    //   [1..9, A..F, a..f] => State(40)
    //   [0] => State(42)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 40, 224, 224, 40, 40, 40, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 40, 40, 224, 224, 224, 224, 224, 224, 224, 40, 224, 40,
        224, 224, 40, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 40, 40, 40, 40, 42, 224, 224, 224,
    ],
    // State(179):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [}] => State(4)
    //   [0] => State(42)
    //   [1..9, A..F, a..f] => State(44)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 44, 224, 224, 44, 44, 44, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 44, 44, 224, 224, 224, 224, 224, 224, 224, 44, 224, 44,
        224, 224, 44, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 44, 44, 44, 44, 42, 224, 224, 224,
    ],
    // State(180):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(4)
    //   [1..9, A..F, a..f] => State(46)
    //   [0] => State(47)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 46, 224, 224, 46, 46, 46, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 46, 46, 224, 224, 224, 224, 224, 224, 224, 46, 224, 46,
        224, 224, 46, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 46, 46, 46, 46, 47, 224, 224, 224,
    ],
    // State(181):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(4)
    //   [1..9, A..F, a..f] => State(66)
    //   [0] => State(67)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 66, 224, 224, 66, 66, 66, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 66, 66, 224, 224, 224, 224, 224, 224, 224, 66, 224, 66,
        224, 224, 66, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 66, 66, 66, 66, 67, 224, 224, 224,
    ],
    // State(182):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(4)
    //   [1..9, A..F, a..f] => State(68)
    //   [0] => State(69)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 68, 224, 224, 68, 68, 68, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 68, 68, 224, 224, 224, 224, 224, 224, 224, 68, 224, 68,
        224, 224, 68, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 68, 68, 68, 68, 69, 224, 224, 224,
    ],
    // State(183):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(4)
    //   [1..9, A..F, a..f] => State(70)
    //   [0] => State(71)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 70, 224, 224, 70, 70, 70, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 70, 70, 224, 224, 224, 224, 224, 224, 224, 70, 224, 70,
        224, 224, 70, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 70, 70, 70, 70, 71, 224, 224, 224,
    ],
    // State(184):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(4)
    //   [0] => State(71)
    //   [1..9, A..F, a..f] => State(72)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(224)?
    [
        224, 224, 4, 224, 224, 224, 224, 224, 224, 224, 72, 224, 224, 72, 72, 72, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 72, 72, 224, 224, 224, 224, 224, 224, 224, 72, 224, 72,
        224, 224, 72, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
        224, 224, 224, 224, 224, 224, 224, 72, 72, 72, 72, 71, 224, 224, 224,
    ],
    // State(185):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(93)
    //   [0] => State(94)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 93, 225, 225, 93, 93, 93, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 93, 93, 225, 225, 225, 225, 225, 225, 225, 93, 225, 93,
        225, 225, 93, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 93, 93, 93, 93, 94, 225, 225, 225,
    ],
    // State(186):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(95)
    //   [0] => State(96)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 95, 225, 225, 95, 95, 95, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 95, 95, 225, 225, 225, 225, 225, 225, 225, 95, 225, 95,
        225, 225, 95, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 95, 95, 95, 95, 96, 225, 225, 225,
    ],
    // State(187):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(97)
    //   [0] => State(98)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 97, 225, 225, 97, 97, 97, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 97, 97, 225, 225, 225, 225, 225, 225, 225, 97, 225, 97,
        225, 225, 97, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 97, 97, 97, 97, 98, 225, 225, 225,
    ],
    // State(188):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [0] => State(98)
    //   [1..9, A..F, a..f] => State(99)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 99, 225, 225, 99, 99, 99, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 99, 99, 225, 225, 225, 225, 225, 225, 225, 99, 225, 99,
        225, 225, 99, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 99, 99, 99, 99, 98, 225, 225, 225,
    ],
    // State(189):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(109)
    //   [0] => State(110)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 109, 225, 225, 109, 109, 109, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 109, 109, 225, 225, 225, 225, 225, 225, 225, 109,
        225, 109, 225, 225, 109, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 109, 109, 109, 109, 110, 225, 225, 225,
    ],
    // State(190):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(111)
    //   [0] => State(112)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 111, 225, 225, 111, 111, 111, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 111, 111, 225, 225, 225, 225, 225, 225, 225, 111,
        225, 111, 225, 225, 111, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 111, 111, 111, 111, 112, 225, 225, 225,
    ],
    // State(191):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [0] => State(112)
    //   [1..9, A..F, a..f] => State(113)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 113, 225, 225, 113, 113, 113, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 113, 113, 225, 225, 225, 225, 225, 225, 225, 113,
        225, 113, 225, 225, 113, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 225, 225, 113, 113, 113, 113, 112, 225, 225, 225,
    ],
    // State(192):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(54)
    //   [0] => State(55)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 54, 225, 225, 54, 54, 54, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 54, 54, 225, 225, 225, 225, 225, 225, 225, 54, 225, 54,
        225, 225, 54, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 54, 54, 54, 54, 55, 225, 225, 225,
    ],
    // State(193):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(56)
    //   [0] => State(57)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 56, 225, 225, 56, 56, 56, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 56, 56, 225, 225, 225, 225, 225, 225, 225, 56, 225, 56,
        225, 225, 56, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 56, 56, 56, 56, 57, 225, 225, 225,
    ],
    // State(194):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(41)
    //   [0] => State(43)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 41, 225, 225, 41, 41, 41, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 41, 41, 225, 225, 225, 225, 225, 225, 225, 41, 225, 41,
        225, 225, 41, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 41, 41, 41, 41, 43, 225, 225, 225,
    ],
    // State(195):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> . HexDigit NotCodePoint
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [}] => State(8)
    //   [0] => State(43)
    //   [1..9, A..F, a..f] => State(45)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 45, 225, 225, 45, 45, 45, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 45, 45, 225, 225, 225, 225, 225, 225, 225, 45, 225, 45,
        225, 225, 45, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 45, 45, 45, 45, 43, 225, 225, 225,
    ],
    // State(196):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(48)
    //   [0] => State(49)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 48, 225, 225, 48, 48, 48, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 48, 48, 225, 225, 225, 225, 225, 225, 225, 48, 225, 48,
        225, 225, 48, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 48, 48, 48, 48, 49, 225, 225, 225,
    ],
    // State(197):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   NotCodePoint -> NonZeroHexDigit NonZeroHexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(73)
    //   [0] => State(74)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 73, 225, 225, 73, 73, 73, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 73, 73, 225, 225, 225, 225, 225, 225, 225, 73, 225, 73,
        225, 225, 73, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 73, 73, 73, 73, 74, 225, 225, 225,
    ],
    // State(198):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(75)
    //   [0] => State(76)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 75, 225, 225, 75, 75, 75, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 75, 75, 225, 225, 225, 225, 225, 225, 225, 75, 225, 75,
        225, 225, 75, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 75, 75, 75, 75, 76, 225, 225, 225,
    ],
    // State(199):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   NotCodePoint -> NonZeroHexDigit . NonZeroHexDigit Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [1..9, A..F, a..f] => State(77)
    //   [0] => State(78)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 77, 225, 225, 77, 77, 77, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 77, 77, 225, 225, 225, 225, 225, 225, 225, 77, 225, 77,
        225, 225, 77, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 77, 77, 77, 77, 78, 225, 225, 225,
    ],
    // State(200):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   NotCodePoint -> HexDigit . NotCodePoint
    //   NotEscapeSequence -> [u] [{] . NotCodePoint !?[HexDigit]
    //   NotCodePoint -> . NonZeroHexDigit NonZeroHexDigit Hex4Digits
    //   NonZeroHexDigit -> . [HexDigit -0]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   NotCodePoint -> . HexDigit NotCodePoint
    // Transitions:
    //   [}] => State(8)
    //   [0] => State(78)
    //   [1..9, A..F, a..f] => State(79)
    //   [<NUL>../, :..@, G..`, g..|, ~..U+10FFFF] => State(225)?
    [
        225, 225, 8, 225, 225, 225, 225, 225, 225, 225, 79, 225, 225, 79, 79, 79, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 79, 79, 225, 225, 225, 225, 225, 225, 225, 79, 225, 79,
        225, 225, 79, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
        225, 225, 225, 225, 225, 225, 225, 79, 79, 79, 79, 78, 225, 225, 225,
    ],
    // State(201):
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   CodePoint -> [1] [0] . Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [0..9, A..F, a..f] => State(204)
    //   [}] => State(462):PrivateIdentifier
    [
        535, 535, 462, 535, 535, 535, 535, 535, 535, 535, 204, 535, 535, 204, 204, 204, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 204, 204, 535, 535, 535, 535, 535, 535, 535, 204,
        535, 204, 535, 535, 204, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 204, 204, 204, 204, 204, 535, 535, 535,
    ],
    // State(202):
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> [1] . [0] Hex4Digits
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [0] => State(201)
    //   [1..9, A..F, a..f] => State(204)
    //   [}] => State(462):PrivateIdentifier
    [
        535, 535, 462, 535, 535, 535, 535, 535, 535, 535, 204, 535, 535, 204, 204, 204, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 204, 204, 535, 535, 535, 535, 535, 535, 535, 204,
        535, 204, 535, 535, 204, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 204, 204, 204, 204, 201, 535, 535, 535,
    ],
    // State(203):
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> HexDigit . Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [2..9, A..F, a..f] => State(201)
    //   [1] => State(202)
    //   [0] => State(203)
    //   [}] => State(462):PrivateIdentifier
    [
        535, 535, 462, 535, 535, 535, 535, 535, 535, 535, 201, 535, 535, 201, 201, 201, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 201, 201, 535, 535, 535, 535, 535, 535, 535, 201,
        535, 201, 535, 535, 201, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 201, 202, 201, 201, 203, 535, 535, 535,
    ],
    // State(204):
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [0..9, A..F, a..f] => State(205)
    //   [}] => State(462):PrivateIdentifier
    [
        535, 535, 462, 535, 535, 535, 535, 535, 535, 535, 205, 535, 535, 205, 205, 205, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 205, 205, 535, 535, 535, 535, 535, 535, 535, 205,
        535, 205, 535, 535, 205, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 205, 205, 205, 205, 205, 535, 535, 535,
    ],
    // State(205):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions:
    //   [0..9, A..F, a..f] => State(206)
    //   [}] => State(462):PrivateIdentifier
    [
        535, 535, 462, 535, 535, 535, 535, 535, 535, 535, 206, 535, 535, 206, 206, 206, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 206, 206, 535, 535, 535, 535, 535, 535, 535, 206,
        535, 206, 535, 535, 206, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 206, 206, 206, 206, 206, 535, 535, 535,
    ],
    // State(206):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions:
    //   [0..9, A..F, a..f] => State(221)
    //   [}] => State(462):PrivateIdentifier
    [
        535, 535, 462, 535, 535, 535, 535, 535, 535, 535, 221, 535, 535, 221, 221, 221, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 221, 221, 535, 535, 535, 535, 535, 535, 535, 221,
        535, 221, 535, 535, 221, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 221, 221, 221, 221, 221, 535, 535, 535,
    ],
    // State(207):
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   CodePoint -> [1] [0] . Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(6)
    //   [0..9, A..F, a..f] => State(210)
    [
        535, 535, 6, 535, 535, 535, 535, 535, 535, 535, 210, 535, 535, 210, 210, 210, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 210, 210, 535, 535, 535, 535, 535, 535, 535, 210,
        535, 210, 535, 535, 210, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 210, 210, 210, 210, 210, 535, 535, 535,
    ],
    // State(208):
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> [1] . [0] Hex4Digits
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(6)
    //   [0] => State(207)
    //   [1..9, A..F, a..f] => State(210)
    [
        535, 535, 6, 535, 535, 535, 535, 535, 535, 535, 210, 535, 535, 210, 210, 210, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 210, 210, 535, 535, 535, 535, 535, 535, 535, 210,
        535, 210, 535, 535, 210, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 210, 210, 210, 210, 207, 535, 535, 535,
    ],
    // State(209):
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> HexDigit . Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(6)
    //   [2..9, A..F, a..f] => State(207)
    //   [1] => State(208)
    //   [0] => State(209)
    [
        535, 535, 6, 535, 535, 535, 535, 535, 535, 535, 207, 535, 535, 207, 207, 207, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 207, 207, 535, 535, 535, 535, 535, 535, 535, 207,
        535, 207, 535, 535, 207, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 207, 208, 207, 207, 209, 535, 535, 535,
    ],
    // State(210):
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(6)
    //   [0..9, A..F, a..f] => State(211)
    [
        535, 535, 6, 535, 535, 535, 535, 535, 535, 535, 211, 535, 535, 211, 211, 211, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 211, 211, 535, 535, 535, 535, 535, 535, 535, 211,
        535, 211, 535, 535, 211, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 211, 211, 211, 211, 211, 535, 535, 535,
    ],
    // State(211):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions:
    //   [}] => State(6)
    //   [0..9, A..F, a..f] => State(217)
    [
        535, 535, 6, 535, 535, 535, 535, 535, 535, 535, 217, 535, 535, 217, 217, 217, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 217, 217, 535, 535, 535, 535, 535, 535, 535, 217,
        535, 217, 535, 535, 217, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 217, 217, 217, 217, 217, 535, 535, 535,
    ],
    // State(212):
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   CodePoint -> [1] [0] . Hex4Digits
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(7)
    //   [0..9, A..F, a..f] => State(215)
    [
        535, 535, 7, 535, 535, 535, 535, 535, 535, 535, 215, 535, 535, 215, 215, 215, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 215, 215, 535, 535, 535, 535, 535, 535, 535, 215,
        535, 215, 535, 535, 215, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 215, 215, 215, 215, 215, 535, 535, 535,
    ],
    // State(213):
    //   CodePoint -> HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   CodePoint -> [1] . [0] Hex4Digits
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(7)
    //   [0] => State(212)
    //   [1..9, A..F, a..f] => State(215)
    [
        535, 535, 7, 535, 535, 535, 535, 535, 535, 535, 215, 535, 535, 215, 215, 215, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 215, 215, 535, 535, 535, 535, 535, 535, 535, 215,
        535, 215, 535, 535, 215, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 215, 215, 215, 215, 212, 535, 535, 535,
    ],
    // State(214):
    //   CodePoint -> [0] . CodePoint
    //   UnicodeEscapeSequence -> [u] [{] . CodePoint [}]
    //   CodePoint -> . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   CodePoint -> . HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit
    //   CodePoint -> . HexDigit HexDigit HexDigit
    //   CodePoint -> HexDigit . HexDigit HexDigit
    //   CodePoint -> . Hex4Digits
    //   Hex4Digits -> . HexDigit HexDigit HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   CodePoint -> . HexDigit Hex4Digits
    //   CodePoint -> HexDigit . Hex4Digits
    //   CodePoint -> . [1] [0] Hex4Digits
    //   CodePoint -> . [0] CodePoint
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(7)
    //   [2..9, A..F, a..f] => State(212)
    //   [1] => State(213)
    //   [0] => State(214)
    [
        535, 535, 7, 535, 535, 535, 535, 535, 535, 535, 212, 535, 535, 212, 212, 212, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 212, 212, 535, 535, 535, 535, 535, 535, 535, 212,
        535, 212, 535, 535, 212, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 212, 213, 212, 212, 214, 535, 535, 535,
    ],
    // State(215):
    //   CodePoint -> HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   Hex4Digits -> HexDigit . HexDigit HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    // Transitions:
    //   [}] => State(7)
    //   [0..9, A..F, a..f] => State(216)
    [
        535, 535, 7, 535, 535, 535, 535, 535, 535, 535, 216, 535, 535, 216, 216, 216, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 216, 216, 535, 535, 535, 535, 535, 535, 535, 216,
        535, 216, 535, 535, 216, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 216, 216, 216, 216, 216, 535, 535, 535,
    ],
    // State(216):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   Hex4Digits -> HexDigit HexDigit . HexDigit HexDigit
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions:
    //   [}] => State(7)
    //   [0..9, A..F, a..f] => State(218)
    [
        535, 535, 7, 535, 535, 535, 535, 535, 535, 535, 218, 535, 535, 218, 218, 218, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 218, 218, 535, 535, 535, 535, 535, 535, 535, 218,
        535, 218, 535, 535, 218, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 218, 218, 218, 218, 218, 535, 535, 535,
    ],
    // State(217):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions:
    //   [}] => State(6)
    //   [0..9, A..F, a..f] => State(222)
    [
        535, 535, 6, 535, 535, 535, 535, 535, 535, 535, 222, 535, 535, 222, 222, 222, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 222, 222, 535, 535, 535, 535, 535, 535, 535, 222,
        535, 222, 535, 535, 222, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 222, 222, 222, 222, 222, 535, 535, 535,
    ],
    // State(218):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions:
    //   [}] => State(7)
    //   [0..9, A..F, a..f] => State(223)
    [
        535, 535, 7, 535, 535, 535, 535, 535, 535, 535, 223, 535, 535, 223, 223, 223, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 223, 223, 535, 535, 535, 535, 535, 535, 535, 223,
        535, 223, 535, 535, 223, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 223, 223, 223, 223, 223, 535, 535, 535,
    ],
    // State(219):
    //   Hex4Digits -> HexDigit HexDigit HexDigit . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    // Transitions:
    //   [0..9, A..F, a..f] => State(462):PrivateIdentifier
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 462, 535, 535, 462, 462, 462, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 462, 462, 535, 535, 535, 535, 535, 535, 535, 462,
        535, 462, 535, 535, 462, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 462, 462, 462, 462, 462, 535, 535, 535,
    ],
    // State(220):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions:
    //   [}] => State(289):IdentifierName
    [
        535, 535, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(221):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions:
    //   [}] => State(462):PrivateIdentifier
    [
        535, 535, 462, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(222):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions:
    //   [}] => State(6)
    [
        535, 535, 6, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(223):
    //   UnicodeEscapeSequence -> [u] [{] CodePoint . [}]
    // Transitions:
    //   [}] => State(7)
    [
        535, 535, 7, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(224):
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   TemplateMiddle -> [}] . TemplateCharacters [$] [{]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] !?[{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] !?[<LF>]
    //   LineTerminatorSequence -> [<CR>] . !?[<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   TemplateMiddle -> [}] TemplateCharacters . [$] [{]
    //   TemplateTail -> [}] . TemplateCharacters [`]
    //   TemplateTail -> [}] TemplateCharacters . [`]
    //   TemplateCharacter -> [$] . !?[{]
    //   NotEscapeSequence -> [u] . !?[HexDigit] !?[{]
    //   NotEscapeSequence -> [x] . !?[HexDigit]
    //   TemplateEscapeSequence -> [0] . !?[DecimalDigit]
    //   NotEscapeSequence -> [u] HexDigit . !?[HexDigit]
    //   NotEscapeSequence -> [u] [{] . !?[HexDigit]
    //   NotEscapeSequence -> [x] HexDigit . !?[HexDigit]
    //   NotEscapeSequence -> [u] HexDigit HexDigit . !?[HexDigit]
    //   NotEscapeSequence -> [u] [{] CodePoint . !?[HexDigit] !?[}]
    //   NotEscapeSequence -> [u] HexDigit HexDigit HexDigit . !?[HexDigit]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . !?[HexDigit]
    // Transitions:
    //   [<NUL>..<FF>, <SO>..#, %..[, ].._, a..U+10FFFF] => State(4)
    //   [\] => State(10)
    //   [<CR>] => State(25)
    //   [$] => State(29)
    //   [`] => State(534):TemplateTail
    [
        25, 10, 4, 4, 4, 4, 534, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    ],
    // State(225):
    //   TemplateCharacters -> TemplateCharacter . TemplateCharacters
    //   NoSubstitutionTemplate -> [`] . TemplateCharacters [`]
    //   TemplateCharacters -> . TemplateCharacter
    //   TemplateCharacter -> . [$] !?[{]
    //   TemplateCharacter -> . [\] TemplateEscapeSequence
    //   TemplateCharacter -> . [\] NotEscapeSequence
    //   TemplateCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   TemplateCharacter -> . LineTerminatorSequence
    //   LineTerminatorSequence -> . [<LF>]
    //   LineTerminatorSequence -> . [<CR>] !?[<LF>]
    //   LineTerminatorSequence -> [<CR>] . !?[<LF>]
    //   LineTerminatorSequence -> . [<LS>]
    //   LineTerminatorSequence -> . [<PS>]
    //   LineTerminatorSequence -> . [<CR>] [<LF>]
    //   TemplateCharacter -> . [SourceCharacter -` -\ -$ -LineTerminator]
    //   TemplateCharacters -> . TemplateCharacter TemplateCharacters
    //   NoSubstitutionTemplate -> [`] TemplateCharacters . [`]
    //   TemplateHead -> [`] . TemplateCharacters [$] [{]
    //   TemplateHead -> [`] TemplateCharacters . [$] [{]
    //   TemplateCharacter -> [$] . !?[{]
    //   NotEscapeSequence -> [u] . !?[HexDigit] !?[{]
    //   NotEscapeSequence -> [x] . !?[HexDigit]
    //   TemplateEscapeSequence -> [0] . !?[DecimalDigit]
    //   NotEscapeSequence -> [u] HexDigit . !?[HexDigit]
    //   NotEscapeSequence -> [u] [{] . !?[HexDigit]
    //   NotEscapeSequence -> [x] HexDigit . !?[HexDigit]
    //   NotEscapeSequence -> [u] HexDigit HexDigit . !?[HexDigit]
    //   NotEscapeSequence -> [u] [{] CodePoint . !?[HexDigit] !?[}]
    //   NotEscapeSequence -> [u] HexDigit HexDigit HexDigit . !?[HexDigit]
    //   NotEscapeSequence -> [u] [{] NotCodePoint . !?[HexDigit]
    // Transitions:
    //   [<NUL>..<FF>, <SO>..#, %..[, ].._, a..U+10FFFF] => State(8)
    //   [\] => State(13)
    //   [<CR>] => State(26)
    //   [$] => State(32)
    //   [`] => State(529):NoSubstitutionTemplate
    [
        26, 13, 8, 8, 8, 8, 529, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 32, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
    ],
    // State(226):
    //   DoubleStringCharacters -> DoubleStringCharacter . DoubleStringCharacters
    //   StringLiteral -> ["] . DoubleStringCharacters ["]
    //   DoubleStringCharacters -> . DoubleStringCharacter
    //   DoubleStringCharacter -> . [SourceCharacter -" -\ -LineTerminator]
    //   DoubleStringCharacter -> . [<LS>]
    //   DoubleStringCharacter -> . [<PS>]
    //   DoubleStringCharacter -> . [\] EscapeSequence
    //   DoubleStringCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   LineTerminatorSequence -> [<CR>] . !?[<LF>]
    //   DoubleStringCharacters -> . DoubleStringCharacter DoubleStringCharacters
    //   StringLiteral -> ["] DoubleStringCharacters . ["]
    //   LegacyOctalEscapeSequence -> NonZeroOctalDigit . !?[OctalDigit]
    //   EscapeSequence -> [0] . !?[DecimalDigit]
    //   LegacyOctalEscapeSequence -> [0] . ?[8 9]
    //   LegacyOctalEscapeSequence -> ZeroToThree OctalDigit . !?[OctalDigit]
    // Transitions:
    //   [<NUL>..<HT>, <VT>..<FF>, <SO>..!, #..[, ]..U+10FFFF] => State(6)
    //   [\] => State(11)
    //   ["] => State(528):StringLiteral
    [
        535, 11, 6, 6, 528, 6, 6, 6, 535, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    ],
    // State(227):
    //   SingleStringCharacters -> SingleStringCharacter . SingleStringCharacters
    //   StringLiteral -> ['] . SingleStringCharacters [']
    //   SingleStringCharacters -> . SingleStringCharacter
    //   SingleStringCharacter -> . [SourceCharacter -' -\ -LineTerminator]
    //   SingleStringCharacter -> . [<LS>]
    //   SingleStringCharacter -> . [<PS>]
    //   SingleStringCharacter -> . [\] EscapeSequence
    //   SingleStringCharacter -> . LineContinuation
    //   LineContinuation -> . [\] LineTerminatorSequence
    //   LineTerminatorSequence -> [<CR>] . !?[<LF>]
    //   SingleStringCharacters -> . SingleStringCharacter SingleStringCharacters
    //   StringLiteral -> ['] SingleStringCharacters . [']
    //   LegacyOctalEscapeSequence -> NonZeroOctalDigit . !?[OctalDigit]
    //   EscapeSequence -> [0] . !?[DecimalDigit]
    //   LegacyOctalEscapeSequence -> [0] . ?[8 9]
    //   LegacyOctalEscapeSequence -> ZeroToThree OctalDigit . !?[OctalDigit]
    // Transitions:
    //   [<NUL>..<HT>, <VT>..<FF>, <SO>..&, (..[, ]..U+10FFFF] => State(7)
    //   [\] => State(12)
    //   ['] => State(528):StringLiteral
    [
        535, 12, 7, 7, 7, 528, 7, 7, 535, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    ],
    // State(228):
    //   WhiteSpaceSequence -> WhiteSpace . WhiteSpaceSequence
    //   WhiteSpaceSequence -> WhiteSpace .
    //   WhiteSpaceSequence -> . WhiteSpace
    //   WhiteSpace -> . [<TAB> <VT> <FF> <ZWNBSP> <USP>]
    //   WhiteSpaceSequence -> WhiteSpace WhiteSpaceSequence .
    //   WhiteSpaceSequence -> . WhiteSpace WhiteSpaceSequence
    // Transitions:
    //   [<HT>, <VT>..<FF>, <SP>, U+00A0, U+1680, U+2000..U+200A, U+200F, U+205F, U+FEFF] => State(228):WhiteSpaceSequence
    [
        535, 535, 535, 535, 535, 535, 535, 228, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(229):
    //   LineTerminatorSequence -> [<LF>] .
    //   LineTerminatorSequence -> [<LS>] .
    //   LineTerminatorSequence -> [<PS>] .
    //   LineTerminatorSequence -> [<CR>] [<LF>] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(230):
    //   LineTerminatorSequence -> [<CR>] !?[<LF>] .
    //   LineTerminatorSequence -> [<CR>] . !?[<LF>]
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(231):
    //   Comment -> SingleLineComment .
    //   SingleLineCommentChars -> SingleLineCommentChar . SingleLineCommentChars
    //   SingleLineComment -> [/] [/] . SingleLineCommentChars
    //   SingleLineCommentChars -> . SingleLineCommentChar
    //   SingleLineCommentChar -> . [SourceCharacter -LineTerminator]
    //   SingleLineCommentChars -> . SingleLineCommentChar SingleLineCommentChars
    // Transitions:
    //   [<NUL>..<HT>, <VT>..<FF>, <SO>..U+2027, U+202A..U+10FFFF] => State(231):Comment
    [
        535, 231, 231, 231, 231, 231, 231, 231, 535, 535, 231, 231, 231, 231, 231, 231, 231, 231,
        231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
        231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
        231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
    ],
    // State(232):
    //   Comment -> MultiLineComment .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(233):
    //   BREAK -> [b] [r] [e] [a] [k] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(234):
    //   CASE -> [c] [a] [s] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(235):
    //   CATCH -> [c] [a] [t] [c] [h] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(236):
    //   CLASS -> [c] [l] [a] [s] [s] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(237):
    //   CONST -> [c] [o] [n] [s] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(238):
    //   CONTINUE -> [c] [o] [n] [t] [i] [n] [u] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(239):
    //   DEBUGGER -> [d] [e] [b] [u] [g] [g] [e] [r] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(240):
    //   DEFAULT -> [d] [e] [f] [a] [u] [l] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(241):
    //   DELETE -> [d] [e] [l] [e] [t] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(242):
    //   DO -> [d] [o] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(243):
    //   ELSE -> [e] [l] [s] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(244):
    //   ENUM -> [e] [n] [u] [m] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(245):
    //   EXPORT -> [e] [x] [p] [o] [r] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(246):
    //   EXTENDS -> [e] [x] [t] [e] [n] [d] [s] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(247):
    //   FALSE -> [f] [a] [l] [s] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(248):
    //   FINALLY -> [f] [i] [n] [a] [l] [l] [y] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(249):
    //   FOR -> [f] [o] [r] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(250):
    //   FUNCTION -> [f] [u] [n] [c] [t] [i] [o] [n] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(251):
    //   IF -> [i] [f] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(252):
    //   IMPORT -> [i] [m] [p] [o] [r] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(253):
    //   IN -> [i] [n] .
    //   INSTANCEOF -> [i] [n] . [s] [t] [a] [n] [c] [e] [o] [f]
    //   INTERFACE -> [i] [n] . [t] [e] [r] [f] [a] [c] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..r, u..z, U+200C..U+200D] => State(289):IdentifierName
    //   [s] => State(290):IdentifierName
    //   [t] => State(292):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 290, 292, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(254):
    //   INSTANCEOF -> [i] [n] [s] [t] [a] [n] [c] [e] [o] [f] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(255):
    //   NEW -> [n] [e] [w] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(256):
    //   NULL -> [n] [u] [l] [l] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(257):
    //   RETURN -> [r] [e] [t] [u] [r] [n] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(258):
    //   SUPER -> [s] [u] [p] [e] [r] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(259):
    //   SWITCH -> [s] [w] [i] [t] [c] [h] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(260):
    //   THIS -> [t] [h] [i] [s] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(261):
    //   THROW -> [t] [h] [r] [o] [w] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(262):
    //   TRUE -> [t] [r] [u] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(263):
    //   TRY -> [t] [r] [y] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(264):
    //   TYPEOF -> [t] [y] [p] [e] [o] [f] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(265):
    //   VAR -> [v] [a] [r] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(266):
    //   VOID -> [v] [o] [i] [d] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(267):
    //   WHILE -> [w] [h] [i] [l] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(268):
    //   WITH -> [w] [i] [t] [h] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(269):
    //   AWAIT -> [a] [w] [a] [i] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(270):
    //   YIELD -> [y] [i] [e] [l] [d] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(271):
    //   LET -> [l] [e] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(272):
    //   STATIC -> [s] [t] [a] [t] [i] [c] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(273):
    //   IMPLEMENTS -> [i] [m] [p] [l] [e] [m] [e] [n] [t] [s] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(274):
    //   INTERFACE -> [i] [n] [t] [e] [r] [f] [a] [c] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(275):
    //   PACKAGE -> [p] [a] [c] [k] [a] [g] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(276):
    //   PRIVATE -> [p] [r] [i] [v] [a] [t] [e] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(277):
    //   PROTECTED -> [p] [r] [o] [t] [e] [c] [t] [e] [d] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(278):
    //   PUBLIC -> [p] [u] [b] [l] [i] [c] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(279):
    //   AS -> [a] [s] .
    //   ASYNC -> [a] [s] . [y] [n] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..x, z, U+200C..U+200D] => State(289):IdentifierName
    //   [y] => State(378):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 378, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(280):
    //   ASYNC -> [a] [s] [y] [n] [c] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(281):
    //   FROM -> [f] [r] [o] [m] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(282):
    //   GET -> [g] [e] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(283):
    //   META -> [m] [e] [t] [a] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(284):
    //   OF -> [o] [f] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(285):
    //   SET -> [s] [e] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(286):
    //   TARGET -> [t] [a] [r] [g] [e] [t] .
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(287):
    //   BREAK -> [b] . [r] [e] [a] [k]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(289):IdentifierName
    //   [r] => State(332):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 332, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(288):
    //   RETURN -> [r] . [e] [t] [u] [r] [n]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(289):IdentifierName
    //   [e] => State(307):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 307, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(289):
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    //   IdentifierName -> IdentifierName IdentifierPart .
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(290):
    //   INSTANCEOF -> [i] [n] [s] . [t] [a] [n] [c] [e] [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(289):IdentifierName
    //   [t] => State(294):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 294, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(291):
    //   FUNCTION -> [f] [u] . [n] [c] [t] [i] [o] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(289):IdentifierName
    //   [n] => State(301):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 301, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(292):
    //   INTERFACE -> [i] [n] [t] . [e] [r] [f] [a] [c] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(289):IdentifierName
    //   [e] => State(302):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 302, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(293):
    //   PROTECTED -> [p] [r] [o] . [t] [e] [c] [t] [e] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(289):IdentifierName
    //   [t] => State(303):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 303, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(294):
    //   INSTANCEOF -> [i] [n] [s] [t] . [a] [n] [c] [e] [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(289):IdentifierName
    //   [a] => State(304):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 304, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(295):
    //   IMPLEMENTS -> [i] [m] [p] [l] . [e] [m] [e] [n] [t] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(289):IdentifierName
    //   [e] => State(305):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 305, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(296):
    //   PACKAGE -> [p] . [a] [c] [k] [a] [g] [e]
    //   PRIVATE -> [p] . [r] [i] [v] [a] [t] [e]
    //   PROTECTED -> [p] . [r] [o] [t] [e] [c] [t] [e] [d]
    //   PUBLIC -> [p] . [u] [b] [l] [i] [c]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, b..q, s..t, v..z, U+200C..U+200D] => State(289):IdentifierName
    //   [r] => State(298):IdentifierName
    //   [a] => State(299):IdentifierName
    //   [u] => State(315):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 298, 315, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 299, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(297):
    //   FINALLY -> [f] [i] . [n] [a] [l] [l] [y]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(289):IdentifierName
    //   [n] => State(318):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 318, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(298):
    //   PRIVATE -> [p] [r] . [i] [v] [a] [t] [e]
    //   PROTECTED -> [p] [r] . [o] [t] [e] [c] [t] [e] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..h, j..n, p..z, U+200C..U+200D] => State(289):IdentifierName
    //   [o] => State(293):IdentifierName
    //   [i] => State(319):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 293, 319, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(299):
    //   PACKAGE -> [p] [a] . [c] [k] [a] [g] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(289):IdentifierName
    //   [c] => State(320):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 320, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(300):
    //   DEBUGGER -> [d] [e] [b] . [u] [g] [g] [e] [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..t, v..z, U+200C..U+200D] => State(289):IdentifierName
    //   [u] => State(322):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 322, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(301):
    //   FUNCTION -> [f] [u] [n] . [c] [t] [i] [o] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(289):IdentifierName
    //   [c] => State(323):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 323, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(302):
    //   INTERFACE -> [i] [n] [t] [e] . [r] [f] [a] [c] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(289):IdentifierName
    //   [r] => State(324):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 324, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(303):
    //   PROTECTED -> [p] [r] [o] [t] . [e] [c] [t] [e] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(289):IdentifierName
    //   [e] => State(325):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 325, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(304):
    //   INSTANCEOF -> [i] [n] [s] [t] [a] . [n] [c] [e] [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(289):IdentifierName
    //   [n] => State(326):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 326, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(305):
    //   IMPLEMENTS -> [i] [m] [p] [l] [e] . [m] [e] [n] [t] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..l, n..z, U+200C..U+200D] => State(289):IdentifierName
    //   [m] => State(327):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 327, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(306):
    //   YIELD -> [y] . [i] [e] [l] [d]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(289):IdentifierName
    //   [i] => State(338):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 338, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(307):
    //   RETURN -> [r] [e] . [t] [u] [r] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(289):IdentifierName
    //   [t] => State(340):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 340, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(308):
    //   EXPORT -> [e] [x] . [p] [o] [r] [t]
    //   EXTENDS -> [e] [x] . [t] [e] [n] [d] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..o, q..s, u..z, U+200C..U+200D] => State(289):IdentifierName
    //   [t] => State(316):IdentifierName
    //   [p] => State(341):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 341, 289, 289, 289, 289, 289, 289, 316, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(309):
    //   STATIC -> [s] [t] . [a] [t] [i] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(289):IdentifierName
    //   [a] => State(342):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 342, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(310):
    //   SWITCH -> [s] [w] . [i] [t] [c] [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(289):IdentifierName
    //   [i] => State(343):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 343, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(311):
    //   TARGET -> [t] [a] . [r] [g] [e] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(289):IdentifierName
    //   [r] => State(344):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 344, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(312):
    //   TYPEOF -> [t] [y] . [p] [e] [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..o, q..z, U+200C..U+200D] => State(289):IdentifierName
    //   [p] => State(345):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 345, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(313):
    //   IMPORT -> [i] [m] . [p] [o] [r] [t]
    //   IMPLEMENTS -> [i] [m] . [p] [l] [e] [m] [e] [n] [t] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..o, q..z, U+200C..U+200D] => State(289):IdentifierName
    //   [p] => State(346):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 346, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(314):
    //   DEBUGGER -> [d] [e] . [b] [u] [g] [g] [e] [r]
    //   DEFAULT -> [d] [e] . [f] [a] [u] [l] [t]
    //   DELETE -> [d] [e] . [l] [e] [t] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a, c..e, g..k, m..z, U+200C..U+200D] => State(289):IdentifierName
    //   [b] => State(300):IdentifierName
    //   [f] => State(317):IdentifierName
    //   [l] => State(347):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 300, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 347, 289, 289, 317,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(315):
    //   PUBLIC -> [p] [u] . [b] [l] [i] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a, c..z, U+200C..U+200D] => State(289):IdentifierName
    //   [b] => State(348):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 348, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(316):
    //   EXTENDS -> [e] [x] [t] . [e] [n] [d] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(289):IdentifierName
    //   [e] => State(349):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 349, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(317):
    //   DEFAULT -> [d] [e] [f] . [a] [u] [l] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(289):IdentifierName
    //   [a] => State(350):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 350, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(318):
    //   FINALLY -> [f] [i] [n] . [a] [l] [l] [y]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(289):IdentifierName
    //   [a] => State(351):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 351, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(319):
    //   PRIVATE -> [p] [r] [i] . [v] [a] [t] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..u, w..z, U+200C..U+200D] => State(289):IdentifierName
    //   [v] => State(352):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        352, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(320):
    //   PACKAGE -> [p] [a] [c] . [k] [a] [g] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..j, l..z, U+200C..U+200D] => State(289):IdentifierName
    //   [k] => State(353):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 353, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(321):
    //   CONTINUE -> [c] [o] [n] [t] . [i] [n] [u] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(289):IdentifierName
    //   [i] => State(354):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 354, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(322):
    //   DEBUGGER -> [d] [e] [b] [u] . [g] [g] [e] [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..f, h..z, U+200C..U+200D] => State(289):IdentifierName
    //   [g] => State(355):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 355, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(323):
    //   FUNCTION -> [f] [u] [n] [c] . [t] [i] [o] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(289):IdentifierName
    //   [t] => State(356):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 356, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(324):
    //   INTERFACE -> [i] [n] [t] [e] [r] . [f] [a] [c] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..e, g..z, U+200C..U+200D] => State(289):IdentifierName
    //   [f] => State(357):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 357,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(325):
    //   PROTECTED -> [p] [r] [o] [t] [e] . [c] [t] [e] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(289):IdentifierName
    //   [c] => State(358):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 358, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(326):
    //   INSTANCEOF -> [i] [n] [s] [t] [a] [n] . [c] [e] [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(289):IdentifierName
    //   [c] => State(359):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 359, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(327):
    //   IMPLEMENTS -> [i] [m] [p] [l] [e] [m] . [e] [n] [t] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(289):IdentifierName
    //   [e] => State(360):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 360, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(328):
    //   ELSE -> [e] . [l] [s] [e]
    //   ENUM -> [e] . [n] [u] [m]
    //   EXPORT -> [e] . [x] [p] [o] [r] [t]
    //   EXTENDS -> [e] . [x] [t] [e] [n] [d] [s]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..k, m, o..w, y..z, U+200C..U+200D] => State(289):IdentifierName
    //   [x] => State(308):IdentifierName
    //   [l] => State(368):IdentifierName
    //   [n] => State(369):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 308, 289, 289, 289, 289, 289, 289, 289, 289, 289, 368, 369, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(329):
    //   CASE -> [c] . [a] [s] [e]
    //   CATCH -> [c] . [a] [t] [c] [h]
    //   CLASS -> [c] . [l] [a] [s] [s]
    //   CONST -> [c] . [o] [n] [s] [t]
    //   CONTINUE -> [c] . [o] [n] [t] [i] [n] [u] [e]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, b..k, m..n, p..z, U+200C..U+200D] => State(289):IdentifierName
    //   [l] => State(334):IdentifierName
    //   [o] => State(335):IdentifierName
    //   [a] => State(370):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 334, 289, 289, 289,
        289, 370, 335, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(330):
    //   META -> [m] . [e] [t] [a]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(289):IdentifierName
    //   [e] => State(374):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 374, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(331):
    //   WHILE -> [w] . [h] [i] [l] [e]
    //   WITH -> [w] . [i] [t] [h]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..g, j..z, U+200C..U+200D] => State(289):IdentifierName
    //   [h] => State(339):IdentifierName
    //   [i] => State(375):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 339, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 375, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(332):
    //   BREAK -> [b] [r] . [e] [a] [k]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(289):IdentifierName
    //   [e] => State(377):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 377, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(333):
    //   AWAIT -> [a] [w] . [a] [i] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(289):IdentifierName
    //   [a] => State(379):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 379, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(334):
    //   CLASS -> [c] [l] . [a] [s] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(289):IdentifierName
    //   [a] => State(381):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 381, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(335):
    //   CONST -> [c] [o] . [n] [s] [t]
    //   CONTINUE -> [c] [o] . [n] [t] [i] [n] [u] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(289):IdentifierName
    //   [n] => State(382):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 382, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(336):
    //   SUPER -> [s] [u] . [p] [e] [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..o, q..z, U+200C..U+200D] => State(289):IdentifierName
    //   [p] => State(383):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 383, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(337):
    //   FALSE -> [f] [a] . [l] [s] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(289):IdentifierName
    //   [l] => State(385):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 385, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(338):
    //   YIELD -> [y] [i] . [e] [l] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(289):IdentifierName
    //   [e] => State(386):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 386, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(339):
    //   WHILE -> [w] [h] . [i] [l] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(289):IdentifierName
    //   [i] => State(387):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 387, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(340):
    //   RETURN -> [r] [e] [t] . [u] [r] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..t, v..z, U+200C..U+200D] => State(289):IdentifierName
    //   [u] => State(388):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 388, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(341):
    //   EXPORT -> [e] [x] [p] . [o] [r] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..n, p..z, U+200C..U+200D] => State(289):IdentifierName
    //   [o] => State(389):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 389, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(342):
    //   STATIC -> [s] [t] [a] . [t] [i] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(289):IdentifierName
    //   [t] => State(390):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 390, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(343):
    //   SWITCH -> [s] [w] [i] . [t] [c] [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(289):IdentifierName
    //   [t] => State(391):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 391, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(344):
    //   TARGET -> [t] [a] [r] . [g] [e] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..f, h..z, U+200C..U+200D] => State(289):IdentifierName
    //   [g] => State(392):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 392, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(345):
    //   TYPEOF -> [t] [y] [p] . [e] [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(289):IdentifierName
    //   [e] => State(393):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 393, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(346):
    //   IMPORT -> [i] [m] [p] . [o] [r] [t]
    //   IMPLEMENTS -> [i] [m] [p] . [l] [e] [m] [e] [n] [t] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..k, m..n, p..z, U+200C..U+200D] => State(289):IdentifierName
    //   [l] => State(295):IdentifierName
    //   [o] => State(394):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 295, 289, 289, 289,
        289, 289, 394, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(347):
    //   DELETE -> [d] [e] [l] . [e] [t] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(289):IdentifierName
    //   [e] => State(395):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 395, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(348):
    //   PUBLIC -> [p] [u] [b] . [l] [i] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(289):IdentifierName
    //   [l] => State(396):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 396, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(349):
    //   EXTENDS -> [e] [x] [t] [e] . [n] [d] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(289):IdentifierName
    //   [n] => State(397):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 397, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(350):
    //   DEFAULT -> [d] [e] [f] [a] . [u] [l] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..t, v..z, U+200C..U+200D] => State(289):IdentifierName
    //   [u] => State(398):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 398, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(351):
    //   FINALLY -> [f] [i] [n] [a] . [l] [l] [y]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(289):IdentifierName
    //   [l] => State(399):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 399, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(352):
    //   PRIVATE -> [p] [r] [i] [v] . [a] [t] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(289):IdentifierName
    //   [a] => State(400):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 400, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(353):
    //   PACKAGE -> [p] [a] [c] [k] . [a] [g] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(289):IdentifierName
    //   [a] => State(401):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 401, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(354):
    //   CONTINUE -> [c] [o] [n] [t] [i] . [n] [u] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(289):IdentifierName
    //   [n] => State(402):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 402, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(355):
    //   DEBUGGER -> [d] [e] [b] [u] [g] . [g] [e] [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..f, h..z, U+200C..U+200D] => State(289):IdentifierName
    //   [g] => State(403):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 403, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(356):
    //   FUNCTION -> [f] [u] [n] [c] [t] . [i] [o] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(289):IdentifierName
    //   [i] => State(404):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 404, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(357):
    //   INTERFACE -> [i] [n] [t] [e] [r] [f] . [a] [c] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(289):IdentifierName
    //   [a] => State(405):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 405, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(358):
    //   PROTECTED -> [p] [r] [o] [t] [e] [c] . [t] [e] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(289):IdentifierName
    //   [t] => State(406):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 406, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(359):
    //   INSTANCEOF -> [i] [n] [s] [t] [a] [n] [c] . [e] [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(289):IdentifierName
    //   [e] => State(407):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 407, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(360):
    //   IMPLEMENTS -> [i] [m] [p] [l] [e] [m] [e] . [n] [t] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(289):IdentifierName
    //   [n] => State(408):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 408, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(361):
    //   SUPER -> [s] . [u] [p] [e] [r]
    //   SWITCH -> [s] . [w] [i] [t] [c] [h]
    //   STATIC -> [s] . [t] [a] [t] [i] [c]
    //   SET -> [s] . [e] [t]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..s, v, x..z, U+200C..U+200D] => State(289):IdentifierName
    //   [t] => State(309):IdentifierName
    //   [w] => State(310):IdentifierName
    //   [u] => State(336):IdentifierName
    //   [e] => State(413):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 336, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 413, 289, 289, 310, 289, 309, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(362):
    //   THIS -> [t] . [h] [i] [s]
    //   THROW -> [t] . [h] [r] [o] [w]
    //   TRUE -> [t] . [r] [u] [e]
    //   TRY -> [t] . [r] [y]
    //   TYPEOF -> [t] . [y] [p] [e] [o] [f]
    //   TARGET -> [t] . [a] [r] [g] [e] [t]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, b..g, i..q, s..x, z, U+200C..U+200D] => State(289):IdentifierName
    //   [a] => State(311):IdentifierName
    //   [y] => State(312):IdentifierName
    //   [h] => State(371):IdentifierName
    //   [r] => State(414):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 414, 289, 289, 289, 289, 289, 289,
        289, 289, 371, 289, 289, 289, 289, 312, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 311, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(363):
    //   LET -> [l] . [e] [t]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(289):IdentifierName
    //   [e] => State(415):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 415, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(364):
    //   NEW -> [n] . [e] [w]
    //   NULL -> [n] . [u] [l] [l]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..t, v..z, U+200C..U+200D] => State(289):IdentifierName
    //   [u] => State(372):IdentifierName
    //   [e] => State(416):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 372, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 416, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(365):
    //   GET -> [g] . [e] [t]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(289):IdentifierName
    //   [e] => State(417):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 417, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(366):
    //   FALSE -> [f] . [a] [l] [s] [e]
    //   FINALLY -> [f] . [i] [n] [a] [l] [l] [y]
    //   FOR -> [f] . [o] [r]
    //   FUNCTION -> [f] . [u] [n] [c] [t] [i] [o] [n]
    //   FROM -> [f] . [r] [o] [m]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, b..h, j..n, p..q, s..t, v..z, U+200C..U+200D] => State(289):IdentifierName
    //   [u] => State(291):IdentifierName
    //   [i] => State(297):IdentifierName
    //   [a] => State(337):IdentifierName
    //   [r] => State(373):IdentifierName
    //   [o] => State(418):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 373, 291, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 337, 418, 297, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(367):
    //   VAR -> [v] . [a] [r]
    //   VOID -> [v] . [o] [i] [d]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, b..n, p..z, U+200C..U+200D] => State(289):IdentifierName
    //   [o] => State(376):IdentifierName
    //   [a] => State(419):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 419, 376, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(368):
    //   ELSE -> [e] [l] . [s] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..r, t..z, U+200C..U+200D] => State(289):IdentifierName
    //   [s] => State(420):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 420, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(369):
    //   ENUM -> [e] [n] . [u] [m]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..t, v..z, U+200C..U+200D] => State(289):IdentifierName
    //   [u] => State(421):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 421, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(370):
    //   CASE -> [c] [a] . [s] [e]
    //   CATCH -> [c] [a] . [t] [c] [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..r, u..z, U+200C..U+200D] => State(289):IdentifierName
    //   [t] => State(380):IdentifierName
    //   [s] => State(422):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 422, 380, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(371):
    //   THIS -> [t] [h] . [i] [s]
    //   THROW -> [t] [h] . [r] [o] [w]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..h, j..q, s..z, U+200C..U+200D] => State(289):IdentifierName
    //   [r] => State(384):IdentifierName
    //   [i] => State(424):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 384, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 424, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(372):
    //   NULL -> [n] [u] . [l] [l]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(289):IdentifierName
    //   [l] => State(425):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 425, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(373):
    //   FROM -> [f] [r] . [o] [m]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..n, p..z, U+200C..U+200D] => State(289):IdentifierName
    //   [o] => State(426):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 426, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(374):
    //   META -> [m] [e] . [t] [a]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(289):IdentifierName
    //   [t] => State(427):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 427, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(375):
    //   WITH -> [w] [i] . [t] [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(289):IdentifierName
    //   [t] => State(428):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 428, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(376):
    //   VOID -> [v] [o] . [i] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(289):IdentifierName
    //   [i] => State(429):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 429, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(377):
    //   BREAK -> [b] [r] [e] . [a] [k]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(289):IdentifierName
    //   [a] => State(430):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 430, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(378):
    //   ASYNC -> [a] [s] [y] . [n] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(289):IdentifierName
    //   [n] => State(431):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 431, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(379):
    //   AWAIT -> [a] [w] [a] . [i] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(289):IdentifierName
    //   [i] => State(432):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 432, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(380):
    //   CATCH -> [c] [a] [t] . [c] [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(289):IdentifierName
    //   [c] => State(433):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 433, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(381):
    //   CLASS -> [c] [l] [a] . [s] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..r, t..z, U+200C..U+200D] => State(289):IdentifierName
    //   [s] => State(434):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 434, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(382):
    //   CONST -> [c] [o] [n] . [s] [t]
    //   CONTINUE -> [c] [o] [n] . [t] [i] [n] [u] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..r, u..z, U+200C..U+200D] => State(289):IdentifierName
    //   [t] => State(321):IdentifierName
    //   [s] => State(435):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 435, 321, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(383):
    //   SUPER -> [s] [u] [p] . [e] [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(289):IdentifierName
    //   [e] => State(436):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 436, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(384):
    //   THROW -> [t] [h] [r] . [o] [w]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..n, p..z, U+200C..U+200D] => State(289):IdentifierName
    //   [o] => State(437):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 437, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(385):
    //   FALSE -> [f] [a] [l] . [s] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..r, t..z, U+200C..U+200D] => State(289):IdentifierName
    //   [s] => State(438):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 438, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(386):
    //   YIELD -> [y] [i] [e] . [l] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(289):IdentifierName
    //   [l] => State(439):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 439, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(387):
    //   WHILE -> [w] [h] [i] . [l] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(289):IdentifierName
    //   [l] => State(440):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 440, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(388):
    //   RETURN -> [r] [e] [t] [u] . [r] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(289):IdentifierName
    //   [r] => State(441):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 441, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(389):
    //   EXPORT -> [e] [x] [p] [o] . [r] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(289):IdentifierName
    //   [r] => State(442):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 442, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(390):
    //   STATIC -> [s] [t] [a] [t] . [i] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(289):IdentifierName
    //   [i] => State(443):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 443, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(391):
    //   SWITCH -> [s] [w] [i] [t] . [c] [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(289):IdentifierName
    //   [c] => State(444):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 444, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(392):
    //   TARGET -> [t] [a] [r] [g] . [e] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(289):IdentifierName
    //   [e] => State(445):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 445, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(393):
    //   TYPEOF -> [t] [y] [p] [e] . [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..n, p..z, U+200C..U+200D] => State(289):IdentifierName
    //   [o] => State(446):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 446, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(394):
    //   IMPORT -> [i] [m] [p] [o] . [r] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(289):IdentifierName
    //   [r] => State(447):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 447, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(395):
    //   DELETE -> [d] [e] [l] [e] . [t] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(289):IdentifierName
    //   [t] => State(448):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 448, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(396):
    //   PUBLIC -> [p] [u] [b] [l] . [i] [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..h, j..z, U+200C..U+200D] => State(289):IdentifierName
    //   [i] => State(449):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 449, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(397):
    //   EXTENDS -> [e] [x] [t] [e] [n] . [d] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..c, e..z, U+200C..U+200D] => State(289):IdentifierName
    //   [d] => State(450):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 450, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(398):
    //   DEFAULT -> [d] [e] [f] [a] [u] . [l] [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(289):IdentifierName
    //   [l] => State(451):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 451, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(399):
    //   FINALLY -> [f] [i] [n] [a] [l] . [l] [y]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(289):IdentifierName
    //   [l] => State(452):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 452, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(400):
    //   PRIVATE -> [p] [r] [i] [v] [a] . [t] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(289):IdentifierName
    //   [t] => State(453):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 453, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(401):
    //   PACKAGE -> [p] [a] [c] [k] [a] . [g] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..f, h..z, U+200C..U+200D] => State(289):IdentifierName
    //   [g] => State(454):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 454, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(402):
    //   CONTINUE -> [c] [o] [n] [t] [i] [n] . [u] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..t, v..z, U+200C..U+200D] => State(289):IdentifierName
    //   [u] => State(455):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 455, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(403):
    //   DEBUGGER -> [d] [e] [b] [u] [g] [g] . [e] [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(289):IdentifierName
    //   [e] => State(456):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 456, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(404):
    //   FUNCTION -> [f] [u] [n] [c] [t] [i] . [o] [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..n, p..z, U+200C..U+200D] => State(289):IdentifierName
    //   [o] => State(457):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 457, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(405):
    //   INTERFACE -> [i] [n] [t] [e] [r] [f] [a] . [c] [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(289):IdentifierName
    //   [c] => State(458):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 458, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(406):
    //   PROTECTED -> [p] [r] [o] [t] [e] [c] [t] . [e] [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(289):IdentifierName
    //   [e] => State(459):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 459, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(407):
    //   INSTANCEOF -> [i] [n] [s] [t] [a] [n] [c] [e] . [o] [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..n, p..z, U+200C..U+200D] => State(289):IdentifierName
    //   [o] => State(460):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 460, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(408):
    //   IMPLEMENTS -> [i] [m] [p] [l] [e] [m] [e] [n] . [t] [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(289):IdentifierName
    //   [t] => State(461):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 461, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(409):
    //   AWAIT -> [a] . [w] [a] [i] [t]
    //   AS -> [a] . [s]
    //   ASYNC -> [a] . [s] [y] [n] [c]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [s] => State(279):AS
    //   [$, 0..9, A..Z, _, a..r, t..v, x..z, U+200C..U+200D] => State(289):IdentifierName
    //   [w] => State(333):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 333, 279, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(410):
    //   OF -> [o] . [f]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [f] => State(284):OF
    //   [$, 0..9, A..Z, _, a..e, g..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 284,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(411):
    //   IF -> [i] . [f]
    //   IMPORT -> [i] . [m] [p] [o] [r] [t]
    //   IN -> [i] . [n]
    //   INSTANCEOF -> [i] . [n] [s] [t] [a] [n] [c] [e] [o] [f]
    //   IMPLEMENTS -> [i] . [m] [p] [l] [e] [m] [e] [n] [t] [s]
    //   INTERFACE -> [i] . [n] [t] [e] [r] [f] [a] [c] [e]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [f] => State(251):IF
    //   [n] => State(253):IN
    //   [$, 0..9, A..Z, _, a..e, g..l, o..z, U+200C..U+200D] => State(289):IdentifierName
    //   [m] => State(313):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 313, 289, 289, 289, 289, 253, 289, 251,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(412):
    //   DEBUGGER -> [d] . [e] [b] [u] [g] [g] [e] [r]
    //   DEFAULT -> [d] . [e] [f] [a] [u] [l] [t]
    //   DELETE -> [d] . [e] [l] [e] [t] [e]
    //   DO -> [d] . [o]
    //   IdentifierName -> IdentifierStart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [o] => State(242):DO
    //   [$, 0..9, A..Z, _, a..d, f..n, p..z, U+200C..U+200D] => State(289):IdentifierName
    //   [e] => State(314):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 314, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 242, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(413):
    //   SET -> [s] [e] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [t] => State(285):SET
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 285, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(414):
    //   TRUE -> [t] [r] . [u] [e]
    //   TRY -> [t] [r] . [y]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [y] => State(263):TRY
    //   [$, 0..9, A..Z, _, a..t, v..x, z, U+200C..U+200D] => State(289):IdentifierName
    //   [u] => State(423):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 423, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 263, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(415):
    //   LET -> [l] [e] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [t] => State(271):LET
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 271, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(416):
    //   NEW -> [n] [e] . [w]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [w] => State(255):NEW
    //   [$, 0..9, A..Z, _, a..v, x..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 255, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(417):
    //   GET -> [g] [e] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [t] => State(282):GET
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 282, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(418):
    //   FOR -> [f] [o] . [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [r] => State(249):FOR
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 249, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(419):
    //   VAR -> [v] [a] . [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [r] => State(265):VAR
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 265, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(420):
    //   ELSE -> [e] [l] [s] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [e] => State(243):ELSE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 243, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(421):
    //   ENUM -> [e] [n] [u] . [m]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [m] => State(244):ENUM
    //   [$, 0..9, A..Z, _, a..l, n..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 244, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(422):
    //   CASE -> [c] [a] [s] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [e] => State(234):CASE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 234, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(423):
    //   TRUE -> [t] [r] [u] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [e] => State(262):TRUE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 262, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(424):
    //   THIS -> [t] [h] [i] . [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [s] => State(260):THIS
    //   [$, 0..9, A..Z, _, a..r, t..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 260, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(425):
    //   NULL -> [n] [u] [l] . [l]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [l] => State(256):NULL
    //   [$, 0..9, A..Z, _, a..k, m..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 256, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(426):
    //   FROM -> [f] [r] [o] . [m]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [m] => State(281):FROM
    //   [$, 0..9, A..Z, _, a..l, n..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 281, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(427):
    //   META -> [m] [e] [t] . [a]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [a] => State(283):META
    //   [$, 0..9, A..Z, _, b..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 283, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(428):
    //   WITH -> [w] [i] [t] . [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [h] => State(268):WITH
    //   [$, 0..9, A..Z, _, a..g, i..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 268, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(429):
    //   VOID -> [v] [o] [i] . [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [d] => State(266):VOID
    //   [$, 0..9, A..Z, _, a..c, e..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 266, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(430):
    //   BREAK -> [b] [r] [e] [a] . [k]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [k] => State(233):BREAK
    //   [$, 0..9, A..Z, _, a..j, l..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 233, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(431):
    //   ASYNC -> [a] [s] [y] [n] . [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [c] => State(280):ASYNC
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 280, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(432):
    //   AWAIT -> [a] [w] [a] [i] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [t] => State(269):AWAIT
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 269, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(433):
    //   CATCH -> [c] [a] [t] [c] . [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [h] => State(235):CATCH
    //   [$, 0..9, A..Z, _, a..g, i..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 235, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(434):
    //   CLASS -> [c] [l] [a] [s] . [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [s] => State(236):CLASS
    //   [$, 0..9, A..Z, _, a..r, t..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 236, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(435):
    //   CONST -> [c] [o] [n] [s] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [t] => State(237):CONST
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 237, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(436):
    //   SUPER -> [s] [u] [p] [e] . [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [r] => State(258):SUPER
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 258, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(437):
    //   THROW -> [t] [h] [r] [o] . [w]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [w] => State(261):THROW
    //   [$, 0..9, A..Z, _, a..v, x..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 261, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(438):
    //   FALSE -> [f] [a] [l] [s] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [e] => State(247):FALSE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 247, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(439):
    //   YIELD -> [y] [i] [e] [l] . [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [d] => State(270):YIELD
    //   [$, 0..9, A..Z, _, a..c, e..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 270, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(440):
    //   WHILE -> [w] [h] [i] [l] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [e] => State(267):WHILE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 267, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(441):
    //   RETURN -> [r] [e] [t] [u] [r] . [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [n] => State(257):RETURN
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 257, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(442):
    //   EXPORT -> [e] [x] [p] [o] [r] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [t] => State(245):EXPORT
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 245, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(443):
    //   STATIC -> [s] [t] [a] [t] [i] . [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [c] => State(272):STATIC
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 272, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(444):
    //   SWITCH -> [s] [w] [i] [t] [c] . [h]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [h] => State(259):SWITCH
    //   [$, 0..9, A..Z, _, a..g, i..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 259, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(445):
    //   TARGET -> [t] [a] [r] [g] [e] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [t] => State(286):TARGET
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 286, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(446):
    //   TYPEOF -> [t] [y] [p] [e] [o] . [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [f] => State(264):TYPEOF
    //   [$, 0..9, A..Z, _, a..e, g..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 264,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(447):
    //   IMPORT -> [i] [m] [p] [o] [r] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [t] => State(252):IMPORT
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 252, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(448):
    //   DELETE -> [d] [e] [l] [e] [t] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [e] => State(241):DELETE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 241, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(449):
    //   PUBLIC -> [p] [u] [b] [l] [i] . [c]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [c] => State(278):PUBLIC
    //   [$, 0..9, A..Z, _, a..b, d..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 278, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(450):
    //   EXTENDS -> [e] [x] [t] [e] [n] [d] . [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [s] => State(246):EXTENDS
    //   [$, 0..9, A..Z, _, a..r, t..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 246, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(451):
    //   DEFAULT -> [d] [e] [f] [a] [u] [l] . [t]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [t] => State(240):DEFAULT
    //   [$, 0..9, A..Z, _, a..s, u..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 240, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(452):
    //   FINALLY -> [f] [i] [n] [a] [l] [l] . [y]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [y] => State(248):FINALLY
    //   [$, 0..9, A..Z, _, a..x, z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 248, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(453):
    //   PRIVATE -> [p] [r] [i] [v] [a] [t] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [e] => State(276):PRIVATE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 276, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(454):
    //   PACKAGE -> [p] [a] [c] [k] [a] [g] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [e] => State(275):PACKAGE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 275, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(455):
    //   CONTINUE -> [c] [o] [n] [t] [i] [n] [u] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [e] => State(238):CONTINUE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 238, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(456):
    //   DEBUGGER -> [d] [e] [b] [u] [g] [g] [e] . [r]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [r] => State(239):DEBUGGER
    //   [$, 0..9, A..Z, _, a..q, s..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 239, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(457):
    //   FUNCTION -> [f] [u] [n] [c] [t] [i] [o] . [n]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [n] => State(250):FUNCTION
    //   [$, 0..9, A..Z, _, a..m, o..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 250, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(458):
    //   INTERFACE -> [i] [n] [t] [e] [r] [f] [a] [c] . [e]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [e] => State(274):INTERFACE
    //   [$, 0..9, A..Z, _, a..d, f..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 274, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(459):
    //   PROTECTED -> [p] [r] [o] [t] [e] [c] [t] [e] . [d]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [d] => State(277):PROTECTED
    //   [$, 0..9, A..Z, _, a..c, e..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 277, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(460):
    //   INSTANCEOF -> [i] [n] [s] [t] [a] [n] [c] [e] [o] . [f]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [f] => State(254):INSTANCEOF
    //   [$, 0..9, A..Z, _, a..e, g..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 254,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(461):
    //   IMPLEMENTS -> [i] [m] [p] [l] [e] [m] [e] [n] [t] . [s]
    //   IdentifierName -> IdentifierName IdentifierPart .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(2)
    //   [s] => State(273):IMPLEMENTS
    //   [$, 0..9, A..Z, _, a..r, t..z, U+200C..U+200D] => State(289):IdentifierName
    [
        535, 2, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 273, 289, 289, 289, 289, 289,
        289, 289, 289, 289, 289, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 289, 289, 289, 289, 289, 535, 289, 535,
    ],
    // State(462):
    //   PrivateIdentifier -> [#] IdentifierName .
    //   IdentifierName -> IdentifierName . IdentifierPart
    //   IdentifierPart -> . IdentifierPartChar
    //   IdentifierPartChar -> . UnicodeIDContinue
    //   UnicodeIDContinue -> . [0..9 a..z A..Z $ _]
    //   IdentifierPartChar -> . [$]
    //   IdentifierPartChar -> . [<ZWNJ>]
    //   IdentifierPartChar -> . [<ZWJ>]
    //   IdentifierPart -> . [\] UnicodeEscapeSequence
    // Transitions:
    //   [\] => State(3)
    //   [$, 0..9, A..Z, _, a..z, U+200C..U+200D] => State(462):PrivateIdentifier
    [
        535, 3, 535, 535, 535, 535, 535, 535, 535, 535, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        462, 462, 462, 462, 462, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 462, 462, 462, 462, 462, 535, 462, 535,
    ],
    // State(463):
    //   OPTIONAL_CHAINING -> [?] [.] !?[DecimalDigit] .
    //   OPTIONAL_CHAINING -> [?] [.] . !?[DecimalDigit]
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(464):
    //   LBRACE -> [{] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(465):
    //   LPAREN -> [(] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(466):
    //   RPAREN -> [)] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(467):
    //   LBRACK -> [[] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(468):
    //   RBRACK -> []] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(469):
    //   DOT -> [.] .
    //   ELLIPSIS -> [.] . [.] [.]
    //   DecimalDigits_Sep -> . DecimalDigits_Sep DecimalDigit
    //   DecimalDigits_Sep -> . DecimalDigits_Sep NumericLiteralSeparator DecimalDigit
    //   DecimalLiteral -> [.] . DecimalDigits_Sep
    //   DecimalDigits_Sep -> . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   DecimalLiteral -> [.] . DecimalDigits_Sep ExponentPart_Sep
    // Transitions:
    //   [.] => State(31)
    //   [0..9] => State(523):NumericLiteral
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 31, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 523, 523, 523, 523, 523, 535, 535, 535,
    ],
    // State(470):
    //   ELLIPSIS -> [.] [.] [.] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(471):
    //   SEMI_COLON -> [;] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(472):
    //   COMMA -> [,] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(473):
    //   LT -> [<] .
    //   LTE -> [<] . [=]
    //   SHL -> [<] . [<]
    //   SHL_ASSIGN -> [<] . [<] [=]
    // Transitions:
    //   [=] => State(475):LTE
    //   [<] => State(488):SHL
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 488, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 475, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(474):
    //   GT -> [>] .
    //   GTE -> [>] . [=]
    //   SAR -> [>] . [>]
    //   SHR -> [>] . [>] [>]
    //   SAR_ASSIGN -> [>] . [>] [=]
    //   SHR_ASSIGN -> [>] . [>] [>] [=]
    // Transitions:
    //   [=] => State(476):GTE
    //   [>] => State(489):SAR
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 489, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 476, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(475):
    //   LTE -> [<] [=] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(476):
    //   GTE -> [>] [=] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(477):
    //   EQ -> [=] [=] .
    //   EQ_STRICT -> [=] [=] . [=]
    // Transitions:
    //   [=] => State(479):EQ_STRICT
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 479, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(478):
    //   NE -> [!] [=] .
    //   NE_STRICT -> [!] [=] . [=]
    // Transitions:
    //   [=] => State(480):NE_STRICT
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 480, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(479):
    //   EQ_STRICT -> [=] [=] [=] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(480):
    //   NE_STRICT -> [!] [=] [=] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(481):
    //   ADD -> [+] .
    //   INC -> [+] . [+]
    //   ADD_ASSIGN -> [+] . [=]
    // Transitions:
    //   [+] => State(486):INC
    //   [=] => State(502):ADD_ASSIGN
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 486, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 502, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(482):
    //   SUB -> [-] .
    //   DEC -> [-] . [-]
    //   SUB_ASSIGN -> [-] . [=]
    // Transitions:
    //   [-] => State(487):DEC
    //   [=] => State(503):SUB_ASSIGN
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 487, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 503, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(483):
    //   MUL -> [*] .
    //   EXP -> [*] . [*]
    //   MUL_ASSIGN -> [*] . [=]
    //   EXP_ASSIGN -> [*] . [*] [=]
    // Transitions:
    //   [*] => State(485):EXP
    //   [=] => State(504):MUL_ASSIGN
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 485,
        535, 535, 535, 535, 535, 535, 535, 535, 504, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(484):
    //   MOD -> [%] .
    //   MOD_ASSIGN -> [%] . [=]
    // Transitions:
    //   [=] => State(505):MOD_ASSIGN
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 505, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(485):
    //   EXP -> [*] [*] .
    //   EXP_ASSIGN -> [*] [*] . [=]
    // Transitions:
    //   [=] => State(506):EXP_ASSIGN
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 506, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(486):
    //   INC -> [+] [+] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(487):
    //   DEC -> [-] [-] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(488):
    //   SHL -> [<] [<] .
    //   SHL_ASSIGN -> [<] [<] . [=]
    // Transitions:
    //   [=] => State(507):SHL_ASSIGN
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 507, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(489):
    //   SAR -> [>] [>] .
    //   SHR -> [>] [>] . [>]
    //   SAR_ASSIGN -> [>] [>] . [=]
    //   SHR_ASSIGN -> [>] [>] . [>] [=]
    // Transitions:
    //   [>] => State(490):SHR
    //   [=] => State(508):SAR_ASSIGN
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 490, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 508, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(490):
    //   SHR -> [>] [>] [>] .
    //   SHR_ASSIGN -> [>] [>] [>] . [=]
    // Transitions:
    //   [=] => State(509):SHR_ASSIGN
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 509, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(491):
    //   BIT_AND -> [&] .
    //   AND -> [&] . [&]
    //   BIT_AND_ASSIGN -> [&] . [=]
    //   AND_ASSIGN -> [&] . [&] [=]
    // Transitions:
    //   [&] => State(496):AND
    //   [=] => State(510):BIT_AND_ASSIGN
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 496, 535, 535, 535, 535, 535, 535, 510, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(492):
    //   BIT_OR -> [|] .
    //   OR -> [|] . [|]
    //   BIT_OR_ASSIGN -> [|] . [=]
    //   OR_ASSIGN -> [|] . [|] [=]
    // Transitions:
    //   [|] => State(497):OR
    //   [=] => State(511):BIT_OR_ASSIGN
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 497, 535, 535, 535, 535, 535, 511, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(493):
    //   BIT_XOR -> [^] .
    //   BIT_XOR_ASSIGN -> [^] . [=]
    // Transitions:
    //   [=] => State(512):BIT_XOR_ASSIGN
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 512, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(494):
    //   NE -> [!] . [=]
    //   NE_STRICT -> [!] . [=] [=]
    //   NOT -> [!] .
    // Transitions:
    //   [=] => State(478):NE
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 478, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(495):
    //   BIT_NOT -> [~] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(496):
    //   AND -> [&] [&] .
    //   AND_ASSIGN -> [&] [&] . [=]
    // Transitions:
    //   [=] => State(513):AND_ASSIGN
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 513, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(497):
    //   OR -> [|] [|] .
    //   OR_ASSIGN -> [|] [|] . [=]
    // Transitions:
    //   [=] => State(514):OR_ASSIGN
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 514, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(498):
    //   NULLISH -> [?] [?] .
    //   NULLISH_ASSIGN -> [?] [?] . [=]
    // Transitions:
    //   [=] => State(515):NULLISH_ASSIGN
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 515, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(499):
    //   OPTIONAL_CHAINING -> [?] . [.] !?[DecimalDigit]
    //   NULLISH -> [?] . [?]
    //   CONDITIONAL -> [?] .
    //   NULLISH_ASSIGN -> [?] . [?] [=]
    // Transitions:
    //   [.] => State(30)
    //   [?] => State(498):NULLISH
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 30, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 498, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(500):
    //   COLON -> [:] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(501):
    //   EQ -> [=] . [=]
    //   EQ_STRICT -> [=] . [=] [=]
    //   ASSIGN -> [=] .
    //   ARROW -> [=] . [>]
    // Transitions:
    //   [=] => State(477):EQ
    //   [>] => State(516):ARROW
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 516, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 477, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(502):
    //   ADD_ASSIGN -> [+] [=] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(503):
    //   SUB_ASSIGN -> [-] [=] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(504):
    //   MUL_ASSIGN -> [*] [=] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(505):
    //   MOD_ASSIGN -> [%] [=] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(506):
    //   EXP_ASSIGN -> [*] [*] [=] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(507):
    //   SHL_ASSIGN -> [<] [<] [=] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(508):
    //   SAR_ASSIGN -> [>] [>] [=] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(509):
    //   SHR_ASSIGN -> [>] [>] [>] [=] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(510):
    //   BIT_AND_ASSIGN -> [&] [=] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(511):
    //   BIT_OR_ASSIGN -> [|] [=] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(512):
    //   BIT_XOR_ASSIGN -> [^] [=] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(513):
    //   AND_ASSIGN -> [&] [&] [=] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(514):
    //   OR_ASSIGN -> [|] [|] [=] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(515):
    //   NULLISH_ASSIGN -> [?] [?] [=] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(516):
    //   ARROW -> [=] [>] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(517):
    //   NumericLiteral -> DecimalLiteral .
    //   DecimalDigits_Sep -> . DecimalDigits_Sep DecimalDigit
    //   DecimalDigits_Sep -> . DecimalDigits_Sep NumericLiteralSeparator DecimalDigit
    //   DecimalIntegerLiteral -> NonZeroDigit . DecimalDigits_Sep
    //   DecimalDigits_Sep -> . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   DecimalIntegerLiteral -> NonZeroDigit . NumericLiteralSeparator DecimalDigits_Sep
    //   NumericLiteralSeparator -> . [_]
    //   DecimalLiteral -> DecimalIntegerLiteral . [.]
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] DecimalDigits_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] ExponentPart_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] DecimalDigits_Sep ExponentPart_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral . ExponentPart_Sep
    //   ExponentPart_Sep -> . ExponentIndicator SignedInteger_Sep
    //   ExponentIndicator -> . [e E]
    //   DecimalBigIntegerLiteral -> NonZeroDigit . BigIntLiteralSuffix
    //   BigIntLiteralSuffix -> . [n]
    //   DecimalBigIntegerLiteral -> NonZeroDigit . DecimalDigits_Sep BigIntLiteralSuffix
    //   DecimalBigIntegerLiteral -> NonZeroDigit . NumericLiteralSeparator DecimalDigits_Sep BigIntLiteralSuffix
    //   DecimalDigits_Sep -> DecimalDigits_Sep . DecimalDigit
    //   DecimalDigits_Sep -> DecimalDigits_Sep . NumericLiteralSeparator DecimalDigit
    //   DecimalBigIntegerLiteral -> NonZeroDigit DecimalDigits_Sep . BigIntLiteralSuffix
    //   DecimalBigIntegerLiteral -> NonZeroDigit NumericLiteralSeparator DecimalDigits_Sep . BigIntLiteralSuffix
    // Transitions:
    //   [E, e] => State(18)
    //   [_] => State(19)
    //   [0..9] => State(517):NumericLiteral
    //   [n] => State(519):NumericLiteral
    //   [.] => State(520):NumericLiteral
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 18, 535, 535, 19, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 18, 535, 535, 535, 535, 535, 535, 519, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 520, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 517, 517, 517, 517, 517, 535, 535, 535,
    ],
    // State(518):
    //   NumericLiteral -> DecimalLiteral .
    //   NonOctalDecimalIntegerLiteral -> [0] . NonOctalDigit
    //   NonOctalDigit -> . [8 9]
    //   LegacyOctalLikeDecimalIntegerLiteral -> [0] . OctalDigit
    //   OctalDigit -> . [0 1 2 3 4 5 6 7]
    //   DecimalLiteral -> DecimalIntegerLiteral . [.]
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] DecimalDigits_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] ExponentPart_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] DecimalDigits_Sep ExponentPart_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral . ExponentPart_Sep
    //   ExponentPart_Sep -> . ExponentIndicator SignedInteger_Sep
    //   ExponentIndicator -> . [e E]
    //   DecimalBigIntegerLiteral -> [0] . BigIntLiteralSuffix
    //   BigIntLiteralSuffix -> . [n]
    //   BinaryIntegerLiteral_Sep -> [0] . [b] BinaryDigits_Sep
    //   BinaryIntegerLiteral_Sep -> [0] . [B] BinaryDigits_Sep
    //   OctalIntegerLiteral_Sep -> [0] . [o] OctalDigits_Sep
    //   OctalIntegerLiteral_Sep -> [0] . [O] OctalDigits_Sep
    //   HexIntegerLiteral_Sep -> [0] . [x] HexDigits_Sep
    //   HexIntegerLiteral_Sep -> [0] . [X] HexDigits_Sep
    //   LegacyOctalIntegerLiteral -> [0] . OctalDigit
    // Transitions:
    //   [E, e] => State(18)
    //   [B, b] => State(22)
    //   [O, o] => State(23)
    //   [X, x] => State(24)
    //   [n] => State(519):NumericLiteral
    //   [.] => State(520):NumericLiteral
    //   [0..7] => State(521):NumericLiteral
    //   [8..9] => State(522):NumericLiteral
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 22, 535, 535, 18, 22, 535, 535, 23, 24,
        535, 535, 535, 24, 535, 535, 535, 18, 535, 535, 535, 535, 535, 535, 519, 535, 535, 535,
        535, 23, 535, 535, 535, 535, 535, 535, 535, 520, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 522, 521, 521, 521, 521, 535, 535, 535,
    ],
    // State(519):
    //   NumericLiteral -> DecimalBigIntegerLiteral .
    //   NumericLiteral -> NonDecimalIntegerLiteral_Sep BigIntLiteralSuffix .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(520):
    //   NumericLiteral -> DecimalLiteral .
    //   DecimalDigits_Sep -> . DecimalDigits_Sep DecimalDigit
    //   DecimalDigits_Sep -> . DecimalDigits_Sep NumericLiteralSeparator DecimalDigit
    //   DecimalLiteral -> DecimalIntegerLiteral [.] . DecimalDigits_Sep
    //   DecimalDigits_Sep -> . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   DecimalLiteral -> DecimalIntegerLiteral [.] . ExponentPart_Sep
    //   ExponentPart_Sep -> . ExponentIndicator SignedInteger_Sep
    //   ExponentIndicator -> . [e E]
    //   DecimalLiteral -> DecimalIntegerLiteral [.] . DecimalDigits_Sep ExponentPart_Sep
    // Transitions:
    //   [E, e] => State(18)
    //   [0..9] => State(523):NumericLiteral
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 18, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 18, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 523, 523, 523, 523, 523, 535, 535, 535,
    ],
    // State(521):
    //   LegacyOctalLikeDecimalIntegerLiteral -> LegacyOctalLikeDecimalIntegerLiteral . OctalDigit
    //   OctalDigit -> . [0 1 2 3 4 5 6 7]
    //   NonOctalDecimalIntegerLiteral -> LegacyOctalLikeDecimalIntegerLiteral . NonOctalDigit
    //   NonOctalDigit -> . [8 9]
    //   NumericLiteral -> LegacyOctalIntegerLiteral .
    //   LegacyOctalIntegerLiteral -> LegacyOctalIntegerLiteral . OctalDigit
    // Transitions:
    //   [0..7] => State(521):NumericLiteral
    //   [8..9] => State(522):NumericLiteral
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 522, 521, 521, 521, 521, 535, 535, 535,
    ],
    // State(522):
    //   NumericLiteral -> DecimalLiteral .
    //   NonOctalDecimalIntegerLiteral -> NonOctalDecimalIntegerLiteral . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   DecimalLiteral -> DecimalIntegerLiteral . [.]
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] DecimalDigits_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] ExponentPart_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral . [.] DecimalDigits_Sep ExponentPart_Sep
    //   DecimalLiteral -> DecimalIntegerLiteral . ExponentPart_Sep
    //   ExponentPart_Sep -> . ExponentIndicator SignedInteger_Sep
    //   ExponentIndicator -> . [e E]
    // Transitions:
    //   [E, e] => State(18)
    //   [.] => State(520):NumericLiteral
    //   [0..9] => State(522):NumericLiteral
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 18, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 18, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 520, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 522, 522, 522, 522, 522, 535, 535, 535,
    ],
    // State(523):
    //   NumericLiteral -> DecimalLiteral .
    //   DecimalDigits_Sep -> DecimalDigits_Sep . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   DecimalDigits_Sep -> DecimalDigits_Sep . NumericLiteralSeparator DecimalDigit
    //   NumericLiteralSeparator -> . [_]
    //   DecimalLiteral -> [.] DecimalDigits_Sep . ExponentPart_Sep
    //   ExponentPart_Sep -> . ExponentIndicator SignedInteger_Sep
    //   ExponentIndicator -> . [e E]
    //   DecimalLiteral -> DecimalIntegerLiteral [.] DecimalDigits_Sep . ExponentPart_Sep
    // Transitions:
    //   [E, e] => State(18)
    //   [_] => State(21)
    //   [0..9] => State(523):NumericLiteral
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 18, 535, 535, 21, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 18, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 523, 523, 523, 523, 523, 535, 535, 535,
    ],
    // State(524):
    //   NumericLiteral -> DecimalLiteral .
    //   DecimalDigits_Sep -> DecimalDigits_Sep . DecimalDigit
    //   DecimalDigit -> . [0 1 2 3 4 5 6 7 8 9]
    //   DecimalDigits_Sep -> DecimalDigits_Sep . NumericLiteralSeparator DecimalDigit
    //   NumericLiteralSeparator -> . [_]
    // Transitions:
    //   [_] => State(20)
    //   [0..9] => State(524):NumericLiteral
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 20, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 524, 524, 524, 524, 524, 535, 535, 535,
    ],
    // State(525):
    //   NumericLiteral -> NonDecimalIntegerLiteral_Sep .
    //   BinaryDigits_Sep -> BinaryDigits_Sep . BinaryDigit
    //   BinaryDigit -> . [0 1]
    //   BinaryDigits_Sep -> BinaryDigits_Sep . NumericLiteralSeparator BinaryDigit
    //   NumericLiteralSeparator -> . [_]
    //   NumericLiteral -> NonDecimalIntegerLiteral_Sep . BigIntLiteralSuffix
    //   BigIntLiteralSuffix -> . [n]
    // Transitions:
    //   [_] => State(22)
    //   [n] => State(519):NumericLiteral
    //   [0..1] => State(525):NumericLiteral
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 22, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 519, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 525, 535, 535, 525, 535, 535, 535,
    ],
    // State(526):
    //   NumericLiteral -> NonDecimalIntegerLiteral_Sep .
    //   OctalDigits_Sep -> OctalDigits_Sep . OctalDigit
    //   OctalDigit -> . [0 1 2 3 4 5 6 7]
    //   OctalDigits_Sep -> OctalDigits_Sep . NumericLiteralSeparator OctalDigit
    //   NumericLiteralSeparator -> . [_]
    //   NumericLiteral -> NonDecimalIntegerLiteral_Sep . BigIntLiteralSuffix
    //   BigIntLiteralSuffix -> . [n]
    // Transitions:
    //   [_] => State(23)
    //   [n] => State(519):NumericLiteral
    //   [0..7] => State(526):NumericLiteral
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 23, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 519, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 526, 526, 526, 526, 535, 535, 535,
    ],
    // State(527):
    //   NumericLiteral -> NonDecimalIntegerLiteral_Sep .
    //   HexDigits_Sep -> HexDigits_Sep . HexDigit
    //   HexDigit -> . [0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F]
    //   HexDigits_Sep -> HexDigits_Sep . NumericLiteralSeparator HexDigit
    //   NumericLiteralSeparator -> . [_]
    //   NumericLiteral -> NonDecimalIntegerLiteral_Sep . BigIntLiteralSuffix
    //   BigIntLiteralSuffix -> . [n]
    // Transitions:
    //   [_] => State(24)
    //   [n] => State(519):NumericLiteral
    //   [0..9, A..F, a..f] => State(527):NumericLiteral
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 527, 535, 535, 527, 527, 527, 24, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 527, 527, 535, 535, 535, 535, 535, 519, 535, 527,
        535, 527, 535, 535, 527, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 527, 527, 527, 527, 527, 535, 535, 535,
    ],
    // State(528):
    //   StringLiteral -> ["] ["] .
    //   StringLiteral -> ['] ['] .
    //   StringLiteral -> ["] DoubleStringCharacters ["] .
    //   StringLiteral -> ['] SingleStringCharacters ['] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(529):
    //   NoSubstitutionTemplate -> [`] [`] .
    //   NoSubstitutionTemplate -> [`] TemplateCharacters [`] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(530):
    //   TemplateHead -> [`] [$] [{] .
    //   TemplateHead -> [`] TemplateCharacters [$] [{] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(531):
    //   MultiLineComment -> [/] . [*] [*] [/]
    //   MultiLineComment -> [/] . [*] MultiLineCommentChars [*] [/]
    //   SingleLineComment -> [/] . [/]
    //   SingleLineComment -> [/] . [/] SingleLineCommentChars
    //   DIV -> [/] .
    //   DIV_ASSIGN -> [/] . [=]
    // Transitions:
    //   [*] => State(9)
    //   [/] => State(231):Comment
    //   [=] => State(532):DIV_ASSIGN
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 9,
        535, 535, 535, 535, 535, 535, 535, 535, 532, 535, 535, 535, 535, 535, 231, 535, 535,
    ],
    // State(532):
    //   DIV_ASSIGN -> [/] [=] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(533):
    //   TemplateMiddle -> [}] [$] [{] .
    //   TemplateMiddle -> [}] TemplateCharacters [$] [{] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
    // State(534):
    //   TemplateTail -> [}] [`] .
    //   TemplateTail -> [}] TemplateCharacters [`] .
    [
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    ],
];

const ACCEPT_TABLE: [Option<TokenKind>; 535] = [
    // State(0)
    None,
    // State(1)
    None,
    // State(2)
    None,
    // State(3)
    None,
    // State(4)
    None,
    // State(5)
    None,
    // State(6)
    None,
    // State(7)
    None,
    // State(8)
    None,
    // State(9)
    None,
    // State(10)
    None,
    // State(11)
    None,
    // State(12)
    None,
    // State(13)
    None,
    // State(14)
    None,
    // State(15)
    None,
    // State(16)
    None,
    // State(17)
    None,
    // State(18)
    None,
    // State(19)
    None,
    // State(20)
    None,
    // State(21)
    None,
    // State(22)
    None,
    // State(23)
    None,
    // State(24)
    None,
    // State(25)
    None,
    // State(26)
    None,
    // State(27)
    None,
    // State(28)
    None,
    // State(29)
    None,
    // State(30)
    None,
    // State(31)
    None,
    // State(32)
    None,
    // State(33)
    None,
    // State(34)
    None,
    // State(35)
    None,
    // State(36)
    None,
    // State(37)
    None,
    // State(38)
    None,
    // State(39)
    None,
    // State(40)
    None,
    // State(41)
    None,
    // State(42)
    None,
    // State(43)
    None,
    // State(44)
    None,
    // State(45)
    None,
    // State(46)
    None,
    // State(47)
    None,
    // State(48)
    None,
    // State(49)
    None,
    // State(50)
    None,
    // State(51)
    None,
    // State(52)
    None,
    // State(53)
    None,
    // State(54)
    None,
    // State(55)
    None,
    // State(56)
    None,
    // State(57)
    None,
    // State(58)
    None,
    // State(59)
    None,
    // State(60)
    None,
    // State(61)
    None,
    // State(62)
    None,
    // State(63)
    None,
    // State(64)
    None,
    // State(65)
    None,
    // State(66)
    None,
    // State(67)
    None,
    // State(68)
    None,
    // State(69)
    None,
    // State(70)
    None,
    // State(71)
    None,
    // State(72)
    None,
    // State(73)
    None,
    // State(74)
    None,
    // State(75)
    None,
    // State(76)
    None,
    // State(77)
    None,
    // State(78)
    None,
    // State(79)
    None,
    // State(80)
    None,
    // State(81)
    None,
    // State(82)
    None,
    // State(83)
    None,
    // State(84)
    None,
    // State(85)
    None,
    // State(86)
    None,
    // State(87)
    None,
    // State(88)
    None,
    // State(89)
    None,
    // State(90)
    None,
    // State(91)
    None,
    // State(92)
    None,
    // State(93)
    None,
    // State(94)
    None,
    // State(95)
    None,
    // State(96)
    None,
    // State(97)
    None,
    // State(98)
    None,
    // State(99)
    None,
    // State(100)
    None,
    // State(101)
    None,
    // State(102)
    None,
    // State(103)
    None,
    // State(104)
    None,
    // State(105)
    None,
    // State(106)
    None,
    // State(107)
    None,
    // State(108)
    None,
    // State(109)
    None,
    // State(110)
    None,
    // State(111)
    None,
    // State(112)
    None,
    // State(113)
    None,
    // State(114)
    None,
    // State(115)
    None,
    // State(116)
    None,
    // State(117)
    None,
    // State(118)
    None,
    // State(119)
    None,
    // State(120)
    None,
    // State(121)
    None,
    // State(122)
    None,
    // State(123)
    None,
    // State(124)
    None,
    // State(125)
    None,
    // State(126)
    None,
    // State(127)
    None,
    // State(128)
    None,
    // State(129)
    None,
    // State(130)
    None,
    // State(131)
    None,
    // State(132)
    None,
    // State(133)
    None,
    // State(134)
    None,
    // State(135)
    None,
    // State(136)
    None,
    // State(137)
    None,
    // State(138)
    None,
    // State(139)
    None,
    // State(140)
    None,
    // State(141)
    None,
    // State(142)
    None,
    // State(143)
    None,
    // State(144)
    None,
    // State(145)
    None,
    // State(146)
    None,
    // State(147)
    None,
    // State(148)
    None,
    // State(149)
    None,
    // State(150)
    None,
    // State(151)
    None,
    // State(152)
    None,
    // State(153)
    None,
    // State(154)
    None,
    // State(155)
    None,
    // State(156)
    None,
    // State(157)
    None,
    // State(158)
    None,
    // State(159)
    None,
    // State(160)
    None,
    // State(161)
    None,
    // State(162)
    None,
    // State(163)
    None,
    // State(164)
    None,
    // State(165)
    None,
    // State(166)
    None,
    // State(167)
    None,
    // State(168)
    None,
    // State(169)
    None,
    // State(170)
    None,
    // State(171)
    None,
    // State(172)
    None,
    // State(173)
    None,
    // State(174)
    None,
    // State(175)
    None,
    // State(176)
    None,
    // State(177)
    None,
    // State(178)
    None,
    // State(179)
    None,
    // State(180)
    None,
    // State(181)
    None,
    // State(182)
    None,
    // State(183)
    None,
    // State(184)
    None,
    // State(185)
    None,
    // State(186)
    None,
    // State(187)
    None,
    // State(188)
    None,
    // State(189)
    None,
    // State(190)
    None,
    // State(191)
    None,
    // State(192)
    None,
    // State(193)
    None,
    // State(194)
    None,
    // State(195)
    None,
    // State(196)
    None,
    // State(197)
    None,
    // State(198)
    None,
    // State(199)
    None,
    // State(200)
    None,
    // State(201)
    None,
    // State(202)
    None,
    // State(203)
    None,
    // State(204)
    None,
    // State(205)
    None,
    // State(206)
    None,
    // State(207)
    None,
    // State(208)
    None,
    // State(209)
    None,
    // State(210)
    None,
    // State(211)
    None,
    // State(212)
    None,
    // State(213)
    None,
    // State(214)
    None,
    // State(215)
    None,
    // State(216)
    None,
    // State(217)
    None,
    // State(218)
    None,
    // State(219)
    None,
    // State(220)
    None,
    // State(221)
    None,
    // State(222)
    None,
    // State(223)
    None,
    // State(224)
    None,
    // State(225)
    None,
    // State(226)
    None,
    // State(227)
    None,
    // State(228)
    Some(TokenKind::WhiteSpaceSequence),
    // State(229)
    Some(TokenKind::LineTerminatorSequence),
    // State(230)
    Some(TokenKind::LineTerminatorSequence),
    // State(231)
    Some(TokenKind::Comment),
    // State(232)
    Some(TokenKind::Comment),
    // State(233)
    Some(TokenKind::Break),
    // State(234)
    Some(TokenKind::Case),
    // State(235)
    Some(TokenKind::Catch),
    // State(236)
    Some(TokenKind::Class),
    // State(237)
    Some(TokenKind::Const),
    // State(238)
    Some(TokenKind::Continue),
    // State(239)
    Some(TokenKind::Debugger),
    // State(240)
    Some(TokenKind::Default),
    // State(241)
    Some(TokenKind::Delete),
    // State(242)
    Some(TokenKind::Do),
    // State(243)
    Some(TokenKind::Else),
    // State(244)
    Some(TokenKind::Enum),
    // State(245)
    Some(TokenKind::Export),
    // State(246)
    Some(TokenKind::Extends),
    // State(247)
    Some(TokenKind::False),
    // State(248)
    Some(TokenKind::Finally),
    // State(249)
    Some(TokenKind::For),
    // State(250)
    Some(TokenKind::Function),
    // State(251)
    Some(TokenKind::If),
    // State(252)
    Some(TokenKind::Import),
    // State(253)
    Some(TokenKind::In),
    // State(254)
    Some(TokenKind::Instanceof),
    // State(255)
    Some(TokenKind::New),
    // State(256)
    Some(TokenKind::Null),
    // State(257)
    Some(TokenKind::Return),
    // State(258)
    Some(TokenKind::Super),
    // State(259)
    Some(TokenKind::Switch),
    // State(260)
    Some(TokenKind::This),
    // State(261)
    Some(TokenKind::Throw),
    // State(262)
    Some(TokenKind::True),
    // State(263)
    Some(TokenKind::Try),
    // State(264)
    Some(TokenKind::Typeof),
    // State(265)
    Some(TokenKind::Var),
    // State(266)
    Some(TokenKind::Void),
    // State(267)
    Some(TokenKind::While),
    // State(268)
    Some(TokenKind::With),
    // State(269)
    Some(TokenKind::Await),
    // State(270)
    Some(TokenKind::Yield),
    // State(271)
    Some(TokenKind::Let),
    // State(272)
    Some(TokenKind::Static),
    // State(273)
    Some(TokenKind::Implements),
    // State(274)
    Some(TokenKind::Interface),
    // State(275)
    Some(TokenKind::Package),
    // State(276)
    Some(TokenKind::Private),
    // State(277)
    Some(TokenKind::Protected),
    // State(278)
    Some(TokenKind::Public),
    // State(279)
    Some(TokenKind::As),
    // State(280)
    Some(TokenKind::Async),
    // State(281)
    Some(TokenKind::From),
    // State(282)
    Some(TokenKind::Get),
    // State(283)
    Some(TokenKind::Meta),
    // State(284)
    Some(TokenKind::Of),
    // State(285)
    Some(TokenKind::Set),
    // State(286)
    Some(TokenKind::Target),
    // State(287)
    Some(TokenKind::IdentifierName),
    // State(288)
    Some(TokenKind::IdentifierName),
    // State(289)
    Some(TokenKind::IdentifierName),
    // State(290)
    Some(TokenKind::IdentifierName),
    // State(291)
    Some(TokenKind::IdentifierName),
    // State(292)
    Some(TokenKind::IdentifierName),
    // State(293)
    Some(TokenKind::IdentifierName),
    // State(294)
    Some(TokenKind::IdentifierName),
    // State(295)
    Some(TokenKind::IdentifierName),
    // State(296)
    Some(TokenKind::IdentifierName),
    // State(297)
    Some(TokenKind::IdentifierName),
    // State(298)
    Some(TokenKind::IdentifierName),
    // State(299)
    Some(TokenKind::IdentifierName),
    // State(300)
    Some(TokenKind::IdentifierName),
    // State(301)
    Some(TokenKind::IdentifierName),
    // State(302)
    Some(TokenKind::IdentifierName),
    // State(303)
    Some(TokenKind::IdentifierName),
    // State(304)
    Some(TokenKind::IdentifierName),
    // State(305)
    Some(TokenKind::IdentifierName),
    // State(306)
    Some(TokenKind::IdentifierName),
    // State(307)
    Some(TokenKind::IdentifierName),
    // State(308)
    Some(TokenKind::IdentifierName),
    // State(309)
    Some(TokenKind::IdentifierName),
    // State(310)
    Some(TokenKind::IdentifierName),
    // State(311)
    Some(TokenKind::IdentifierName),
    // State(312)
    Some(TokenKind::IdentifierName),
    // State(313)
    Some(TokenKind::IdentifierName),
    // State(314)
    Some(TokenKind::IdentifierName),
    // State(315)
    Some(TokenKind::IdentifierName),
    // State(316)
    Some(TokenKind::IdentifierName),
    // State(317)
    Some(TokenKind::IdentifierName),
    // State(318)
    Some(TokenKind::IdentifierName),
    // State(319)
    Some(TokenKind::IdentifierName),
    // State(320)
    Some(TokenKind::IdentifierName),
    // State(321)
    Some(TokenKind::IdentifierName),
    // State(322)
    Some(TokenKind::IdentifierName),
    // State(323)
    Some(TokenKind::IdentifierName),
    // State(324)
    Some(TokenKind::IdentifierName),
    // State(325)
    Some(TokenKind::IdentifierName),
    // State(326)
    Some(TokenKind::IdentifierName),
    // State(327)
    Some(TokenKind::IdentifierName),
    // State(328)
    Some(TokenKind::IdentifierName),
    // State(329)
    Some(TokenKind::IdentifierName),
    // State(330)
    Some(TokenKind::IdentifierName),
    // State(331)
    Some(TokenKind::IdentifierName),
    // State(332)
    Some(TokenKind::IdentifierName),
    // State(333)
    Some(TokenKind::IdentifierName),
    // State(334)
    Some(TokenKind::IdentifierName),
    // State(335)
    Some(TokenKind::IdentifierName),
    // State(336)
    Some(TokenKind::IdentifierName),
    // State(337)
    Some(TokenKind::IdentifierName),
    // State(338)
    Some(TokenKind::IdentifierName),
    // State(339)
    Some(TokenKind::IdentifierName),
    // State(340)
    Some(TokenKind::IdentifierName),
    // State(341)
    Some(TokenKind::IdentifierName),
    // State(342)
    Some(TokenKind::IdentifierName),
    // State(343)
    Some(TokenKind::IdentifierName),
    // State(344)
    Some(TokenKind::IdentifierName),
    // State(345)
    Some(TokenKind::IdentifierName),
    // State(346)
    Some(TokenKind::IdentifierName),
    // State(347)
    Some(TokenKind::IdentifierName),
    // State(348)
    Some(TokenKind::IdentifierName),
    // State(349)
    Some(TokenKind::IdentifierName),
    // State(350)
    Some(TokenKind::IdentifierName),
    // State(351)
    Some(TokenKind::IdentifierName),
    // State(352)
    Some(TokenKind::IdentifierName),
    // State(353)
    Some(TokenKind::IdentifierName),
    // State(354)
    Some(TokenKind::IdentifierName),
    // State(355)
    Some(TokenKind::IdentifierName),
    // State(356)
    Some(TokenKind::IdentifierName),
    // State(357)
    Some(TokenKind::IdentifierName),
    // State(358)
    Some(TokenKind::IdentifierName),
    // State(359)
    Some(TokenKind::IdentifierName),
    // State(360)
    Some(TokenKind::IdentifierName),
    // State(361)
    Some(TokenKind::IdentifierName),
    // State(362)
    Some(TokenKind::IdentifierName),
    // State(363)
    Some(TokenKind::IdentifierName),
    // State(364)
    Some(TokenKind::IdentifierName),
    // State(365)
    Some(TokenKind::IdentifierName),
    // State(366)
    Some(TokenKind::IdentifierName),
    // State(367)
    Some(TokenKind::IdentifierName),
    // State(368)
    Some(TokenKind::IdentifierName),
    // State(369)
    Some(TokenKind::IdentifierName),
    // State(370)
    Some(TokenKind::IdentifierName),
    // State(371)
    Some(TokenKind::IdentifierName),
    // State(372)
    Some(TokenKind::IdentifierName),
    // State(373)
    Some(TokenKind::IdentifierName),
    // State(374)
    Some(TokenKind::IdentifierName),
    // State(375)
    Some(TokenKind::IdentifierName),
    // State(376)
    Some(TokenKind::IdentifierName),
    // State(377)
    Some(TokenKind::IdentifierName),
    // State(378)
    Some(TokenKind::IdentifierName),
    // State(379)
    Some(TokenKind::IdentifierName),
    // State(380)
    Some(TokenKind::IdentifierName),
    // State(381)
    Some(TokenKind::IdentifierName),
    // State(382)
    Some(TokenKind::IdentifierName),
    // State(383)
    Some(TokenKind::IdentifierName),
    // State(384)
    Some(TokenKind::IdentifierName),
    // State(385)
    Some(TokenKind::IdentifierName),
    // State(386)
    Some(TokenKind::IdentifierName),
    // State(387)
    Some(TokenKind::IdentifierName),
    // State(388)
    Some(TokenKind::IdentifierName),
    // State(389)
    Some(TokenKind::IdentifierName),
    // State(390)
    Some(TokenKind::IdentifierName),
    // State(391)
    Some(TokenKind::IdentifierName),
    // State(392)
    Some(TokenKind::IdentifierName),
    // State(393)
    Some(TokenKind::IdentifierName),
    // State(394)
    Some(TokenKind::IdentifierName),
    // State(395)
    Some(TokenKind::IdentifierName),
    // State(396)
    Some(TokenKind::IdentifierName),
    // State(397)
    Some(TokenKind::IdentifierName),
    // State(398)
    Some(TokenKind::IdentifierName),
    // State(399)
    Some(TokenKind::IdentifierName),
    // State(400)
    Some(TokenKind::IdentifierName),
    // State(401)
    Some(TokenKind::IdentifierName),
    // State(402)
    Some(TokenKind::IdentifierName),
    // State(403)
    Some(TokenKind::IdentifierName),
    // State(404)
    Some(TokenKind::IdentifierName),
    // State(405)
    Some(TokenKind::IdentifierName),
    // State(406)
    Some(TokenKind::IdentifierName),
    // State(407)
    Some(TokenKind::IdentifierName),
    // State(408)
    Some(TokenKind::IdentifierName),
    // State(409)
    Some(TokenKind::IdentifierName),
    // State(410)
    Some(TokenKind::IdentifierName),
    // State(411)
    Some(TokenKind::IdentifierName),
    // State(412)
    Some(TokenKind::IdentifierName),
    // State(413)
    Some(TokenKind::IdentifierName),
    // State(414)
    Some(TokenKind::IdentifierName),
    // State(415)
    Some(TokenKind::IdentifierName),
    // State(416)
    Some(TokenKind::IdentifierName),
    // State(417)
    Some(TokenKind::IdentifierName),
    // State(418)
    Some(TokenKind::IdentifierName),
    // State(419)
    Some(TokenKind::IdentifierName),
    // State(420)
    Some(TokenKind::IdentifierName),
    // State(421)
    Some(TokenKind::IdentifierName),
    // State(422)
    Some(TokenKind::IdentifierName),
    // State(423)
    Some(TokenKind::IdentifierName),
    // State(424)
    Some(TokenKind::IdentifierName),
    // State(425)
    Some(TokenKind::IdentifierName),
    // State(426)
    Some(TokenKind::IdentifierName),
    // State(427)
    Some(TokenKind::IdentifierName),
    // State(428)
    Some(TokenKind::IdentifierName),
    // State(429)
    Some(TokenKind::IdentifierName),
    // State(430)
    Some(TokenKind::IdentifierName),
    // State(431)
    Some(TokenKind::IdentifierName),
    // State(432)
    Some(TokenKind::IdentifierName),
    // State(433)
    Some(TokenKind::IdentifierName),
    // State(434)
    Some(TokenKind::IdentifierName),
    // State(435)
    Some(TokenKind::IdentifierName),
    // State(436)
    Some(TokenKind::IdentifierName),
    // State(437)
    Some(TokenKind::IdentifierName),
    // State(438)
    Some(TokenKind::IdentifierName),
    // State(439)
    Some(TokenKind::IdentifierName),
    // State(440)
    Some(TokenKind::IdentifierName),
    // State(441)
    Some(TokenKind::IdentifierName),
    // State(442)
    Some(TokenKind::IdentifierName),
    // State(443)
    Some(TokenKind::IdentifierName),
    // State(444)
    Some(TokenKind::IdentifierName),
    // State(445)
    Some(TokenKind::IdentifierName),
    // State(446)
    Some(TokenKind::IdentifierName),
    // State(447)
    Some(TokenKind::IdentifierName),
    // State(448)
    Some(TokenKind::IdentifierName),
    // State(449)
    Some(TokenKind::IdentifierName),
    // State(450)
    Some(TokenKind::IdentifierName),
    // State(451)
    Some(TokenKind::IdentifierName),
    // State(452)
    Some(TokenKind::IdentifierName),
    // State(453)
    Some(TokenKind::IdentifierName),
    // State(454)
    Some(TokenKind::IdentifierName),
    // State(455)
    Some(TokenKind::IdentifierName),
    // State(456)
    Some(TokenKind::IdentifierName),
    // State(457)
    Some(TokenKind::IdentifierName),
    // State(458)
    Some(TokenKind::IdentifierName),
    // State(459)
    Some(TokenKind::IdentifierName),
    // State(460)
    Some(TokenKind::IdentifierName),
    // State(461)
    Some(TokenKind::IdentifierName),
    // State(462)
    Some(TokenKind::PrivateIdentifier),
    // State(463)
    Some(TokenKind::OptionalChaining),
    // State(464)
    Some(TokenKind::Lbrace),
    // State(465)
    Some(TokenKind::Lparen),
    // State(466)
    Some(TokenKind::Rparen),
    // State(467)
    Some(TokenKind::Lbrack),
    // State(468)
    Some(TokenKind::Rbrack),
    // State(469)
    Some(TokenKind::Dot),
    // State(470)
    Some(TokenKind::Ellipsis),
    // State(471)
    Some(TokenKind::SemiColon),
    // State(472)
    Some(TokenKind::Comma),
    // State(473)
    Some(TokenKind::Lt),
    // State(474)
    Some(TokenKind::Gt),
    // State(475)
    Some(TokenKind::Lte),
    // State(476)
    Some(TokenKind::Gte),
    // State(477)
    Some(TokenKind::Eq),
    // State(478)
    Some(TokenKind::Ne),
    // State(479)
    Some(TokenKind::EqStrict),
    // State(480)
    Some(TokenKind::NeStrict),
    // State(481)
    Some(TokenKind::Add),
    // State(482)
    Some(TokenKind::Sub),
    // State(483)
    Some(TokenKind::Mul),
    // State(484)
    Some(TokenKind::Mod),
    // State(485)
    Some(TokenKind::Exp),
    // State(486)
    Some(TokenKind::Inc),
    // State(487)
    Some(TokenKind::Dec),
    // State(488)
    Some(TokenKind::Shl),
    // State(489)
    Some(TokenKind::Sar),
    // State(490)
    Some(TokenKind::Shr),
    // State(491)
    Some(TokenKind::BitAnd),
    // State(492)
    Some(TokenKind::BitOr),
    // State(493)
    Some(TokenKind::BitXor),
    // State(494)
    Some(TokenKind::Not),
    // State(495)
    Some(TokenKind::BitNot),
    // State(496)
    Some(TokenKind::And),
    // State(497)
    Some(TokenKind::Or),
    // State(498)
    Some(TokenKind::Nullish),
    // State(499)
    Some(TokenKind::Conditional),
    // State(500)
    Some(TokenKind::Colon),
    // State(501)
    Some(TokenKind::Assign),
    // State(502)
    Some(TokenKind::AddAssign),
    // State(503)
    Some(TokenKind::SubAssign),
    // State(504)
    Some(TokenKind::MulAssign),
    // State(505)
    Some(TokenKind::ModAssign),
    // State(506)
    Some(TokenKind::ExpAssign),
    // State(507)
    Some(TokenKind::ShlAssign),
    // State(508)
    Some(TokenKind::SarAssign),
    // State(509)
    Some(TokenKind::ShrAssign),
    // State(510)
    Some(TokenKind::BitAndAssign),
    // State(511)
    Some(TokenKind::BitOrAssign),
    // State(512)
    Some(TokenKind::BitXorAssign),
    // State(513)
    Some(TokenKind::AndAssign),
    // State(514)
    Some(TokenKind::OrAssign),
    // State(515)
    Some(TokenKind::NullishAssign),
    // State(516)
    Some(TokenKind::Arrow),
    // State(517)
    Some(TokenKind::NumericLiteral),
    // State(518)
    Some(TokenKind::NumericLiteral),
    // State(519)
    Some(TokenKind::NumericLiteral),
    // State(520)
    Some(TokenKind::NumericLiteral),
    // State(521)
    Some(TokenKind::NumericLiteral),
    // State(522)
    Some(TokenKind::NumericLiteral),
    // State(523)
    Some(TokenKind::NumericLiteral),
    // State(524)
    Some(TokenKind::NumericLiteral),
    // State(525)
    Some(TokenKind::NumericLiteral),
    // State(526)
    Some(TokenKind::NumericLiteral),
    // State(527)
    Some(TokenKind::NumericLiteral),
    // State(528)
    Some(TokenKind::StringLiteral),
    // State(529)
    Some(TokenKind::NoSubstitutionTemplate),
    // State(530)
    Some(TokenKind::TemplateHead),
    // State(531)
    Some(TokenKind::Div),
    // State(532)
    Some(TokenKind::DivAssign),
    // State(533)
    Some(TokenKind::TemplateMiddle),
    // State(534)
    Some(TokenKind::TemplateTail),
];

const LOOKAHEAD_TABLE: [bool; 535] = [
    // State(0)
    false, // State(1)
    false, // State(2)
    false, // State(3)
    false, // State(4)
    false, // State(5)
    false, // State(6)
    false, // State(7)
    false, // State(8)
    false, // State(9)
    false, // State(10)
    false, // State(11)
    false, // State(12)
    false, // State(13)
    false, // State(14)
    false, // State(15)
    false, // State(16)
    false, // State(17)
    false, // State(18)
    false, // State(19)
    false, // State(20)
    false, // State(21)
    false, // State(22)
    false, // State(23)
    false, // State(24)
    false, // State(25)
    false, // State(26)
    false, // State(27)
    false, // State(28)
    false, // State(29)
    false, // State(30)
    false, // State(31)
    false, // State(32)
    false, // State(33)
    false, // State(34)
    false, // State(35)
    false, // State(36)
    false, // State(37)
    false, // State(38)
    false, // State(39)
    false, // State(40)
    false, // State(41)
    false, // State(42)
    false, // State(43)
    false, // State(44)
    false, // State(45)
    false, // State(46)
    false, // State(47)
    false, // State(48)
    false, // State(49)
    false, // State(50)
    false, // State(51)
    false, // State(52)
    false, // State(53)
    false, // State(54)
    false, // State(55)
    false, // State(56)
    false, // State(57)
    false, // State(58)
    false, // State(59)
    false, // State(60)
    false, // State(61)
    false, // State(62)
    false, // State(63)
    false, // State(64)
    false, // State(65)
    false, // State(66)
    false, // State(67)
    false, // State(68)
    false, // State(69)
    false, // State(70)
    false, // State(71)
    false, // State(72)
    false, // State(73)
    false, // State(74)
    false, // State(75)
    false, // State(76)
    false, // State(77)
    false, // State(78)
    false, // State(79)
    false, // State(80)
    false, // State(81)
    false, // State(82)
    false, // State(83)
    false, // State(84)
    false, // State(85)
    false, // State(86)
    false, // State(87)
    false, // State(88)
    false, // State(89)
    false, // State(90)
    false, // State(91)
    false, // State(92)
    false, // State(93)
    false, // State(94)
    false, // State(95)
    false, // State(96)
    false, // State(97)
    false, // State(98)
    false, // State(99)
    false, // State(100)
    false, // State(101)
    false, // State(102)
    false, // State(103)
    false, // State(104)
    false, // State(105)
    false, // State(106)
    false, // State(107)
    false, // State(108)
    false, // State(109)
    false, // State(110)
    false, // State(111)
    false, // State(112)
    false, // State(113)
    false, // State(114)
    false, // State(115)
    false, // State(116)
    false, // State(117)
    false, // State(118)
    false, // State(119)
    false, // State(120)
    false, // State(121)
    false, // State(122)
    false, // State(123)
    false, // State(124)
    false, // State(125)
    false, // State(126)
    false, // State(127)
    false, // State(128)
    false, // State(129)
    false, // State(130)
    false, // State(131)
    false, // State(132)
    false, // State(133)
    false, // State(134)
    false, // State(135)
    false, // State(136)
    false, // State(137)
    false, // State(138)
    false, // State(139)
    false, // State(140)
    false, // State(141)
    false, // State(142)
    false, // State(143)
    false, // State(144)
    false, // State(145)
    false, // State(146)
    false, // State(147)
    false, // State(148)
    false, // State(149)
    false, // State(150)
    false, // State(151)
    false, // State(152)
    false, // State(153)
    false, // State(154)
    false, // State(155)
    false, // State(156)
    false, // State(157)
    false, // State(158)
    false, // State(159)
    false, // State(160)
    false, // State(161)
    false, // State(162)
    false, // State(163)
    false, // State(164)
    false, // State(165)
    false, // State(166)
    false, // State(167)
    false, // State(168)
    false, // State(169)
    false, // State(170)
    false, // State(171)
    false, // State(172)
    false, // State(173)
    false, // State(174)
    false, // State(175)
    false, // State(176)
    false, // State(177)
    false, // State(178)
    false, // State(179)
    false, // State(180)
    false, // State(181)
    false, // State(182)
    false, // State(183)
    false, // State(184)
    false, // State(185)
    false, // State(186)
    false, // State(187)
    false, // State(188)
    false, // State(189)
    false, // State(190)
    false, // State(191)
    false, // State(192)
    false, // State(193)
    false, // State(194)
    false, // State(195)
    false, // State(196)
    false, // State(197)
    false, // State(198)
    false, // State(199)
    false, // State(200)
    false, // State(201)
    false, // State(202)
    false, // State(203)
    false, // State(204)
    false, // State(205)
    false, // State(206)
    false, // State(207)
    false, // State(208)
    false, // State(209)
    false, // State(210)
    false, // State(211)
    false, // State(212)
    false, // State(213)
    false, // State(214)
    false, // State(215)
    false, // State(216)
    false, // State(217)
    false, // State(218)
    false, // State(219)
    false, // State(220)
    false, // State(221)
    false, // State(222)
    false, // State(223)
    false, // State(224)
    true, // State(225)
    true, // State(226)
    true, // State(227)
    true, // State(228)
    false, // State(229)
    false, // State(230)
    true, // State(231)
    false, // State(232)
    false, // State(233)
    false, // State(234)
    false, // State(235)
    false, // State(236)
    false, // State(237)
    false, // State(238)
    false, // State(239)
    false, // State(240)
    false, // State(241)
    false, // State(242)
    false, // State(243)
    false, // State(244)
    false, // State(245)
    false, // State(246)
    false, // State(247)
    false, // State(248)
    false, // State(249)
    false, // State(250)
    false, // State(251)
    false, // State(252)
    false, // State(253)
    false, // State(254)
    false, // State(255)
    false, // State(256)
    false, // State(257)
    false, // State(258)
    false, // State(259)
    false, // State(260)
    false, // State(261)
    false, // State(262)
    false, // State(263)
    false, // State(264)
    false, // State(265)
    false, // State(266)
    false, // State(267)
    false, // State(268)
    false, // State(269)
    false, // State(270)
    false, // State(271)
    false, // State(272)
    false, // State(273)
    false, // State(274)
    false, // State(275)
    false, // State(276)
    false, // State(277)
    false, // State(278)
    false, // State(279)
    false, // State(280)
    false, // State(281)
    false, // State(282)
    false, // State(283)
    false, // State(284)
    false, // State(285)
    false, // State(286)
    false, // State(287)
    false, // State(288)
    false, // State(289)
    false, // State(290)
    false, // State(291)
    false, // State(292)
    false, // State(293)
    false, // State(294)
    false, // State(295)
    false, // State(296)
    false, // State(297)
    false, // State(298)
    false, // State(299)
    false, // State(300)
    false, // State(301)
    false, // State(302)
    false, // State(303)
    false, // State(304)
    false, // State(305)
    false, // State(306)
    false, // State(307)
    false, // State(308)
    false, // State(309)
    false, // State(310)
    false, // State(311)
    false, // State(312)
    false, // State(313)
    false, // State(314)
    false, // State(315)
    false, // State(316)
    false, // State(317)
    false, // State(318)
    false, // State(319)
    false, // State(320)
    false, // State(321)
    false, // State(322)
    false, // State(323)
    false, // State(324)
    false, // State(325)
    false, // State(326)
    false, // State(327)
    false, // State(328)
    false, // State(329)
    false, // State(330)
    false, // State(331)
    false, // State(332)
    false, // State(333)
    false, // State(334)
    false, // State(335)
    false, // State(336)
    false, // State(337)
    false, // State(338)
    false, // State(339)
    false, // State(340)
    false, // State(341)
    false, // State(342)
    false, // State(343)
    false, // State(344)
    false, // State(345)
    false, // State(346)
    false, // State(347)
    false, // State(348)
    false, // State(349)
    false, // State(350)
    false, // State(351)
    false, // State(352)
    false, // State(353)
    false, // State(354)
    false, // State(355)
    false, // State(356)
    false, // State(357)
    false, // State(358)
    false, // State(359)
    false, // State(360)
    false, // State(361)
    false, // State(362)
    false, // State(363)
    false, // State(364)
    false, // State(365)
    false, // State(366)
    false, // State(367)
    false, // State(368)
    false, // State(369)
    false, // State(370)
    false, // State(371)
    false, // State(372)
    false, // State(373)
    false, // State(374)
    false, // State(375)
    false, // State(376)
    false, // State(377)
    false, // State(378)
    false, // State(379)
    false, // State(380)
    false, // State(381)
    false, // State(382)
    false, // State(383)
    false, // State(384)
    false, // State(385)
    false, // State(386)
    false, // State(387)
    false, // State(388)
    false, // State(389)
    false, // State(390)
    false, // State(391)
    false, // State(392)
    false, // State(393)
    false, // State(394)
    false, // State(395)
    false, // State(396)
    false, // State(397)
    false, // State(398)
    false, // State(399)
    false, // State(400)
    false, // State(401)
    false, // State(402)
    false, // State(403)
    false, // State(404)
    false, // State(405)
    false, // State(406)
    false, // State(407)
    false, // State(408)
    false, // State(409)
    false, // State(410)
    false, // State(411)
    false, // State(412)
    false, // State(413)
    false, // State(414)
    false, // State(415)
    false, // State(416)
    false, // State(417)
    false, // State(418)
    false, // State(419)
    false, // State(420)
    false, // State(421)
    false, // State(422)
    false, // State(423)
    false, // State(424)
    false, // State(425)
    false, // State(426)
    false, // State(427)
    false, // State(428)
    false, // State(429)
    false, // State(430)
    false, // State(431)
    false, // State(432)
    false, // State(433)
    false, // State(434)
    false, // State(435)
    false, // State(436)
    false, // State(437)
    false, // State(438)
    false, // State(439)
    false, // State(440)
    false, // State(441)
    false, // State(442)
    false, // State(443)
    false, // State(444)
    false, // State(445)
    false, // State(446)
    false, // State(447)
    false, // State(448)
    false, // State(449)
    false, // State(450)
    false, // State(451)
    false, // State(452)
    false, // State(453)
    false, // State(454)
    false, // State(455)
    false, // State(456)
    false, // State(457)
    false, // State(458)
    false, // State(459)
    false, // State(460)
    false, // State(461)
    false, // State(462)
    false, // State(463)
    true, // State(464)
    false, // State(465)
    false, // State(466)
    false, // State(467)
    false, // State(468)
    false, // State(469)
    false, // State(470)
    false, // State(471)
    false, // State(472)
    false, // State(473)
    false, // State(474)
    false, // State(475)
    false, // State(476)
    false, // State(477)
    false, // State(478)
    false, // State(479)
    false, // State(480)
    false, // State(481)
    false, // State(482)
    false, // State(483)
    false, // State(484)
    false, // State(485)
    false, // State(486)
    false, // State(487)
    false, // State(488)
    false, // State(489)
    false, // State(490)
    false, // State(491)
    false, // State(492)
    false, // State(493)
    false, // State(494)
    false, // State(495)
    false, // State(496)
    false, // State(497)
    false, // State(498)
    false, // State(499)
    false, // State(500)
    false, // State(501)
    false, // State(502)
    false, // State(503)
    false, // State(504)
    false, // State(505)
    false, // State(506)
    false, // State(507)
    false, // State(508)
    false, // State(509)
    false, // State(510)
    false, // State(511)
    false, // State(512)
    false, // State(513)
    false, // State(514)
    false, // State(515)
    false, // State(516)
    false, // State(517)
    false, // State(518)
    false, // State(519)
    false, // State(520)
    false, // State(521)
    false, // State(522)
    false, // State(523)
    false, // State(524)
    false, // State(525)
    false, // State(526)
    false, // State(527)
    false, // State(528)
    false, // State(529)
    false, // State(530)
    false, // State(531)
    false, // State(532)
    false, // State(533)
    false, // State(534)
    false,
];
