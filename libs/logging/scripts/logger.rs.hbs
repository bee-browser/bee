// DO NOT EDIT THIS FILE BY HAND.
//
// This file was automagically generated with:
// template: {{@template}}

use std::sync::LazyLock;

pub(crate) static FLAGS: LazyLock<logging::Flags> = LazyLock::new(|| {
    logging::Flags::load("{{ target }}")
});

#[allow(unused_macros)]
macro_rules! error {
    ($($tokens:tt)+) => {
        if (*crate::{{#if module}}{{ module }}::{{/if}}logger::FLAGS).contains(logging::Flags::ERROR) {
            logging::error!(target: "{{ target }}", $($tokens)+);
        }
    };
}

// error[E0659]: `warn` is ambiguous
#[allow(unused_macros)]
macro_rules! warn_ {
    ($($tokens:tt)+) => {
        if (*crate::{{#if module}}{{ module }}::{{/if}}logger::FLAGS).contains(logging::Flags::WARN) {
            logging::warn!(target: "{{ target }}", $($tokens)+);
        }
    };
}

#[allow(unused_macros)]
macro_rules! info {
    ($($tokens:tt)+) => {
        if (*crate::{{#if module}}{{ module }}::{{/if}}logger::FLAGS).contains(logging::Flags::INFO) {
            logging::info!(target: "{{ target }}", $($tokens)+);
        }
    };
}

#[allow(unused_macros)]
macro_rules! debug0 {
    ($($tokens:tt)+) => {
        if (*crate::{{#if module}}{{ module }}::{{/if}}logger::FLAGS).contains(logging::Flags::DEBUG0) {
            logging::debug0!(target: "{{ target }}", $($tokens)+);
        }
    };
}

#[allow(unused_macros)]
macro_rules! debug1 {
    ($($tokens:tt)+) => {
        if (*crate::{{#if module}}{{ module }}::{{/if}}logger::FLAGS).contains(logging::Flags::DEBUG1) {
            logging::debug1!(target: "{{ target }}", $($tokens)+);
        }
    };
}

#[allow(unused_macros)]
macro_rules! debug2 {
    ($($tokens:tt)+) => {
        if (*crate::{{#if module}}{{ module }}::{{/if}}logger::FLAGS).contains(logging::Flags::DEBUG2) {
            logging::debug2!(target: "{{ target }}", $($tokens)+);
        }
    };
}

#[allow(unused_macros)]
macro_rules! trace {
    ($($tokens:tt)+) => {
        if (*crate::{{#if module}}{{ module }}::{{/if}}logger::FLAGS).contains(logging::Flags::TRACE) {
            logging::trace!(target: "{{ target }}", $($tokens)+);
        }
    };
}

#[allow(unused_macros)]
macro_rules! debug {
    ($($tokens:tt)+) => {
        crate::{{#if module}}{{ module }}::{{/if}}logger::debug0!($($tokens)+);
    };
}

#[allow(unused_imports)]
pub(crate) use debug;
#[allow(unused_imports)]
pub(crate) use debug0;
#[allow(unused_imports)]
pub(crate) use debug1;
#[allow(unused_imports)]
pub(crate) use debug2;
#[allow(unused_imports)]
pub(crate) use error;
#[allow(unused_imports)]
pub(crate) use info;
#[allow(unused_imports)]
pub(crate) use trace;
#[allow(unused_imports)]
pub(crate) use warn_ as warn;
