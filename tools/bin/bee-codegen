#!/usr/bin/env node

'use strict';

const program = require('commander');
const _ = require('lodash');
const fs = require('fs');
const fileUrl = require('file-url');
const path = require('path');
const nunjucks = require('nunjucks');
const streamToString = require('stream-to-string');
const yaml = require('js-yaml');
const changeCase = require('change-case');

const HELP = `
Supported Templates:
  The following templates are supported at this point:

    * Nunjucks (*.njk)

Custom Filters:
  The following custom filters based on Lodash.js are available:

    * camelCase (camelCase)
    * capitalCase (Capital Case)
    * constantCae (CONSTANT_CASE)
    * dotCase (dot.case)
    * headerCase (Header-Case)
    * noCase (no case)
    * paramCase (param-case)
    * pascalCase (PascalCase)
    * pathCase (path/case)
    * sentenceCase (Sentence case)
    * snakeCase (snake_case)
    * yaml (js-yaml dump())

Examples:
  The following commands make the same result:

    echo '{ "name": "value1" }' | {{name}} --stdin -v name=value2 template.njk
    echo '{ "name": "value2" }' | {{name}} --stdin template.njk
    {{name}} -v name=value1 -v name=value2 template.njk
    {{name}} -v name=value2 template.njk
`;

function loadTemplate(templateFile) {
  return fs.readFileSync(templateFile, { encoding: 'utf8' });
}

async function loadVariablesFromSTDIN() {
  return JSON.parse(await streamToString(process.stdin));
}

async function render(template, searchPaths, context) {
  const env = new nunjucks.Environment(
    new nunjucks.FileSystemLoader(searchPaths));
  [
    'camelCase', 'capitalCase', 'constantCase', 'dotCase', 'headerCase', 'noCase', 'paramCase',
    'pascalCase', 'pathCase', 'sentenceCase', 'snakeCase',
  ].forEach((name) => {
    env.addFilter(name, (s) => changeCase[name](s));
  });
  env.addFilter('yaml', (obj, options) => yaml.dump(obj, options));
  env.addFilter('modulePath', (s) => require.resolve(s));
  env.addFilter('fileUrl', (s) => fileUrl(s));
  env.addFilter('load', (s) => fs.readFileSync(s, { encoding: 'utf8' }));
  env.addFilter('split', (s, sep, limit) => s.split(sep, limit));
  return env.renderString(template, context);
}

program
  .description('Generate code using a template with variables')
  .option(
    '-s, --search-paths <path>',
    'Search paths',
    (val, list) => {
      list.push(path.resolve(val));
      return list;
    }, [])
  .option(
    '-v, --variables <name-value-pair>',
    'Variables',
    (val, list) => {
      const [name, value] = val.split('=');
      list.push({name, value});
      return list;
    }, [])
  .option(
    '--stdin',
    'Load variables from STDIN')
  .arguments('<template-file>')
  .action(async (templateFile, options) => {
    try {
      templateFile = path.resolve(templateFile);
      options.searchPaths.push(path.dirname(templateFile));
      const template = loadTemplate(templateFile);
      let variables = {};
      if (options.stdin) {
        variables = await loadVariablesFromSTDIN(variables);
      }
      options.variables.forEach((v) => {
        variables[v.name] = v.value;
      });
      variables.$template_file = templateFile;
      const result = await render(template, options.searchPaths, variables);
      process.stdout.write(result);
    } catch (e) {
      console.error(e);
    }
  })
  .on('--help', () => console.error(HELP.replace(/{{name}}/g, program._name)))
  .parse(process.argv);
