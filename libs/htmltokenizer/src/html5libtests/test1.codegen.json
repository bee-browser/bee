{
  "tests": [
    {
      "description": "Correct Doctype lowercase",
      "input": [
        60,
        33,
        68,
        79,
        67,
        84,
        89,
        80,
        69,
        32,
        104,
        116,
        109,
        108,
        62
      ],
      "output": [
        {
          "Doctype": {
            "name": "html",
            "public_id": null,
            "system_id": null,
            "force_quirks": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Correct Doctype uppercase",
      "input": [
        60,
        33,
        68,
        79,
        67,
        84,
        89,
        80,
        69,
        32,
        72,
        84,
        77,
        76,
        62
      ],
      "output": [
        {
          "Doctype": {
            "name": "html",
            "public_id": null,
            "system_id": null,
            "force_quirks": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Correct Doctype mixed case",
      "input": [
        60,
        33,
        68,
        79,
        67,
        84,
        89,
        80,
        69,
        32,
        72,
        116,
        77,
        108,
        62
      ],
      "output": [
        {
          "Doctype": {
            "name": "html",
            "public_id": null,
            "system_id": null,
            "force_quirks": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Correct Doctype case with EOF",
      "input": [
        60,
        33,
        68,
        79,
        67,
        84,
        89,
        80,
        69,
        32,
        72,
        116,
        77,
        108
      ],
      "output": [
        {
          "Doctype": {
            "name": "html",
            "public_id": null,
            "system_id": null,
            "force_quirks": true
          }
        }
      ],
      "errors": [
        {
          "code": "EofInDoctype",
          "location": {
            "line": 1,
            "column": 15
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Truncated doctype start",
      "input": [
        60,
        33,
        68,
        79,
        67,
        62
      ],
      "output": [
        {
          "Comment": {
            "data": "DOC"
          }
        }
      ],
      "errors": [
        {
          "code": "IncorrectlyOpenedComment",
          "location": {
            "line": 1,
            "column": 3
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Doctype in error",
      "input": [
        60,
        33,
        68,
        79,
        67,
        84,
        89,
        80,
        69,
        32,
        102,
        111,
        111,
        62
      ],
      "output": [
        {
          "Doctype": {
            "name": "foo",
            "public_id": null,
            "system_id": null,
            "force_quirks": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Single Start Tag",
      "input": [
        60,
        104,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "h",
            "attrs": {},
            "self_closing": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Empty end tag",
      "input": [
        60,
        47,
        62
      ],
      "output": [],
      "errors": [
        {
          "code": "MissingEndTagName",
          "location": {
            "line": 1,
            "column": 3
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Empty start tag",
      "input": [
        60,
        62
      ],
      "output": [
        {
          "Character": {
            "data": "<>"
          }
        }
      ],
      "errors": [
        {
          "code": "InvalidFirstCharacterOfTagName",
          "location": {
            "line": 1,
            "column": 2
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Start Tag w/attribute",
      "input": [
        60,
        104,
        32,
        97,
        61,
        39,
        98,
        39,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "h",
            "attrs": {
              "a": "b"
            },
            "self_closing": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Start Tag w/attribute no quotes",
      "input": [
        60,
        104,
        32,
        97,
        61,
        98,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "h",
            "attrs": {
              "a": "b"
            },
            "self_closing": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Start/End Tag",
      "input": [
        60,
        104,
        62,
        60,
        47,
        104,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "h",
            "attrs": {},
            "self_closing": false
          }
        },
        {
          "EndTag": {
            "name": "h"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Two unclosed start tags",
      "input": [
        60,
        112,
        62,
        79,
        110,
        101,
        60,
        112,
        62,
        84,
        119,
        111
      ],
      "output": [
        {
          "StartTag": {
            "name": "p",
            "attrs": {},
            "self_closing": false
          }
        },
        {
          "Character": {
            "data": "One"
          }
        },
        {
          "StartTag": {
            "name": "p",
            "attrs": {},
            "self_closing": false
          }
        },
        {
          "Character": {
            "data": "Two"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "End Tag w/attribute",
      "input": [
        60,
        104,
        62,
        60,
        47,
        104,
        32,
        97,
        61,
        39,
        98,
        39,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "h",
            "attrs": {},
            "self_closing": false
          }
        },
        {
          "EndTag": {
            "name": "h"
          }
        }
      ],
      "errors": [
        {
          "code": "EndTagWithAttributes",
          "location": {
            "line": 1,
            "column": 13
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Multiple atts",
      "input": [
        60,
        104,
        32,
        97,
        61,
        39,
        98,
        39,
        32,
        99,
        61,
        39,
        100,
        39,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "h",
            "attrs": {
              "a": "b",
              "c": "d"
            },
            "self_closing": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Multiple atts no space",
      "input": [
        60,
        104,
        32,
        97,
        61,
        39,
        98,
        39,
        99,
        61,
        39,
        100,
        39,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "h",
            "attrs": {
              "a": "b",
              "c": "d"
            },
            "self_closing": false
          }
        }
      ],
      "errors": [
        {
          "code": "MissingWhitespaceBetweenAttributes",
          "location": {
            "line": 1,
            "column": 9
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Repeated attr",
      "input": [
        60,
        104,
        32,
        97,
        61,
        39,
        98,
        39,
        32,
        97,
        61,
        39,
        100,
        39,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "h",
            "attrs": {
              "a": "b"
            },
            "self_closing": false
          }
        }
      ],
      "errors": [
        {
          "code": "DuplicateAttribute",
          "location": {
            "line": 1,
            "column": 11
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Simple comment",
      "input": [
        60,
        33,
        45,
        45,
        99,
        111,
        109,
        109,
        101,
        110,
        116,
        45,
        45,
        62
      ],
      "output": [
        {
          "Comment": {
            "data": "comment"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Comment, Central dash no space",
      "input": [
        60,
        33,
        45,
        45,
        45,
        45,
        45,
        62
      ],
      "output": [
        {
          "Comment": {
            "data": "-"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Comment, two central dashes",
      "input": [
        60,
        33,
        45,
        45,
        32,
        45,
        45,
        99,
        111,
        109,
        109,
        101,
        110,
        116,
        32,
        45,
        45,
        62
      ],
      "output": [
        {
          "Comment": {
            "data": " --comment "
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Comment, central less-than bang",
      "input": [
        60,
        33,
        45,
        45,
        60,
        33,
        45,
        45,
        62
      ],
      "output": [
        {
          "Comment": {
            "data": "<!"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Unfinished comment",
      "input": [
        60,
        33,
        45,
        45,
        99,
        111,
        109,
        109,
        101,
        110,
        116
      ],
      "output": [
        {
          "Comment": {
            "data": "comment"
          }
        }
      ],
      "errors": [
        {
          "code": "EofInComment",
          "location": {
            "line": 1,
            "column": 12
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Unfinished comment after start of nested comment",
      "input": [
        60,
        33,
        45,
        45,
        32,
        60,
        33,
        45,
        45
      ],
      "output": [
        {
          "Comment": {
            "data": " <!"
          }
        }
      ],
      "errors": [
        {
          "code": "EofInComment",
          "location": {
            "line": 1,
            "column": 10
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Start of a comment",
      "input": [
        60,
        33,
        45
      ],
      "output": [
        {
          "Comment": {
            "data": "-"
          }
        }
      ],
      "errors": [
        {
          "code": "IncorrectlyOpenedComment",
          "location": {
            "line": 1,
            "column": 3
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Short comment",
      "input": [
        60,
        33,
        45,
        45,
        62
      ],
      "output": [
        {
          "Comment": {
            "data": ""
          }
        }
      ],
      "errors": [
        {
          "code": "AbruptClosingOfEmptyComment",
          "location": {
            "line": 1,
            "column": 5
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Short comment two",
      "input": [
        60,
        33,
        45,
        45,
        45,
        62
      ],
      "output": [
        {
          "Comment": {
            "data": ""
          }
        }
      ],
      "errors": [
        {
          "code": "AbruptClosingOfEmptyComment",
          "location": {
            "line": 1,
            "column": 6
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Short comment three",
      "input": [
        60,
        33,
        45,
        45,
        45,
        45,
        62
      ],
      "output": [
        {
          "Comment": {
            "data": ""
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "< in comment",
      "input": [
        60,
        33,
        45,
        45,
        32,
        60,
        116,
        101,
        115,
        116,
        45,
        45,
        62
      ],
      "output": [
        {
          "Comment": {
            "data": " <test"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "<< in comment",
      "input": [
        60,
        33,
        45,
        45,
        60,
        60,
        45,
        45,
        62
      ],
      "output": [
        {
          "Comment": {
            "data": "<<"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "<! in comment",
      "input": [
        60,
        33,
        45,
        45,
        32,
        60,
        33,
        116,
        101,
        115,
        116,
        45,
        45,
        62
      ],
      "output": [
        {
          "Comment": {
            "data": " <!test"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "<!- in comment",
      "input": [
        60,
        33,
        45,
        45,
        32,
        60,
        33,
        45,
        116,
        101,
        115,
        116,
        45,
        45,
        62
      ],
      "output": [
        {
          "Comment": {
            "data": " <!-test"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Nested comment",
      "input": [
        60,
        33,
        45,
        45,
        32,
        60,
        33,
        45,
        45,
        116,
        101,
        115,
        116,
        45,
        45,
        62
      ],
      "output": [
        {
          "Comment": {
            "data": " <!--test"
          }
        }
      ],
      "errors": [
        {
          "code": "NestedComment",
          "location": {
            "line": 1,
            "column": 10
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Nested comment with extra <",
      "input": [
        60,
        33,
        45,
        45,
        32,
        60,
        60,
        33,
        45,
        45,
        116,
        101,
        115,
        116,
        45,
        45,
        62
      ],
      "output": [
        {
          "Comment": {
            "data": " <<!--test"
          }
        }
      ],
      "errors": [
        {
          "code": "NestedComment",
          "location": {
            "line": 1,
            "column": 11
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "< in script data",
      "initialStates": [
        "ScriptData"
      ],
      "input": [
        60,
        116,
        101,
        115,
        116,
        45,
        45,
        62
      ],
      "output": [
        {
          "Character": {
            "data": "<test-->"
          }
        }
      ],
      "errors": []
    },
    {
      "description": "<! in script data",
      "initialStates": [
        "ScriptData"
      ],
      "input": [
        60,
        33,
        116,
        101,
        115,
        116,
        45,
        45,
        62
      ],
      "output": [
        {
          "Character": {
            "data": "<!test-->"
          }
        }
      ],
      "errors": []
    },
    {
      "description": "<!- in script data",
      "initialStates": [
        "ScriptData"
      ],
      "input": [
        60,
        33,
        45,
        116,
        101,
        115,
        116,
        45,
        45,
        62
      ],
      "output": [
        {
          "Character": {
            "data": "<!-test-->"
          }
        }
      ],
      "errors": []
    },
    {
      "description": "Escaped script data",
      "initialStates": [
        "ScriptData"
      ],
      "input": [
        60,
        33,
        45,
        45,
        116,
        101,
        115,
        116,
        45,
        45,
        62
      ],
      "output": [
        {
          "Character": {
            "data": "<!--test-->"
          }
        }
      ],
      "errors": []
    },
    {
      "description": "< in script HTML comment",
      "initialStates": [
        "ScriptData"
      ],
      "input": [
        60,
        33,
        45,
        45,
        32,
        60,
        32,
        116,
        101,
        115,
        116,
        32,
        45,
        45,
        62
      ],
      "output": [
        {
          "Character": {
            "data": "<!-- < test -->"
          }
        }
      ],
      "errors": []
    },
    {
      "description": "</ in script HTML comment",
      "initialStates": [
        "ScriptData"
      ],
      "input": [
        60,
        33,
        45,
        45,
        32,
        60,
        47,
        32,
        116,
        101,
        115,
        116,
        32,
        45,
        45,
        62
      ],
      "output": [
        {
          "Character": {
            "data": "<!-- </ test -->"
          }
        }
      ],
      "errors": []
    },
    {
      "description": "Start tag in script HTML comment",
      "initialStates": [
        "ScriptData"
      ],
      "input": [
        60,
        33,
        45,
        45,
        32,
        60,
        116,
        101,
        115,
        116,
        62,
        32,
        45,
        45,
        62
      ],
      "output": [
        {
          "Character": {
            "data": "<!-- <test> -->"
          }
        }
      ],
      "errors": []
    },
    {
      "description": "End tag in script HTML comment",
      "initialStates": [
        "ScriptData"
      ],
      "input": [
        60,
        33,
        45,
        45,
        32,
        60,
        47,
        116,
        101,
        115,
        116,
        62,
        32,
        45,
        45,
        62
      ],
      "output": [
        {
          "Character": {
            "data": "<!-- </test> -->"
          }
        }
      ],
      "errors": []
    },
    {
      "description": "- in script HTML comment double escaped",
      "initialStates": [
        "ScriptData"
      ],
      "input": [
        60,
        33,
        45,
        45,
        60,
        115,
        99,
        114,
        105,
        112,
        116,
        62,
        45,
        60,
        47,
        115,
        99,
        114,
        105,
        112,
        116,
        62,
        45,
        45,
        62
      ],
      "output": [
        {
          "Character": {
            "data": "<!--<script>-</script>-->"
          }
        }
      ],
      "errors": []
    },
    {
      "description": "-- in script HTML comment double escaped",
      "initialStates": [
        "ScriptData"
      ],
      "input": [
        60,
        33,
        45,
        45,
        60,
        115,
        99,
        114,
        105,
        112,
        116,
        62,
        45,
        45,
        60,
        47,
        115,
        99,
        114,
        105,
        112,
        116,
        62,
        45,
        45,
        62
      ],
      "output": [
        {
          "Character": {
            "data": "<!--<script>--</script>-->"
          }
        }
      ],
      "errors": []
    },
    {
      "description": "--- in script HTML comment double escaped",
      "initialStates": [
        "ScriptData"
      ],
      "input": [
        60,
        33,
        45,
        45,
        60,
        115,
        99,
        114,
        105,
        112,
        116,
        62,
        45,
        45,
        45,
        60,
        47,
        115,
        99,
        114,
        105,
        112,
        116,
        62,
        45,
        45,
        62
      ],
      "output": [
        {
          "Character": {
            "data": "<!--<script>---</script>-->"
          }
        }
      ],
      "errors": []
    },
    {
      "description": "- spaced in script HTML comment double escaped",
      "initialStates": [
        "ScriptData"
      ],
      "input": [
        60,
        33,
        45,
        45,
        60,
        115,
        99,
        114,
        105,
        112,
        116,
        62,
        32,
        45,
        32,
        60,
        47,
        115,
        99,
        114,
        105,
        112,
        116,
        62,
        45,
        45,
        62
      ],
      "output": [
        {
          "Character": {
            "data": "<!--<script> - </script>-->"
          }
        }
      ],
      "errors": []
    },
    {
      "description": "-- spaced in script HTML comment double escaped",
      "initialStates": [
        "ScriptData"
      ],
      "input": [
        60,
        33,
        45,
        45,
        60,
        115,
        99,
        114,
        105,
        112,
        116,
        62,
        32,
        45,
        45,
        32,
        60,
        47,
        115,
        99,
        114,
        105,
        112,
        116,
        62,
        45,
        45,
        62
      ],
      "output": [
        {
          "Character": {
            "data": "<!--<script> -- </script>-->"
          }
        }
      ],
      "errors": []
    },
    {
      "description": "Ampersand EOF",
      "input": [
        38
      ],
      "output": [
        {
          "Character": {
            "data": "&"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Ampersand ampersand EOF",
      "input": [
        38,
        38
      ],
      "output": [
        {
          "Character": {
            "data": "&&"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Ampersand space EOF",
      "input": [
        38,
        32
      ],
      "output": [
        {
          "Character": {
            "data": "& "
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Unfinished entity",
      "input": [
        38,
        102
      ],
      "output": [
        {
          "Character": {
            "data": "&f"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Ampersand, number sign",
      "input": [
        38,
        35
      ],
      "output": [
        {
          "Character": {
            "data": "&#"
          }
        }
      ],
      "errors": [
        {
          "code": "AbsenceOfDigitsInNumericCharacterReference",
          "location": {
            "line": 1,
            "column": 3
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Unfinished numeric entity",
      "input": [
        38,
        35,
        120
      ],
      "output": [
        {
          "Character": {
            "data": "&#x"
          }
        }
      ],
      "errors": [
        {
          "code": "AbsenceOfDigitsInNumericCharacterReference",
          "location": {
            "line": 1,
            "column": 4
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Entity with trailing semicolon (1)",
      "input": [
        73,
        39,
        109,
        32,
        38,
        110,
        111,
        116,
        59,
        105,
        116
      ],
      "output": [
        {
          "Character": {
            "data": "I'm ¬it"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Entity with trailing semicolon (2)",
      "input": [
        73,
        39,
        109,
        32,
        38,
        110,
        111,
        116,
        105,
        110,
        59
      ],
      "output": [
        {
          "Character": {
            "data": "I'm ∉"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Entity without trailing semicolon (1)",
      "input": [
        73,
        39,
        109,
        32,
        38,
        110,
        111,
        116,
        105,
        116
      ],
      "output": [
        {
          "Character": {
            "data": "I'm ¬it"
          }
        }
      ],
      "errors": [
        {
          "code": "MissingSemicolonAfterCharacterReference",
          "location": {
            "line": 1,
            "column": 9
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Entity without trailing semicolon (2)",
      "input": [
        73,
        39,
        109,
        32,
        38,
        110,
        111,
        116,
        105,
        110
      ],
      "output": [
        {
          "Character": {
            "data": "I'm ¬in"
          }
        }
      ],
      "errors": [
        {
          "code": "MissingSemicolonAfterCharacterReference",
          "location": {
            "line": 1,
            "column": 9
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Partial entity match at end of file",
      "input": [
        73,
        39,
        109,
        32,
        38,
        110,
        111
      ],
      "output": [
        {
          "Character": {
            "data": "I'm &no"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Non-ASCII character reference name",
      "input": [
        38,
        172,
        59
      ],
      "output": [
        {
          "Character": {
            "data": "&¬;"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "ASCII decimal entity",
      "input": [
        38,
        35,
        48,
        48,
        51,
        54,
        59
      ],
      "output": [
        {
          "Character": {
            "data": "$"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "ASCII hexadecimal entity",
      "input": [
        38,
        35,
        120,
        51,
        102,
        59
      ],
      "output": [
        {
          "Character": {
            "data": "?"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Hexadecimal entity in attribute",
      "input": [
        60,
        104,
        32,
        97,
        61,
        39,
        38,
        35,
        120,
        51,
        102,
        59,
        39,
        62,
        60,
        47,
        104,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "h",
            "attrs": {
              "a": "?"
            },
            "self_closing": false
          }
        },
        {
          "EndTag": {
            "name": "h"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Entity in attribute without semicolon ending in x",
      "input": [
        60,
        104,
        32,
        97,
        61,
        39,
        38,
        110,
        111,
        116,
        120,
        39,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "h",
            "attrs": {
              "a": "&notx"
            },
            "self_closing": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Entity in attribute without semicolon ending in 1",
      "input": [
        60,
        104,
        32,
        97,
        61,
        39,
        38,
        110,
        111,
        116,
        49,
        39,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "h",
            "attrs": {
              "a": "&not1"
            },
            "self_closing": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Entity in attribute without semicolon ending in i",
      "input": [
        60,
        104,
        32,
        97,
        61,
        39,
        38,
        110,
        111,
        116,
        105,
        39,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "h",
            "attrs": {
              "a": "&noti"
            },
            "self_closing": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Entity in attribute without semicolon",
      "input": [
        60,
        104,
        32,
        97,
        61,
        39,
        38,
        67,
        79,
        80,
        89,
        39,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "h",
            "attrs": {
              "a": "©"
            },
            "self_closing": false
          }
        }
      ],
      "errors": [
        {
          "code": "MissingSemicolonAfterCharacterReference",
          "location": {
            "line": 1,
            "column": 12
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    },
    {
      "description": "Unquoted attribute ending in ampersand",
      "input": [
        60,
        115,
        32,
        111,
        61,
        38,
        32,
        116,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "s",
            "attrs": {
              "o": "&",
              "t": ""
            },
            "self_closing": false
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Unquoted attribute at end of tag with final character of &, with tag followed by characters",
      "input": [
        60,
        97,
        32,
        97,
        61,
        97,
        38,
        62,
        102,
        111,
        111
      ],
      "output": [
        {
          "StartTag": {
            "name": "a",
            "attrs": {
              "a": "a&"
            },
            "self_closing": false
          }
        },
        {
          "Character": {
            "data": "foo"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "plaintext element",
      "input": [
        60,
        112,
        108,
        97,
        105,
        110,
        116,
        101,
        120,
        116,
        62,
        102,
        111,
        111,
        98,
        97,
        114
      ],
      "output": [
        {
          "StartTag": {
            "name": "plaintext",
            "attrs": {},
            "self_closing": false
          }
        },
        {
          "Character": {
            "data": "foobar"
          }
        }
      ],
      "initialStates": [
        "Data"
      ],
      "errors": []
    },
    {
      "description": "Open angled bracket in unquoted attribute value state",
      "input": [
        60,
        97,
        32,
        97,
        61,
        102,
        60,
        62
      ],
      "output": [
        {
          "StartTag": {
            "name": "a",
            "attrs": {
              "a": "f<"
            },
            "self_closing": false
          }
        }
      ],
      "errors": [
        {
          "code": "UnexpectedCharacterInUnquotedAttributeValue",
          "location": {
            "line": 1,
            "column": 7
          }
        }
      ],
      "initialStates": [
        "Data"
      ]
    }
  ],
  "name": "test1"
}
