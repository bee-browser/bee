// DO NOT EDIT THIS FILE BY HAND.
//
// This file was automagically generated with:
// template: mod.rs.mustache

mod imp;

use jsparser::Symbol;

use crate::Runtime;
use crate::logger;
use crate::objects::Object;
use crate::objects::ObjectHandle;
use crate::objects::Property;
use crate::types::CallContext;
use crate::types::Status;
use crate::types::StringHandle;
use crate::types::Value;

impl<X> Runtime<X> {
    pub(crate) fn is_string_object(&self, object: ObjectHandle) -> bool {
        object.is_instance_of(self.string_prototype)
    }

    {{#constructorProperties}}
    // 22.1.2 Properties of the String Constructor
    pub(super) fn create_string_constructor(&mut self) -> ObjectHandle {
        logger::debug!(event = "create_string_constructor");

        let mut constructor = self.create_builtin_function(constructor, self.string_prototype);

        {{#functions}}
        let mut func = self.create_builtin_function({{{imp}}}, None);
        let _ = func.define_own_property(Symbol::NAME.into(), Property::data_xxc(Value::String(const_string!("{{{name}}}"))));
        let _ = func.define_own_property(Symbol::LENGTH.into(), Property::data_xxc(Value::Number({{{length}}}.0)));
        let _ = constructor.define_own_property(Symbol::{{{symbol}}}.into(), Property::data_wxc(Value::Object(func)));

        {{/functions}}
        constructor
    }
    {{/constructorProperties}}

    pub(crate) fn create_string_object(
        &mut self,
        this: Option<&Value>,
        args: &[Value],
        new: bool,
    ) -> Result<Value, Value> {
        logger::debug!(event = "create_string_object", ?this, ?args, new);
        let string = match args.first() {
            Some(v) => {
                // TODO: a. If NewTarget is undefined and value is a Symbol,
                // return SymbolDescriptiveString(value).
                match self.value_to_string(v) {
                    Ok(string) => string,
                    Err(err) => return Err(self.create_exception(err)),
                }
            }
            None => StringHandle::EMPTY,
        };
        // TODO(feat): NewTarget
        if new {
            let mut object = if let Some(&Value::Object(this)) = this {
                this
            } else {
                // 10.4.3.4 StringCreate ( value, prototype )
                self.create_object(self.string_prototype)
            };
            let length = string.len();
            object.set_string(string);
            // TODO: check the result
            let _ = object.define_own_property(
                Symbol::LENGTH.into(),
                Property::data_xxc(Value::Number(length as f64)),
            );
            Ok(Value::Object(object))
        } else {
            Ok(Value::String(string))
        }
    }

    {{#prototypeProperties}}
    pub(super) fn create_string_prototype(&mut self) -> ObjectHandle {
        logger::debug!(event = "creater_string_prototype");
        debug_assert!(self.object_prototype.is_some());
        debug_assert!(self.function_prototype.is_some());

        let mut prototype = self.create_object(self.object_prototype);

        {{#functions}}
        let mut func = self.create_builtin_function({{{imp}}}, None);
        let _ = func.define_own_property(Symbol::NAME.into(), Property::data_xxc(Value::String(const_string!("{{{name}}}"))));
        let _ = func.define_own_property(Symbol::LENGTH.into(), Property::data_xxc(Value::Number({{{length}}}.0)));
        let _ = prototype.define_own_property(Symbol::{{{symbol}}}.into(), Property::data_wxc(Value::Object(func)));

        {{/functions}}
        prototype
    }
    {{/prototypeProperties}}
}

impl Object {
    pub(crate) fn string(&self) -> StringHandle {
        // SAFETY: `self.nucleus` is non-null and convertible to a reference.
        unsafe { StringHandle::from_addr(self.nucleus) }
    }
}

// lambda functions

extern "C" fn constructor<X>(
    runtime: &mut Runtime<X>,
    context: &mut CallContext,
    retv: &mut Value,
) -> Status {
    let this = context.this();
    let args = context.args();
    let new = context.is_new();
    // TODO(feat): target
    match runtime.create_string_object(Some(this), args, new) {
        Ok(value) => {
            *retv = value;
            Status::Normal
        }
        Err(value) => {
            *retv = value;
            Status::Exception
        }
    }
}
{{#constructorProperties.functions}}

extern "C" fn {{imp}}<X>(
    runtime: &mut Runtime<X>,
    context: &mut CallContext,
    retv: &mut Value,
) -> Status {
    match imp::{{imp}}(runtime, context) {
        Ok(value) => {
            *retv = value;
            Status::Normal
        }
        Err(err) => {
            *retv = runtime.create_exception(err);
            Status::Exception
        }
    }
}
{{/constructorProperties.functions}}
{{#prototypeProperties.functions}}

extern "C" fn {{imp}}<X>(
    runtime: &mut Runtime<X>,
    context: &mut CallContext,
    retv: &mut Value,
) -> Status {
    match imp::{{imp}}(runtime, context) {
        Ok(value) => {
            *retv = value;
            Status::Normal
        }
        Err(err) => {
            *retv = runtime.create_exception(err);
            Status::Exception
        }
    }
}
{{/prototypeProperties.functions}}
