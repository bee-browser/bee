// DO NOT EDIT THIS FILE BY HAND.
//
// This file was automagically generated with:
// template: {{@template}}

use std::sync::LazyLock;

static LEVEL: LazyLock<logging::imp::LevelFilter> = LazyLock::new(|| {
    logging::load_level("{{ target }}")
});

#[allow(unused)]
#[inline(always)]
pub(crate) fn error_enabled() -> bool {
    *LEVEL >= logging::imp::Level::ERROR
}

#[allow(unused)]
#[inline(always)]
pub(crate) fn warn_enabled() -> bool {
    *LEVEL >= logging::imp::Level::WARN
}

#[allow(unused)]
#[inline(always)]
pub(crate) fn info_enabled() -> bool {
    *LEVEL >= logging::imp::Level::INFO
}

#[allow(unused)]
#[inline(always)]
pub(crate) fn debug_enabled() -> bool {
    *LEVEL >= logging::imp::Level::DEBUG
}

#[allow(unused)]
#[inline(always)]
pub(crate) fn trace_enabled() -> bool {
    *LEVEL >= logging::imp::Level::TRACE
}

#[allow(unused_macros)]
macro_rules! error {
    ($($tokens:tt)+) => {
        if crate::{{#if module}}{{ module }}::{{/if}}logger::error_enabled() {
            logging::error!(target: "{{ target }}", $($tokens)+);
        }
    };
}

// error[E0659]: `warn` is ambiguous
#[allow(unused_macros)]
macro_rules! warn_ {
    ($($tokens:tt)+) => {
        if crate::{{#if module}}{{ module }}::{{/if}}logger::warn_enabled() {
            logging::warn!(target: "{{ target }}", $($tokens)+);
        }
    };
}

#[allow(unused_macros)]
macro_rules! info {
    ($($tokens:tt)+) => {
        if crate::{{#if module}}{{ module }}::{{/if}}logger::info_enabled() {
            logging::info!(target: "{{ target }}", $($tokens)+);
        }
    };
}

#[allow(unused_macros)]
macro_rules! debug {
    ($($tokens:tt)+) => {
        if crate::{{#if module}}{{ module }}::{{/if}}logger::debug_enabled() {
            logging::debug!(target: "{{ target }}", $($tokens)+);
        }
    };
}

#[allow(unused_macros)]
macro_rules! trace {
    ($($tokens:tt)+) => {
        if crate::{{#if module}}{{ module }}::{{/if}}logger::trace_enabled() {
            logging::trace!(target: "{{ target }}", $($tokens)+);
        }
    };
}

#[allow(unused_imports)]
pub(crate) use debug;
#[allow(unused_imports)]
pub(crate) use error;
#[allow(unused_imports)]
pub(crate) use info;
#[allow(unused_imports)]
pub(crate) use trace;
#[allow(unused_imports)]
pub(crate) use warn_ as warn;
