// DO NOT EDIT THIS FILE BY HAND.
//
// This file was automagically generated by:
// bee-tools-codegen.js --input-stdin text.rs.hbs

use super::*;

impl<T> TreeBuilder<T>
where
    T: DomTreeBuilder,
{
    // TODO: Tokenizing the text in the following groups can improve the
    // performance.
    pub fn handle_text(&mut self, text: Text<'_>) -> Control {
        for c in text.data.chars() {
            match c {
                '\0' => self.handle_null_character(c),
                char_class!(whitespace) => self.handle_whitespace_character(c),
                _ => self.handle_character(c),
            }
        }
        Control::Continue
    }

    #[tracing::instrument(level = "debug", skip_all)]
    fn handle_null_character(&mut self, c: char) {
        loop {
            tracing::debug!(mode = ?self.mode, c = "NULL");
            match self.mode {
                mode!(Initial) => {
                    let ctrl = {
                        if !self.iframe_srcdoc {
                            // TODO: Parse error.
                        }
                        self.change_quirks_mode_if_changeable(QuirksMode::Quirks);
                        self.switch_to(mode!(BeforeHtml));
                        Control::Reprocess
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
                mode!(BeforeHtml) => {
                    let ctrl = {
                        //debug_assert!(self.writer.is_empty());
                        self.push_html_html_element(&Tag::with_no_attrs("html"));
                        self.switch_to(mode!(BeforeHead));
                        Control::Reprocess
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
                mode!(BeforeHead) => {
                    let ctrl = {
                        self.push_html_head_element(&Tag::with_no_attrs("head"));
                        // TODO: Set the head element pointer to the newly created head element.
                        self.switch_to(mode!(InHead));
                        Control::Reprocess
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
                mode!(InHead) => {
                    let ctrl = {
                        debug_assert!(self.context().local_name() == LocalName::Head);
                        self.pop_element();
                        self.switch_to(mode!(AfterHead));
                        Control::Reprocess
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
                mode!(InHeadNoscript) => {
                    let ctrl = {
                        // TODO: Parse error.
                        debug_assert!(self.context().local_name() == LocalName::Noscript);
                        self.pop_element();
                        debug_assert!(self.context().local_name() == LocalName::Head);
                        self.switch_to(mode!(InHead));
                        Control::Reprocess
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
                mode!(AfterHead) => {
                    let ctrl = {
                        self.push_html_body_element(&Tag::with_no_attrs("body"));
                        self.switch_to(mode!(InBody));
                        Control::Reprocess
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
                mode!(
                    InBody,
                    InCaption,
                    InCell,
                    InTemplate,
                    InFrameset,
                    AfterFrameset,
                    AfterAfterFrameset
                ) => {
                    let ctrl = {
                        // TODO: Parse error.
                        // Ignore the token.
                        Control::Continue
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
                mode!(Text) => {
                    let ctrl = {
                        self.append_char(c);
                        Control::Continue
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
                mode!(InTable, InTableBody, InRow) => {
                    let ctrl = {
                        match self.context().local_name() {
                            tag!(Table, Tbody, Template, Tfoot, Thead, Tr) => {
                                // TODO: Let the pending table character tokens be an empty list of tokens.
                                self.save_and_switch_to(mode!(InTableText));
                                Control::Reprocess
                            }
                            _ => {
                                // TODO: Parse error.
                                self.enable_foster_parenting();
                                let ctrl = {
                                    // TODO: Parse error.
                                    // Ignore the token.
                                    Control::Continue
                                };
                                self.disable_foster_parenting();
                                ctrl
                            }
                        }
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
                mode!(InTableText, InSelect, InSelectInTable) => {
                    let ctrl = {
                        // Ignore the token.
                        Control::Continue
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
                mode!(InColumnGroup) => {
                    let ctrl = {
                        if self.context().local_name() != LocalName::Colgroup {
                            // TODO: Parse error.
                            // Ignore the token.
                            Control::Continue
                        } else {
                            self.pop_element();
                            self.switch_to(mode!(InTable));
                            Control::Reprocess
                        }
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
                mode!(AfterBody, AfterAfterBody) => {
                    let ctrl = {
                        // TODO: Parse error.
                        self.switch_to(mode!(InBody));
                        Control::Reprocess
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
            }
        }
    }

    #[tracing::instrument(level = "debug", skip_all)]
    fn handle_whitespace_character(&mut self, c: char) {
        if self.ignore_lf && c == '\n' {
            self.ignore_lf = false;
            return;
        }
        loop {
            tracing::debug!(mode = ?self.mode, c = "Whitespace");
            match self.mode {
                mode!(Initial, BeforeHtml, BeforeHead) => {
                    let ctrl = {
                        // Ignore the token.
                        Control::Continue
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
                mode!(
                    InHead,
                    InHeadNoscript,
                    AfterHead,
                    Text,
                    InTableText,
                    InColumnGroup,
                    InSelect,
                    InSelectInTable,
                    InFrameset,
                    AfterFrameset
                ) => {
                    let ctrl = {
                        self.append_char(c);
                        Control::Continue
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
                mode!(
                    InBody,
                    InCaption,
                    InCell,
                    InTemplate,
                    AfterBody,
                    AfterAfterBody,
                    AfterAfterFrameset
                ) => {
                    let ctrl = {
                        self.reconstruct_active_formatting_elements();
                        self.append_char(c);
                        Control::Continue
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
                mode!(InTable, InTableBody, InRow) => {
                    let ctrl = {
                        match self.context().local_name() {
                            tag!(Table, Tbody, Template, Tfoot, Thead, Tr) => {
                                // TODO: Let the pending table character tokens be an empty list of tokens.
                                self.save_and_switch_to(mode!(InTableText));
                                Control::Reprocess
                            }
                            _ => {
                                // TODO: Parse error.
                                self.enable_foster_parenting();
                                let ctrl = {
                                    self.reconstruct_active_formatting_elements();
                                    self.append_char(c);
                                    Control::Continue
                                };
                                self.disable_foster_parenting();
                                ctrl
                            }
                        }
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
            }
        }
    }

    #[tracing::instrument(level = "debug", skip_all)]
    fn handle_character(&mut self, c: char) {
        loop {
            tracing::debug!(mode = ?self.mode, ?c);
            match self.mode {
                mode!(Initial) => {
                    let ctrl = {
                        if !self.iframe_srcdoc {
                            // TODO: Parse error.
                        }
                        self.change_quirks_mode_if_changeable(QuirksMode::Quirks);
                        self.switch_to(mode!(BeforeHtml));
                        Control::Reprocess
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
                mode!(BeforeHtml) => {
                    let ctrl = {
                        //debug_assert!(self.writer.is_empty());
                        self.push_html_html_element(&Tag::with_no_attrs("html"));
                        self.switch_to(mode!(BeforeHead));
                        Control::Reprocess
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
                mode!(BeforeHead) => {
                    let ctrl = {
                        self.push_html_head_element(&Tag::with_no_attrs("head"));
                        // TODO: Set the head element pointer to the newly created head element.
                        self.switch_to(mode!(InHead));
                        Control::Reprocess
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
                mode!(InHead) => {
                    let ctrl = {
                        debug_assert!(self.context().local_name() == LocalName::Head);
                        self.pop_element();
                        self.switch_to(mode!(AfterHead));
                        Control::Reprocess
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
                mode!(InHeadNoscript) => {
                    let ctrl = {
                        // TODO: Parse error.
                        debug_assert!(self.context().local_name() == LocalName::Noscript);
                        self.pop_element();
                        debug_assert!(self.context().local_name() == LocalName::Head);
                        self.switch_to(mode!(InHead));
                        Control::Reprocess
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
                mode!(AfterHead) => {
                    let ctrl = {
                        self.push_html_body_element(&Tag::with_no_attrs("body"));
                        self.switch_to(mode!(InBody));
                        Control::Reprocess
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
                mode!(InBody, InCaption, InCell, InTemplate) => {
                    let ctrl = {
                        self.reconstruct_active_formatting_elements();
                        self.append_char(c);
                        self.frameset_ok = false;
                        Control::Continue
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
                mode!(Text, InTableText, InSelect, InSelectInTable) => {
                    let ctrl = {
                        self.append_char(c);
                        Control::Continue
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
                mode!(InTable, InTableBody, InRow) => {
                    let ctrl = {
                        match self.context().local_name() {
                            tag!(Table, Tbody, Template, Tfoot, Thead, Tr) => {
                                // TODO: Let the pending table character tokens be an empty list of tokens.
                                self.save_and_switch_to(mode!(InTableText));
                                Control::Reprocess
                            }
                            _ => {
                                // TODO: Parse error.
                                self.enable_foster_parenting();
                                let ctrl = {
                                    self.reconstruct_active_formatting_elements();
                                    self.append_char(c);
                                    self.frameset_ok = false;
                                    Control::Continue
                                };
                                self.disable_foster_parenting();
                                ctrl
                            }
                        }
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
                mode!(InColumnGroup) => {
                    let ctrl = {
                        if self.context().local_name() != LocalName::Colgroup {
                            // TODO: Parse error.
                            // Ignore the token.
                            Control::Continue
                        } else {
                            self.pop_element();
                            self.switch_to(mode!(InTable));
                            Control::Reprocess
                        }
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
                mode!(AfterBody, AfterAfterBody) => {
                    let ctrl = {
                        // TODO: Parse error.
                        self.switch_to(mode!(InBody));
                        Control::Reprocess
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
                mode!(InFrameset, AfterFrameset, AfterAfterFrameset) => {
                    let ctrl = {
                        // TODO: Parse error.
                        // Ignore the token.
                        Control::Continue
                    };
                    match ctrl {
                        Control::Reprocess => continue,
                        _ => return,
                    }
                }
            }
        }
    }
}
